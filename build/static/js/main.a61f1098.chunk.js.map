{"version":3,"sources":["components/AppBar.js","components/MapProvider.js","utils.js","components/useGeographies.js","components/Geographies.js","components/Geography.js","components/ComposableMap.js","components/Notes.js","components/StateMap.js","components/CountyReport.js","components/privateRoute.js","components/Layout.js","components/login.js","components/TokenGet.js","components/App.js","index.js"],"names":["AppBar","props","history","useHistory","Menu","borderless","inverted","fixed","style","backgroundImage","backgroundSize","Container","Item","as","header","Image","size","src","onClick","push","fontSize","fontWeight","color","lineHeight","active","menu","content","name","geoPath","d3Geo","projections","MapContext","createContext","MapProvider","width","height","offsetX","offsetY","projection","projectionConfig","restProps","center","cx","cy","rotate","rx","ry","rz","parallels","p1","p2","s","scale","projMemo","useMemo","scl","proj","translate","forEach","d","makeProjection","useCallback","value","path","Provider","getFeatures","geographies","parseGeographies","Array","isArray","feats","feature","objects","Object","keys","features","useGeographies","geography","useContext","useState","setGeographies","useEffect","url","window","fetch","then","res","ok","Error","statusText","json","catch","error","console","log","geos","map","i","rsmKey","svgPath","prepareFeatures","Geographies","children","className","length","memo","onMouseEnter","onMouseLeave","onMouseDown","onMouseUp","onFocus","onBlur","isPressed","setPressed","isFocused","setFocus","tabIndex","evt","ComposableMap","Notes","paddingTop","casesColor","mortalityColor","colorPalette","colorPalette1","createRef","numberWithCommas","x","toString","pattern","test","replace","StickyExampleAdjacentContext","activeItem","sTate","setsTate","Rail","internal","position","Sticky","offset","compact","pointing","secondary","vertical","href","e","SvgMap","_","key","y","fill","strokeWidth","stroke","legendSplit","splitpoint","toFixed","legendSplit1","legendMax","legendMin","ChartGraph","dataTS","varGraphPair","metric","stateFips","countyFips","countyname","data1","theme","VictoryTheme","material","containerComponent","responsive","flyoutStyle","padding","left","right","top","bottom","tickLabels","tickFormat","t","Date","toLocaleDateString","month","day","tickValues","Math","round","dependentAxis","tickCount","data","barWidth","alignment","data2","labels","datum","labelComponent","orientation","fontFamily","constrainToVisibleArea","dx","textAnchor","fillOpacity","takeRight","StateMap","config","setConfig","stateName","setStateName","setCountyFips","countyName","setCountyName","setData","dataUs","setDataUs","data_index","setIndexData","dateCur","setDateCur","colorCVI","setColorCVI","colorSI","setColorSI","casesdaily","casesdailymean14","setCovidMetric","covidMetric14","setCovidMetric14","setDataTS","setTooltipContent","tooltipContentcvi","setTooltipContentcvi","tooltipContentsi","setTooltipContentsi","colorScale","setColorScale","setLegendMax","setLegendMax1","setLegendMin","setLegendMaxGraph","setLegendSplit","setLegendSplit1","setMetric","metricOptions1","text","dropdownopt","metricName","setMetricName","varNameMap","delayHandler","setDelayHandler","configMatched","configs","find","fips","k","temp_Data_metric","each","sort","a","b","countIqr","quantile","belowIqr","filter","upIqr","split","scaleQuantile","domain","range","split1","thr","thr1","quantiles","floor","csUs","max","min","slice","indexColor","rateIqr","IQR3","interV","dicto","m","cs","scaleMap","si","scaleMapsi","marginTop","minWidth","Breadcrumb","Section","Divider","id","hidden","Grid","columns","Row","Column","Header","paddingRight","Content","Subheader","data-tip","data-for","paddingLeft","Dropdown","background","borderTop","borderLeft","borderRight","borderBottom","borderRadius","minHeight","paddingBottom","inline","search","options","onChange","geo","properties","COUNTYFP","default","outline","pressed","setTimeout","fips2county","clearTimeout","centered","align","todaydate","year","cat","textAlign","domainPadding","minDomain","ylog","ticks","axis","grid","horizontal","barRatio","parseFloat","Loader","BarChart","colors","var_num","pad","title","gutter","cate","symbol","type","keyv","var","var1","CountyReport","useParams","configsCounty","zipCode","setZipCode","setZipCodeFinal","data_cases","setDataCG","data_deaths","setDataDG","datades_cases","setDatadesCG","datades_deaths","setDatadesDG","dataG","setDataG","dataZip","setDataZip","setDataMapOut","setLegendMaxD","setLegendMinD","setLegendSplitD","setColorScaleD","tooltipContent","casescum","deathscum","casescumR","deathscumR","deathsdailymean14","casesdailymean14R","deathsdailymean14R","covidMetric","covidMetricLast","setCovidMetricLast","covidMetricGa","setCovidMetricGa","varMap","setVarMap","configscounty","countyfips","Number","csD","link","Table","HeaderCell","colSpan","Popup","trigger","todaydat","basic","flowing","hoverable","List","toLocaleString","casescum14day","casescum14dayR","category14day","change14day","celled","singleLine","date","deathscum14day","deathscum14dayR","cfr","cfrcompare","column","casesdailymean7","deathsdaily","deathsdailymean7","event","ZCTA5CE10","verticalAnchor","standalone","labelRadius","padAngle","label","striped","Body","v","includes","Cell","isNaN","PrivateRoute","Component","component","render","p","document","cookie","alert","to","pathname","state","from","location","Layout","alt","Form","Group","autoComplete","Login","isLogin","setIsLogin","password","setPassword","user","setUser","tok","setTok","promise","Promise","all","resolve","setCookie","toUTCString","Input","fluid","icon","iconPosition","placeholder","target","Button","login","preventDefault","sha256","localeCompare","tokens","disabled","App","exact","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.a61f1098.chunk.js","sourcesContent":["import React from \"react\";\nimport ErrorBoundary from \"react-error-boundary\";\nimport { Container, Menu, Image, Divider } from 'semantic-ui-react';\n\nimport { useHistory } from 'react-router-dom';\n\n\nexport default function AppBar(props) {\n\n  const history = useHistory();\n\n  return (\n    <ErrorBoundary>\n      <Menu borderless inverted fixed='top'\n        style={{backgroundImage: 'url(\"/Emory_COVID_header_LightBlue.jpg\")',\n                backgroundSize: 'cover'}}>\n      {/* <Menu borderless inverted fixed='top'\n        style={{backgroundImage: 'url(\"https://www.htmlcsscolor.com/preview/128x128/103052.png\")',\n                backgroundSize: 'cover'}}> */}\n        <Container>\n          <Menu.Item as='a' header>\n                <Image size='mini' src='https://dph.georgia.gov/themes/custom/ga_forest/orchard/assets/images/icons/logo/ga-logo--gold.svg' />\n          </Menu.Item>\n          \n          <Menu.Item as='a' header onClick={() => history.push('/')}>\n            <span style={{fontSize: '17px',fontWeight: 400, color: '#fff', lineHeight: 1.3}}>\n           <strong>Georgia Department</strong>\n           <br></br>\n           <em>of</em>\n           <strong>&nbsp;Public Health</strong>\n           </span>\n          </Menu.Item>\n          <Menu.Item \n            active={props.menu==='countyReport'} \n            content='Home'\n            onClick={() => history.push('/13')}\n            name='countyReport'/>\n          {/* <Menu.Item \n            active={props.menu==='countyCompare'} \n            onClick={() => history.push('/compare-counties')}\n            name='countyCompare'>\n            Compare Counties\n          </Menu.Item> */}\n          {/* <Menu.Item \n            active={props.menu==='dataSources'} \n            onClick={() => history.push('/data-sources')}\n            name='dataSources'>\n            Data Sources &<br/>Interpretation\n          </Menu.Item>\n          <Menu.Item \n            active={props.menu==='aboutUs'} \n            content='About Us'\n            onClick={() => history.push('/about-team')}\n            name='aboutUs'/>             */}\n          {/* <Menu.Menu position='left'>\n            <Menu.Item as='a' header>\n              <Image size='mini' src='https://dph.georgia.gov/themes/custom/ga_forest/orchard/assets/images/icons/logo/ga-logo--gold.svg' />\n            </Menu.Item>\n          </Menu.Menu> */}\n        </Container>\n      </Menu>\n    </ErrorBoundary>\n  );\n}\n\n\n\n","\nimport React, {\n  createContext,\n  useMemo,\n  useCallback,\n} from \"react\"\nimport PropTypes from \"prop-types\"\nimport * as d3Geo from \"d3-geo\"\n\nconst { geoPath, ...projections } = d3Geo\n\nconst MapContext = createContext()\n\nconst makeProjection = ({\n  projectionConfig = {},\n  projection = \"geoEqualEarth\",\n  width = 800,\n  height = 600,\n  offsetX = 0,\n  offsetY = 0\n}) => {\n  const isFunc = typeof projection === \"function\"\n\n  if (isFunc) return projection\n\n  const scl = projectionConfig.scale || null;\n\n  let proj = projections[projection]().translate([width/2 + (offsetX)*scl/1000 ,\n                                              height/2 +(offsetY)*scl/1000]);\n\n  const supported = [\n    proj.center ? \"center\" : null,\n    proj.rotate ? \"rotate\" : null,\n    proj.scale ? \"scale\" : null,\n    proj.parallels ? \"parallels\" : null,\n  ]\n\n  supported.forEach(d => {\n    if (!d) return\n    proj = proj[d](projectionConfig[d] || proj[d]())\n  })\n\n  return proj\n}\n\nconst MapProvider = ({\n  width,\n  height,\n  offsetX,\n  offsetY,\n  projection,\n  projectionConfig,\n  ...restProps\n}) => {\n  const [cx, cy] = projectionConfig.center || []\n  const [rx, ry, rz] = projectionConfig.rotate || []\n  const [p1, p2] = projectionConfig.parallels || []\n  const s = projectionConfig.scale || null\n\n  const projMemo = useMemo(() => {\n    return makeProjection({\n      projectionConfig: {\n        center: (cx || cx === 0) || (cy || cy === 0) ? [cx, cy] : null,\n        rotate: (rx || rx === 0) || (ry || ry === 0) ? [rx, ry, rz] : null,\n        parallels: (p1 || p1 === 0) || (p2 || p2 === 0) ? [p1, p2] : null,\n        scale: s,\n      },\n      projection,\n      width,\n      height,\n      offsetX,\n      offsetY,\n    })\n  }, [ width, height, projection, cx, cy, rx, ry, rz, p1, p2, s, offsetX, offsetY ])\n\n  const proj = useCallback(projMemo, [projMemo])\n\n  const value = useMemo(() => {\n    return {\n      width,\n      height,\n      projection: proj,\n      path: geoPath().projection(proj),\n    }\n  }, [ width, height, proj ])\n\n  return (<MapContext.Provider value={value} {...restProps} />)\n}\n\nMapProvider.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  offsetX: PropTypes.number,\n  offsetY: PropTypes.number,\n  projection: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.func,\n  ]),\n  projectionConfig: PropTypes.object,\n}\n\nexport { MapProvider, MapContext }\n","\nimport { feature } from \"topojson-client\"\n\nexport function getCoords(w, h, t) {\n  const xOffset = (w * t.k - w) / 2\n  const yOffset = (h * t.k - h) / 2\n  return [w / 2 - (xOffset + t.x) / t.k, h / 2 - (yOffset + t.y) / t.k]\n}\n\nexport function fetchGeographies(url) {\n  return fetch(url)\n    .then(res => {\n      if (!res.ok) {\n        throw Error(res.statusText)\n      }\n      return res.json()\n    }).catch(error => {\n      console.log(\"There was a problem when fetching the data: \", error)\n    })\n}\n\nexport function getFeatures(geographies, parseGeographies) {\n  if (Array.isArray(geographies)) return parseGeographies ? parseGeographies(geographies) : geographies\n  const feats = feature(\n    geographies,\n    geographies.objects[Object.keys(geographies.objects)[0]]\n  ).features\n  return parseGeographies ? parseGeographies(feats) : feats\n}\n\nexport function prepareFeatures(geographies, path) {\n  return geographies ? geographies.map((d, i) => {\n    return {\n      ...d,\n      rsmKey: `geo-${i}`,\n      svgPath: path(d),\n    }\n  }) : []\n}\n\nexport function createConnectorPath(dx = 30, dy = 30, curve = 0.5) {\n  const curvature = Array.isArray(curve) ? curve : [curve, curve]\n  const curveX = dx / 2 * curvature[0]\n  const curveY = dy / 2 * curvature[1]\n  return `M${0},${0} Q${-dx / 2 - curveX},${-dy / 2 + curveY} ${-dx},${-dy}`\n}\n\nexport function isString(geo) { return typeof geo === \"string\" }\n","\nimport { useMemo, useState, useEffect, useContext } from \"react\"\nimport { MapContext } from \"./MapProvider\"\n\nimport { fetchGeographies, getFeatures, prepareFeatures, isString } from \"../utils\"\n\nexport default function useGeographies({ geography, parseGeographies }) {\n  const { path } = useContext(MapContext)\n  const [geographies, setGeographies] = useState()\n\n  useEffect(() => {\n    if (typeof window === `undefined`) return\n\n    if (isString(geography)) {\n      fetchGeographies(geography).then(geos => {\n        if (geos) setGeographies(getFeatures(geos, parseGeographies))\n      })\n    } else {\n      setGeographies(getFeatures(geography, parseGeographies))\n    }\n  }, [geography, parseGeographies])\n\n  const output = useMemo(() => {\n    return prepareFeatures(geographies, path)\n  }, [geographies, path])\n\n  return { geographies: output }\n}\n","\nimport React, { useContext } from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport { MapContext } from \"./MapProvider\"\nimport useGeographies from \"./useGeographies\"\n\nconst Geographies = ({\n  geography,\n  children,\n  parseGeographies,\n  className = \"\",\n  ...restProps\n}) => {\n  const { path, projection } = useContext(MapContext)\n  const { geographies } = useGeographies({ geography, parseGeographies })\n  // console.log(geographies)\n\n  return (\n    <g className={`rsm-geographies ${className}`} {...restProps}>\n      {\n        geographies && geographies.length > 0 &&\n        children({ geographies, path, projection })\n        \n      }\n    </g>\n  )\n}\n\nGeographies.propTypes = {\n  geography: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.object,\n    PropTypes.array,\n  ]),\n  children: PropTypes.func,\n  parseGeographies: PropTypes.func,\n  className: PropTypes.string,\n}\n\nexport default Geographies\n","\nimport React, { useState, memo } from \"react\"\nimport PropTypes from \"prop-types\"\n\nconst Geography = ({\n  geography,\n  onMouseEnter,\n  onMouseLeave,\n  onMouseDown,\n  onMouseUp,\n  onFocus,\n  onBlur,\n  style = {},\n  className = \"\",\n  ...restProps\n}) => {\n  const [isPressed, setPressed] = useState(false)\n  const [isFocused, setFocus] = useState(false)\n\n  function handleMouseEnter(evt) {\n    setFocus(true)\n    if (onMouseEnter) onMouseEnter(evt)\n    // console.log(onMouseEnter)\n  }\n\n  function handleMouseLeave(evt) {\n    setFocus(false)\n    if (isPressed) setPressed(false)\n    if (onMouseLeave) onMouseLeave(evt)\n  }\n\n  function handleFocus(evt) {\n    setFocus(true)\n    if (onFocus) onFocus(evt)\n  }\n\n  function handleBlur(evt) {\n    setFocus(false)\n    if (isPressed) setPressed(false)\n    if (onBlur) onBlur(evt)\n  }\n\n  function handleMouseDown(evt) {\n    setPressed(true)\n    if (onMouseDown) onMouseDown(evt)\n  }\n\n  function handleMouseUp(evt) {\n    setPressed(false)\n    if (onMouseUp) onMouseUp(evt)\n  }\n\n  return (\n    <path\n      tabIndex=\"0\"\n      className={`rsm-geography ${className}`}\n      d={geography.svgPath}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      onFocus={handleFocus}\n      onBlur={handleBlur}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n      style={style[isPressed || isFocused ? (isPressed ? \"pressed\" : \"hover\") : \"default\"]}\n      {...restProps}\n    />\n  )\n}\n\nGeography.propTypes = {\n  geography: PropTypes.object,\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  onMouseDown: PropTypes.func,\n  onMouseUp: PropTypes.func,\n  onFocus: PropTypes.func,\n  onBlur: PropTypes.func,\n  style: PropTypes.object,\n  className: PropTypes.string,\n}\n\nexport default memo(Geography)\n","\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport { MapProvider } from \"./MapProvider\"\n\nconst ComposableMap = ({\n  width = 800,\n  height = 600,\n  offsetX = 0,\n  offsetY = 0,\n  projection = \"geoEqualEarth\",\n  projectionConfig = {},\n  className = \"\",\n  ...restProps\n}) => {\n  return (\n    <MapProvider\n      width={width}\n      height={height}\n      offsetX={offsetX}\n      offsetY={offsetY}\n      projection={projection}\n      projectionConfig={projectionConfig}\n    >\n      <svg\n        width={width}\n        height={height}\n        className={`rsm-svg ${className}`}\n        {...restProps}\n      />\n    </MapProvider>\n  )\n}\n\nComposableMap.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  projection: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.func,\n  ]),\n  projectionConfig: PropTypes.object,\n  className: PropTypes.string,\n}\n\nexport default ComposableMap\n","import React from 'react'\nimport { Grid, List, Divider, Image } from 'semantic-ui-react'\n\nexport default function Notes(props){\n\n  return (\n    <div style={{paddingTop: '2em', fontWeight: 300}}>\n    {/* <Divider/>\n    <Grid>\n      <Grid.Row>\n        <Grid.Column style={{fontSize: '1em', lineHeight: '1.5em'}}>\n          Early data about COVID-19 suggests that communities are affected very differently due to social determinants of health like population density, poverty, residential segregation, underlying chronic health conditions, and availability of medical services. \n          In order to predict how the epidemic will continue to unfold and prepare for the future, it is critical to understand differences in underlying risk factors. \n          There is no one-size-fits all approach to combat the epidemic, but accurate and meaningful data is a key component of a robust public health response that is informed by contextual factors and prioritizes health equity.\n          <br/><br/>\n          The COVID-19 Health Equity Dashboard seeks to fill the gaps in county-level data about the virus and underlying social determinants of health. \n          Our goal is for this Dashboard to facilitate easy comparisons of counties with respect to COVID-19 outcomes and social determinants. \n          We hope this becomes a valuable resource for and critical component of tailored public health responses to COVID-19 across the wide range of environments that Americans inhabit.\n        </Grid.Column>\n      </Grid.Row>\n      <Divider hidden/>\n      <Grid.Row columns={2}>\n        <Grid.Column>          \n          <Image size='small' src='/logo.png' />\n          &copy; 2020 Emory University. All rights reserved.\n        </Grid.Column>\n        <Grid.Column>          \n          <small>\n            This dashboard is created using\n            <List as='ol'>\n              <List.Item as='li' value='-'><a href=\"https://www.react-simple-maps.io/\">React Simple Maps</a> by <a href=\"https://www.zcreativelabs.com/\">z creative labs</a></List.Item>\n              <List.Item as='li' value='-'><a href=\"https://formidable.com/open-source/victory/\">Victory</a> by <a href=\"https://formidable.com/\">Formidable</a></List.Item>\n              <List.Item as='li' value='-'><a href=\"https://github.com/Semantic-Org/Semantic-UI-React\">Semantic UI React</a> by <a href=\"https://github.com/levithomason\">@levithomason</a>and an amazing community of <a href=\"https://github.com/Semantic-Org/Semantic-UI-React/graphs/contributors\">contributors</a></List.Item> \n              <List.Item as='li' value='-'><a href=\"https://github.com/facebook/create-react-app\">Create React App</a> by <a href=\"https://about.fb.com/company-info/\">Facebook</a></List.Item> \n            </List>\n          </small>\n        </Grid.Column>\n      </Grid.Row>\n    </Grid> */}\n    </div>);\n}\n","import React, { useEffect, Component, useState, createRef } from 'react'\nimport { Container, Grid, Breadcrumb, Dropdown, Header, Loader, Divider, Rail, Sticky, Popup, Button, Menu } from 'semantic-ui-react'\nimport AppBar from './AppBar';\nimport Geographies from './Geographies';\nimport Geography from './Geography';\nimport ComposableMap from './ComposableMap';\nimport {\n    VictoryChart,\n    VictoryTooltip,\n    VictoryContainer,\n    VictoryVoronoiContainer,\n    VictoryBar,\n    VictoryTheme,\n    VictoryAxis,\n    VictoryLine,\n    VictoryLabel\n} from 'victory';\nimport Slider from \"@material-ui/core/Slider\";\n\n\nimport { useParams, useHistory } from 'react-router-dom';\nimport Notes from './Notes';\nimport ReactTooltip from \"react-tooltip\";\nimport _ from 'lodash';\nimport { scaleQuantile, scaleLinear } from \"d3-scale\";\nimport { quantile, ascending } from 'd3';\nimport fips2county from './fips2county.json'\n// import configscounty from \"./county_config.json\";\n\nimport configs from \"./state_config.json\";\n\nconst casesColor = [\n    \"#72ABB1\",\n    \"#487f84\"\n];\nconst mortalityColor = [\n    \"#0270A1\",\n    \"#024174\"\n];\nconst colorPalette = [\n    \"#e1dce2\",\n    \"#d3b6cd\",\n    \"#bf88b5\",\n    \"#af5194\",\n    \"#99528c\",\n    \"#633c70\",\n];\nconst colorPalette1 = [\n    \"#67335E\",\n    \"#6B2A4D\",\n    \"#70213B\",\n    \"#74182A\",\n    '#7d0707'\n];\n\nconst colorOut = '#7d0707';\nconst contextRef = createRef()\n\nconst countyColor = '#f2a900';\nconst stateColor = '#bdbfc1';\nconst nationColor = '#d9d9d7';\nconst colorHighlight = '#f2a900';\nconst marks = [\n    {\n        value: 0,\n        label: 'Mar 1',\n    },\n    {\n        value: 10,\n        label: 'April 1',\n    },\n    {\n        value: 20,\n        label: 'May 1',\n    },\n    {\n        value: 30,\n        label: 'June 1',\n    },\n];\n\nfunction valuetext(value) {\n    return `${value}°C`;\n}\n\nfunction numberWithCommas(x) {\n    x = x.toString();\n    var pattern = /(-?\\d+)(\\d{3})/;\n    while (pattern.test(x))\n        x = x.replace(pattern, \"$1,$2\");\n    return x;\n}\n\nfunction StickyExampleAdjacentContext(props) {\n    const [sTate, setsTate] = useState({ activeItem: 'summary' })\n    const { activeItem } = sTate\n    return (\n        <div >\n            <Rail  internal='true' position='left'>\n                <Sticky offset={150}>\n                    <Menu\n                        size='small'\n                        compact\n                        pointing secondary vertical>\n                        <Menu.Item as='a' href=\"#summary\" name='summary' active={activeItem === 'summary'}\n                            onClick={(e, { name }) => { setsTate({ activeItem: name }) }} />\n                        <Menu.Item as='a' href=\"#cvi\" name='Community Vulnerability Index' active={activeItem === 'Community Vulnerability Index'}\n                            onClick={(e, { name }) => { setsTate({ activeItem: name }) }} />\n                        <Menu.Item as='a' href=\"#si\" name='Residential Segregation Index' active={activeItem === 'Residential Segregation Index'}\n                            onClick={(e, { name }) => { setsTate({ activeItem: name }) }} />\n                        <Menu.Item as='a' href=\"#male\" name='Characteristics - Male Percentage' active={activeItem === 'Characteristics - Male Percentage'}\n                            onClick={(e, { name }) => { setsTate({ activeItem: name }) }} />\n                        <Menu.Item as='a' href=\"#urbanrural\" name='Characteristics - Metropolitan Status' active={activeItem === 'Characteristics - Metropolitan Status'}\n                            onClick={(e, { name }) => { setsTate({ activeItem: name }) }} />\n                        <Menu.Item as='a' href=\"#age\" name='Characteristics - Age over 65' active={activeItem === 'Characteristics - Age over 65'}\n                            onClick={(e, { name }) => { setsTate({ activeItem: name }) }} />\n                        <Menu.Item as='a' href=\"#black\" name='Characteristics - African American' active={activeItem === 'Characteristics - African American'}\n                            onClick={(e, { name }) => { setsTate({ activeItem: name }) }} />\n                        <Menu.Item as='a' href=\"#poverty\" name='Characteristics - Poverty' active={activeItem === 'Characteristics - Poverty'}\n                            onClick={(e, { name }) => { setsTate({ activeItem: name }) }} />\n                        <Menu.Item as='a' href=\"#diabetes\" name='Characteristics - Diabetes' active={activeItem === 'Characteristics - Diabetes'}\n                            onClick={(e, { name }) => { setsTate({ activeItem: name }) }} />\n                        <Menu.Item as='a' href=\"#hispanic\" name='Characteristics - Hispanic' active={activeItem === 'Characteristics - Hispanic'}\n                            onClick={(e, { name }) => { setsTate({ activeItem: name }) }} />\n                    </Menu>\n                </Sticky>\n            </Rail>\n        </div>\n    )\n\n}\n\nfunction SvgMap(props) {\n    // var lengthSplit1 = props.lengthSplit1;\n    if (props.name === 'casescum') {\n        return (\n            <svg width=\"500\" height=\"55\">\n                {_.map(colorPalette, (color, i) => {\n                    return <rect key={i} x={50 + 25 * i} y={20} width=\"25\" height=\"20\" style={{ fill: color, strokeWidth: 1, stroke: color }} />\n                })}\n                {_.map(colorPalette1, (color, i) => {\n                    return <rect key={i} x={200 + 25 * i} y={20} width=\"25\" height=\"20\" style={{ fill: color, strokeWidth: 1, stroke: color }} />\n                })}\n\n                {/* <rect x={180} y={20} width=\"25\" height=\"20\" style={{ fill: colorOut, strokeWidth: 1, stroke: colorOut }} /> */}\n                <text x={50} y={52} style={{ fontSize: '0.8em' }}>Low</text>\n                <text x={300} y={52} style={{ fontSize: '0.8em' }}>High</text>\n                {_.map(props.legendSplit, (splitpoint, i) => {\n                    if (props.legendSplit[i] < 1) {\n                        return <text key={i} x={57 + 25 * (i)} y={15} style={{ fontSize: '0.7em' }}> {props.legendSplit[i].toFixed(1)}</text>\n                    }\n                    if (props.legendSplit[i] >= 1000) {\n                        return <text key={i} x={70 + 25 * (i)} y={15} style={{ fontSize: '0.7em' }}> {(props.legendSplit[i] / 1000).toFixed(1) + \"K\"}</text>\n                    }\n                    return <text key={i} x={70 + 25 * (i)} y={15} style={{ fontSize: '0.7em' }}> {props.legendSplit[i].toFixed(0)}</text>\n                })}\n\n                {_.map(props.legendSplit1, (splitpoint, i) => {\n                    if (props.legendSplit1[i] >= 1000) {\n                        return <text key={i} x={220 + 25 * (i)} y={15} style={{ fontSize: '0.7em' }}> {(props.legendSplit1[i] / 1000).toFixed(1) + \"K\"}</text>\n                    }\n                    return <text key={i} x={220 + 25 * (i)} y={15} style={{ fontSize: '0.7em' }}> {props.legendSplit1[i].toFixed(0)}</text>\n                })}\n                <text x={325} y={15} style={{ fontSize: '0.7em' }}>{props.legendMax}</text>\n                <text x={50} y={15} style={{ fontSize: '0.7em' }}> {(props.legendMin / 100).toFixed(0)} </text>\n                <rect x={5} y={20} width=\"25\" height=\"20\" style={{ fill: \"#FFFFFF\", strokeWidth: 0.5, stroke: \"#000000\" }} />\n                <text x={8} y={52} style={{ fontSize: '0.7em' }}> N/A </text>\n            </svg>\n\n        )\n    }\n    else {\n        return (\n            <svg width=\"500\" height=\"55\">\n                {_.map(colorPalette, (color, i) => {\n                    return <rect key={i} x={55 + 25 * i} y={20} width=\"25\" height=\"20\" style={{ fill: color, strokeWidth: 1, stroke: color }} />\n                })}\n\n                <rect x={230} y={20} width=\"25\" height=\"20\" style={{ fill: colorOut, strokeWidth: 1, stroke: colorOut }} />\n                <text x={55} y={52} style={{ fontSize: '0.8em' }}>Low</text>\n                <text x={230} y={52} style={{ fontSize: '0.8em' }}>High</text>\n                {_.map(props.legendSplit, (splitpoint, i) => {\n                    if (props.legendSplit[i] < 1) {\n                        return <text key={i} x={62 + 25 * (i)} y={15} style={{ fontSize: '0.7em' }}> {props.legendSplit[i].toFixed(1)}</text>\n                    }\n                    if (props.legendSplit[i] >= 1000) {\n                        return <text key={i} x={72 + 25 * (i)} y={15} style={{ fontSize: '0.7em' }}> {(props.legendSplit[i] / 1000).toFixed(1) + \"K\"}</text>\n                    }\n                    return <text key={i} x={72 + 25 * (i)} y={15} style={{ fontSize: '0.7em' }}> {props.legendSplit[i].toFixed(0)}</text>\n                })}\n                {props.legendMin < 100 ? <text x={55} y={15} style={{ fontSize: '0.7em' }}> {(props.legendMin / 1).toFixed(0)} </text> :\n                    <text x={47} y={15} style={{ fontSize: '0.7em' }}> {(props.legendMin / 1).toFixed(0)} </text>\n                }\n\n\n\n                <text x={224} y={15} style={{ fontSize: '0.7em' }}>{props.legendSplit[colorPalette.length - 1] < 1 ? props.legendSplit[colorPalette.length - 1].toFixed(1)\n                    : props.legendSplit[colorPalette.length - 1] > 1000 ?\n                        (props.legendSplit[colorPalette.length - 1] / 1000).toFixed(1) + \"K\" : props.legendSplit[colorPalette.length - 1].toFixed(0)\n                }</text>\n                <text x={251} y={15} style={{ fontSize: '0.7em' }}>{props.legendMax}</text>\n                <rect x={5} y={20} width=\"25\" height=\"20\" style={{ fill: \"#FFFFFF\", strokeWidth: 0.5, stroke: \"#000000\" }} />\n                <text x={8} y={52} style={{ fontSize: '0.7em' }}> N/A </text>\n\n                {/* <text x={250} y={42} style={{fontSize: '0.8em'}}> Click on a county below </text>\n          <text x={250} y={52} style={{fontSize: '0.8em'}}> for a detailed report. </text> */}\n            </svg>\n\n        )\n    }\n}\n\n\nfunction ChartGraph(props) {\n    var varGraphPair = props.name;\n    var dataTS;\n    var metric = props.metric;\n    var stateFips = props.stateFips;\n    var countyFips = props.countyFips;\n    var countyname = props.countyname;\n\n    if (props.metric === \"casescum14dayR\") {\n        dataTS = props.data1;\n\n        return (\n            <VictoryChart theme={VictoryTheme.material}\n                containerComponent={\n                    <VictoryVoronoiContainer\n                        responsive={false}\n                        flyoutStyle={{ fill: \"white\" }}\n                    />\n                }\n                width={730}\n                height={500}\n                padding={{ left: 55, right: 70, top: 10, bottom: 50 }}>\n                <VictoryAxis\n                    style={{\n                        tickLabels: { fontSize: 25, padding: 5 }\n                    }}\n                    tickFormat={(t) => new Date(t * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric' })}\n\n                    tickValues={[\n                        dataTS[dataTS.length - Math.round(dataTS.length / 4) * 3 - 1].t,\n                        dataTS[dataTS.length - Math.round(dataTS.length / 4) * 2 - 1].t,\n                        dataTS[dataTS.length - Math.round(dataTS.length / 4) - 1].t,\n                        dataTS[dataTS.length - 1].t]}\n\n                />\n                <VictoryAxis dependentAxis tickCount={5}\n                    style={{\n                        tickLabels: { fontSize: 25, padding: 5 }\n                    }}\n                    tickFormat={(y) => (y < 1000 ? (Math.round(y, 2) === 0.00 ? \" \" : y) : (y / 1000 + 'k'))}\n                />\n                <VictoryBar style={{ data: { fill: stateColor } }} barWidth={8} alignment=\"start\" data={dataTS ? dataTS : props.data2[\"99999\"]}\n                    x='t' y={varGraphPair[metric]['name'][0]}\n\n                />\n                <VictoryLine name=\"Line1\" style={{ data: { stroke: countyColor, strokeWidth: ({ active }) => active ? 7 : 5 } }} data={dataTS ? dataTS : props.data2[\"99999\"]}\n                    x='t' y={varGraphPair[metric]['name'][1]}\n                    labels={({ datum }) => `${countyname}\\n` +\n                        `Date: ${new Date(datum.t * 1000).toLocaleDateString()}\\n` +\n                        `${varGraphPair[metric]['legend'][1]}: ${Math.round(datum[varGraphPair[metric]['name'][1]], 2)}\\n` +\n                        `${varGraphPair[metric]['legend'][0]}: ${Math.round(datum[varGraphPair[metric]['name'][0]], 2)}`\n                    }\n                    labelComponent={\n                        <VictoryTooltip\n                            orientation=\"top\"\n                            style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'white' }}\n                            constrainToVisibleArea\n                            labelComponent={<VictoryLabel dx={-100} textAnchor='start' />}\n                            flyoutStyle={{ fill: \"black\", fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\n                        />\n                    }\n                />\n                {varGraphPair[metric]['name'][1] === 'casesdailymean7' || varGraphPair[metric]['name'][1] === 'deathsdailymean7' ?\n                    <VictoryAxis dependentAxis tickCount={5}\n                        style={{\n                            tickLabels: { fontSize: 25, padding: 5 }\n                        }}\n                        tickFormat={(y) => (y < 1000 ? (Math.round(y, 2) === 0.00 ? \" \" : y) : (y / 1000 + 'k'))}\n                    /> :\n                    <VictoryLine name=\"Line11\" style={{ data: { stroke: '#007dba', strokeWidth: ({ active }) => active ? 5 : 3 } }} data={_.takeRight(props.data2[stateFips], 14) ? _.takeRight(props.data2[stateFips], 14) : props.data2[\"99999\"]}\n                        x='t' y={varGraphPair[metric]['name'][1]}\n                        labels={({ datum }) => [`Georgia\\n`,\n                            `Date: ${new Date(datum.t * 1000).toLocaleDateString()}\\n`,\n                            `${varGraphPair[metric]['legend'][1]}: ${Math.round(datum[varGraphPair[metric]['name'][1]], 2)}\\n`,\n                            `${varGraphPair[metric]['legend'][0]}: ${Math.round(datum[varGraphPair[metric]['name'][0]], 2)}`\n                        ]}\n                        labelComponent={\n                            <VictoryTooltip\n                                orientation=\"top\"\n                                style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'white' }}\n                                constrainToVisibleArea\n                                labelComponent={<VictoryLabel dx={-100} textAnchor='start' />}\n                                flyoutStyle={{ fill: \"black\", fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\n                            />\n                        }\n                    />}\n            </VictoryChart>)\n    }\n    else {\n        dataTS = props.data2;\n        return (\n            <VictoryChart theme={VictoryTheme.material}\n                containerComponent={\n                    <VictoryVoronoiContainer\n\n                        responsive={false}\n                        flyoutStyle={{ fill: \"black\" }}\n                    />\n                }\n                width={730}\n                height={500}\n                padding={{ left: 55, right: 70, top: 10, bottom: 50 }}>\n                <VictoryAxis\n                    style={{\n                        tickLabels: { fontSize: 25, padding: 5 }\n                    }}\n                    tickFormat={(t) => new Date(t * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric' })}\n                    tickValues={[\n                        // 1583035200, 1585713600, 1588305600, 1590984000, 1593576000\n                        dataTS['13001'][0].t,\n                        dataTS[\"13001\"][32].t,\n                        dataTS[\"13001\"][62].t,\n                        dataTS[\"13001\"][93].t,\n                        dataTS[\"13001\"][123].t,\n                        dataTS[\"13001\"][154].t,\n                        dataTS[\"13001\"][dataTS[\"13001\"].length - 1].t\n                    ]}\n\n\n                />\n                <VictoryAxis dependentAxis tickCount={6}\n                    style={{\n                        tickLabels: { fontSize: 25, padding: 5 }\n                    }}\n                    tickFormat={(y) => (y < 1000 ? (Math.round(y, 2) === 0.00 ? \" \" : y) : (y / 1000 + 'k'))}\n                />\n                <VictoryBar style={{ data: { fill: stateColor } }} barWidth={4} data={dataTS[stateFips + countyFips] ? dataTS[stateFips + countyFips] : dataTS[\"99999\"]}\n                    x='t' y={varGraphPair[metric]['name'][0]}\n\n                />\n                <VictoryLine name=\"Line1\" style={{ data: { stroke: countyColor, strokeWidth: ({ active }) => active ? 7 : 5 } }} data={dataTS[stateFips + countyFips] ? dataTS[stateFips + countyFips] : dataTS[\"99999\"]}\n                    x='t' y={varGraphPair[metric]['name'][1]}\n                    labels={({ datum }) => `${countyname}\\n` +\n                        `Date: ${new Date(datum.t * 1000).toLocaleDateString()}\\n` +\n                        `${varGraphPair[metric]['legend'][1]}: ${Math.round(datum[varGraphPair[metric]['name'][1]], 2)}\\n` +\n                        `${varGraphPair[metric]['legend'][0]}: ${Math.round(datum[varGraphPair[metric]['name'][0]], 2)}`\n                    }\n                    labelComponent={\n                        <VictoryTooltip\n                            orientation=\"top\"\n                            style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'white' }}\n                            constrainToVisibleArea\n                            labelComponent={<VictoryLabel dx={-75} textAnchor='start' />}\n                            flyoutStyle={{ fill: \"black\", fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\n                        />\n                    }\n                />\n                {varGraphPair[metric]['name'][1] === 'casesdailymean7' || varGraphPair[metric]['name'][1] === 'deathsdailymean7' ?\n                    <VictoryAxis dependentAxis tickCount={5}\n                        style={{\n                            tickLabels: { fontSize: 25, padding: 5 }\n                        }}\n                        tickFormat={(y) => (y < 1000 ? (Math.round(y, 2) === 0.00 ? \" \" : y) : (y / 1000 + 'k'))}\n                    /> :\n                    <VictoryLine name=\"Line11\" style={{ data: { stroke: '#007dba', strokeWidth: ({ active }) => active ? 5 : 3 } }} data={dataTS[stateFips] ? dataTS[stateFips] : dataTS[\"99999\"]}\n                        x='t' y={varGraphPair[metric]['name'][1]}\n                        labels={({ datum }) => [`Georgia\\n`,\n                            `Date: ${new Date(datum.t * 1000).toLocaleDateString()}    \\n`,\n                            `${varGraphPair[metric]['legend'][1]}: ${Math.round(datum[varGraphPair[metric]['name'][1]], 2)}\\n`,\n                            `${varGraphPair[metric]['legend'][0]}: ${Math.round(datum[varGraphPair[metric]['name'][0]], 2)}`\n                        ]}\n                        labelComponent={\n                            <VictoryTooltip\n                                // orientation=\"top\"\n                                style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'white' }}\n                                constrainToVisibleArea\n                                // flyoutComponent={<CustomFlyout/>}\n                                labelComponent={<VictoryLabel dx={-80} textAnchor='start' />}\n                                flyoutStyle={{ fill: \"black\", fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\n                            />\n                        }\n                    />}\n            </VictoryChart>)\n    }\n}\n\n\n\nexport default function StateMap(props) {\n\n    // let { stateFips } = useParams();\n    const hig = '80';\n    const stateFips = '13';\n    const [config, setConfig] = useState();\n    const [stateName, setStateName] = useState('');\n\n    const [countyFips, setCountyFips] = useState('121');\n    const [countyName, setCountyName] = useState('Fulton County');\n    const history = useHistory();\n    const [fips, setFips] = useState('13');\n\n    // const [dataFltrd, setDataFltrd] = useState();\n    // const [dataFltrdUs, setDataFltrdUs] = useState();\n\n    // const [dataStateFltrd, setDataStateFltrd] = useState();\n    // const [dataState, setDataState] = useState();\n\n    const [data, setData] = useState();\n    const [dataUs, setDataUs] = useState();\n    const [data_index, setIndexData] = useState();\n\n    const [dateCur, setDateCur] = useState();\n    const [colorCVI, setColorCVI] = useState();\n    const [colorSI, setColorSI] = useState();\n    // const [stateLabels, setStateLabels] = useState();\n    const [covidMetric, setCovidMetric] = useState({ casesdaily: 'N/A', casesdailymean14: 'N/A', t: 'n/a' });\n    const [covidMetric14, setCovidMetric14] = useState({ casesdaily: 'N/A', casesdailymean14: 'N/A', t: 'n/a' });\n\n    const [dataTS, setDataTS] = useState();\n    const [tooltipContent, setTooltipContent] = useState('');\n    const [tooltipContentcvi, setTooltipContentcvi] = useState('');\n    const [tooltipContentsi, setTooltipContentsi] = useState('');\n    const [colorScale, setColorScale] = useState();\n\n    const [legendMax, setLegendMax] = useState([]);\n    const [legendMax1, setLegendMax1] = useState([]);\n    const [legendMin, setLegendMin] = useState([]);\n    const [legendMax_graph, setLegendMaxGraph] = useState({});\n    const [legendSplit, setLegendSplit] = useState([]);\n    const [legendSplit1, setLegendSplit1] = useState([]);\n\n    const [metric, setMetric] = useState('casescumR');\n    const [metric_graph, setMetricGraph] = useState(['casesdaily', 'casesdailymean14']);\n\n    const metricOptions1 = [{ key: 'cacum', value: 'casescum', text: 'Total COVID-19 cases' },\n    { key: 'decum', value: 'deathscum', text: 'Total COVID-19 deaths' },\n    { key: 'cacumr', value: 'casescumR', text: 'COVID-19 cases per 100,000 population' },\n    { key: 'decumr', value: 'deathscumR', text: 'COVID-19 deaths per 100,000 population' },\n    { key: 'cacum14R', value: 'casescum14dayR', text: 'Last 14 days cases per 100,000 population' }];\n\n    const metricOptions2 = [{ key: 'cs', value: 'cs', text: 'Confirmed cases per 100,000 population' },\n    { key: 'hp', value: 'hp', text: 'Hospitalizations per 100,000 population' },\n    { key: 'ds', value: 'ds', text: 'Deaths per 100,000 population' }];\n    const dropdownopt = {\n        'casescum': 'Total COVID-19 cases', 'deathscum': 'Total COVID-19 deaths',\n        'casescumR': 'COVID-19 cases per 100,000 population', 'deathscumR': 'COVID-19 deaths per 100,000 population'\n    };\n\n    const varGraphPair = {\n        \"casescum\": { \"name\": ['casesdaily', 'casesdailymean7'], \"legend\": ['Daily cases', '7-d rolling average '] },\n        \"deathscum\": { \"name\": ['deathsdaily', 'deathsdailymean7'], \"legend\": ['Daily deaths', '7-d rolling average '] },\n        \"casescumR\": { \"name\": ['casesdailyR', 'casesdailymean7R'], \"legend\": ['Daily cases per 100,000', '7-d rolling average'] },\n        \"deathscumR\": { \"name\": ['deathsdailyR', 'deathsdailymean7R'], \"legend\": ['Daily deaths per 100,000', '7-d rolling average'] },\n        \"casescum14dayR\": { \"name\": ['casesdailyR', 'casesdailymean7R'], \"legend\": ['Last 14 days cases per 100,000', '7-d rolling average'] }\n    };\n    const [metricName, setMetricName] = useState('COVID-19 cases per 100,000 population');\n    const varNameMap = {\n        \"casescum\": { \"name\": 'cases', \"text\": \"The map shows the total number of confirmed COVID-19 cases in each county as of \", \"cat\": 'case' },\n        \"casescum14dayR\": { \"name\": 'cases per 100,000 residents', \"text\": \"The map shows the number of confirmed COVID-19 cases for past two weeks in each county as of \", \"cat\": 'case' },\n        \"deathscum\": { \"name\": 'deaths', \"text\": \"The map shows the total number of confirmed COVID-19 deaths in each county as of \", \"cat\": 'death' },\n        \"casescumR\": { \"name\": 'cases per 100,000 residents', \"text\": \"The map shows the total number of confirmed COVID-19 cases per 100,000 residents in each county as of \", \"cat\": 'case' },\n        \"deathscumR\": { \"name\": 'deaths per 100,000 residents', \"text\": \"The map shows the total number of confirmed COVID-19 deaths per 100,000 residents in each county as of \", \"cat\": 'death' }\n    };\n    const varMap = { \"cacum\": metricOptions2[0], \"decum\": metricOptions2[1], \"cacumr\": metricOptions2[2], \"decumr\": metricOptions1[1] };\n    const [delayHandler, setDelayHandler] = useState(null)\n\n\n\n    useEffect(() => {\n\n        const configMatched = configs.find(s => s.fips === stateFips);\n        // console.log(configMatched.fips);\n        if (!configMatched) {\n            history.push('/');\n        } else {\n\n            setConfig(configMatched);\n            // console.log(countyFips);\n            setStateName(configMatched.name);\n\n            fetch('/data/data.json').then(res => res.json())\n                .then(x => {\n                    setData(x);\n                    setDataUs(x);\n                    if (metric === 'casescum') {\n\n                        _.map(x, (d, k) => {\n                            d.fips = k\n                            return d\n                        });\n                        var temp_Data_metric = [];\n                        // retrieve metric data as list\n                        _.each(x, d => {\n                            if (d.fips.length === 5 && d.fips[0] === '1' && d.fips[1] === '3') {\n                                temp_Data_metric.push(d[metric]);\n                            }\n                        });\n\n                        temp_Data_metric.sort(function (a, b) {\n                            return a - b;\n                        });\n                        var countIqr = 3 * quantile(temp_Data_metric, 0.75) - 2 * quantile(temp_Data_metric, 0.25);\n                        // console.log(temp_Data_metric);\n                        //   var top10 = _.takeRight(temp_Data_metric,10)[0];\n\n                        //   var belowIqr = _.map(_.filter(temp_Data_metric,\n                        //     d => (d<top10\n                        //       )),\n                        //     d => d);\n                        // console.log(belowTop)\n                        var belowIqr = _.map(_.filter(temp_Data_metric,\n                            d => (d < countIqr\n                            )),\n                            d => d);\n\n                        var upIqr = _.map(_.filter(temp_Data_metric,\n                            d => (d >= countIqr\n                            )),\n                            d => d);\n\n                        var split = scaleQuantile()\n                            .domain(belowIqr).range(colorPalette);\n                        var split1 = scaleQuantile()\n                            .domain(upIqr).range(colorPalette1);\n                        // console.log(split.quantiles())\n                        // console.log(split1.quantiles())\n\n\n                        var thr = [];\n                        var thr1 = [];\n                        for (i = 0; i < split1.quantiles().length; i++) {\n                            thr1[i] = split1.quantiles()[i];\n                        }\n                        thr1.push(_.takeRight(temp_Data_metric)[0]);\n\n                        for (i = 0; i < split.quantiles().length; i++) {\n                            thr[i] = split.quantiles()[i];\n                        }\n                        thr.push(Math.round(countIqr / 100) * 100);\n\n                        // console.log(thr1);\n                        var i;\n                        for (i = 0; i < thr.length; i++) {\n                            if (thr[i] < 100) {\n                                thr[i] = Math.round(thr[i] / 10) * 10;\n                            }\n                            else {\n                                thr[i] = Math.round(thr[i] / 100) * 100;\n                            }\n                        }\n                        for (i = 0; i < thr1.length; i++) {\n                            if (thr1[i] < 100) {\n                                thr1[i] = Math.floor(thr1[i] / 10) * 10;\n                            }\n                            else {\n                                thr1[i] = Math.floor(thr1[i] / 100) * 100;\n                            }\n\n                        }\n                        // console.log(thr1)\n\n                        const csUs = {};\n                        var indexColor;\n                        _.map(belowIqr, d => {\n                            if (d >= 0 && d <= thr[0]) {\n                                csUs[d] = colorPalette[0];\n                            };\n                            if (d > thr[0] && d <= thr[1]) {\n                                csUs[d] = colorPalette[1];\n                            }\n                            if (d > thr[1] && d <= thr[2]) {\n                                csUs[d] = colorPalette[2];\n                            }\n                            if (d > thr[2] && d <= thr[3]) {\n                                csUs[d] = colorPalette[3];\n                            }\n                            if (d > thr[3] && d <= thr[4]) {\n                                csUs[d] = colorPalette[4];\n                            }\n                            if (d > thr[4] && d <= thr[5]) {\n                                csUs[d] = colorPalette[5];\n                            }\n                        });\n\n                        _.map(upIqr, d => {\n                            if (d > thr[5] && d <= thr1[0]) {\n                                csUs[d] = colorPalette1[0];\n                            }\n                            if (d > thr1[0] && d <= thr1[1]) {\n                                csUs[d] = colorPalette1[1];\n                            }\n                            if (d > thr1[1] && d <= thr1[2]) {\n                                csUs[d] = colorPalette1[2];\n                            }\n                            if (d > thr1[2] && d <= thr1[3]) {\n                                csUs[d] = colorPalette1[3];\n                            }\n                            if (d > thr1[3] && d <= thr1[4]) {\n                                csUs[d] = colorPalette1[4];\n                            }\n                        })\n                        let scaleMap = csUs;\n\n                        setColorScale(scaleMap);\n\n                        var max = _.takeRight(temp_Data_metric)[0];\n                        var min = temp_Data_metric[0];\n                        // console.log(max);\n                        if (max > 999) {\n                            max = (max / 1000).toFixed(0) + \"K\";\n                            // console.log(max);\n                            setLegendMax(max);\n                        } else {\n                            setLegendMax(max.toFixed(0));\n\n                        }\n                        setLegendMin(min.toFixed(0));\n\n                        setLegendSplit(thr);\n                        // console.log(thr1[4])\n                        setLegendSplit1(thr1.slice(0, 4));\n                        setLegendMax1(thr1[4]);\n\n                    }\n                    else {\n                        _.map(x, (d, k) => {\n                            d.fips = k\n                            return d\n                        });\n\n                        var temp_Data = {};\n                        var temp_Data_metric = [];\n                        // retrieve metric data as list\n                        _.each(x, d => {\n                            if (d.fips.length === 5 && d.fips[0] === '1' && d.fips[1] === '3') {\n                                temp_Data_metric.push(d[metric]);\n                            }\n                        });\n                        temp_Data[metric] = temp_Data_metric;\n\n                        temp_Data_metric.sort(function (a, b) {\n                            return a - b;\n                        });\n                        // console.log(temp_Data_metric);\n                        //   console.log(quantile(temp_Data_metric, 0.75));\n                        //   console.log(quantile(temp_Data_metric, 0.25));\n                        //   console.log(3*quantile(temp_Data_metric, 0.75)-2*quantile(temp_Data_metric, 0.25));\n                        // console.log(6*quantile(temp_Data_metric, 0.75)-5*quantile(temp_Data_metric, 0.25))\n                        var countIqr = 6 * quantile(temp_Data_metric, 0.75) - 5 * quantile(temp_Data_metric, 0.25);\n                        var rateIqr = 3 * quantile(temp_Data_metric, 0.75) - 2 * quantile(temp_Data_metric, 0.25);\n                        var IQR3 = _.map(_.filter(_.map(x, (d, k) => {\n                            d.fips = k\n                            return d\n                        }),\n                            d => (metric === 'casescumR' || metric === 'deathscumR' ? d[metric] > 0 && d[metric] < rateIqr &&\n                                d.fips.length === 5\n                                : d[metric] > 0 && d[metric] < countIqr &&\n                                d.fips.length === 5\n                            )),\n                            d => d[metric]);\n\n                        // console.log(IQR3);\n\n                        const csUs = {};\n                        var indexColor;\n                        _.map(IQR3, d => {\n                            if (metric === 'casescumR' || metric === 'deathscumR' || metric == 'casescum14dayR') { var interV = (rateIqr.toFixed(0)) / colorPalette.length }\n                            else { var interV = (countIqr.toFixed(0)) / colorPalette.length }\n\n                            if (metric === 'deathscum' || metric === 'deathscumR') {\n                                indexColor = Math.round(interV / 10) * 10;\n                            }\n                            else {\n                                indexColor = Math.round(interV / 100) * 100;\n                            }\n                            // console.log(indexColor);\n                            csUs[d] = colorPalette[Math.floor(d / indexColor)];\n                        })\n\n                        _.map(x, d => {\n                            if (d[metric] > indexColor * colorPalette.length) {\n                                csUs[d[metric]] = colorOut;\n                            }\n                            if (d[metric] < indexColor * colorPalette.length && d[metric] > 3 * quantile(temp_Data_metric, 0.75) - 2 * quantile(temp_Data_metric, 0.25).toFixed(0)) {\n                                csUs[d[metric]] = colorPalette[colorPalette.length - 1];\n                            }\n                        })\n                        let scaleMap = csUs;\n\n                        setColorScale(scaleMap);\n\n                        var max = _.takeRight(temp_Data_metric)[0];\n                        var min = temp_Data_metric[0];\n                        // console.log(max);\n                        if (max > 999) {\n                            max = (max / 1000).toFixed(0) + \"K\";\n                            // console.log(max);\n                            setLegendMax(max);\n                        } else {\n                            setLegendMax(max.toFixed(0));\n\n                        }\n                        setLegendMin(min.toFixed(0));\n                        var split = [];\n                        var i = 0;\n                        for (i = 0; i < colorPalette.length; i++) {\n                            split.push((i + 1) * indexColor);\n                        }\n\n                        setLegendSplit(split);\n                        // console.log(split);\n\n                    }\n                });\n\n            // fetch('/data/timeseries13' + '.json').then(res => res.json())\n            //   .then(x => setDataTS(x));\n            fetch('/data/timeseries13' + '.json').then(res => res.json())\n                .then(\n                    x => {\n                        setDataTS(x);\n                        // var max = 0\n                        var dicto = {}\n                        for (var key in x) {\n                            var max = 0\n                            _.each(x[key], m => {\n                                if (m[varGraphPair[metric]['name'][0]] > max) {\n                                    max = m[varGraphPair[metric]['name'][0]];\n                                }\n                            });\n                            dicto[key] = max;\n                            // console.log(varNameMap['cacum'].text);\n                        }\n                        // console.log(dicto);\n                        setLegendMaxGraph(dicto);\n                    });\n\n            fetch('/data/data.json').then(res => res.json())\n                .then(x => {\n                    setDateCur(x)\n\n                    const cs = scaleQuantile()\n                        .domain(_.map(_.filter(_.map(x, (d, k) => {\n                            d.fips = k\n                            return d\n                        }),\n                            d => (\n                                d['cvi'] >= 0)),\n                            d => d['cvi']))\n                        .range(colorPalette);\n\n                    let scaleMap = {}\n                    _.each(x, d => {\n                        if (d[metric] >= 0) {\n                            scaleMap[d['cvi']] = cs(d['cvi'])\n                        }\n                    });\n\n                    setColorCVI(scaleMap);\n\n                    const si = scaleQuantile()\n                        .domain(_.map(_.filter(_.map(x, (d, k) => {\n                            d.fips = k\n                            return d\n                        }),\n                            d => (\n                                d['si'] >= 0)),\n                            d => d['si']))\n                        .range(colorPalette);\n\n                    let scaleMapsi = {}\n                    _.each(x, d => {\n                        if (d[metric] >= 0) {\n                            scaleMapsi[d['si']] = si(d['si'])\n                        }\n                    });\n\n                    setColorSI(scaleMapsi);\n\n                });\n            fetch('/data/index_data.json').then(res => res.json())\n                .then(x => {\n                    setIndexData(x)\n                    // console.log(x)\n                });\n        }\n    }, [stateFips, metric]);\n\n\n\n    useEffect(() => {\n        if (dataTS && dataTS[stateFips + countyFips]) {\n            setCovidMetric(_.takeRight(dataTS[stateFips + countyFips])[0]);\n            setCovidMetric14(_.takeRight(dataTS[stateFips + countyFips], 14));\n            // console.log(data[stateFips+countyFips])\n            // setDateCur(data[stateFips+countyFips])\n        }\n    }, [dataTS, countyFips])\n\n    if (dataTS && dataUs) {\n\n        return (\n            <div>\n                <AppBar menu='countyReport' />\n                <Container style={{ marginTop: '6em', minWidth: '1260px' }}>\n                    {config &&\n                        <div>\n                            <Breadcrumb>\n                                {/* <Breadcrumb.Section link onClick={() => history.push('/')}></Breadcrumb.Section>\n            <Breadcrumb.Divider /> */}\n                                <Breadcrumb.Section active>{stateName}</Breadcrumb.Section>\n                                {/* <Breadcrumb.Divider /> */}\n                            </Breadcrumb>\n\n                            <Divider id='summary' hidden />\n\n                            <Grid columns={3}>\n                                \n                                    <StickyExampleAdjacentContext />\n                                <Grid.Row>\n                                    <Grid.Column width={16}>\n                                        <Header as='h2' style={{ fontWeight: 400, fontSize: \"16pt\", paddingRight: 0 }}>\n                                            <Header.Content>\n                                                Containment, mitigation, and response to the COVID-19 pandemic require a coordinated and appropriately-resourced effort driven by granular data\n                                                that attend to the local context. The Georgia Health Equity dashboard is a tool to dynamically track the burden of cases and deaths across the\n                                                counties in Georgia. We pair data on COVID-19 cases and deaths collected by the Georgia Department of Public Health with county population characteristics\n                                                to document the differential impact of the epidemic across the state. These data are made available to the public in an effort to inform planning, policy\n                                                development, and decision making by county health officials and individual residents.\n                    <Header.Subheader style={{ fontWeight: 300 }}></Header.Subheader>\n                                            </Header.Content>\n                                        </Header>\n                                    </Grid.Column>\n                                </Grid.Row>\n                                \n\n                                <Grid.Column width={7} data-tip='ga' data-for='ga' style={{ paddingLeft: \"2\", paddingLeft: \"1\" }}>\n                                    <Header as='h2' style={{ fontWeight: 600 }}>\n                                        <Header.Content>\n                                            <Dropdown\n                                                style={{\n                                                    background: '#fff',\n                                                    fontSize: \"17pt\",\n                                                    fontWeight: 600,\n                                                    theme: '#000000',\n                                                    width: '520px',\n                                                    top: '0em',\n                                                    left: '0em',\n                                                    text: \"Select\",\n                                                    borderTop: 'none',\n                                                    borderLeft: '1px solid #FFFFFF',\n                                                    borderRight: 'none',\n                                                    borderBottom: '0.9px solid #bdbfc1',\n                                                    borderRadius: 0,\n                                                    minHeight: '1.0em',\n                                                    paddingBottom: '0.2em'\n                                                }}\n                                                text={metricName}\n                                                inline\n                                                search\n\n                                                pointing='top'\n                                                options={metricOptions1}\n                                                onChange={(e, { value }) => {\n                                                    setMetric(value);\n                                                    setMetricName(dropdownopt[value]);\n                                                }}\n                                            />\n\n                                        </Header.Content>\n                                    </Header>\n                                    <SvgMap name={metric}\n                                        legendSplit={legendSplit}\n                                        legendSplit1={legendSplit1}\n                                        legendMin={legendMin}\n                                        legendMax={legendMax}\n                                    />\n                                    <ComposableMap projection=\"geoAlbersUsa\"\n                                        projectionConfig={{ scale: `${config.scale}` }}\n                                        width={500}\n                                        height={550}\n                                        data-tip=\"\"\n                                        offsetX={config.offsetX}\n                                        offsetY={config.offsetY}>\n                                        <Geographies geography={config.url}>\n                                            {({ geographies }) => geographies.map(geo =>\n                                                <Geography\n                                                    key={geo.rsmKey}\n                                                    geography={geo}\n                                                    onClick={() => {\n                                                        history.push(\"/\" + stateFips + \"/\" + geo.properties.COUNTYFP);\n                                                        // console.log(geo.properties.COUNTYFP);\n                                                    }}\n                                                    style={{\n                                                        default: {\n                                                            //  fill: \"#ECEFF1\",\n                                                            stroke: \"#607D8B\",\n                                                            strokeWidth: 0.95,\n                                                            outline: \"none\",\n                                                        },\n                                                        pressed: {\n                                                            outline: \"none\",\n                                                        }\n                                                    }}\n                                                    onMouseEnter={() => {\n                                                        setDelayHandler(setTimeout(() => {\n                                                            setCountyFips(geo.properties.COUNTYFP);\n                                                            setCountyName(fips2county[stateFips + geo.properties.COUNTYFP]);\n                                                            // setTooltipContent('Click to see more county data');\n                                                        }, 500))\n                                                    }}\n                                                    onMouseLeave={() => {\n                                                        clearTimeout(delayHandler)\n                                                        setTooltipContent(\"\")\n                                                    }}\n                                                    fill={countyFips === geo.properties.COUNTYFP ? countyColor :\n                                                        ((colorScale && dataUs[stateFips + geo.properties.COUNTYFP] &&\n                                                            dataUs[stateFips + geo.properties.COUNTYFP][metric] && dataUs[stateFips + geo.properties.COUNTYFP][metric] > 0) ?\n                                                            colorScale[dataUs[stateFips + geo.properties.COUNTYFP][metric]] :\n                                                            (colorScale && dataUs[stateFips + geo.properties.COUNTYFP] && dataUs[stateFips + geo.properties.COUNTYFP][metric] === 0) ? '#e1dce2' : '#FFFFFF')}\n                                                />\n                                            )}\n                                        </Geographies>\n                                    </ComposableMap>\n\n                                    <Grid.Row style={{ paddingTop: 0, paddingLeft: '0em', paddingRight: '2em' }} centered>\n                                        <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\n                                            {varNameMap[metric].text}{dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' : (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))} . The darker shading indicates a larger number of {varNameMap[metric].name}.\n                    </small>\n                                    </Grid.Row>\n\n                                </Grid.Column>\n                                <Grid.Column width={9} style={{ paddingLeft: \"2\", paddingLeft: \"1\" }}>\n                                    <Header as='h2' style={{ fontWeight: 400, paddingLeft: \"2.5\" }}>\n                                        <Header.Content>\n                                            {/* {varGraphPair[metric]['legend'][0]} for <span style={{ color: countyColor }}>{countyName}</span> */}\n                                            {varGraphPair[metric]['legend'][0]} for <b>{countyName}</b>\n                                            <Header.Subheader style={{ fontWeight: 300 }}>\n                                            </Header.Subheader>\n                                        </Header.Content>\n                                    </Header>\n                                    <Grid>\n                                        <Grid.Column>\n                                            <Grid.Row style={{ paddingLeft: \"1.5\", paddingTop: \"1\", paddingBottom: 0 }} centered>\n\n                                                <svg width=\"630\" height='80'>\n\n                                                    <rect x={50} y={12} width=\"15\" height=\"2\" style={{ fill: countyColor, strokeWidth: 1, stroke: countyColor }} />\n                                                    <text x={75} y={20} style={{ fontSize: 16 }}>7-day rolling average in {countyName}</text>\n\n                                                    {varGraphPair[metric]['name'][1] === 'casesdailymean7' || varGraphPair[metric]['name'][1] === 'deathsdailymean7' ?\n                                                        <rect x={50} y={40} width=\"15\" height=\"15\" style={{ fill: \"stateColor\", strokeWidth: 1, stroke: stateColor }} /> :\n                                                        <rect x={50} y={35} width=\"15\" height=\"1\" style={{ fill: '#007dba', strokeWidth: 1, stroke: '#007dba' }} />}\n                                                    {varGraphPair[metric]['name'][1] === 'casesdailymean7' || varGraphPair[metric]['name'][1] === 'deathsdailymean7' ?\n                                                        <text x={75} y={52} style={{ fontSize: 16 }}> {varGraphPair[metric]['legend'][0]} </text> :\n                                                        <rect x={50} y={35} width=\"15\" height=\"1\" style={{ fill: '#007dba', strokeWidth: 1, stroke: '#007dba' }} />}\n                                                    {varGraphPair[metric]['name'][1] === 'casesdailymean7' || varGraphPair[metric]['name'][1] === 'deathsdailymean7' ?\n                                                        <text x={250} y={12} style={{ fontSize: 0 }}></text> :\n                                                        <text x={75} y={43} style={{ fontSize: 16 }}>7-day rolling average in Georgia</text>}\n                                                    {varGraphPair[metric]['name'][1] === 'casesdailymean7' || varGraphPair[metric]['name'][1] === 'deathsdailymean7' ?\n                                                        <rect x={0} y={0} width=\"0\" height=\"0\" style={{ fill: 'white', strokeWidth: 0, stroke: 'white' }} /> :\n                                                        <rect x={50} y={55} width=\"15\" height=\"15\" style={{ fill: stateColor, strokeWidth: 1, stroke: stateColor }} />}\n                                                    {varGraphPair[metric]['name'][1] === 'casesdailymean7' || varGraphPair[metric]['name'][1] === 'deathsdailymean7' ?\n                                                        <rect x={0} y={0} width=\"0\" height=\"0\" style={{ fill: 'white', strokeWidth: 0, stroke: 'white' }} /> :\n                                                        <text x={75} y={68} style={{ fontSize: 16 }}> {varGraphPair[metric]['legend'][0]} </text>}\n\n                                                </svg>\n\n                                                <ChartGraph\n                                                    name={varGraphPair}\n                                                    metric={metric}\n                                                    stateFips={stateFips}\n                                                    countyFips={countyFips}\n                                                    data1={covidMetric14}\n                                                    data2={dataTS}\n                                                    countyname={countyName}\n                                                />\n                                            </Grid.Row>\n                                            <Grid.Row style={{ paddingTop: '2em', paddingLeft: '2.9em', paddingRight: '2.9em' }} centered>\n                                                <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\n                                                    This chart shows the daily number of new confirmed COVID-19 {varNameMap[metric].name} in <b>{countyName}</b> as of {dataTS[stateFips + countyFips][0].todaydate === 'n/a' ? 'N/A' : (new Date(dataTS[stateFips + countyFips][0].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}. The daily number reflects the date the {varNameMap[metric].cat} was first reported to DPH.\n                        The vertical bars show the number of new daily {varNameMap[metric].name} while the line shows the 7-day moving average of new daily {varNameMap[metric].name}.\n                        </small>\n                                            </Grid.Row>\n                                        </Grid.Column>\n                                    </Grid>\n                                </Grid.Column>\n\n                            </Grid>\n                            <center> <Divider id=\"cvi\" hidden style={{ paddingBottom: 50 }} /> </center>\n                            {/* cvi */}\n                            <center> <Divider /> </center>\n                            <Header as='h2' style={{ textAlign: 'center', color: 'black', fontSize: \"18pt\", paddingTop: 30 }}>\n\n                                <Header.Content>\n                                    COVID-19 by Community Vulnerability Index\n                                <Header.Subheader style={{ color: '#000000', textAlign: 'left', fontSize: \"16pt\", paddingTop: 16, paddingBottom: 28, paddingLeft: 0, paddingRight: 0 }}>\n\n                                        Some communities are limited in their ability to prevent, manage, and mitigate the spread of a pandemic disease,\n                                        and its economic and social impacts, rendering them more vulnerable to COVID-19 than others. CVI incorporates\n                                        the SVI’s sociodemographic variables, along with risk factors specific to COVID-19 and variables measuring the\n                                        capacity of public health systems. It considers six core themes that together account for 34 factors that make\n                                        a community vulnerable to the COVID-19 pandemic.\n\n                <br />\n                                        <br />\n\n                                    </Header.Subheader>\n                                </Header.Content>\n                            </Header>\n                            <Grid columns={16}>\n                                <Grid.Column width={7} style={{ paddingLeft: \"2\", paddingLeft: \"1\" }}>\n                                    <Grid.Row style={{ paddingTop: \"0\" }}>\n                                        <Header as='h2' style={{ fontWeight: 600, fontSize: \"16pt\", lineHeight: \"16pt\" }}>\n                                            <Header.Content>\n                                                Georgia Community Vulnerability Index Map\n                                        </Header.Content>\n                                        </Header>\n                                    </Grid.Row>\n                                    <Grid.Row data-tip='cvi' data-for='cvi' style={{ paddingTop: \"0\" }}>\n                                        <svg width=\"260\" height=\"80\">\n                                            {_.map(colorPalette, (color, i) => {\n                                                return <rect key={i} x={50 + 20 * i} y={40} width=\"20\" height=\"20\" style={{ fill: color, strokeWidth: 1, stroke: color }} />\n                                            })}\n                                            <text x={50} y={74} style={{ fontSize: '0.8em' }}>Low</text>\n                                            <text x={50 + 20 * (colorPalette.length - 1)} y={74} style={{ fontSize: '0.8em' }}>High</text>\n                                            <rect x={195} y={40} width=\"20\" height=\"20\" style={{ fill: \"#FFFFFF\", strokeWidth: 0.5, stroke: \"#000000\" }} />\n                                            <text x={217} y={50} style={{ fontSize: '0.7em' }}> None </text>\n                                            <text x={217} y={59} style={{ fontSize: '0.7em' }}> Reported </text>\n\n                                        </svg>\n                                        <ComposableMap projection=\"geoAlbersUsa\"\n                                            projectionConfig={{ scale: `${config.scale}` }}\n                                            width={500}\n                                            height={550}\n                                            data-tip=\"\"\n                                            offsetX={config.offsetX}\n                                            offsetY={config.offsetY}>\n                                            <Geographies geography={config.url}>\n                                                {({ geographies }) => geographies.map(geo =>\n                                                    <Geography\n                                                        key={geo.rsmKey}\n                                                        geography={geo}\n\n                                                        style={{\n                                                            default: {\n                                                                //  fill: \"#ECEFF1\",\n                                                                stroke: \"#607D8B\",\n                                                                strokeWidth: 0.95,\n                                                                outline: \"none\",\n                                                            },\n                                                            pressed: {\n                                                                outline: \"none\",\n                                                            }\n                                                        }}\n                                                        onMouseEnter={() => {\n\n                                                            setCountyFips(geo.properties.COUNTYFP);\n                                                            setCountyName(fips2county[stateFips + geo.properties.COUNTYFP]);\n                                                            setTooltipContentcvi(fips2county[stateFips + geo.properties.COUNTYFP] + \"'s CVI: \" + dataUs[stateFips + geo.properties.COUNTYFP]['cvi'].toFixed(2));\n\n                                                        }}\n                                                        onMouseLeave={() => {\n                                                            setTooltipContent(\"\")\n                                                        }}\n                                                        fill={countyFips === geo.properties.COUNTYFP ? countyColor :\n                                                            ((colorCVI && dataUs[stateFips + geo.properties.COUNTYFP] &&\n                                                                dataUs[stateFips + geo.properties.COUNTYFP]['cvi'] && dataUs[stateFips + geo.properties.COUNTYFP]['cvi'] > 0) ?\n                                                                colorCVI[dataUs[stateFips + geo.properties.COUNTYFP]['cvi']] :\n                                                                (colorCVI && dataUs[stateFips + geo.properties.COUNTYFP] && dataUs[stateFips + geo.properties.COUNTYFP]['cvi'] === 0) ? '#e1dce2' : '#FFFFFF')}\n                                                    />\n                                                )}\n                                            </Geographies>\n                                        </ComposableMap>\n                                    </Grid.Row>\n                                </Grid.Column>\n                                <Grid.Column width={9} style={{ paddingLeft: \"2\", paddingLeft: \"1\" }}>\n                                    <Grid.Row columns={1}>\n                                        <Grid.Column style={{ paddingTop: 0, paddingBottom: 18 }}>\n                                            <Header as='h2' style={{ textAlign: 'center', fontSize: \"16pt\", lineHeight: \"16pt\" }}>\n                                                <Header.Content>\n                                                    Cases per 100,000 residents by Community Vulnerability Index\n                                                </Header.Content>\n                                            </Header>\n                                            <VictoryChart\n                                                theme={VictoryTheme.material}\n                                                width={730}\n                                                height={220}\n                                                domainPadding={20}\n                                                minDomain={{ y: props.ylog ? 1 : 0 }}\n                                                padding={{ left: 200, right: 30, top: 10, bottom: -5 }}\n                                                style={{ fontSize: \"14pt\" }}\n                                                containerComponent={<VictoryContainer responsive={false} />}\n                                            >\n                                                <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"transparent\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\n                                                <VictoryAxis dependentAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { labels: { fill: '#000000' } }, tickLabels: { fontSize: \"20px\", fill: '#000000', padding: 10, fontFamily: 'lato' } }} />\n                                                <VictoryBar\n                                                    horizontal\n                                                    barRatio={0.75}\n                                                    labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(0))}\n                                                    data={[\n                                                        { key: \"Lowest 20%\", 'value': (data_index['cvi_index'][\"low20\"]['casesdailymean7R'] / data_index['cvi_index'][\"low20\"]['casesdailymean7R']) * data_index['cvi_index'][\"low20\"]['casesdailymean7R'] || 0 },\n                                                        { key: \"Q2\", 'value': (data_index['cvi_index'][\"Q2\"]['casesdailymean7R'] / data_index['cvi_index'][\"low20\"]['casesdailymean7R']) * data_index['cvi_index'][\"low20\"]['casesdailymean7R'] || 0 },\n                                                        { key: \"Q3\", 'value': (data_index['cvi_index'][\"Q3\"]['casesdailymean7R'] / data_index['cvi_index'][\"low20\"]['casesdailymean7R']) * data_index['cvi_index'][\"low20\"]['casesdailymean7R'] || 0 },\n                                                        { key: \"Q4\", 'value': (data_index['cvi_index'][\"Q4\"]['casesdailymean7R'] / data_index['cvi_index'][\"low20\"]['casesdailymean7R']) * data_index['cvi_index'][\"low20\"]['casesdailymean7R'] || 0 },\n                                                        { key: \"Highest 20%\", 'value': (data_index['cvi_index'][\"high20\"]['casesdailymean7R'] / data_index['cvi_index'][\"low20\"]['casesdailymean7R']) * data_index['cvi_index'][\"low20\"]['casesdailymean7R'] || 0 }\n                                                    ]}\n                                                    labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"20px\", fill: \"#000000\" }} />}\n                                                    style={{\n                                                        data: {\n                                                            fill: casesColor[1]\n                                                        }\n                                                    }}\n                                                    x=\"key\"\n                                                    y=\"value\"\n                                                />\n                                            </VictoryChart>\n                                        </Grid.Column>\n                                    </Grid.Row>\n                                    <Grid.Row columns={1}>\n                                        <Grid.Column style={{ paddingTop: 60, paddingBottom: 18 }}>\n                                            <Header as='h2' style={{ textAlign: 'center', fontSize: \"16pt\", lineHeight: \"16pt\", paddingLeft: \"1em\" }}>\n                                                <Header.Content>\n                                                    Deaths per 100,000 residents by Community Vulnerability Index\n                                            </Header.Content>\n                                            </Header>\n                                            <VictoryChart\n                                                theme={VictoryTheme.material}\n                                                width={730}\n                                                height={220}\n                                                domainPadding={20}\n                                                minDomain={{ y: props.ylog ? 1 : 0 }}\n                                                padding={{ left: 200, right: 30, top: 10, bottom: -5 }}\n                                                style={{ fontSize: \"14pt\" }}\n                                                containerComponent={<VictoryContainer responsive={false} />}\n                                            >\n                                                <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"transparent\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\n                                                <VictoryAxis dependentAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { labels: { fill: '#000000' } }, tickLabels: { fontSize: \"20px\", fill: '#000000', padding: 10, fontFamily: 'lato' } }} />\n                                                <VictoryBar\n                                                    horizontal\n                                                    barRatio={0.75}\n                                                    labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(2))}\n                                                    data={[\n                                                        { key: \"Lowest 20%\", 'value': (data_index['cvi_index'][\"low20\"]['deathsdailymean7R'] / data_index['cvi_index'][\"Q2\"]['deathsdailymean7R']) * data_index['cvi_index'][\"Q2\"]['deathsdailymean7R'] || 0 },\n                                                        { key: \"Q2\", 'value': (data_index['cvi_index'][\"Q2\"]['deathsdailymean7R'] / data_index['cvi_index'][\"Q2\"]['deathsdailymean7R']) * data_index['cvi_index'][\"Q2\"]['deathsdailymean7R'] || 0 },\n                                                        { key: \"Q3\", 'value': (data_index['cvi_index'][\"Q3\"]['deathsdailymean7R'] / data_index['cvi_index'][\"Q2\"]['deathsdailymean7R']) * data_index['cvi_index'][\"Q2\"]['deathsdailymean7R'] || 0 },\n                                                        { key: \"Q4\", 'value': (data_index['cvi_index'][\"Q4\"]['deathsdailymean7R'] / data_index['cvi_index'][\"Q2\"]['deathsdailymean7R']) * data_index['cvi_index'][\"Q2\"]['deathsdailymean7R'] || 0 },\n                                                        { key: \"Highest 20%\", 'value': (data_index['cvi_index'][\"high20\"]['deathsdailymean7R'] / data_index['cvi_index'][\"Q2\"]['deathsdailymean7R']) * data_index['cvi_index'][\"Q2\"]['deathsdailymean7R'] || 0 }\n\n\n\n                                                    ]}\n                                                    labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"20px\", fill: \"#000000\" }} />}\n                                                    style={{\n                                                        data: {\n                                                            fill: mortalityColor[1]\n                                                        }\n                                                    }}\n                                                    x=\"key\"\n                                                    y=\"value\"\n                                                />\n                                            </VictoryChart>\n\n                                        </Grid.Column>\n                                    </Grid.Row>\n                                </Grid.Column>\n                            </Grid>\n\n                            {/* SI */}\n                            <center> <Divider id='si' hidden style={{ paddingBottom: 50 }} /> </center>\n                            <center> <Divider /> </center>\n                            <Header as='h2' style={{ textAlign: 'center', color: 'black', fontSize: \"18pt\", paddingTop: 30 }}>\n\n                                <Header.Content>\n                                    COVID-19 by Residential Segregation Index\n                                <Header.Subheader style={{ color: '#000000', textAlign: 'left', fontSize: \"16pt\", paddingTop: 16, paddingBottom: 28, paddingLeft: 0, paddingRight: 0 }}>\n\n                                        Residential segregation is a key factor responsible for the disproportionate impact of COVID-19 on different communities in the US.\n                                        It allows for social conditions that facilitate transmission and vulnerability to the effects of pandemic to be concentrated in\n                                        geographically defined areas. This results in the entire neighborhood being more exposed to the virus than others and more\n                                        vulnerable to its effects and limited quality of care. In the figures below, we show the severity of COVID-19 across\n                                        Georgia counties with different levels of residential segregation index.\n\n                <br />\n                                        <br />\n\n                                    </Header.Subheader>\n                                </Header.Content>\n                            </Header>\n\n                            <Grid columns={16}>\n                                <Grid.Column width={7} data-tip='si' data-for='si' style={{ paddingLeft: \"2\", paddingLeft: \"1\" }}>\n                                    <Header as='h2' style={{ fontWeight: 600, fontSize: \"16pt\", lineHeight: \"16pt\" }}>\n                                        <Header.Content>\n                                            Georgia Residential Segregation Index Map\n                                        </Header.Content>\n                                    </Header>\n                                    <svg width=\"260\" height=\"80\">\n                                        {_.map(colorPalette, (color, i) => {\n                                            return <rect key={i} x={50 + 20 * i} y={40} width=\"20\" height=\"20\" style={{ fill: color, strokeWidth: 1, stroke: color }} />\n                                        })}\n                                        <text x={50} y={74} style={{ fontSize: '0.8em' }}>Low</text>\n                                        <text x={50 + 20 * (colorPalette.length - 1)} y={74} style={{ fontSize: '0.8em' }}>High</text>\n                                        <rect x={195} y={40} width=\"20\" height=\"20\" style={{ fill: \"#FFFFFF\", strokeWidth: 0.5, stroke: \"#000000\" }} />\n                                        <text x={217} y={50} style={{ fontSize: '0.7em' }}> None </text>\n                                        <text x={217} y={59} style={{ fontSize: '0.7em' }}> Reported </text>\n\n                                    </svg>\n                                    <ComposableMap projection=\"geoAlbersUsa\"\n                                        projectionConfig={{ scale: `${config.scale}` }}\n                                        width={500}\n                                        height={550}\n                                        data-tip=\"\"\n                                        offsetX={config.offsetX}\n                                        offsetY={config.offsetY}>\n                                        <Geographies geography={config.url}>\n                                            {({ geographies }) => geographies.map(geo =>\n                                                <Geography\n                                                    key={geo.rsmKey}\n                                                    geography={geo}\n\n                                                    style={{\n                                                        default: {\n                                                            //  fill: \"#ECEFF1\",\n                                                            stroke: \"#607D8B\",\n                                                            strokeWidth: 0.95,\n                                                            outline: \"none\",\n                                                        },\n                                                        pressed: {\n                                                            outline: \"none\",\n                                                        }\n                                                    }}\n                                                    onMouseEnter={() => {\n\n                                                        setCountyFips(geo.properties.COUNTYFP);\n                                                        setCountyName(fips2county[stateFips + geo.properties.COUNTYFP]);\n                                                        setTooltipContentsi(fips2county[stateFips + geo.properties.COUNTYFP] + \"'s SI: \" + dataUs[stateFips + geo.properties.COUNTYFP]['si'].toFixed(0));\n\n                                                    }}\n                                                    onMouseLeave={() => {\n                                                        setTooltipContent(\"\")\n                                                    }}\n                                                    fill={countyFips === geo.properties.COUNTYFP ? countyColor :\n                                                        ((colorSI && dataUs[stateFips + geo.properties.COUNTYFP] &&\n                                                            dataUs[stateFips + geo.properties.COUNTYFP]['si'] && dataUs[stateFips + geo.properties.COUNTYFP]['si'] > 0) ?\n                                                            colorSI[dataUs[stateFips + geo.properties.COUNTYFP]['si']] :\n                                                            (colorScale && dataUs[stateFips + geo.properties.COUNTYFP] && dataUs[stateFips + geo.properties.COUNTYFP][metric] === 0) ? '#e1dce2' : '#FFFFFF')}\n                                                />\n                                            )}\n                                        </Geographies>\n                                    </ComposableMap>\n                                </Grid.Column>\n                                <Grid.Column width={9} style={{ paddingLeft: \"2\", paddingLeft: \"1\" }}>\n                                    <Grid.Row columns={1}>\n                                        <Grid.Column style={{ paddingTop: 0, paddingBottom: 18 }}>\n                                            <Header as='h2' style={{ textAlign: 'center', fontSize: \"16pt\", lineHeight: \"16pt\" }}>\n                                                <Header.Content>\n                                                    Cases per 100,000 residents by Residential segregation\n                </Header.Content>\n                                            </Header>\n                                            <VictoryChart\n                                                theme={VictoryTheme.material}\n                                                width={730}\n                                                height={220}\n                                                domainPadding={20}\n                                                minDomain={{ y: props.ylog ? 1 : 0 }}\n                                                padding={{ left: 200, right: 30, top: 10, bottom: -5 }}\n                                                style={{ fontSize: \"14pt\" }}\n                                                containerComponent={<VictoryContainer responsive={false} />}\n                                            >\n                                                <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"transparent\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\n                                                <VictoryAxis dependentAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { labels: { fill: '#000000' } }, tickLabels: { fontSize: \"20px\", fill: '#000000', padding: 10, fontFamily: 'lato' } }} />\n                                                <VictoryBar\n                                                    horizontal\n                                                    barRatio={0.75}\n                                                    labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(0))}\n                                                    data={[\n                                                        { key: \"Lowest 20%\", 'value': (data_index['s_index'][\"low20\"]['casesdailymean7R'] / data_index['s_index'][\"low20\"]['casesdailymean7R']) * data_index['s_index'][\"low20\"]['casesdailymean7R'] || 0 },\n                                                        { key: \"Q2\", 'value': (data_index['s_index'][\"Q2\"]['casesdailymean7R'] / data_index['s_index'][\"low20\"]['casesdailymean7R']) * data_index['s_index'][\"low20\"]['casesdailymean7R'] || 0 },\n                                                        { key: \"Q3\", 'value': (data_index['s_index'][\"Q3\"]['casesdailymean7R'] / data_index['s_index'][\"low20\"]['casesdailymean7R']) * data_index['s_index'][\"low20\"]['casesdailymean7R'] || 0 },\n                                                        { key: \"Q4\", 'value': (data_index['s_index'][\"Q4\"]['casesdailymean7R'] / data_index['s_index'][\"low20\"]['casesdailymean7R']) * data_index['s_index'][\"low20\"]['casesdailymean7R'] || 0 },\n                                                        { key: \"Highest 20%\", 'value': (data_index['s_index'][\"high20\"]['casesdailymean7R'] / data_index['s_index'][\"low20\"]['casesdailymean7R']) * data_index['s_index'][\"low20\"]['casesdailymean7R'] || 0 }\n                                                    ]}\n                                                    labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"20px\", fill: \"#000000\" }} />}\n                                                    style={{\n                                                        data: {\n                                                            fill: casesColor[1]\n                                                        }\n                                                    }}\n                                                    x=\"key\"\n                                                    y=\"value\"\n                                                />\n                                            </VictoryChart>\n                                        </Grid.Column>\n                                    </Grid.Row>\n                                    <Grid.Row columns={1}>\n                                        <Grid.Column style={{ paddingTop: 60, paddingBottom: 18 }}>\n                                            <Header as='h2' style={{ textAlign: 'center', fontSize: \"16pt\", lineHeight: \"16pt\", paddingLeft: \"1em\" }}>\n                                                <Header.Content>\n                                                    Deaths per 100,000 residents by Residential segregation\n                </Header.Content>\n                                            </Header>\n                                            <VictoryChart\n                                                theme={VictoryTheme.material}\n                                                width={730}\n                                                height={220}\n                                                domainPadding={20}\n                                                minDomain={{ y: props.ylog ? 1 : 0 }}\n                                                padding={{ left: 200, right: 30, top: 10, bottom: -5 }}\n                                                style={{ fontSize: \"14pt\" }}\n                                                containerComponent={<VictoryContainer responsive={false} />}\n                                            >\n                                                <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"transparent\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\n                                                <VictoryAxis dependentAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { labels: { fill: '#000000' } }, tickLabels: { fontSize: \"20px\", fill: '#000000', padding: 10, fontFamily: 'lato' } }} />\n                                                <VictoryBar\n                                                    horizontal\n                                                    barRatio={0.75}\n                                                    labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(2))}\n                                                    data={[\n                                                        { key: \"Lowest 20%\", 'value': (data_index['s_index'][\"low20\"]['deathsdailymean7R'] / data_index['s_index'][\"Q2\"]['deathsdailymean7R']) * data_index['s_index'][\"Q2\"]['deathsdailymean7R'] || 0 },\n                                                        { key: \"Q2\", 'value': (data_index['s_index'][\"Q2\"]['deathsdailymean7R'] / data_index['s_index'][\"Q2\"]['deathsdailymean7R']) * data_index['s_index'][\"Q2\"]['deathsdailymean7R'] || 0 },\n                                                        { key: \"Q3\", 'value': (data_index['s_index'][\"Q3\"]['deathsdailymean7R'] / data_index['s_index'][\"Q2\"]['deathsdailymean7R']) * data_index['s_index'][\"Q2\"]['deathsdailymean7R'] || 0 },\n                                                        { key: \"Q4\", 'value': (data_index['s_index'][\"Q4\"]['deathsdailymean7R'] / data_index['s_index'][\"Q2\"]['deathsdailymean7R']) * data_index['s_index'][\"Q2\"]['deathsdailymean7R'] || 0 },\n                                                        { key: \"Highest 20%\", 'value': (data_index['s_index'][\"high20\"]['deathsdailymean7R'] / data_index['s_index'][\"Q2\"]['deathsdailymean7R']) * data_index['s_index'][\"Q2\"]['deathsdailymean7R'] || 0 }\n                                                    ]}\n                                                    labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"20px\", fill: \"#000000\" }} />}\n                                                    style={{\n                                                        data: {\n                                                            fill: mortalityColor[1]\n                                                        }\n                                                    }}\n                                                    x=\"key\"\n                                                    y=\"value\"\n                                                />\n                                            </VictoryChart>\n\n                                        </Grid.Column>\n                                    </Grid.Row>\n                                </Grid.Column>\n                            </Grid>\n\n\n                            {/* Charactor */}\n                            <center> <Divider id='male' /> </center>\n\n                            <Header as='h2' style={{ textAlign: 'center', color: 'black', fontSize: \"18pt\", paddingTop: 30 }}>\n                                <Header.Content style={{ fontSize: \"18pt\", color: 'black' }}>\n                                    COVID-19 by County Characteristics\n              <Header.Subheader style={{ color: '#000000', textAlign: 'left', fontSize: \"16pt\", paddingTop: 16, paddingBottom: 28, paddingLeft: 0, paddingRight: 0 }}>\n                                        {/* <center> <b style={{ fontSize: \"18pt\" }}>COVID-19 cases per 100,000 across the population characteristics of all the counties in the United States </b> </center> */}\n\n                                        COVID-19 is affecting communities very differently. Underlying medical conditions; racial,\n                                        gender, and age demographics; income levels; and population density are all contributing factors\n                                        that determine the rate of COVID-19 in different counties. Some of the many county characteristics\n                                        that may have a large impact on disparate rates of infection are displayed below, with counties divided\n                                        into quintiles based on each characteristic unless otherwise noted.\n              </Header.Subheader>\n                                </Header.Content>\n                            </Header>\n                            {/* Male */}\n                            <Grid style={{ paddingLeft: \"7em\", paddingRight: \"7em\" }}>\n                                <Grid.Row columns={2} style={{ paddingTop: 11 }}>\n                                    <Grid.Column style={{ paddingTop: '1em', paddingBottom: 18 }}>\n                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"18pt\", lineHeight: \"16pt\" }}>\n                                            <Header.Content>\n                                                COVID-19 cases by percentage of <br /> male population\n            \t\t                        </Header.Content>\n                                        </Header>\n\n                                        <VictoryChart\n                                            theme={VictoryTheme.material}\n                                            width={500}\n                                            height={220}\n                                            domainPadding={20}\n                                            minDomain={{ y: props.ylog ? 1 : 0 }}\n                                            padding={{ left: 160, right: 30, top: 30, bottom: -5 }}\n                                            style={{ fontSize: \"14pt\" }}\n                                            containerComponent={<VictoryContainer responsive={false} />}\n                                        >\n\n                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"transparent\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\n                                            <VictoryAxis dependentAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { labels: { fill: '#000000' } }, tickLabels: { fontSize: \"20px\", fill: '#000000', padding: 10, fontFamily: 'lato' } }} />\n                                            <VictoryBar\n                                                horizontal\n                                                barRatio={0.7}\n                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(0))}\n                                                data={[\n                                                    { key: \"Lowest 20%\", 'value': data_index['male'][\"low20\"]['casesdailymean7R'] || 0 },\n                                                    { key: \"Q2\", 'value': data_index['male'][\"Q2\"]['casesdailymean7R'] || 0 },\n                                                    { key: \"Q3\", 'value': data_index['male'][\"Q3\"]['casesdailymean7R'] || 0 },\n                                                    { key: \"Q4\", 'value': data_index['male'][\"Q4\"]['casesdailymean7R'] || 0 },\n                                                    { key: \"Highest 20%\", 'value': data_index['male'][\"high20\"]['casesdailymean7R'] || 0 }\n                                                ]}\n                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"20px\", fill: \"#000000\" }} />}\n                                                style={{\n                                                    data: {\n                                                        fill: \"#487f84\"\n                                                    }\n                                                }}\n                                                x=\"key\"\n                                                y=\"value\"\n                                            />\n                                        </VictoryChart>\n\n                                        <Header.Content style={{ fontWeight: 300, paddingBottom: 10, fontSize: \"14pt\", lineHeight: \"18pt\" }}>\n                                            <center>\n                                                <br />\n                                                <b>Average Daily COVID-19 Cases per 100,000</b>\n                                            </center>\n                                        </Header.Content>\n\n                                    </Grid.Column>\n                                    <Grid.Column style={{ paddingTop: '1em', paddingBottom: 18 }}>\n                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"18pt\", lineHeight: \"16pt\" }}>\n                                            <Header.Content>\n                                                COVID-19 deaths by percentage of <br /> male population\n                </Header.Content>\n                                        </Header>\n                                        <VictoryChart\n                                            theme={VictoryTheme.material}\n                                            width={500}\n                                            height={220}\n                                            domainPadding={20}\n                                            minDomain={{ y: props.ylog ? 1 : 0 }}\n                                            padding={{ left: 160, right: 30, top: 30, bottom: -5 }}\n                                            style={{ fontSize: \"14pt\" }}\n                                            containerComponent={<VictoryContainer responsive={false} />}\n                                        >\n\n                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"transparent\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\n                                            <VictoryAxis dependentAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { labels: { fill: '#000000' } }, tickLabels: { fontSize: \"20px\", fill: '#000000', padding: 10, fontFamily: 'lato' } }} />\n                                            <VictoryBar\n                                                horizontal\n                                                barRatio={0.7}\n                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(2))}\n                                                data={[\n                                                    { key: \"Lowest 20%\", 'value': data_index['male'][\"low20\"]['deathsdailymean7R'] || 0 },\n                                                    { key: \"Q2\", 'value': data_index['male'][\"Q2\"]['deathsdailymean7R'] || 0 },\n                                                    { key: \"Q3\", 'value': data_index['male'][\"Q3\"]['deathsdailymean7R'] || 0 },\n                                                    { key: \"Q4\", 'value': data_index['male'][\"Q4\"]['deathsdailymean7R'] || 0 },\n                                                    { key: \"Highest 20%\", 'value': data_index['male'][\"high20\"]['deathsdailymean7R'] || 0 }\n                                                ]}\n                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"20px\", fill: \"#000000\" }} />}\n                                                style={{\n                                                    data: {\n                                                        fill: mortalityColor[1]\n                                                    }\n                                                }}\n                                                x=\"key\"\n                                                y=\"value\"\n                                            />\n                                        </VictoryChart>\n                                        <Header.Content style={{ fontWeight: 300, paddingBottom: 10, fontSize: \"14pt\", lineHeight: \"18pt\" }}>\n                                            <center>\n                                                <br />\n                                                <b>Average Daily COVID-19 Deaths per 100,000</b>\n                                            </center>\n                                        </Header.Content>\n                                    </Grid.Column>\n                                </Grid.Row>\n                            </Grid>\n                            <Grid>\n                                <Grid.Row columns={2} style={{ paddingBottom: 7 }}>\n                                    <Grid.Column>\n                                        <Header as='h2' style={{ fontSize: \"14pt\", lineHeight: \"16pt\", width: 450, paddingLeft: 132 }}>\n                                            <Header.Content style={{ fontSize: \"14pt\" }}>\n                                                <Header.Subheader style={{ color: '#000000', lineHeight: \"16pt\", width: 450, fontSize: \"14pt\", textAlign: 'justify' }}>\n                                                    This figure shows total cases of COVID-19 per 100,000 residents as of {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' : (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}.\n                      Case rates are shown by proportion of county residents who are male. Georgia counties were grouped into 5 categories based on the proportion of male residents.\n                      We can see that in counties with the highest proportion of male residents (highest 20%), the rate is <b>{(data_index['male'][\"high20\"]['casesdailymean7R']).toFixed(0)}</b> cases per 100,000.\n                      In counties with the lowest proportion of male residents (lowest 20%), the rate is <b>{(data_index['male'][\"low20\"]['casesdailymean7R']).toFixed(0)}</b> COVID-19 cases per 100,000.\n\t\t\t\t\t          </Header.Subheader>\n                                            </Header.Content>\n                                        </Header>\n                                    </Grid.Column>\n                                    <Grid.Column>\n                                        <Header as='h2' style={{ fontWeight: 400, width: 450, paddingLeft: 33 }}>\n                                            <Header.Content style={{ fontSize: \"14pt\" }}>\n                                                <Header.Subheader style={{ color: '#000000', lineHeight: \"16pt\", width: 450, fontSize: \"14pt\", textAlign: 'justify' }}>\n                                                    This figure shows total deaths of COVID-19 per 100,000 residents as of {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' : (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}.\n                      Death rates are shown by proportion of county residents who are male. Georgia counties were grouped into 5 categories based on the proportion of male residents.\n                      We can see that in counties with the highest proportion of male residents (highest 20%), the rate is <b>{(data_index['male'][\"high20\"]['deathsdailymean7R']).toFixed(1)}</b> deaths per 100,000.\n                      In counties with the lowest proportion of male residents (lowest 20%), the rate is <b>{(data_index['male'][\"low20\"]['deathsdailymean7R']).toFixed(1)}</b> COVID-19 deaths per 100,000.\n                    </Header.Subheader>\n                                            </Header.Content>\n                                        </Header>\n                                    </Grid.Column>\n                                </Grid.Row>\n                            </Grid>\n                            <center> <Divider id=\"urbanrural\" hidden style={{ paddingBottom: 50 }} /> </center>\n                            {/* urbanrural */}\n                            <Grid id='urbanrural' style={{ paddingLeft: \"7em\", paddingRight: \"7em\" }}>\n                                <Grid.Row columns={2} style={{ paddingTop: 11 }}>\n                                    <Grid.Column style={{ paddingTop: '1em', paddingBottom: 18 }}>\n                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"18pt\", lineHeight: \"16pt\" }}>\n                                            <Header.Content>\n                                                COVID-19 cases by Metropolitan Status\n            \t\t</Header.Content>\n                                        </Header>\n\n                                        <VictoryChart\n                                            theme={VictoryTheme.material}\n                                            width={500}\n                                            height={220}\n                                            domainPadding={20}\n                                            minDomain={{ y: props.ylog ? 1 : 0 }}\n                                            padding={{ left: 250, right: 30, top: 30, bottom: -5 }}\n                                            style={{ fontSize: \"13pt\" }}\n                                            containerComponent={<VictoryContainer responsive={false} />}\n                                        >\n                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\n                                            <VictoryAxis dependentAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, axis: { labels: { fill: '#000000' } }, tickLabels: { fontSize: \"20px\", fill: '#000000', padding: 10, fontFamily: 'lato' } }} />\n                                            <VictoryBar\n                                                horizontal\n                                                barRatio={0.7}\n                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(0))}\n                                                data={[\n                                                    { key: \"Large Central Metro\", 'value': data_index['urbanrural'][\"LargeCentralMetro\"]['casesdailymean7R'] || 0 },\n                                                    { key: \"Large Fringe Metro\", 'value': data_index['urbanrural'][\"LargeFringeMetro\"]['casesdailymean7R'] || 0 },\n                                                    { key: \"Medium Metro\", 'value': data_index['urbanrural'][\"MediumMetro\"]['casesdailymean7R'] || 0 },\n                                                    { key: \"Small Metro\", 'value': data_index['urbanrural'][\"SmallMetro\"]['casesdailymean7R'] || 0 },\n                                                    { key: \"Micropolitan (Nonmetro)\", 'value': data_index['urbanrural'][\"Micropolitan(Nonmetro)\"]['casesdailymean7R'] || 0 },\n                                                    { key: \"NonCore (Nonmetro)\", 'value': data_index['urbanrural'][\"NonCore(Nonmetro)\"]['casesdailymean7R'] || 0 }\n                                                ]}\n                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"20px\", fill: \"#000000\" }} />}\n                                                style={{\n                                                    data: {\n                                                        fill: casesColor[1]\n                                                    }\n                                                }}\n                                                x=\"key\"\n                                                y=\"value\"\n                                            />\n                                        </VictoryChart>\n\n                                        <Header.Content style={{ fontWeight: 300, paddingBottom: 10, fontSize: \"14pt\", lineHeight: \"18pt\" }}>\n                                            <center>\n\n                                                <br />\n                                                <b>Average Daily COVID-19 Cases per 100,000</b>\n                                            </center>\n                                        </Header.Content>\n                                    </Grid.Column>\n                                    <Grid.Column style={{ paddingTop: '1em', paddingBottom: 18 }}>\n                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"18pt\", lineHeight: \"18pt\" }}>\n                                            <Header.Content>\n                                                COVID-19 cases by Metropolitan Status\n                </Header.Content>\n                                        </Header>\n\n                                        <VictoryChart\n                                            theme={VictoryTheme.material}\n                                            width={500}\n                                            height={220}\n                                            domainPadding={20}\n                                            minDomain={{ y: props.ylog ? 1 : 0 }}\n                                            padding={{ left: 250, right: 40, top: 30, bottom: -5 }}\n                                            style={{ fontSize: \"13pt\" }}\n                                            containerComponent={<VictoryContainer responsive={false} />}\n                                        >\n                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\n                                            <VictoryAxis dependentAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, axis: { labels: { fill: '#000000' } }, tickLabels: { fontSize: \"20px\", fill: '#000000', padding: 10, fontFamily: 'lato' } }} />\n                                            <VictoryBar\n                                                horizontal\n                                                barRatio={0.7}\n                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(3))}\n                                                data={[\n                                                    { key: \"Large Central Metro\", 'value': data_index['urbanrural'][\"LargeCentralMetro\"]['deathsdailymean7R'] || 0 },\n                                                    { key: \"Large Fringe Metro\", 'value': data_index['urbanrural'][\"LargeFringeMetro\"]['deathsdailymean7R'] || 0 },\n                                                    { key: \"Medium Metro\", 'value': data_index['urbanrural'][\"MediumMetro\"]['deathsdailymean7R'] || 0 },\n                                                    { key: \"Small Metro\", 'value': data_index['urbanrural'][\"SmallMetro\"]['deathsdailymean7R'] || 0 },\n                                                    { key: \"Micropolitan (Nonmetro)\", 'value': data_index['urbanrural'][\"Micropolitan(Nonmetro)\"]['deathsdailymean7R'] || 0 },\n                                                    { key: \"NonCore (Nonmetro)\", 'value': data_index['urbanrural'][\"NonCore(Nonmetro)\"]['deathsdailymean7R'] || 0 }\n                                                ]}\n                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"18px\", fill: \"#000000\" }} />}\n                                                style={{\n                                                    data: {\n                                                        fill: mortalityColor[1]\n                                                    }\n                                                }}\n                                                x=\"key\"\n                                                y=\"value\"\n                                            />\n                                        </VictoryChart>\n\n\n                                        <Header.Content style={{ fontWeight: 300, paddingBottom: 10, fontSize: \"14pt\", lineHeight: \"18pt\" }}>\n                                            <center>\n\n                                                <br />\n                                                <b>Average Daily COVID-19 Deaths per 100,000</b>\n                                            </center>\n                                        </Header.Content>\n\n                                    </Grid.Column>\n                                </Grid.Row>\n                            </Grid>\n                            <Grid>\n                                <Grid.Row columns={2} style={{ paddingBottom: 7 }}>\n                                    <Grid.Column>\n                                        <Header as='h2' style={{ fontSize: \"14pt\", lineHeight: \"16pt\", width: 450, paddingLeft: 132 }}>\n                                            <Header.Content style={{ fontSize: \"14pt\" }}>\n                                                <Header.Subheader style={{ color: '#000000', lineHeight: \"16pt\", width: 450, fontSize: \"14pt\", textAlign: 'justify' }}>\n                                                    This figure shows total cases of COVID-19 per 100,000 residents as of {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' : (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}.\n                      Case rates are shown by proportion of county residents who live in different types of metropolitan areas. Georgia counties were grouped into 6 categories based on metropolitan status. We can see that in small metro areas,\n                      the rate is <b>{(data_index['urbanrural'][\"NonCore(Nonmetro)\"]['casesdailymean7R']).toFixed(0)}</b> cases per 100,000. In large central metros,\n                      the rate is <b>{(data_index['urbanrural'][\"LargeCentralMetro\"]['casesdailymean7R']).toFixed(0)}</b> COVID-19 cases per 100,000.\n\t\t\t\t\t          </Header.Subheader>\n                                            </Header.Content>\n                                        </Header>\n                                    </Grid.Column>\n                                    <Grid.Column>\n                                        <Header as='h2' style={{ fontWeight: 400, width: 450, paddingLeft: 33 }}>\n                                            <Header.Content style={{ fontSize: \"14pt\" }}>\n                                                <Header.Subheader style={{ color: '#000000', lineHeight: \"16pt\", width: 450, fontSize: \"14pt\", textAlign: 'justify' }}>\n                                                    This figure shows total deaths of COVID-19 per 100,000 residents as of {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' : (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}.\n                      Death rates are shown by proportion of county residents who live in different types of metropolitan areas. Georgia counties were grouped into 6 categories based on metropolitan status. We can see that in small metro areas,\n                      the rate is <b>{(data_index['urbanrural'][\"NonCore(Nonmetro)\"]['deathsdailymean7R']).toFixed(2)}</b> deaths per 100,000. In large central metros,\n                      the rate is <b>{(data_index['urbanrural'][\"LargeCentralMetro\"]['deathsdailymean7R']).toFixed(2)}</b> COVID-19 deaths per 100,000.\n                    </Header.Subheader>\n                                            </Header.Content>\n                                        </Header>\n                                    </Grid.Column>\n                                </Grid.Row>\n                            </Grid>\n\n                            <center> <Divider id=\"age\" hidden style={{ paddingBottom: 50 }} /> </center>\n                            {/* age */}\n                            <Grid id='age' style={{ paddingLeft: \"7em\", paddingRight: \"7em\" }}>\n                                <Grid.Row columns={2} style={{ paddingTop: 11 }}>\n                                    <Grid.Column style={{ paddingTop: '1em', paddingBottom: 18 }}>\n                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"18pt\", lineHeight: \"16pt\" }}>\n                                            <Header.Content>\n                                                COVID-19 cases by percentage of <br />population over the age 65 years\n            \t\t</Header.Content>\n                                        </Header>\n\n                                        <VictoryChart\n                                            theme={VictoryTheme.material}\n                                            width={500}\n                                            height={220}\n                                            domainPadding={20}\n                                            minDomain={{ y: props.ylog ? 1 : 0 }}\n                                            padding={{ left: 160, right: 30, top: 30, bottom: -5 }}\n                                            style={{ fontSize: \"14pt\" }}\n                                            containerComponent={<VictoryContainer responsive={false} />}\n                                        >\n                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\n                                            <VictoryAxis dependentAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, axis: { labels: { fill: '#000000' } }, tickLabels: { fontSize: \"20px\", fill: '#000000', padding: 10, fontFamily: 'lato' } }} />\n                                            <VictoryBar\n                                                horizontal\n                                                barRatio={0.7}\n                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(0))}\n                                                data={[\n                                                    { key: \"Lowest 20%\", 'value': data_index['age65over'][\"low20\"]['casesdailymean7R'] || 0 },\n                                                    { key: \"Q2\", 'value': data_index['age65over'][\"Q2\"]['casesdailymean7R'] || 0 },\n                                                    { key: \"Q3\", 'value': data_index['age65over'][\"Q3\"]['casesdailymean7R'] || 0 },\n                                                    { key: \"Q4\", 'value': data_index['age65over'][\"Q4\"]['casesdailymean7R'] || 0 },\n                                                    { key: \"Highest 20%\", 'value': data_index['age65over'][\"high20\"]['casesdailymean7R'] || 0 }\n                                                ]}\n                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"20px\", fill: \"#000000\" }} />}\n                                                style={{\n                                                    data: {\n                                                        fill: casesColor[1]\n                                                    }\n                                                }}\n                                                x=\"key\"\n                                                y=\"value\"\n                                            />\n                                        </VictoryChart>\n\n                                        <Header.Content style={{ fontWeight: 300, paddingBottom: 10, fontSize: \"14pt\", lineHeight: \"18pt\" }}>\n                                            <center>\n                                                <br />\n                                                <b>Average Daily COVID-19 Cases per 100,000</b>\n                                            </center>\n                                        </Header.Content>\n                                    </Grid.Column>\n                                    <Grid.Column style={{ paddingTop: '1em', paddingBottom: 18 }}>\n                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"18pt\", lineHeight: \"18pt\" }}>\n                                            <Header.Content>\n                                                COVID-19 deaths by percentage of <br />population over the age 65 years\n                </Header.Content>\n                                        </Header>\n\n                                        <VictoryChart\n                                            theme={VictoryTheme.material}\n                                            width={500}\n                                            height={220}\n                                            domainPadding={20}\n                                            minDomain={{ y: props.ylog ? 1 : 0 }}\n                                            padding={{ left: 160, right: 30, top: 30, bottom: -5 }}\n                                            style={{ fontSize: \"14pt\" }}\n                                            containerComponent={<VictoryContainer responsive={false} />}\n                                        >\n                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\n                                            <VictoryAxis dependentAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, axis: { labels: { fill: '#000000' } }, tickLabels: { fontSize: \"20px\", fill: '#000000', padding: 10, fontFamily: 'lato' } }} />\n                                            <VictoryBar\n                                                horizontal\n                                                barRatio={0.7}\n                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(2))}\n                                                data={[\n                                                    { key: \"Lowest 20%\", 'value': data_index['age65over'][\"low20\"]['deathsdailymean7R'] || 0 },\n                                                    { key: \"Q2\", 'value': data_index['age65over'][\"Q2\"]['deathsdailymean7R'] || 0 },\n                                                    { key: \"Q3\", 'value': data_index['age65over'][\"Q3\"]['deathsdailymean7R'] || 0 },\n                                                    { key: \"Q4\", 'value': data_index['age65over'][\"Q4\"]['deathsdailymean7R'] || 0 },\n                                                    { key: \"Highest 20%\", 'value': data_index['age65over'][\"high20\"]['deathsdailymean7R'] || 0 }\n                                                ]}\n                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"20px\", fill: \"#000000\" }} />}\n                                                style={{\n                                                    data: {\n                                                        fill: mortalityColor[1]\n                                                    }\n                                                }}\n                                                x=\"key\"\n                                                y=\"value\"\n                                            />\n                                        </VictoryChart>\n\n                                        <Header.Content style={{ fontWeight: 300, paddingBottom: 10, fontSize: \"14pt\", lineHeight: \"18pt\" }}>\n                                            <center>\n                                                <br />\n                                                <b>Average Daily COVID-19 Deaths per 100,000</b>\n                                            </center>\n                                        </Header.Content>\n\n                                    </Grid.Column>\n                                </Grid.Row>\n                            </Grid>\n                            <Grid>\n                                <Grid.Row columns={2} style={{ paddingBottom: 7 }}>\n                                    <Grid.Column>\n                                        <Header as='h2' style={{ fontSize: \"14pt\", lineHeight: \"16pt\", width: 450, paddingLeft: 132 }}>\n                                            <Header.Content style={{ fontSize: \"14pt\" }}>\n                                                <Header.Subheader style={{ color: '#000000', lineHeight: \"16pt\", width: 450, fontSize: \"14pt\", textAlign: 'justify' }}>\n                                                    This figure shows total cases of COVID-19 per 100,000 residents as of {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' : (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}.\n                      Case rates are shown by proportion of county residents who are over the age of 65. Georgia counties were grouped into 5 categories based on the proportion of\n                      over the age of 65 residents. We can see that in counties with the highest proportion of residents over the age of 65 years (highest 20%),\n                      the rate is <b>{(data_index['age65over'][\"high20\"]['casesdailymean7R']).toFixed(0)}</b> cases per 100,000. In counties with the lowest proportion of residents over the age of 65 years (lowest 20%),\n                      the rate is <b>{(data_index['age65over'][\"low20\"]['casesdailymean7R']).toFixed(0)}</b> COVID-19 cases per 100,000.\n\t\t\t\t\t          </Header.Subheader>\n                                            </Header.Content>\n                                        </Header>\n                                    </Grid.Column>\n                                    <Grid.Column>\n                                        <Header as='h2' style={{ fontWeight: 400, width: 450, paddingLeft: 33 }}>\n                                            <Header.Content style={{ fontSize: \"14pt\" }}>\n                                                <Header.Subheader style={{ color: '#000000', lineHeight: \"16pt\", width: 450, fontSize: \"14pt\", textAlign: 'justify' }}>\n                                                    This figure shows total deaths of COVID-19 per 100,000 residents as of {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' : (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}.\n                      Death rates are shown by proportion of county residents who are over the age of 65. Georgia counties were grouped into 5 categories based on the proportion of\n                      over the age of 65 residents. We can see that in counties with the highest proportion of residents over the age of 65 years (highest 20%),\n                      the rate is <b>{(data_index['age65over'][\"high20\"]['deathsdailymean7R']).toFixed(2)}</b> deaths per 100,000. In counties with the lowest proportion of residents over the age of 65 years (lowest 20%),\n                      the rate is <b>{(data_index['age65over'][\"low20\"]['deathsdailymean7R']).toFixed(2)}</b> COVID-19 deaths per 100,000.\n                    </Header.Subheader>\n                                            </Header.Content>\n                                        </Header>\n                                    </Grid.Column>\n                                </Grid.Row>\n                            </Grid>\n                            <center> <Divider id=\"black\" hidden style={{ paddingBottom: 50 }} /> </center>\n                            {/* black */}\n                            <Grid id='black' style={{ paddingLeft: \"7em\", paddingRight: \"7em\" }}>\n                                <Grid.Row columns={2} style={{ paddingTop: '2em' }}>\n                                    <Grid.Column style={{ paddingTop: 10, paddingBottom: 18 }}>\n                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"18pt\", lineHeight: \"16pt\" }}>\n                                            <Header.Content>\n                                                COVID-19 cases by percentage of <br />African American population\n            \t\t</Header.Content>\n                                        </Header>\n\n                                        <VictoryChart\n                                            theme={VictoryTheme.material}\n                                            width={500}\n                                            height={220}\n                                            domainPadding={20}\n                                            minDomain={{ y: props.ylog ? 1 : 0 }}\n                                            padding={{ left: 160, right: 30, top: 30, bottom: -5 }}\n                                            style={{ fontSize: \"14pt\" }}\n                                            containerComponent={<VictoryContainer responsive={false} />}\n                                        >\n                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"transparent\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\n                                            <VictoryAxis dependentAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { labels: { fill: '#000000' } }, tickLabels: { fontSize: \"20px\", fill: '#000000', padding: 10, fontFamily: 'lato' } }} />\n                                            <VictoryBar\n                                                horizontal\n                                                barRatio={0.7}\n                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(0))}\n                                                data={[\n                                                    { key: \"Lowest 20%\", 'value': data_index['black'][\"low20\"]['casesdailymean7R'] || 0 },\n                                                    { key: \"Q2\", 'value': data_index['black'][\"Q2\"]['casesdailymean7R'] || 0 },\n                                                    { key: \"Q3\", 'value': data_index['black'][\"Q3\"]['casesdailymean7R'] || 0 },\n                                                    { key: \"Q4\", 'value': data_index['black'][\"Q4\"]['casesdailymean7R'] || 0 },\n                                                    { key: \"Highest 20%\", 'value': data_index['black'][\"high20\"]['casesdailymean7R'] || 0 }\n                                                ]}\n                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"20px\", fill: \"#000000\" }} />}\n                                                style={{\n                                                    data: {\n                                                        fill: \"#487f84\"\n                                                    }\n                                                }}\n                                                x=\"key\"\n                                                y=\"value\"\n                                            />\n                                        </VictoryChart>\n\n                                        <Header.Content style={{ fontWeight: 300, paddingBottom: 10, fontSize: \"14pt\", lineHeight: \"18pt\" }}>\n                                            <center>\n                                                <br />\n                                                <b>Average Daily COVID-19 Cases per 100,000</b>\n                                            </center>\n                                        </Header.Content>\n\n                                    </Grid.Column>\n                                    <Grid.Column style={{ paddingTop: 10, paddingBottom: 18 }}>\n                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"18pt\", lineHeight: \"18pt\" }}>\n                                            <Header.Content>\n                                                COVID-19 deaths by percentage of <br />African American population\n                </Header.Content>\n                                        </Header>\n\n                                        <VictoryChart\n                                            theme={VictoryTheme.material}\n                                            width={500}\n                                            height={220}\n                                            domainPadding={20}\n                                            minDomain={{ y: props.ylog ? 1 : 0 }}\n                                            padding={{ left: 160, right: 30, top: 30, bottom: -5 }}\n                                            style={{ fontSize: \"14pt\" }}\n                                            containerComponent={<VictoryContainer responsive={false} />}\n                                        >\n                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"transparent\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\n                                            <VictoryAxis dependentAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { labels: { fill: '#000000' } }, tickLabels: { fontSize: \"20px\", fill: '#000000', padding: 10, fontFamily: 'lato' } }} />\n                                            <VictoryBar\n                                                horizontal\n                                                barRatio={0.7}\n                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(2))}\n                                                data={[\n                                                    { key: \"Lowest 20%\", 'value': data_index['black'][\"low20\"]['deathsdailymean7R'] || 0 },\n                                                    { key: \"Q2\", 'value': data_index['black'][\"Q2\"]['deathsdailymean7R'] || 0 },\n                                                    { key: \"Q3\", 'value': data_index['black'][\"Q3\"]['deathsdailymean7R'] || 0 },\n                                                    { key: \"Q4\", 'value': data_index['black'][\"Q4\"]['deathsdailymean7R'] || 0 },\n                                                    { key: \"Highest 20%\", 'value': data_index['black'][\"high20\"]['deathsdailymean7R'] || 0 }\n                                                ]}\n                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"20px\", fill: \"#000000\" }} />}\n                                                style={{\n                                                    data: {\n                                                        fill: mortalityColor[1]\n                                                    }\n                                                }}\n                                                x=\"key\"\n                                                y=\"value\"\n                                            />\n                                        </VictoryChart>\n\n\n                                        <Header.Content style={{ fontWeight: 300, paddingBottom: 10, fontSize: \"14pt\", lineHeight: \"18pt\" }}>\n                                            <center>\n                                                <br />\n                                                <b>Average Daily COVID-19 Deaths per 100,000</b>\n                                            </center>\n                                        </Header.Content>\n\n                                    </Grid.Column>\n                                </Grid.Row>\n                            </Grid>\n                            <Grid>\n                                <Grid.Row columns={2} style={{ paddingBottom: 7 }}>\n                                    <Grid.Column>\n                                        <Header as='h2' style={{ fontWeight: 400, width: 450, paddingLeft: 132 }}>\n                                            <Header.Content>\n                                                <Header.Subheader style={{ color: '#000000', width: 450, fontSize: \"14pt\", textAlign: 'justify', lineHeight: \"16pt\" }}>\n                                                    This figure shows total cases of COVID-19 per 100,000 residents as of {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' : (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}.\n                      Case rates are shown by proportion of county residents who are African American. Georgia counties were grouped into 5 categories based on the proportion of\n                      African American residents. We can see that in counties with the highest proportion of African American residents (highest 20%),\n                      the rate is <b>{(data_index['black'][\"high20\"]['casesdailymean7R']).toFixed(0)}</b> cases per 100,000. In counties with the lowest proportion of African American residents (lowest 20%),\n                      the rate is <b>{(data_index['black'][\"low20\"]['casesdailymean7R']).toFixed(0)}</b> COVID-19 cases per 100,000.\n\t\t\t\t\t          </Header.Subheader>\n                                            </Header.Content>\n                                        </Header>\n                                    </Grid.Column>\n                                    <Grid.Column>\n                                        <Header as='h2' style={{ fontWeight: 400, width: 450, paddingLeft: 33 }}>\n                                            <Header.Content>\n                                                <Header.Subheader style={{ color: '#000000', width: 450, fontSize: \"14pt\", textAlign: 'justify', lineHeight: \"16pt\" }}>\n                                                    This figure shows total deaths of COVID-19 per 100,000 residents as of {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' : (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}.\n                      Death rates are shown by proportion of county residents who are African American. Georgia counties were grouped into 5 categories based on the proportion of\n                      African American residents. We can see that in counties with the highest proportion of African American residents (highest 20%),\n                      the rate is <b>{(data_index['black'][\"high20\"]['deathsdailymean7R']).toFixed(2)}</b> deaths per 100,000. In counties with the lowest proportion of African American residents (lowest 20%),\n                      the rate is <b>{(data_index['black'][\"low20\"]['deathsdailymean7R']).toFixed(2)}</b> COVID-19 deaths per 100,000.\n                    </Header.Subheader>\n                                            </Header.Content>\n                                        </Header>\n                                    </Grid.Column>\n                                </Grid.Row>\n                            </Grid>\n                            <center> <Divider id=\"poverty\" hidden style={{ paddingBottom: 50 }} /> </center>\n\n                            {/* poverty */}\n                            <Grid id='poverty' style={{ paddingLeft: \"7em\", paddingRight: \"7em\" }}>\n                                <Grid.Row columns={2} style={{ paddingTop: '2em' }}>\n                                    <Grid.Column style={{ paddingTop: 10, paddingBottom: 18 }}>\n                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"18pt\", lineHeight: \"16pt\" }}>\n                                            <Header.Content>\n                                                COVID-19 cases by percentage of <br />population in poverty\n            \t\t</Header.Content>\n                                        </Header>\n                                        <VictoryChart\n                                            theme={VictoryTheme.material}\n                                            width={500}\n                                            height={220}\n                                            domainPadding={20}\n                                            minDomain={{ y: props.ylog ? 1 : 0 }}\n                                            padding={{ left: 160, right: 30, top: 30, bottom: -5 }}\n                                            style={{ fontSize: \"14pt\" }}\n                                            containerComponent={<VictoryContainer responsive={false} />}\n                                        >\n                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"transparent\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\n                                            <VictoryAxis dependentAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { labels: { fill: '#000000' } }, tickLabels: { fontSize: \"20px\", fill: '#000000', padding: 10, fontFamily: 'lato' } }} />\n                                            <VictoryBar\n                                                horizontal\n                                                barRatio={0.7}\n                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(0))}\n                                                data={[\n                                                    { key: \"Lowest 20%\", 'value': data_index['poverty'][\"low20\"]['casesdailymean7R'] || 0 },\n                                                    { key: \"Q2\", 'value': data_index['poverty'][\"Q2\"]['casesdailymean7R'] || 0 },\n                                                    { key: \"Q3\", 'value': data_index['poverty'][\"Q3\"]['casesdailymean7R'] || 0 },\n                                                    { key: \"Q4\", 'value': data_index['poverty'][\"Q4\"]['casesdailymean7R'] || 0 },\n                                                    { key: \"Highest 20%\", 'value': data_index['poverty'][\"high20\"]['casesdailymean7R'] || 0 }\n                                                ]}\n                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"20px\", fill: \"#000000\" }} />}\n                                                style={{\n                                                    data: {\n                                                        fill: \"#487f84\"\n                                                    }\n                                                }}\n                                                x=\"key\"\n                                                y=\"value\"\n                                            />\n                                        </VictoryChart>\n\n                                        <Header.Content style={{ fontWeight: 300, paddingBottom: 10, fontSize: \"14pt\", lineHeight: \"18pt\" }}>\n                                            <center>\n                                                <br />\n                                                <b>Average Daily COVID-19 Cases per 100,000</b>\n                                            </center>\n                                        </Header.Content>\n\n                                    </Grid.Column>\n                                    <Grid.Column style={{ paddingTop: 10, paddingBottom: 18 }}>\n                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"18pt\", lineHeight: \"18pt\" }}>\n                                            <Header.Content>\n                                                COVID-19 deaths by percentage of <br />population in poverty\n                </Header.Content>\n                                        </Header>\n                                        <VictoryChart\n                                            theme={VictoryTheme.material}\n                                            width={500}\n                                            height={220}\n                                            domainPadding={20}\n                                            minDomain={{ y: props.ylog ? 1 : 0 }}\n                                            padding={{ left: 160, right: 30, top: 30, bottom: -5 }}\n                                            style={{ fontSize: \"14pt\" }}\n                                            containerComponent={<VictoryContainer responsive={false} />}\n                                        >\n                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"transparent\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\n                                            <VictoryAxis dependentAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { labels: { fill: '#000000' } }, tickLabels: { fontSize: \"20px\", fill: '#000000', padding: 10, fontFamily: 'lato' } }} />\n                                            <VictoryBar\n                                                horizontal\n                                                barRatio={0.7}\n                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(2))}\n                                                data={[\n                                                    { key: \"Lowest 20%\", 'value': data_index['poverty'][\"low20\"]['deathsdailymean7R'] || 0 },\n                                                    { key: \"Q2\", 'value': data_index['poverty'][\"Q2\"]['deathsdailymean7R'] || 0 },\n                                                    { key: \"Q3\", 'value': data_index['poverty'][\"Q3\"]['deathsdailymean7R'] || 0 },\n                                                    { key: \"Q4\", 'value': data_index['poverty'][\"Q4\"]['deathsdailymean7R'] || 0 },\n                                                    { key: \"Highest 20%\", 'value': data_index['poverty'][\"high20\"]['deathsdailymean7R'] || 0 }\n                                                ]}\n                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"20px\", fill: \"#000000\" }} />}\n                                                style={{\n                                                    data: {\n                                                        fill: mortalityColor[1]\n                                                    }\n                                                }}\n                                                x=\"key\"\n                                                y=\"value\"\n                                            />\n                                        </VictoryChart>\n\n                                        <Header.Content style={{ fontWeight: 300, paddingBottom: 10, fontSize: \"14pt\", lineHeight: \"18pt\" }}>\n                                            <center>\n                                                <br />\n                                                <b>Average Daily COVID-19 Deaths per 100,000</b>\n                                            </center>\n                                        </Header.Content>\n\n                                    </Grid.Column>\n                                </Grid.Row>\n                            </Grid>\n                            <Grid>\n                                <Grid.Row columns={2} style={{ paddingBottom: 7 }}>\n                                    <Grid.Column>\n                                        <Header as='h2' style={{ fontWeight: 400, width: 450, paddingLeft: 132 }}>\n                                            <Header.Content>\n                                                <Header.Subheader style={{ color: '#000000', width: 450, fontSize: \"14pt\", textAlign: 'justify', lineHeight: \"16pt\" }}>\n                                                    This figure shows total cases of COVID-19 per 100,000 residents as of {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' : (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}.\n                      Case rates are shown by proportion of county residents who are below the federal poverty line. Georgia counties were grouped into 5 categories based on the proportion of\n                      residents in poverty. We can see that in counties with the highest proportion of residents in poverty (highest 20%),\n                      the rate is <b>{(data_index['poverty'][\"high20\"]['casesdailymean7R']).toFixed(0)}</b> cases per 100,000. In counties with the lowest proportion of residents in poverty (lowest 20%),\n                       the rate is <b>{(data_index['poverty'][\"low20\"]['casesdailymean7R']).toFixed(0)}</b> COVID-19 cases per 100,000.\n\t\t\t\t\t          </Header.Subheader>\n                                            </Header.Content>\n                                        </Header>\n                                    </Grid.Column>\n                                    <Grid.Column>\n                                        <Header as='h2' style={{ fontWeight: 400, width: 450, paddingLeft: 33 }}>\n                                            <Header.Content>\n                                                <Header.Subheader style={{ color: '#000000', width: 450, fontSize: \"14pt\", textAlign: 'justify', lineHeight: \"16pt\" }}>\n                                                    This figure shows total deaths of COVID-19 per 100,000 residents as of {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' : (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}.\n                      Death rates are shown by proportion of county residents who are below the federal poverty line. Georgia counties were grouped into 5 categories based on the proportion of\n                      residents in poverty. We can see that in counties with the highest proportion of residents in poverty (highest 20%),\n                      the rate is <b>{(data_index['poverty'][\"high20\"]['deathsdailymean7R']).toFixed(2)}</b> deaths per 100,000. In counties with the lowest proportion of residents in poverty (lowest 20%),\n                       the rate is <b>{(data_index['poverty'][\"low20\"]['deathsdailymean7R']).toFixed(2)}</b> COVID-19 deaths per 100,000.\n                    </Header.Subheader>\n                                            </Header.Content>\n                                        </Header>\n                                    </Grid.Column>\n                                </Grid.Row>\n                            </Grid>\n                            <center> <Divider id=\"diabetes\" hidden style={{ paddingBottom: 50 }} /> </center>\n\n                            {/* diabetes */}\n                            <Grid id='diabetes' style={{ paddingLeft: \"7em\", paddingRight: \"7em\" }}>\n                                <Grid.Row columns={2} style={{ paddingTop: '2em' }}>\n                                    <Grid.Column style={{ paddingTop: 10, paddingBottom: 18 }}>\n                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"18pt\", lineHeight: \"18pt\" }}>\n                                            <Header.Content>\n                                                COVID-19 cases by percentage of <br />population with diabetes\n            \t\t</Header.Content>\n                                        </Header>\n                                        <VictoryChart\n                                            theme={VictoryTheme.material}\n                                            width={500}\n                                            height={220}\n                                            domainPadding={20}\n                                            minDomain={{ y: props.ylog ? 1 : 0 }}\n                                            padding={{ left: 160, right: 30, top: 30, bottom: -5 }}\n                                            style={{ fontSize: \"14pt\" }}\n                                            containerComponent={<VictoryContainer responsive={false} />}\n                                        >\n                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"transparent\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\n                                            <VictoryAxis dependentAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { labels: { fill: '#000000' } }, tickLabels: { fontSize: \"20px\", fill: '#000000', padding: 10, fontFamily: 'lato' } }} />\n                                            <VictoryBar\n                                                horizontal\n                                                barRatio={0.7}\n                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(0))}\n                                                data={[\n                                                    { key: \"Lowest 20%\", 'value': data_index['diabetes'][\"low20\"]['casesdailymean7R'] || 0 },\n                                                    { key: \"Q2\", 'value': data_index['diabetes'][\"Q2\"]['casesdailymean7R'] || 0 },\n                                                    { key: \"Q3\", 'value': data_index['diabetes'][\"Q3\"]['casesdailymean7R'] || 0 },\n                                                    { key: \"Q4\", 'value': data_index['diabetes'][\"Q4\"]['casesdailymean7R'] || 0 },\n                                                    { key: \"Highest 20%\", 'value': data_index['diabetes'][\"high20\"]['casesdailymean7R'] || 0 }\n                                                ]}\n                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"20px\", fill: \"#000000\" }} />}\n                                                style={{\n                                                    data: {\n                                                        fill: \"#487f84\"\n                                                    }\n                                                }}\n                                                x=\"key\"\n                                                y=\"value\"\n                                            />\n                                        </VictoryChart>\n\n                                        <Header.Content style={{ fontWeight: 300, paddingBottom: 10, fontSize: \"14pt\", lineHeight: \"18pt\" }}>\n                                            <center>\n                                                <br />\n                                                <b>Average Daily COVID-19 Cases per 100,000</b>\n                                            </center>\n                                        </Header.Content>\n\n                                    </Grid.Column>\n                                    <Grid.Column style={{ paddingTop: 10, paddingBottom: 18 }}>\n                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"18pt\", lineHeight: \"18pt\" }}>\n                                            <Header.Content>\n                                                COVID-19 deaths by percentage of <br />population with diabetes\n                </Header.Content>\n                                        </Header>\n                                        <VictoryChart\n                                            theme={VictoryTheme.material}\n                                            width={500}\n                                            height={220}\n                                            domainPadding={20}\n                                            minDomain={{ y: props.ylog ? 1 : 0 }}\n                                            padding={{ left: 160, right: 30, top: 30, bottom: -5 }}\n                                            style={{ fontSize: \"14pt\" }}\n                                            containerComponent={<VictoryContainer responsive={false} />}\n                                        >\n                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"transparent\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\n                                            <VictoryAxis dependentAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { labels: { fill: '#000000' } }, tickLabels: { fontSize: \"20px\", fill: '#000000', padding: 10, fontFamily: 'lato' } }} />\n                                            <VictoryBar\n                                                horizontal\n                                                barRatio={0.7}\n                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(2))}\n                                                data={[\n                                                    { key: \"Lowest 20%\", 'value': data_index['diabetes'][\"low20\"]['deathsdailymean7R'] || 0 },\n                                                    { key: \"Q2\", 'value': data_index['diabetes'][\"Q2\"]['deathsdailymean7R'] || 0 },\n                                                    { key: \"Q3\", 'value': data_index['diabetes'][\"Q3\"]['deathsdailymean7R'] || 0 },\n                                                    { key: \"Q4\", 'value': data_index['diabetes'][\"Q4\"]['deathsdailymean7R'] || 0 },\n                                                    { key: \"Highest 20%\", 'value': data_index['diabetes'][\"high20\"]['deathsdailymean7R'] || 0 }\n                                                ]}\n                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"20px\", fill: \"#000000\" }} />}\n                                                style={{\n                                                    data: {\n                                                        fill: mortalityColor[1]\n                                                    }\n                                                }}\n                                                x=\"key\"\n                                                y=\"value\"\n                                            />\n                                        </VictoryChart>\n\n                                        <Header.Content style={{ fontWeight: 300, paddingBottom: 10, fontSize: \"14pt\", lineHeight: \"18pt\" }}>\n                                            <center>\n                                                <br />\n                                                <b>Average Daily COVID-19 Deaths per 100,000</b>\n                                            </center>\n                                        </Header.Content>\n\n                                    </Grid.Column>\n                                </Grid.Row>\n                            </Grid>\n                            <Grid>\n                                <Grid.Row columns={2} style={{ paddingBottom: 7 }}>\n                                    <Grid.Column>\n                                        <Header as='h2' style={{ fontWeight: 400, width: 450, paddingLeft: 132 }}>\n                                            <Header.Content>\n                                                <Header.Subheader style={{ color: '#000000', width: 450, fontSize: \"14pt\", textAlign: 'justify', lineHeight: \"16pt\" }}>\n                                                    This figure shows total cases of COVID-19 per 100,000 residents as of {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' : (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}.\n                      Case rates are shown by proportion of county residents who have diabetes. Georgia counties were grouped into 5 categories based on the proportion of\n                      residents with diabetes. We can see that in counties with the highest proportion of residents with diabetes (highest 20%),\n                      the rate is <b>{(data_index['diabetes'][\"high20\"]['casesdailymean7R']).toFixed(0)}</b> cases per 100,000. In counties with the lowest proportion of residents with diabetes (lowest 20%),\n                      the rate is <b>{(data_index['diabetes'][\"low20\"]['casesdailymean7R']).toFixed(0)}</b> COVID-19 cases per 100,000\n\t\t\t\t\t          </Header.Subheader>\n                                            </Header.Content>\n                                        </Header>\n                                    </Grid.Column>\n                                    <Grid.Column>\n                                        <Header as='h2' style={{ fontWeight: 400, width: 450, paddingLeft: 33 }}>\n                                            <Header.Content>\n                                                <Header.Subheader style={{ color: '#000000', width: 450, fontSize: \"14pt\", textAlign: 'justify', lineHeight: \"16pt\" }}>\n                                                    This figure shows total deaths of COVID-19 per 100,000 residents as of {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' : (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}.\n                      Death rates are shown by proportion of county residents who have diabetes. Georgia counties were grouped into 5 categories based on the proportion of\n                      residents with diabetes. We can see that in counties with the highest proportion of residents with diabetes (highest 20%),\n                      the rate is <b>{(data_index['diabetes'][\"high20\"]['deathsdailymean7R']).toFixed(2)}</b> deaths per 100,000. In counties with the lowest proportion of residents with diabetes (lowest 20%),\n                      the rate is <b>{(data_index['diabetes'][\"low20\"]['deathsdailymean7R']).toFixed(2)}</b> COVID-19 deaths per 100,000\n                    </Header.Subheader>\n                                            </Header.Content>\n                                        </Header>\n                                    </Grid.Column>\n                                </Grid.Row>\n                            </Grid>\n                            <center> <Divider id=\"hispanic\" hidden style={{ paddingBottom: 50 }} /> </center>\n\n                            {/* Hispanic */}\n                            <Grid id='hispanic' style={{ paddingLeft: \"7em\", paddingRight: \"7em\" }}>\n                                <Grid.Row columns={2} style={{ paddingTop: '2em' }}>\n                                    <Grid.Column style={{ paddingTop: 10, paddingBottom: 18 }}>\n                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"18pt\", lineHeight: \"18pt\" }}>\n                                            <Header.Content>\n                                                COVID-19 cases by percentage of <br /> Hispanic population\n            \t\t</Header.Content>\n                                        </Header>\n\n                                        <VictoryChart\n                                            theme={VictoryTheme.material}\n                                            width={500}\n                                            height={220}\n                                            domainPadding={20}\n                                            minDomain={{ y: props.ylog ? 1 : 0 }}\n                                            padding={{ left: 160, right: 30, top: 30, bottom: -5 }}\n                                            style={{ fontSize: \"14pt\" }}\n                                            containerComponent={<VictoryContainer responsive={false} />}\n                                        >\n                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"transparent\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\n                                            <VictoryAxis dependentAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { labels: { fill: '#000000' } }, tickLabels: { fontSize: \"20px\", fill: '#000000', padding: 10, fontFamily: 'lato' } }} />\n                                            <VictoryBar\n                                                horizontal\n                                                barRatio={0.7}\n                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(0))}\n                                                data={[\n                                                    { key: \"Lowest 20%\", 'value': data_index['hispanic'][\"low20\"]['casesdailymean7R'] || 0 },\n                                                    { key: \"Q2\", 'value': data_index['hispanic'][\"Q2\"]['casesdailymean7R'] || 0 },\n                                                    { key: \"Q3\", 'value': data_index['hispanic'][\"Q3\"]['casesdailymean7R'] || 0 },\n                                                    { key: \"Q4\", 'value': data_index['hispanic'][\"Q4\"]['casesdailymean7R'] || 0 },\n                                                    { key: \"Highest 20%\", 'value': data_index['hispanic'][\"high20\"]['casesdailymean7R'] || 0 }\n                                                ]}\n                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"20px\", fill: \"#000000\" }} />}\n                                                style={{\n                                                    data: {\n                                                        fill: \"#487f84\"\n                                                    }\n                                                }}\n                                                x=\"key\"\n                                                y=\"value\"\n                                            />\n                                        </VictoryChart>\n\n                                        <Header.Content style={{ fontWeight: 300, paddingBottom: 10, fontSize: \"14pt\", lineHeight: \"18pt\" }}>\n                                            <center>\n                                                <br />\n                                                <b>Average Daily COVID-19 Deaths per 100,000</b>\n                                            </center>\n                                        </Header.Content>\n\n                                    </Grid.Column>\n                                    <Grid.Column style={{ paddingTop: 10, paddingBottom: 18 }}>\n                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"18pt\", lineHeight: \"18pt\" }}>\n                                            <Header.Content>\n                                                COVID-19 deaths by percentage of <br /> Hispanic population\n                </Header.Content>\n                                        </Header>\n\n                                        <VictoryChart\n                                            theme={VictoryTheme.material}\n                                            width={500}\n                                            height={220}\n                                            domainPadding={20}\n                                            minDomain={{ y: props.ylog ? 1 : 0 }}\n                                            padding={{ left: 160, right: 30, top: 30, bottom: -5 }}\n                                            style={{ fontSize: \"14pt\" }}\n                                            containerComponent={<VictoryContainer responsive={false} />}\n                                        >\n                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"transparent\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\n                                            <VictoryAxis dependentAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { labels: { fill: '#000000' } }, tickLabels: { fontSize: \"20px\", fill: '#000000', padding: 10, fontFamily: 'lato' } }} />\n                                            <VictoryBar\n                                                horizontal\n                                                barRatio={0.7}\n                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(3))}\n                                                data={[\n                                                    { key: \"Lowest 20%\", 'value': data_index['hispanic'][\"low20\"]['deathsdailymean7R'] || 0 },\n                                                    { key: \"Q2\", 'value': data_index['hispanic'][\"Q2\"]['deathsdailymean7R'] || 0 },\n                                                    { key: \"Q3\", 'value': data_index['hispanic'][\"Q3\"]['deathsdailymean7R'] || 0 },\n                                                    { key: \"Q4\", 'value': data_index['hispanic'][\"Q4\"]['deathsdailymean7R'] || 0 },\n                                                    { key: \"Highest 20%\", 'value': data_index['hispanic'][\"high20\"]['deathsdailymean7R'] || 0 }\n                                                ]}\n                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"18px\", fill: \"#000000\" }} />}\n                                                style={{\n                                                    data: {\n                                                        fill: mortalityColor[1]\n                                                    }\n                                                }}\n                                                x=\"key\"\n                                                y=\"value\"\n                                            />\n                                        </VictoryChart>\n\n                                        <Header.Content style={{ fontWeight: 300, paddingBottom: 10, fontSize: \"14pt\", lineHeight: \"18pt\" }}>\n                                            <center>\n                                                <br />\n                                                <b>Average Daily COVID-19 Deaths per 100,000</b>\n                                            </center>\n                                        </Header.Content>\n\n                                    </Grid.Column>\n                                </Grid.Row>\n                            </Grid>\n                            <Grid>\n                                <Grid.Row columns={2} style={{ paddingBottom: 7 }}>\n                                    <Grid.Column>\n                                        <Header as='h2' style={{ fontWeight: 400, width: 450, paddingLeft: 132 }}>\n                                            <Header.Content>\n                                                <Header.Subheader style={{ color: '#000000', width: 450, fontSize: \"14pt\", textAlign: 'justify', lineHeight: \"16pt\" }}>\n                                                    This figure shows total deaths of COVID-19 per 100,000 residents as of {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' : (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}.\n                      Case rates are shown by proportion of county residents who are Hispanic. Georgia counties were grouped into 5 categories based on the proportion of\n                      Hispanic residents. We can see that in counties with the highest proportion of Hispanic residents (highest 20%),\n                      the rate is <b>{(data_index['hispanic'][\"high20\"]['deathsdailymean7R']).toFixed(2)}</b> deaths per 100,000. In counties with the lowest proportion of Hispanic residents (lowest 20%),\n                      the rate is <b>{(data_index['hispanic'][\"low20\"]['deathsdailymean7R']).toFixed(2)}</b> COVID-19 deaths per 100,000.\n                    </Header.Subheader>\n                                            </Header.Content>\n                                        </Header>\n                                    </Grid.Column>\n                                    <Grid.Column>\n                                        <Header as='h2' style={{ fontWeight: 400, width: 450, paddingLeft: 33 }}>\n                                            <Header.Content>\n                                                <Header.Subheader style={{ color: '#000000', width: 450, fontSize: \"14pt\", textAlign: 'justify', lineHeight: \"16pt\" }}>\n                                                    This figure shows total deaths of COVID-19 per 100,000 residents as of {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' : (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}.\n                      Death rates are shown by proportion of county residents who are Hispanic. Georgia counties were grouped into 5 categories based on the proportion of\n                      Hispanic residents. We can see that in counties with the highest proportion of Hispanic residents (highest 20%),\n                      the rate is <b>{(data_index['hispanic'][\"high20\"]['deathsdailymean7R']).toFixed(2)}</b> deaths per 100,000. In counties with the lowest proportion of Hispanic residents (lowest 20%),\n                      the rate is <b>{(data_index['hispanic'][\"low20\"]['deathsdailymean7R']).toFixed(2)}</b> COVID-19 deaths per 100,000.\n                    </Header.Subheader>\n                                            </Header.Content>\n                                        </Header>\n                                    </Grid.Column>\n                                </Grid.Row>\n                            </Grid>\n\n\n\n\n\n\n\n\n                        </div>\n                    }\n                    <Notes />\n                </Container>\n                <ReactTooltip id='cvi'>{tooltipContentcvi}</ReactTooltip>\n                <ReactTooltip id='si'>{tooltipContentsi}</ReactTooltip>\n                <ReactTooltip id='ga'> <font size=\"+2\"><b >{countyName}</b> </font> <br />\n                    <b>Total Cases</b>: {data[stateFips + countyFips]['casescum'] >= 0 ? data[stateFips + countyFips]['casescum'].toFixed(0) : \"N/A\"} <br />\n                    <b>Total Deaths</b>: {data[stateFips + countyFips]['deathscum'] >= 0 ? data[stateFips + countyFips]['deathscum'].toFixed(0) : \"N/A\"} <br />\n                    <b>Total case per 100k</b>: {data[stateFips + countyFips]['casescumR'] >= 0 ? data[stateFips + countyFips]['casescumR'].toFixed(0) : \"N/A\"} <br />\n                    <b>Total Deaths per 100k</b>: {data[stateFips + countyFips]['deathscumR'] >= 0 ? data[stateFips + countyFips]['deathscumR'].toFixed(0) : 'N/A'} <br />\n                    <b>Last 14-day Cases per 100k</b>: {data[stateFips + countyFips]['casescum14dayR'] >= 0 ? data[stateFips + countyFips]['casescum14dayR'].toFixed(0) : \"N/A\"} <br />\n                    <b>Click to see county-level data.</b> </ReactTooltip>\n            </div>\n        );\n    } else {\n        return <Loader active inline='centered' />\n    }\n\n\n\n\n}","import React, { useEffect, useState } from 'react'\nimport { Container, Grid, Breadcrumb, Header, Loader, List, Table, Divider, Popup } from 'semantic-ui-react'\nimport AppBar from './AppBar';\nimport Geographies from './Geographies';\nimport Geography from './Geography';\nimport ComposableMap from './ComposableMap';\nimport {\n  VictoryChart,\n  VictoryTooltip,\n  VictoryVoronoiContainer,\n  VictoryContainer,\n  VictoryGroup,\n  VictoryBar,\n  VictoryTheme,\n  VictoryAxis,\n  VictoryLegend,\n  VictoryLine,\n  VictoryLabel,\n  VictoryScatter,\n  VictoryPie\n} from 'victory';\n\nimport { useParams, useHistory } from 'react-router-dom';\nimport Notes from './Notes';\nimport ReactTooltip from \"react-tooltip\";\nimport fips2county from './fips2county.json'\nimport configs from \"./state_config.json\";\nimport configscounty from \"./county_config.json\";\nimport _ from 'lodash';\nimport * as d3 from 'd3-geo'\nimport Chart from \"react-google-charts\";\nimport { scaleQuantile, scaleQuantize } from \"d3-scale\";\n\nconst countyColor = '#f2a900';\nconst stateColor = '#bdbfc1';\nconst nationColor = '#d9d9d7';\nconst colorPalette = [\n  \"#e1dce2\",\n  \"#d3b6cd\",\n  \"#bf88b5\",\n  \"#af5194\",\n  \"#99528c\",\n  \"#633c70\",\n];\n\n\nfunction ScatterChart(props) {\n\n  return (\n    <VictoryChart\n      width={400}\n      height={300}\n      scale={{ x: props.xlog ? 'log' : 'linear', y: props.ylog ? 'log' : 'linear' }}\n      minDomain={{ y: props.ylog ? 1 : 0 }}\n      padding={{ left: 80, right: 10, top: 50, bottom: 50 }}>\n      {props.showLegend && <VictoryLegend\n        x={10} y={10}\n        orientation=\"horizontal\"\n        colorScale={[stateColor, countyColor]}\n        data={[\n          { name: ('Other counties in ' + props.stateName) }, { name: props.countyName }\n        ]}\n      />}\n      <VictoryScatter\n        data={_.filter(_.map(props.data, (d, k) => { d.fips = k; return d; }), (d) => (\n          d.fips.length === 5 &&\n          d.fips.substring(0, 2) === props.stateFips &&\n          d[props.x] && d[props.y]))}\n        sortKey={(d) => d.fips === (props.stateFips + props.countyFips)}\n        style={{\n          data: {\n            fill: ({ datum }) => datum.fips === (props.stateFips + props.countyFips) ? countyColor : stateColor,\n            fillOpacity: ({ datum }) => datum.fips === (props.stateFips + props.countyFips) ? 1.0 : 0.7\n          }\n        }}\n        size={4}\n        x={props.x}\n        y={props.y}\n      />\n      <VictoryAxis label={props.varMap[props.x] ? props.varMap[props.x].name : props.x}\n        tickCount={4}\n        tickFormat={(y) => (props.rescaleX ? (Math.round(y / 1000) + 'k') : (Math.round(y * 100) / 100))} />\n      <VictoryAxis dependentAxis label={props.varMap[props.y] ? props.varMap[props.y].name : props.y}\n        style={{ axisLabel: { padding: 40 } }}\n        tickCount={5}\n        tickFormat={(y) => (Math.round(y * 100) / 100)} />\n    </VictoryChart>);\n\n}\n\nfunction numberWithCommas(x) {\n  x = x.toString();\n  var pattern = /(-?\\d+)(\\d{3})/;\n  while (pattern.test(x))\n    x = x.replace(pattern, \"$1,$2\");\n  return x;\n}\n\nfunction BarChart(props) {\n  const colors = {\n    \"1\": '#024174',\n    '2': 'grey'\n  };\n  if (props.var_num === 4) {\n    return (\n      <VictoryChart\n        theme={VictoryTheme.material}\n        width={props.width || 650}\n        height={300}\n        domainPadding={props.pad || 10}\n        scale={{ y: props.ylog ? 'log' : 'linear' }}\n        minDomain={{ y: props.ylog ? 1 : 0 }}\n        padding={{ left: 79, right: 40, top: 60, bottom: 50 }}\n        containerComponent={<VictoryContainer responsive={false} />}\n      >\n        <VictoryLabel style={{\n          fontSize: 20, paddingBottom: '0.5em'\n        }} text={props.title} x={(props.width || 560) / 2} y={20} textAnchor=\"middle\" />\n        <VictoryAxis style={{\n          tickLabels: { fontSize: 18, padding: 2 }\n        }} />\n        <VictoryAxis dependentAxis style={{\n          tickLabels: { fontSize: 18, padding: 2 }\n        }}\n          tickFormat={(y) => (y < 1 ? y*100 : (y / 1000 + 'k'))} />\n          <VictoryLegend x={100} y={40}\n          orientation=\"horizontal\"\n          gutter={20}\n          // style={{ border: { stroke: \"black\" } }}\n          data={[\n            { name:  `${props.cate} Percent`, symbol: { fill: colors['1'], type: \"square\" } },\n            { name: \"Population Percent\", symbol: { fill: colors['2'], type: \"square\" }},\n          ]}\n        />\n        <VictoryGroup offset={20}\n          colorScale={\"qualitative\"}\n        >\n          \n          <VictoryBar\n            alignment=\"start\"\n            barWidth={20}\n            // labels={({ datum }) => (Math.round(datum.value * 100) / 100)}\n            labels={({ datum }) => `${props.cate} Percent: ${numberWithCommas(parseFloat(datum.value).toFixed(2)*100)}%`}\n            data={[{ key: props.keyv[0], 'value': props.data[props.stateFips + props.countyFips][props.var[0]] || 0, 'colors': '1' },\n            { key: props.keyv[1], 'value': props.data[props.stateFips + props.countyFips][props.var[1]] || 0, 'colors': '1' },\n            { key: props.keyv[2], 'value': props.data[props.stateFips + props.countyFips][props.var[2]] || 0, 'colors': '1' },\n            { key: props.keyv[3], 'value': props.data[props.stateFips + props.countyFips][props.var[3]] || 0, 'colors': '1' }]}\n            labelComponent={<VictoryTooltip\n              orientation=\"top\"\n              style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'black' }}\n              constrainToVisibleArea\n              labelComponent={<VictoryLabel dx={-60} textAnchor='start' />}\n              flyoutStyle={{ fill: colors['1'], fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\n            />}\n            style={{\n              data: {\n                fill: ({ datum }) => colors[datum.colors],\n                fillOpacity: 2\n              }\n            }}\n            x=\"key\"\n            y=\"value\"\n          />\n          <VictoryBar\n            alignment=\"start\"\n            barWidth={20}\n            data={[{ key: props.keyv[0], 'value': props.data[props.stateFips + props.countyFips][props.var1[0]] || 0, 'colors': '2' },\n            { key: props.keyv[1], 'value': props.data[props.stateFips + props.countyFips][props.var1[1]] || 0, 'colors': '2' },\n            { key: props.keyv[2], 'value': props.data[props.stateFips + props.countyFips][props.var1[2]] || 0, 'colors': '2' },\n            { key: props.keyv[3], 'value': props.data[props.stateFips + props.countyFips][props.var1[3]] || 0, 'colors': '2' }]}\n            labels={({ datum }) =>\n              `Population Percent: ${numberWithCommas(parseFloat(datum.value).toFixed(2)*100)}%`\n            }\n            labelComponent={<VictoryTooltip\n              orientation=\"top\"\n              style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'black' }}\n              constrainToVisibleArea\n              // labelComponent={<VictoryLabel dx={-50} textAnchor='start' />}\n              flyoutStyle={{ fill: \"grey\", fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\n            />}\n            style={{\n              data: {\n                fill: ({ datum }) => colors[datum.colors],\n                fillOpacity: 0.7\n              }\n            }}\n            x=\"key\"\n            y=\"value\"\n          />\n        </VictoryGroup>\n      </VictoryChart>);\n  }\n  else {\n    return (\n      <VictoryChart\n        theme={VictoryTheme.material}\n        width={props.width || 650}\n        height={300}\n        domainPadding={props.pad || 100}\n        scale={{ y: props.ylog ? 'log' : 'linear' }}\n        minDomain={{ y: props.ylog ? 1 : 0 }}\n        padding={{ left: 79, right: 40, top: 60, bottom: 50 }}\n        containerComponent={<VictoryContainer responsive={false} />}\n      >\n        <VictoryLabel style={{\n          fontSize: 20, paddingBottom: '5em'\n        }} text={props.title} x={(props.width || 560) / 2} y={20} textAnchor=\"middle\" />\n        <VictoryAxis style={{\n          tickLabels: { fontSize: 18, padding: 2 }\n        }} />\n        <VictoryAxis dependentAxis style={{\n          tickLabels: { fontSize: 18, padding: 2 }\n        }}\n          tickFormat={(y) => (y < 1 ? y*100  : (y / 1000 + 'k'))} />\n        <VictoryLegend x={100} y={40}\n          orientation=\"horizontal\"\n          gutter={20}\n          // style={{ border: { stroke: \"black\" } }}\n          data={[\n            { name:  `${props.cate} Percent`, symbol: { fill: colors['1'], type: \"square\" } },\n            { name: \"Population Percent\", symbol: { fill: colors['2'], type: \"square\" }},\n          ]}\n        />\n        <VictoryGroup offset={20}\n          colorScale={\"qualitative\"}\n        >\n          <VictoryBar\n\n            barWidth={20}\n            // labels={({ datum }) => (Math.round(datum.value * 100) / 100)}\n            labels={({ datum }) => `${props.cate} Percent: ${numberWithCommas(parseFloat(datum.value).toFixed(2)*100)}%`}\n            data={[{ key: props.keyv[0], 'value': props.data[props.stateFips + props.countyFips][props.var[0]] || 0, 'colors': '1' },\n            { key: props.keyv[1], 'value': props.data[props.stateFips + props.countyFips][props.var[1]] || 0, 'colors': '1' }]}\n            labelComponent={<VictoryTooltip\n              orientation=\"top\"\n              style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'black' }}\n              constrainToVisibleArea\n              labelComponent={<VictoryLabel dx={-60} textAnchor='start' />}\n              flyoutStyle={{ fill: colors['1'], fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\n            />}\n            style={{\n              data: {\n                fill: ({ datum }) => colors[datum.colors],\n                fillOpacity: 2\n              }\n            }}\n            x=\"key\"\n            y=\"value\"\n          />\n          <VictoryBar\n\n            barWidth={20}\n            data={[{ key: props.keyv[0], 'value': props.data[props.stateFips + props.countyFips][props.var1[0]] || 0, 'colors': '2' },\n            { key: props.keyv[1], 'value': props.data[props.stateFips + props.countyFips][props.var1[1]] || 0, 'colors': '2' }]}\n\n            labels={({ datum }) =>\n              `Population Percent: ${numberWithCommas(parseFloat(datum.value).toFixed(2)*100)}%`\n            }\n            labelComponent={<VictoryTooltip\n              orientation=\"top\"\n              style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'black' }}\n              constrainToVisibleArea\n              labelComponent={<VictoryLabel dx={-70} textAnchor='start' />}\n              flyoutStyle={{ fill: \"grey\", fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\n            />}\n            style={{\n              data: {\n                fill: ({ datum }) => colors[datum.colors],\n                fillOpacity: 0.7\n              }\n            }}\n            x=\"key\"\n            y=\"value\"\n          />\n        </VictoryGroup>\n      </VictoryChart>);\n  }\n  // console.log(props.data)\n\n}\n\nexport default function CountyReport() {\n\n  let { stateFips, countyFips } = useParams();\n  const allZero = arr => arr.every(v => Math.round(v, 2) === 0.00)\n  // const [countyFips, setCountyFips] = useState('121');\n  const [configsCounty, setConfig] = useState();\n  const [stateName, setStateName] = useState('Georgia');\n  const [countyName, setCountyName] = useState('');\n  const [dateCur, setDateCur] = useState();\n  const [zipCode, setZipCode] = useState('30328');\n  const [zipCodeH, setZipCodeH] = useState('30328');\n  const [zipCodeD, setZipCodeD] = useState('30328');\n  const [zipCodeFinal, setZipCodeFinal] = useState('30328');\n  const history = useHistory();\n  const [data, setData] = useState();\n  const [data_cases, setDataCG] = useState();\n  const [data_deaths, setDataDG] = useState();\n  const [datades_cases, setDatadesCG] = useState();\n  const [datades_deaths, setDatadesDG] = useState();\n  const [dataG, setDataG] = useState();\n  const [dataZip, setDataZip] = useState();\n  const [dataTS, setDataTS] = useState();\n  const [mapOut, setDataMapOut] = useState();\n\n  const [legendMax, setLegendMax] = useState([]);\n  const [legendMaxD, setLegendMaxD] = useState([]);\n\n  const [legendMax_graph, setLegendMaxGraph] = useState(0);\n\n  const [legendMin, setLegendMin] = useState([]);\n  const [legendMinD, setLegendMinD] = useState([]);\n\n  const [legendSplit, setLegendSplit] = useState([]);\n  const [legendSplitD, setLegendSplitD] = useState([]);\n  const [colorScale, setColorScale] = useState();\n  const [colorScaleD, setColorScaleD] = useState();\n\n\n  // const [metric, setMetric] = useState('mean7daycases');\n  const [tooltipContent, setTooltipContent] = useState('');\n  const [covidMetric, setCovidMetric] = useState({\n    casescum: 'N/A', deathscum: 'N/A', casescumR: 'N/A', deathscumR: 'N/A',\n    casesdailymean14: 'N/A', deathsdailymean14: 'N/A', casesdailymean14R: 'N/A', deathsdailymean14R: 'N/A', \"cfr\": 'N/A', \"cfrcompare\": '', t: 'n/a'\n  });\n  const [covidMetricLast, setCovidMetricLast] = useState({\n    casescum: 'N/A', deathscum: 'N/A', casescumR: 'N/A', deathscumR: 'N/A',\n    casesdailymean14: 'N/A', deathsdailymean14: 'N/A', casesdailymean14R: 'N/A', deathsdailymean14R: 'N/A', \"cfr\": 'N/A', \"cfrcompare\": '', t: 'n/a'\n  });\n  const [covidMetricGa, setCovidMetricGa] = useState({\n    casescum: 'N/A', deathscum: 'N/A', casescumR: 'N/A', deathscumR: 'N/A',\n    casesdailymean14: 'N/A', deathsdailymean14: 'N/A', casesdailymean14R: 'N/A', deathsdailymean14R: 'N/A', \"cfr\": 'N/A', \"cfrcompare\": '', t: 'n/a'\n  });\n  const [covidMetric14, setCovidMetric14] = useState({\n    casescum: 'N/A', deathscum: 'N/A', casescumR: 'N/A', deathscumR: 'N/A',\n    casesdailymean14: 'N/A', deathsdailymean14: 'N/A', casesdailymean14R: 'N/A', deathsdailymean14R: 'N/A', \"cfr\": 'N/A', \"cfrcompare\": '', t: 'n/a'\n  });\n  const [varMap, setVarMap] = useState({});\n  // const [countyFips, setCountyFips] = useState('');\n\n\n  const varNameMap = {\n    \"casescum\": { \"name\": 'cases', \"text\": \"The map shows the total number of confirmed COVID-19 cases in each zip code as of \" },\n    \"deathscum\": { \"name\": 'deaths', \"text\": \"The map shows the total number of confirmed COVID-19 deaths in each zip code as of \" },\n    \"casescumR\": { \"name\": 'cases per 100,000 residents', \"text\": \"The map shows the total number of confirmed COVID-19 cases per 100,000 residents in each zip code as of \" },\n    \"deathscumR\": { \"name\": 'deaths per 100,000 residents', \"text\": \"The map shows the total number of confirmed COVID-19 deaths per 100,000 residents in each zip code as of \" }\n  };\n\n  const [delayHandler, setDelayHandler] = useState(null)\n\n  useEffect(() => {\n\n    const configMatched = configscounty.find(s => s.countyfips === countyFips);\n\n    // let projection = d3.geoAlbersUsa();\n    // // let gps = [-85.504701, 34.855196]\n    // let gps = [-0.6, 38.7]\n    // console.log(projection.center)\n    // console.log(countyfips);\n\n    // console.log(configMatched);\n    if (!configMatched || !fips2county[stateFips + countyFips]) {\n      history.push('/');\n    } else {\n      setConfig(configMatched);\n      // setStateName(configMatched.name);\n      setCountyName(fips2county[stateFips + countyFips]);\n\n      fetch('/data/rawdata/variable_mapping.json').then(res => res.json())\n        .then(x => setVarMap(x));\n\n      fetch('/data/data_us.json').then(res => res.json())\n        .then(x => setData(x));\n      fetch('/data/data.json').then(res => res.json())\n        .then(x => setDateCur(x));\n      fetch('/data/data_cases_ga.json').then(res => res.json())\n        .then(x => setDataCG(x)\n        );\n      fetch('/data/data_deaths_ga.json').then(res => res.json())\n        .then(x => setDataDG(x));\n      fetch('/data/data_describe_cases.json').then(res => res.json())\n        .then(x => setDatadesCG(x));\n      fetch('/data/data_describe_deaths.json').then(res => res.json())\n        .then(x => setDatadesDG(x));\n      fetch('/data/data.json').then(res => res.json())\n        .then(x => setDataG(x));\n\n      fetch('/data/zipcode.json').then(res => res.json())\n        .then(x => setDataZip(x));\n\n      fetch('/data/timeseries13' + '.json').then(res => res.json())\n        .then(x => setDataTS(x));\n\n      fetch('/data/mapout' + '.json').then(res => res.json())\n        .then(x => setDataMapOut(x));\n\n      fetch('/data/timeseries13' + '.json').then(res => res.json())\n        .then(\n          x => {\n            // setDataTS(x);\n            var max = 0\n            var length = 0\n            _.each(x[stateFips + countyFips], d => {\n              length = length + 1\n              // console.log(d);\n              if (d['cases'] > max) {\n                max = d['cases'];\n              }\n\n            });\n            setLegendMaxGraph(max.toFixed(0));\n            // console.log(max.toFixed(0));\n          });\n\n      fetch('/data/zipcode.json').then(res => res.json())\n        .then(x => {\n          // setDataZip(x);\n\n          const cs = scaleQuantile()\n            .domain(_.map(_.filter(_.map(x, (d, k) => {\n              d.fips = k\n              return d\n            }),\n              d => (\n                (d.casescum >= 0 &&\n                  d.fips.length === 5 && Number(d.fips) >= 30001 && Number(d.fips) <= 31999) || (d.casescum >= 0 &&\n                    d.fips.length === 5 && Number(d.fips) >= 39800 && Number(d.fips) <= 39999))),\n              d => d['casescum']))\n            .range(colorPalette);\n\n          let scaleMap = {}\n          _.each(_.filter(_.map(x, (d, k) => {\n            d.fips = k\n            return d\n          }),\n            d => (\n              (d.casescum >= 0 &&\n                d.fips.length === 5 && Number(d.fips) >= 30001 && Number(d.fips) <= 31999) || (d.casescum >= 0 &&\n                  d.fips.length === 5 && Number(d.fips) >= 39800 && Number(d.fips) <= 39999)))\n            , d => {\n              scaleMap[d['casescum']] = cs(d['casescum'])\n            });\n          setColorScale(scaleMap);\n\n          var max = 0\n          var min = 100\n          var length = 0\n          _.each(x, d => {\n            // console.log(d.fips[0]);\n            if ((d['casescum'] > max && d.fips.length === 5 && Number(d.fips) >= 30001 && Number(d.fips) <= 31999) ||\n              (d['casescum'] > max && d.fips.length === 5 && Number(d.fips) >= 39800 && Number(d.fips) <= 39999)\n            ) {\n              max = d['casescum'];\n              // console.log(d.fips)\n            } else if ((d.fips.length === 5 && d['casescum'] < min && d['casescum'] >= 0 && Number(d.fips) >= 30001 && Number(d.fips) <= 31999) ||\n              (d.fips.length === 5 && d['casescum'] < min && d['casescum'] >= 0 && Number(d.fips) >= 39800 && Number(d.fips) <= 39999)\n            ) {\n              min = d['casescum']\n              // console.log(d.fips)\n            }\n\n          });\n          if (max > 999) {\n            max = (max / 1000).toFixed(0) + \"K\";\n            setLegendMax(max);\n          } else {\n            setLegendMax(max.toFixed(0));\n\n          }\n          setLegendMin(min.toFixed(0));\n\n          var split = scaleQuantile()\n            .domain(_.map(_.filter(_.map(x, (d, k) => {\n              d.fips = k\n              return d\n            }),\n              d => (\n                (d.casescum >= 0 &&\n                  d.fips.length === 5 && Number(d.fips) >= 30001 && Number(d.fips) <= 31999) || (d.casescum >= 0 &&\n                    d.fips.length === 5 && Number(d.fips) >= 39800 && Number(d.fips) <= 39999))),\n              d => d['casescum']))\n            .range(colorPalette);\n\n          setLegendSplit(split.quantiles());\n          // console.log(split.quantiles());\n        });\n\n\n    }\n  }, [countyFips]);\n\n  useEffect(() => {\n    fetch('/data/zipcode.json').then(res => res.json())\n      .then(x => {\n        const csD = scaleQuantile()\n          .domain(_.map(_.filter(_.map(x, (d, k) => {\n            d.fips = k\n            return d\n          }),\n            d => (\n              (d.deathscum >= 0 &&\n                d.fips.length === 5 && Number(d.fips) >= 30001 && Number(d.fips) <= 31999) || (d.deathscum >= 0 &&\n                  d.fips.length === 5 && Number(d.fips) >= 39800 && Number(d.fips) <= 39999))),\n            d => d['deathscum']))\n          .range(colorPalette);\n\n        let scaleMap = {}\n        _.each(_.filter(_.map(x, (d, k) => {\n          d.fips = k\n          return d\n        }),\n          d => (\n            (d.deathscum >= 0 &&\n              d.fips.length === 5 && Number(d.fips) >= 30001 && Number(d.fips) <= 31999) || (d.deathscum >= 0 &&\n                d.fips.length === 5 && Number(d.fips) >= 39800 && Number(d.fips) <= 39999)))\n          , d => {\n            scaleMap[d['deathscum']] = csD(d['deathscum'])\n          });\n        setColorScaleD(scaleMap);\n\n        var max = 0\n        var min = 100\n        _.each(x, d => {\n          // console.log(d.fips[0]);\n          if ((d['deathscum'] > max && d.fips.length === 5 && Number(d.fips) >= 30001 && Number(d.fips) <= 31999) ||\n            (d['deathscum'] > max && d.fips.length === 5 && Number(d.fips) >= 39800 && Number(d.fips) <= 39999)\n          ) {\n            max = d['deathscum'];\n            // console.log(max)\n          } else if ((d.fips.length === 5 && d['deathscum'] < min && d['deathscum'] >= 0 && Number(d.fips) >= 30001 && Number(d.fips) <= 31999) ||\n            (d.fips.length === 5 && d['deathscum'] < min && d['deathscum'] >= 0 && Number(d.fips) >= 39800 && Number(d.fips) <= 39999)\n          ) {\n            min = d['deathscum']\n            // console.log(d.fips)\n          }\n\n\n        });\n        if (max > 999) {\n          max = (max / 1000).toFixed(0) + \"K\";\n          setLegendMaxD(max);\n        } else {\n          setLegendMaxD(max.toFixed(0));\n\n        }\n        setLegendMinD(min.toFixed(0));\n\n        var split = scaleQuantile()\n          .domain(_.map(_.filter(_.map(x, (d, k) => {\n            d.fips = k\n            return d\n          }),\n            d => (\n              (d.deathscum >= 0 &&\n                d.fips.length === 5 && Number(d.fips) >= 30001 && Number(d.fips) <= 31999) || (d.deathscum >= 0 &&\n                  d.fips.length === 5 && Number(d.fips) >= 39800 && Number(d.fips) <= 39999))),\n            d => d['deathscum']))\n          .range(colorPalette);\n\n        setLegendSplitD(split.quantiles());\n        // console.log(split.thresholds().reverse());\n      });\n  }, [])\n\n  useEffect(() => {\n    if (dataTS && dataTS[stateFips + countyFips]) {\n      setCovidMetric(dataG[stateFips + countyFips]);\n      setCovidMetricGa(dataG[stateFips]);\n      // setCovidMetric(dataG[stateFips + countyFips]);\n      setCovidMetric14(_.takeRight(dataTS[stateFips + countyFips], 14)[0]);\n      setCovidMetricLast(_.takeRight(dataTS[stateFips + countyFips])[0]);\n    }\n  }, [dataTS])\n\n  if (data && dataTS && varMap) {\n\n    return (\n      <div>\n        <AppBar menu='countyReport' />\n        <Container style={{ marginTop: '8em', minWidth: '1260px', paddingRight: 0 }}>\n          {configsCounty &&\n            <div>\n              <Breadcrumb>\n                {/* <Breadcrumb.Section link onClick={() => history.push('/')}>United States</Breadcrumb.Section>\n            <Breadcrumb.Divider /> */}\n                <Breadcrumb.Section link onClick={() => history.push('/' + stateFips)}>{stateName}</Breadcrumb.Section>\n                <Breadcrumb.Divider />\n                <Breadcrumb.Section active>{countyName}</Breadcrumb.Section>\n                <Breadcrumb.Divider />\n              </Breadcrumb>\n              <Header as='h1' style={{ fontWeight: 300 }}>\n                <Header.Content>\n                  {/* Covid-19 Health Equity Report for <span style={{color: countyColor}}>{countyName}</span> */}\n                  {/* <span style={{ color: countyColor }}>{countyName}</span> */}\n                  <b>{countyName}</b>\n                  {/* <Header.Subheader style={{fontWeight: 300}}>\n              See how health determinants impact COVID-19 outcomes. \n              </Header.Subheader> */}\n                </Header.Content>\n              </Header>\n              <Divider horizontal style={{ fontWeight: 600, color: '#232423', fontSize: '16pt', paddingTop: '1em' }}>SUMMARY OF COVID-19 IN <b>{countyName}</b>, GEORGIA</Divider>\n\n              <Grid style={{ paddingTop: '2em', width: \"1260px\" }} centered>\n                <Header as='h2' style={{ fontWeight: 300, textAlign: 'center' }} >\n                  <Header.Content>\n                    COVID-19 <b>cases</b> in {countyName}\n                  </Header.Content>\n                </Header>\n                <Grid.Row style={{ paddingTop: '1em' }}>\n                  <Grid.Column width={16} style={{ paddingLeft: '0', paddingRight: '0' }}>\n                    <Table fixed>\n                      <Table.Header>\n                        <Table.Row textAlign='center'>\n                          <Table.HeaderCell colSpan='1' style={{ width: 150 }}> </Table.HeaderCell>\n                          <Popup\n                            trigger={\n                              <Table.HeaderCell style={{ width: 200 }}> ALL CASES TO DATE</Table.HeaderCell>}\n                            content={\"All confirmed cases reported to DPH as of \" + new Date(dateCur[stateFips + countyFips].todaydat * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' })}\n                            basic />\n                          <Popup\n                            trigger={\n                              <Table.HeaderCell style={{ width: 200 }}> CASES IN PAST 14 DAYS</Table.HeaderCell>}\n                            content={\"All confirmed cases reported to DPH during the 14 days preceding the report publication date.\"}\n                            basic />\n                          <Popup\n                            trigger={\n                              <Table.HeaderCell style={{ width: 200 }}> CASES PER 100K (PAST 14 DAYS)</Table.HeaderCell>}\n                            content={\"14-day case count/100K residents based on 2020 population projects derived from census data.\"}\n                            basic />\n                          <Popup\n                            trigger={\n                              <Table.HeaderCell style={{ width: 200 }}> 14-DAY RATE CATEGORY</Table.HeaderCell>} flowing hoverable>\n                            Based on the 14-day case rate\n                          <List as='ul'>\n                              <List.Item as='li'>High: {'>'} 100 cases/100K</List.Item>\n                              <List.Item as='li'>Moderately high: {\">\"} 50-100 cases/100K</List.Item>\n                              <List.Item as='li'>Moderately: {\">\"} 10-50 cases/100K</List.Item>\n                              <List.Item as='li'>Low: {\">\"} 0-10 cases/100K</List.Item>\n                              <List.Item as='li'>Less than 5 cases reported, rate not calculated</List.Item>\n                            </List>\n                          </Popup>\n\n                          <Popup\n                            trigger={\n                              <Table.HeaderCell style={{ width: 200 }}> CHANGE IN LAST 2 WEEKS</Table.HeaderCell>} flowing hoverable>\n                            Change in case count during the previous 14 days, comparing<br></br> the second 7-day period to the first 7-day period.\n                          <List as='ul'>\n                              <List.Item as='li'>Increasing: 5% or greater change</List.Item>\n                              <List.Item as='li'>Decreasing: -5% or less change</List.Item>\n                              <List.Item as='li'>Less than 5% change</List.Item>\n                            </List>\n                          </Popup>\n                        </Table.Row>\n\n                        <Table.Row textAlign='center'>\n                          <Table.HeaderCell style={{ fontSize: '18px' }}> {countyName} </Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px' }}>{covidMetric.casescum === null || covidMetric.casescum < 0 ? '0' : covidMetric.casescum.toLocaleString()}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px' }}>{covidMetric.casescum14day === null || covidMetric.casescum14day < 0 ? '0' : numberWithCommas(parseFloat(covidMetric.casescum14day).toFixed(0)).toLocaleString()}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px' }}>{covidMetric.casescum14dayR === null || covidMetric.casescum14dayR < 0 ? '0' : numberWithCommas(parseFloat(covidMetric.casescum14dayR).toFixed(2)).toLocaleString()}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '18px' }}>{covidMetric.category14day === null || covidMetric.category14day < 0 ? '0' : covidMetric.category14day}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '18px' }}>{covidMetric.change14day === null ? '0' : covidMetric.change14day}</Table.HeaderCell>\n                        </Table.Row>\n                        <Table.Row textAlign='center'>\n                          <Table.HeaderCell style={{ fontSize: '18px' }}>Georgia</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px' }}>{covidMetricGa.casescum === null || covidMetricGa.casescum < 0 ? '0' : covidMetricGa.casescum.toLocaleString()}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px' }}>{covidMetricGa.casescum14day === null || covidMetricGa.casescum14day < 0 ? '0' : numberWithCommas(parseFloat(covidMetricGa.casescum14day).toFixed(0)).toLocaleString()}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px' }}>{covidMetricGa.casescum14dayR === null || covidMetricGa.casescum14dayR < 0 ? '0' : numberWithCommas(parseFloat(covidMetricGa.casescum14dayR).toFixed(2)).toLocaleString()}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '18px' }}>{covidMetricGa.category14day === null || covidMetricGa.category14day < 0 ? '0' : covidMetricGa.category14day}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '18px' }}>{covidMetricGa.change14day === null || covidMetricGa.change14day < 0 ? '0' : covidMetricGa.change14day}</Table.HeaderCell>\n                        </Table.Row>\n                      </Table.Header>\n                    </Table>\n                  </Grid.Column>\n\n                </Grid.Row>\n\n                <Header as='h2' style={{ fontWeight: 300, textAlign: 'center' }} >\n                  <Header.Content>\n                    COVID-19 <b>deaths</b> in {countyName}\n                  </Header.Content>\n                </Header>\n                <Grid.Row style={{ paddingTop: '1em' }}>\n                  <Grid.Column width={16} style={{ paddingLeft: '0', paddingRight: '0' }}>\n\n                    <Table celled fixed singleLine>\n                      <Table.Header>\n                        <Table.Row textAlign='center'\n\n                        >\n                          <Table.HeaderCell colSpan='1' style={{ width: 150 }}> </Table.HeaderCell>\n                          <Popup\n                            trigger={\n                              <Table.HeaderCell style={{ width: 200 }}> ALL DEATHS TO DATE</Table.HeaderCell>}\n                            content={\"All confirmed deaths reported to DPH as of \" + new Date(dateCur.date * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' })}\n                            basic />\n                          <Popup\n                            trigger={\n                              <Table.HeaderCell style={{ width: 230 }}> DEATHS IN PAST 14 DAYS</Table.HeaderCell>}\n                            content={\"All confirmed deaths reported to DPH during the 14 days preceding the report publication date.\"}\n                            basic />\n                          <Popup\n                            trigger={\n                              <Table.HeaderCell style={{ width: 200 }}> DEATHS PER 100K (PAST 14 DAYS)</Table.HeaderCell>}\n                            content={\"14-day deaths count/100K residents based on 2020 population projects derived from census data.\"}\n                            basic />\n                          <Popup\n                            trigger={\n                              <Table.HeaderCell style={{ width: 200 }}> CASE FATALITY RATIO (%)</Table.HeaderCell>}\n                            content={\"The case fatality ratio is the percent of all confirmed cases who have been reported as having died. While this is used as a measure of disease severity, the ratio may also be affected by the level of testing and quality of follow-up data on cases.\"}\n                            basic />\n                        </Table.Row>\n\n                        <Table.Row textAlign='center'>\n                          <Table.HeaderCell style={{ fontSize: '18px' }}> {countyName} </Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px' }}>{covidMetric.deathscum === null || covidMetric.deathscum < 0 ? '0' : covidMetric.deathscum.toLocaleString()}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px' }}>{covidMetric.deathscum14day === null || covidMetric.deathscum14day < 0 ? '0' : numberWithCommas(parseFloat(covidMetric.deathscum14day).toFixed(0)).toLocaleString()}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px' }}>{covidMetric.deathscum14dayR === null || covidMetric.deathscum14dayR < 0 ? '0' : numberWithCommas(parseFloat(covidMetric.deathscum14dayR).toFixed(2)).toLocaleString()}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px' }}>{covidMetric.cfr === null || covidMetric.cfr < 0 ? '0' : numberWithCommas(parseFloat(covidMetric.cfr).toFixed(2)).toLocaleString() + '%'}</Table.HeaderCell>\n                        </Table.Row>\n                        <Table.Row textAlign='center'>\n                          <Table.HeaderCell style={{ fontSize: '18px' }}>Georgia</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px' }}>{covidMetricGa.deathscum === null || covidMetricGa.deathscum < 0 ? '0' : covidMetricGa.deathscum.toLocaleString()}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px' }}>{covidMetricGa.deathscum14day === null || covidMetricGa.deathscum14day < 0 ? '0' : numberWithCommas(parseFloat(covidMetricGa.deathscum14day).toFixed(0)).toLocaleString()}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px' }}>{covidMetricGa.deathscum14dayR === null || covidMetricGa.deathscum14dayR < 0 ? '0' : numberWithCommas(parseFloat(covidMetricGa.deathscum14dayR).toFixed(2)).toLocaleString()}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px' }}>{covidMetricGa.cfr === null || covidMetricGa.cfr < 0 ? '0' : numberWithCommas(parseFloat(covidMetricGa.cfr).toFixed(2)).toLocaleString() + '%'}</Table.HeaderCell>\n                        </Table.Row>\n                      </Table.Header>\n                    </Table>\n                  </Grid.Column>\n\n                </Grid.Row>\n\n                <Grid.Row style={{ paddingTop: 0 }}>\n                  <Grid.Column style={{ paddingLeft: '0.01', paddingRight: '0' }}>\n                    <small style={{ fontWeight: 300, fontSize: 16, color: 'black' }} align=\"justify\">\n                      As of {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' : (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}, there were a total of {covidMetric.casescum.toLocaleString()} confirmed cases of COVID-19 and {covidMetric.deathscum.toLocaleString()} deaths due to COVID-19 reported to DPH for {countyName}. In {countyName}, this translates to {numberWithCommas(parseFloat(covidMetric.casescumR).toFixed(0)).toLocaleString()} case(s) per 100,000 residents and {numberWithCommas(parseFloat(covidMetric.deathscumR).toFixed(0)).toLocaleString()} death(s) per 100,000 residents.\n                        On a day-to-day basis, {numberWithCommas(parseFloat(covidMetric.casescum14dayR).toFixed(0)).toLocaleString()} new cases and {numberWithCommas(parseFloat(covidMetric.deathscum14dayR).toFixed(0)).toLocaleString()} new deaths are reported to DPH on average (based on a 14-day rolling average). This means that there are {covidMetric.casescum14dayR === null || covidMetric.casescum14dayR < 0 ? '0' : numberWithCommas(parseFloat(covidMetric.casescum14dayR).toFixed(0)).toLocaleString()} new cases and {covidMetric.deathscum14dayR === null || covidMetric.deathscum14dayR < 0 ? '0' : numberWithCommas(parseFloat(covidMetric.deathscum14dayR).toFixed(0)).toLocaleString()} new deaths per 100,000 residents in {countyName}. The case-fatality ratio measures\n                          the proportion of confirmed COVID-19 cases that ultimately die due to the disease. This is used by epidemiologists to gauge the severity of disease in a particular locale.  In {countyName}, the case-fatality ratio was {covidMetric.cfr === null || covidMetric.cfr < 0 ? '0' : numberWithCommas(parseFloat(covidMetric.cfr).toFixed(2)).toLocaleString() + '%'}, which is {covidMetric.cfrcompare === null || covidMetric.cfrcompare < 0 ? '0' : covidMetric.cfrcompare} than the national average of 4%. All of these data must be interpreted in light of constraints on testing, PUI follow-up quality, and reporting lags in the county.\n                  </small>\n                  </Grid.Column>\n                </Grid.Row>\n              </Grid>\n\n              <Divider horizontal style={{ fontWeight: 300, color: '#b1b3b3', fontSize: '1.2em', paddingTop: '1em' }}></Divider>\n              <Grid column={2} style={{ paddingTop: '2em', paddingBottom: '2em', width: \"1260px\" }}>\n                <Grid.Row style={{ paddingTop: '2em' }}>\n\n                  <Grid.Column width={8}>\n                    <Header as='h2' style={{ fontWeight: \"bold\", fontSize: \"27px\", paddingLeft: \".5em\" }}>\n                      <Header.Content>\n                        Daily cases in {countyName}\n                        <Header.Subheader style={{ fontWeight: 300 }}>\n                        </Header.Subheader>\n                      </Header.Content>\n                    </Header>\n                    <svg width=\"550\" height=\"90\">\n                      <rect x={50} y={50} width=\"15\" height=\"15\" style={{ fill: stateColor, strokeWidth: 1, stroke: stateColor }} />\n                      <rect x={50} y={22} width=\"15\" height=\"1\" style={{ fill: countyColor, strokeWidth: 1, stroke: countyColor }} />\n                      <text x={75} y={64} style={{ fontSize: 18 }}> Daily new cases </text>\n                      <text x={75} y={30} style={{ fontSize: 18 }}>7-D Rolling average</text>\n                    </svg>\n                    <VictoryChart theme={VictoryTheme.material}\n                      containerComponent={\n                        <VictoryVoronoiContainer\n                          responsive={false}\n                          flyoutStyle={{ fill: \"black\" }}\n\n                        />\n                      }\n                      width={550}\n                      height={450}\n                      padding={{ left: 40, right: 60, top: 10, bottom: 60 }}>\n                      <VictoryAxis\n                        style={{\n                          tickLabels: { fontSize: 20, padding: 5 }\n                        }}\n                        tickFormat={(t) => new Date(t * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric' })}\n                        tickValues={[\n                          // 1583035200, 1585713600, 1588305600, 1590984000, 1593576000\n                          dataTS['13001'][0].t,\n                          dataTS[\"13001\"][32].t,\n                          dataTS[\"13001\"][62].t,\n                          dataTS[\"13001\"][93].t,\n                          dataTS[\"13001\"][123].t,\n                          dataTS[\"13001\"][154].t,\n                          dataTS[\"13001\"][dataTS[\"13001\"].length - 1].t\n                        ]}\n                      />\n                      <VictoryAxis dependentAxis tickCount={5}\n                        style={{\n                          tickLabels: { fontSize: 17, paddingLeft: '0em' }\n                        }}\n                        tickFormat={(y) => (y < 1000 ? y : (y / 1000 + 'k'))}\n                      />\n\n                      <VictoryBar style={{ data: { fill: stateColor } }} barWidth={4} data={dataTS[stateFips + countyFips] ? dataTS[stateFips + countyFips] : dataTS[\"99999\"]}\n                        x='t' y='casesdaily'\n                      />\n                      <VictoryLine name=\"Line\" style={{ data: { stroke: countyColor } }} data={dataTS[stateFips + countyFips] ? dataTS[stateFips + countyFips] : dataTS[\"99999\"]}\n                        x='t' y='casesdailymean7'\n                        labels={({ datum }) => `${countyName}\\n` +\n                          `Date: ${new Date(datum.t * 1000).toLocaleDateString()}\\n` +\n                          `Daily new cases: ${Math.round(datum.casesdaily, 2)}\\n` +\n                          `7-d Rolling average of daily new cases: ${Math.round(datum.casesdailymean7, 2)}`\n                        }\n                        labelComponent={\n                          <VictoryTooltip\n                            orientation=\"top\"\n                            style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'white' }}\n                            constrainToVisibleArea\n                            labelComponent={<VictoryLabel dx={-130} textAnchor='start' />}\n                            flyoutStyle={{ fill: \"black\", fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\n                          />\n                        }\n                      />\n\n                    </VictoryChart>\n                  </Grid.Column>\n                  <Grid.Column width={8}>\n                    <Header as='h2' style={{ fontWeight: \"bold\", fontSize: \"27px\", paddingLeft: \".5em\" }}>\n                      <Header.Content>\n                        Daily deaths in {countyName}\n                        <Header.Subheader style={{ fontWeight: 300 }}>\n                        </Header.Subheader>\n                      </Header.Content>\n                    </Header>\n                    <svg width=\"550\" height=\"90\">\n                      <rect x={50} y={50} width=\"15\" height=\"15\" style={{ fill: stateColor, strokeWidth: 1, stroke: stateColor }} />\n                      <rect x={50} y={22} width=\"15\" height=\"1\" style={{ fill: countyColor, strokeWidth: 1, stroke: countyColor }} />\n                      <text x={75} y={64} style={{ fontSize: 18 }}> Daily new deaths </text>\n                      <text x={75} y={30} style={{ fontSize: 18 }}>7-D Rolling average</text>\n                    </svg>\n                    <VictoryChart theme={VictoryTheme.material}\n                      containerComponent={\n                        <VictoryVoronoiContainer\n                          responsive={false}\n                          flyoutStyle={{ fill: \"black\" }}\n                        />\n                      }\n                      width={550}\n                      height={450}\n                      padding={{ left: 50, right: 60, top: 10, bottom: 60 }}>\n\n                      <VictoryAxis\n                        style={{\n                          tickLabels: { fontSize: 20, padding: 5 }\n                        }}\n                        tickFormat={(t) => new Date(t * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric' })}\n                        tickValues={[\n                          dataTS['13001'][0].t,\n                          dataTS[\"13001\"][32].t,\n                          dataTS[\"13001\"][62].t,\n                          dataTS[\"13001\"][93].t,\n                          dataTS[\"13001\"][123].t,\n                          dataTS[\"13001\"][154].t,\n                          dataTS[\"13001\"][dataTS[\"13001\"].length - 1].t\n                        ]}\n                      />\n                      <VictoryAxis dependentAxis tickCount={5}\n                        style={{\n                          tickLabels: { fontSize: 20, padding: 5 }\n                        }}\n                        tickFormat={(y) => (y < 1000 ? (Math.round(y, 2) === 0.00 ? \" \" : y) : (y / 1000 + 'k'))}\n                      />\n\n                      <VictoryBar style={{ data: { fill: stateColor } }} barWidth={4} data={dataTS[stateFips + countyFips] ? dataTS[stateFips + countyFips] : dataTS[\"99999\"]}\n                        x='t' y='deathsdaily'\n                      />\n                      <VictoryLine name=\"Line\" style={{ data: { stroke: countyColor } }} data={dataTS[stateFips + countyFips] ? dataTS[stateFips + countyFips] : dataTS[\"99999\"]}\n                        x='t' y='deathsdailymean7'\n                        labels={({ datum }) =>\n                          `${countyName}\\n` +\n                          `Date: ${new Date(datum.t * 1000).toLocaleDateString()}\\n` +\n                          `Daily new deaths: ${Math.round(datum.deathsdaily, 2)}\\n` +\n                          `7-d Rolling average of daily new deaths: ${Math.round(datum.deathsdailymean7, 2)}`}\n                        labelComponent={\n                          <VictoryTooltip\n                            orientation=\"top\"\n                            style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'white' }}\n                            constrainToVisibleArea\n                            labelComponent={<VictoryLabel dx={-130} textAnchor='start' />}\n                            flyoutStyle={{ fill: \"black\", fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\n                          />\n                        }\n                      />\n\n                    </VictoryChart>\n                  </Grid.Column>\n                </Grid.Row>\n                <Grid.Row style={{ paddingTop: '2em', paddingLeft: '0em', paddingRight: '2em' }} >\n                  <Grid.Column width={8} style={{ paddingLeft: '1em', paddingRight: '3em' }}>\n                    <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\n                      As of {covidMetricLast.t === 'n/a' ? 'N/A' : (new Date(covidMetricLast.t * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}, this chart shows the daily number of new cases of confirmed COVID-19 in <b>{countyName}</b>. The daily number reflects the date the case was first reported to DPH.\n                  The vertical bars show the number of new daily cases while the line shows the 7-day moving average of new daily cases.\n                  </small>\n                  </Grid.Column>\n                  <Grid.Column width={8} style={{ paddingLeft: '3em', paddingRight: '3em' }}>\n                    <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\n                      As of {covidMetricLast.t === 'n/a' ? 'N/A' : (new Date(covidMetricLast.t * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}, this chart shows the daily number of new deaths of confirmed COVID-19 in <b>{countyName}</b>. The daily number reflects the date the death was first reported to DPH.\n                  The vertical bars show the number of new daily deaths while the line shows the 7-day moving average of new daily cases.\n                  </small>\n                  </Grid.Column>\n                </Grid.Row>\n                <Grid.Row style={{ paddingTop: '8em' }}>\n                  <Grid.Column width={9}>\n                    <Header as='h2' style={{ fontWeight: 400, paddingLeft: '1em' }}>\n                      <Header.Content >\n                        <strong>Confirmed COVID-19 cases {countyName} by zip code</strong>\n                        {/* <Header.Subheader style={{fontWeight: 300}}>.</Header.Subheader> */}\n                      </Header.Content>\n                    </Header>\n                    <svg width=\"120\" height=\"300\" style={{ paddingLeft: '3.5em' }}>\n                      {_.map(colorPalette, (color, i) => {\n                        return <rect key={i} y={20 * i} x={25} width=\"20\" height=\"20\" style={{ fill: colorPalette[(colorPalette.length - 1 - i).toString()], strokeWidth: 1, stroke: colorPalette[(colorPalette.length - 1 - i).toString()] }} />\n                      })}\n                      {/* <text y={15} x={47} style={{fontSize: '0.8em'}}>High</text>\n                  <text y={20 * (colorPalette.length)} x={47} style={{fontSize: '0.8em'}}>Low</text> */}\n                      {/* {_.map(legendSplit, (splitpoint, i) => {\n                        if (legendSplit[i] < 1) {\n                          return <text key={i} y={21 * (legendSplit.length - i)} x={47} style={{ fontSize: '0.8em' }}> {legendSplit[i].toFixed(1)}</text>\n                        }\n                        return <text key={i} y={21 * ((legendSplit.length - i))} x={47} style={{ fontSize: '0.8em' }}> {legendSplit[i].toFixed(0)}</text>\n                      })} */}\n                      <text y={20 * (colorPalette.length)} x={47} style={{ fontSize: '0.8em' }}> {legendMin} </text>\n                      <text y={8} x={47} style={{ fontSize: '0.8em' }}>{legendMax}</text>\n                    </svg>\n\n                    <ComposableMap projection=\"geoAlbersUsa\"\n                      style={{ paddingLeft: '2em' }}\n                      projectionConfig={{ scale: `${configsCounty.scale}` }}\n                      width={500}\n                      height={350}\n                      data-tip=\"\"\n                      offsetX={configsCounty.offsetX}\n                      offsetY={configsCounty.offsetY}>\n                      <Geographies geography={configsCounty.url}>\n                        {({ geographies }) => geographies.map(geo =>\n                          <Geography\n                            key={geo.rsmKey}\n                            geography={geo}\n                            style={{\n                              default: {\n                                stroke: \"#607D8B\",\n                                strokeWidth: 0.95,\n                                outline: \"none\",\n                              }\n                            }}\n                            onMouseEnter={(event) => {\n                              // console.log(event);\n                              // setCountyFips(geo.properties.COUNTYFP);\n                              setCountyName(fips2county[stateFips + geo.properties.COUNTYFP]);\n                              setZipCode(geo.properties.ZCTA5CE10);\n                              setZipCodeFinal(geo.properties.ZCTA5CE10);\n                              setTooltipContent(<div><font size=\"+2\"><b >{geo.properties.ZCTA5CE10}</b> </font> <br />\n                                {/* <b>Total Cases</b>: {dataZip[geo.properties.ZCTA5CE10]['casescum']} <br />\n                                <b>Total Deaths</b>: {dataZip[geo.properties.ZCTA5CE10]['deathscum']} <br /> */}\n                              </div>);\n                            }}\n                            onMouseLeave={(event) => {\n                              setTooltipContent(\"\")\n                            }}\n                            fill={zipCode === geo.properties.ZCTA5CE10 ? countyColor :\n                              ((colorScale && dataZip[geo.properties.ZCTA5CE10] && dataZip[geo.properties.ZCTA5CE10]['casescum']) ?\n                                colorScale[dataZip[geo.properties.ZCTA5CE10]['casescum']] : colorPalette[0])}\n                          />\n                        )}\n                      </Geographies>\n                    </ComposableMap>\n                  </Grid.Column>\n\n                </Grid.Row>\n\n\n                <Grid.Row style={{ paddingTop: '2em', paddingLeft: '0em', paddingRight: '2em' }} >\n\n                  <Grid.Column width={9} style={{ paddingLeft: '2em', paddingRight: '5em' }}>\n                    <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\n                      {varNameMap['casescum'].text}{dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' : (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))} . The darker shading indicates a larger number of {varNameMap['casescum'].name}.</small>\n                  </Grid.Column>\n\n                </Grid.Row>\n                <Grid.Row style={{ paddingTop: 0 }}>\n                  <small style={{ fontWeight: 300, color: 'black' }}>\n                    Note: Data are provisional and subject to change. Zip codes may cross county boundaries. Zip codes being displayed include the total count of cases for that zip code.\n                    </small>\n                </Grid.Row>\n              </Grid>\n              <Divider horizontal style={{ fontWeight: 600, color: '#232423', fontSize: '16pt', paddingTop: '1em' }}>Characteristics of confirmed COVID-19 cases for {countyName}</Divider>\n              <Grid columns={2} style={{ width: \"1260px\" }} centered>\n                <Grid.Row >\n                  <Grid.Column>\n                    <svg width=\"400\" height=\"500\" >\n                      <VictoryLabel style={{\n                        textAnchor: \"start\",\n                        verticalAnchor: \"end\", fill: \"#000000\", fontFamily: \"inherit\",\n                        fontSize: \"20px\", fontWeight: \"bold\"\n                      }} text=\"Proportion of cases with a comorbidity\n                  \" x={15} y={28} textAnchor=\"middle\" />\n                      <VictoryPie\n                        colorScale={['Gray', 'GoldenRod']}\n                        standalone={false}\n                        style={{ labels: { fill: \"white\" } }}\n                        labelRadius={80}\n                        width={400} height={400}\n                        padAngle={1}\n                        data={[\n                          { x: \"Cats\", y: 22, label: \"22%\" },\n                          { x: \"Dogs\", y: 78, label: \"78%\" },\n                        ]}\n                      />\n                      <VictoryLegend\n                        standalone={false}\n                        colorScale={['Gray', 'GoldenRod']}\n                        x={150} y={350}\n                        data={[{ name: \"No underlying conditions\", labels: { fontSize: 18 } },\n                        { name: \"Underlying health condition\", labels: { fontSize: 18 } }\n                        ]}\n                      />\n                    </svg>\n                  </Grid.Column>\n                  <Grid.Column style={{ paddingLeft: '2em', paddingRight: '1em', paddingTop: '8em' }}>\n                    <small style={{ fontWeight: 300, fontSize: 20, color: 'black' }} align=\"justify\">\n                      The pie chart shows the proportion of confirmed COVID-19 cases in <b>{countyName}</b> who\n                  presented with an underlying medical condition. Underlying medical conditions\n                  increase the risk of experiencing severe disease which may lead to hospitalization\n                  and death. Of the {datades_cases[stateFips + countyFips]['cdc_underlying2_N'] ? datades_cases[stateFips + countyFips]['cdc_underlying2_N'] : \"N/A\"} confirmed cases with data available, {datades_cases[stateFips + countyFips]['cdc_underlying2Percent'] ? datades_cases[stateFips + countyFips]['cdc_underlying2Percent'].toFixed(2) : \"N/A\"}% had an underlying medical condition that increases risk of severe outcomes according to the CDC. These underlying medical conditions include: lung disease, diabetes, cardiovascular disease, renal disease, and/or an immunocompromised state. The chart excludes data from {datades_cases[stateFips + countyFips]['cdc_underlying2Pmiss'] ? datades_cases[stateFips + countyFips]['cdc_underlying2Pmiss'].toFixed(2) : \"N/A\"}% of confirmed COVID-19 cases whose medical history was unknown.\n                    </small>\n                  </Grid.Column>\n                  {/* <Grid.Row style={{ paddingTop: 0 }}>\n                  <small style={{ fontWeight: 300, color: 'black' }}>\n                    Note: For comorbidities, we include lung disease, diabetes, CVD, renal disease, Immunocompromised state. \n                    </small>\n                </Grid.Row> */}\n\n                </Grid.Row>\n              </Grid>\n              <Divider horizontal style={{ fontWeight: 600, color: '#232423', fontSize: '16pt', paddingTop: '1em', paddingBottom: \"0em\" }}>Confirmed cases per capita by demographic group in {countyName}</Divider>\n              <Grid style={{ width: \"1260px\" }}>\n                {datades_cases[stateFips + countyFips]['NObs'] < 50 && datades_cases[stateFips + countyFips]['outcome'] === 'COVID Death' ?\n                  <Header as='h2' style={{ fontWeight: 400 }}>\n                    <Header.Content>\n                      <Header.Subheader style={{ fontWeight: 300, fontSize: '16pt', color: 'black' }}>\n                        Rates broken down by age, sex, and race are not shown for {countyName} because there are fewer than 50 confirmed COVID-19 cases with complete information.\n                </Header.Subheader>\n                    </Header.Content>\n\n                  </Header>\n                  :\n                  <Grid.Row columns={3} style={{ paddingTop: 0 }}>\n                    <Grid.Column>\n                      <BarChart\n                        cate={\"Cases\"}\n                        var_num={4}\n                        title=\"Age Group\"\n                        keyv={[\"< 20\", \"20-44\", \"45-64\", \"65+\"]}\n                        var={[\"019ageC_P\", \"2044ageC_P\", \"4564ageC_P\", \"65ageC_P\"]}\n                        var1={[\"019ageP\", \"2044ageP\", \"4564ageP\", \"65ageP\"]}\n                        width={400}\n                        stateFips={stateFips}\n                        countyFips={countyFips}\n                        data={data_cases} />\n\n                    </Grid.Column>\n                    <Grid.Column>\n                      <BarChart\n                        cate={\"Cases\"}\n                        var_num={2}\n                        title=\"Sex\"\n                        keyv={[\"Female\", \"Male\"]}\n                        var={[\"femaleC_P\", \"maleC_P\"]}\n                        var1={[\"femaleP\", \"maleP\"]}\n                        pad={80}\n                        width={400}\n                        stateFips={stateFips}\n                        countyFips={countyFips}\n                        data={data_cases} />\n                    </Grid.Column>\n                    <Grid.Column>\n                      <BarChart\n                        cate={\"Cases\"}\n                        var_num={4}\n                        title=\"Race-Ethnicity\"\n                        keyv={[\"Other\", \"Hispanic\", \"Black\", \"White\"]}\n                        var={[\"otherNHC_P\", \"hispanicC_P\", \"blackC_P\", \"whiteC_P\"]}\n                        var1={[\"otherNHP\", \"hispanicP\", \"blackP\", \"whiteP\"]}\n                        width={400}\n                        stateFips={stateFips}\n                        countyFips={countyFips}\n                        data={data_cases} />\n                    </Grid.Column>\n                  </Grid.Row>\n                }\n                {datades_cases[stateFips + countyFips]['NObs'] < 50 && datades_cases[stateFips + countyFips]['outcome'] === 'COVID Death' ? ' ' :\n                  <Grid.Row columns={3} style={{ padding: 0 }}>\n                    <Grid.Column style={{ paddingLeft: '3em', paddingRight: '0em' }}>\n                      <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\n                        This chart shows the number of total cases per 100,000 residents by age group for <b>{countyName}</b>. The chart excludes data from {datades_cases[stateFips + countyFips]['age4catPmiss'].toFixed(2)}% of confirmed cases who were missing information on age.\n                    </small>\n                    </Grid.Column>\n                    <Grid.Column style={{ paddingLeft: '2em', paddingRight: '0em' }}>\n                      <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\n                        This chart shows the number of total cases per 100,000 residents by sex for <b>{countyName}</b>. The chart excludes data from {datades_cases[stateFips + countyFips]['femalePmiss'].toFixed(2)}% of confirmed cases who were missing information on sex.\n                    </small>\n                    </Grid.Column>\n                    <Grid.Column style={{ paddingLeft: '2em', paddingRight: '0em' }}>\n                      <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\n                        This chart shows the total cases per 100,000 residents by race/ethnicity for <b>{countyName}</b>. The chart excludes data from {datades_cases[stateFips + countyFips]['race_3Pmiss'].toFixed(2)}% of confirmed cases who were missing information on race/ethnicity.                    </small>\n                    </Grid.Column>\n                  </Grid.Row>}\n              </Grid>\n\n              <Divider horizontal style={{ fontWeight: 600, color: '#232423', fontSize: '16pt', paddingTop: '1em', paddingBottom: \"0em\" }}>Deaths per capita by demographic group in {countyName}</Divider>\n              <Grid style={{ width: \"1260px\" }}>\n                {!(datades_deaths[stateFips + countyFips]) ? <Header as='h2' style={{ fontWeight: 400, paddingTop: '0.5em' }}>\n                  <Header.Content>\n                    <Header.Subheader style={{ fontWeight: 300, fontSize: '16pt' }}>\n                      Rates broken down by age, sex, and race are not shown for {countyName} because there are fewer than 50 confirmed COVID-19 deaths with complete information.\n                    </Header.Subheader>\n                  </Header.Content>\n                </Header>\n                  :\n                  datades_deaths[stateFips + countyFips]['NObs'] < 50 && datades_deaths[stateFips + countyFips]['outcome'] === 'COVID Death' ?\n                    <Header as='h2' style={{ fontWeight: 400, paddingTop: '0.5em' }}>\n                      <Header.Content>\n                        <Header.Subheader style={{ fontWeight: 300, fontSize: '16pt' }}>\n                          Rates broken down by age, sex, and race are not shown for {countyName} because there are fewer than 50 confirmed COVID-19 deaths with complete information.\n                    </Header.Subheader>\n                      </Header.Content>\n                    </Header>\n                    :\n                    <Grid.Row columns={3} style={{ paddingTop: 0 }}>\n                      <Grid.Column>\n                        <BarChart\n                          cate={\"Deaths\"}\n                          var_num={4}\n                          title=\"Age Group\"\n                          keyv={[\"< 20\", \"20-44\", \"45-64\", \"65+\"]}\n                          var={[\"019ageC_P\", \"2044ageC_P\", \"4564ageC_P\", \"65ageC_P\"]}\n                          var1={[\"019ageP\", \"2044ageP\", \"4564ageP\", \"65ageP\"]}\n                          width={400}\n                          stateFips={stateFips}\n                          countyFips={countyFips}\n                          data={data_deaths} />\n                      </Grid.Column>\n                      <Grid.Column>\n                        <BarChart\n                          cate={\"Deaths\"}\n                          var_num={2}\n                          title=\"Sex\"\n                          keyv={[\"Female\", \"Male\"]}\n                          var={[\"femaleC_P\", \"maleC_P\"]}\n                          var1={[\"femaleP\", \"maleP\"]}\n                          width={400}\n                          pad={80}\n                          stateFips={stateFips}\n                          countyFips={countyFips}\n                          data={data_deaths} />\n                      </Grid.Column>\n                      <Grid.Column>\n                        <BarChart\n                          cate={\"Deaths\"}\n                          var_num={4}\n                          title=\"Race-Ethnicity\"\n                          keyv={[\"Other\", \"Hispanic\", \"Black\", \"White\"]}\n                          var={[\"otherNHC_P\", \"hispanicC_P\", \"blackC_P\", \"whiteC_P\"]}\n                          var1={[\"otherNHP\", \"hispanicP\", \"blackP\", \"whiteP\"]}\n                          width={400}\n                          stateFips={stateFips}\n                          countyFips={countyFips}\n                          data={data_deaths} />\n                      </Grid.Column>\n                    </Grid.Row>}\n                {!(datades_deaths[stateFips + countyFips]) ? ' ' :\n\n\n                  datades_deaths[stateFips + countyFips]['NObs'] < 50 && datades_deaths[stateFips + countyFips]['outcome'] === 'COVID Death' ? ' ' :\n                    <Grid.Row columns={3} style={{ padding: 0 }}>\n                      <Grid.Column style={{ paddingLeft: '3em', paddingRight: '0em' }}>\n                        <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\n                          This chart shows the number of total deaths per 100,000 residents by age group for <b>{countyName}</b>. The chart excludes data from {datades_deaths[stateFips + countyFips]['age4catPmiss'].toFixed(2)}% of confirmed deaths who were missing information on age.\n                    </small>\n                      </Grid.Column>\n                      <Grid.Column style={{ paddingLeft: '2em', paddingRight: '0em' }}>\n                        <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\n                          This chart shows the number of total deaths per 100,000 residents by sex for <b>{countyName}</b>. The chart excludes data from {datades_deaths[stateFips + countyFips]['femalePmiss'].toFixed(2)}% of confirmed deaths who were missing information on sex.\n                    </small>\n                      </Grid.Column>\n                      <Grid.Column style={{ paddingLeft: '2em', paddingRight: '0em' }}>\n                        <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\n                          This chart shows the total deaths per 100,000 residents by race/ethnicity for <b>{countyName}</b>. The chart excludes data from {datades_deaths[stateFips + countyFips]['race_3Pmiss'].toFixed(2)}% of confirmed deaths who were missing information on race/ethnicity.                    </small>\n                      </Grid.Column>\n                    </Grid.Row>}\n              </Grid>\n              <Divider horizontal style={{ fontWeight: 600, color: '#232423', fontSize: '16pt', paddingTop: '1em' }}>General characteristics of {countyName} residents</Divider>\n              <Header as='h2' style={{ fontWeight: 400 }}>\n                <Header.Content>\n                  <Header.Subheader style={{ fontWeight: 300, fontSize: '16pt', color: 'black' }}>\n                    Social, economic, health and environmental factors impact an individual’s risk of infection and COVID-19 severity.\n                    Counties with large groups of vulnerable people may be disproportionately impacted by COVID-19. The table below characterizes the overall population characteristics of residents of <b>{countyName}</b>, Georgia, and the United States.\n                    </Header.Subheader>\n                </Header.Content>\n              </Header>\n              <small style={{ fontWeight: 300, color: 'black' }}>\n                <div>Note: These are not characteristics of covid.</div>\n              </small>\n              <Table striped compact basic='very'>\n                <Table.Header>\n                  <Table.Row>\n                    <Table.HeaderCell>Characteristic</Table.HeaderCell>\n                    <Table.HeaderCell>{countyName}</Table.HeaderCell>\n                    <Table.HeaderCell>{stateName}</Table.HeaderCell>\n                    <Table.HeaderCell>United States</Table.HeaderCell>\n                  </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                  {_.map(data[stateFips + countyFips],\n                    (v, k) => {\n                      var rmList = [\"cases\", \"deaths\", \"dailycases\", \"dailydeaths\", \"mean7daycases\", \"mean7daydeaths\", \"covidmortality\"\n                        , \"caserate\", \"covidmortality7day\", \"caserate7day\"];\n                      if (!rmList.includes(k)) {\n                        return (\n                          <Table.Row key={k}>\n                            <Table.Cell>{varMap[k] ? varMap[k].name : k}</Table.Cell>\n                            <Table.Cell>{isNaN(v) ? v : (Math.round(v * 100) / 100)}</Table.Cell>\n                            <Table.Cell>{isNaN(data[stateFips][k]) ? data[stateFips][k] : (Math.round(data[stateFips][k] * 100) / 100)}</Table.Cell>\n                            <Table.Cell>{isNaN(data['_nation'][k]) ? data['_nation'][k] : (Math.round(data['_nation'][k] * 100) / 100)}</Table.Cell>\n                          </Table.Row>\n                        )\n                      }\n                    })}\n                </Table.Body>\n              </Table>\n            </div>\n          }\n          {/* <Divider horizontal style={{ fontWeight: 300, color: '#b1b3b3', fontSize: '1.2em', paddingTop: '1em' }}></Divider> */}\n          <small>\n            <div style={{ paddingTop: '1em', paddingBottom: '1em' }}><a href=\"/data-sources\">Data source and interpretation</a></div>\n          </small>\n        </Container>\n        <ReactTooltip>{tooltipContent}</ReactTooltip>\n\n      </div>\n    );\n  } else {\n    return <Loader active inline='centered' />\n  }\n\n\n\n}","import React from 'react'\r\nimport { Route, Redirect } from 'react-router-dom'\r\nconst PrivateRoute = ({component: Component, ...props}) => {\r\n    return <Route {...props} render={(p) => {\r\n        const login = document.cookie.includes('login=true')\r\n        if (login){ \r\n            return <Component />\r\n        } else { \r\n            alert(\"Please log in, then you can access this web!\")\r\n            return <Redirect to={{\r\n                pathname: '/',\r\n                state: {\r\n                    from: p.location.pathname\r\n                }\r\n            }}/>\r\n        }\r\n    }}/>\r\n}\r\nexport default PrivateRoute","import React, { Component } from \"react\";\r\nimport { Form, Header } from \"semantic-ui-react\";\r\nimport \"./auth.css\";\r\n// import logo from \"../../data/logo.png\";\r\n\r\n  export default function Layout(props){\r\n    return (\r\n        <div className=\"auth-main\">\r\n          <div className=\"auth-content\">\r\n            <div className=\"auth-card\">\r\n            <img size='mini' src='https://dph.georgia.gov/themes/custom/ga_forest/orchard/assets/images/icons/logo/ga-logo--gold.svg' alt=\"Logo\" className=\"auth-logo\"/>\r\n              <Header as=\"h2\" color=\"black\" textAlign=\"center\">\r\n                {props.header}\r\n              </Header>\r\n              <Form.Group size=\"large\" className=\"auth-form\" autoComplete=\"off\">\r\n                {props.children}\r\n              </Form.Group>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n\r\n  }","\r\nimport React, { useState, useEffect, Component } from 'react';\r\n// import { Button, FormGroup, FormControl, FormLabel  } from \"react-bootstrap\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport \"./Login.css\";\r\nimport { Button, Form, Message } from \"semantic-ui-react\";\r\nimport Layout from \"./Layout\";\r\nimport fetchProfileData from \"./TokenGet\"\r\nimport { sha256 } from 'js-sha256';\r\n\r\n\r\nexport default function Login(props) {\r\n    const [isLogin, setIsLogin]= useState(document.cookie.includes('login=true'))\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const history = useHistory();\r\n    const [user, setUser] = useState(null);\r\n    const [tok, setTok] = useState(null);\r\n    const promise = fetchProfileData();\r\n\r\n\r\n    // console.log(document.cookie.includes('login=true'))\r\n\r\n    useEffect(() => {\r\n        fetch('/data/token.json')\r\n            .then(res => res.json())\r\n            .then(x => setTok(x));\r\n\r\n        promise.then(data => {\r\n            setUser(data);\r\n        });\r\n    }, []);\r\n\r\n    function arrayEquals(a, b) {\r\n        return Array.isArray(a) &&\r\n          Array.isArray(b) &&\r\n          a.length === b.length &&\r\n          a.every((val, index) => val === b[index]);\r\n      }\r\n\r\n    function validateForm() {\r\n        // return email.length > 0 && password.length > 0;\r\n        return password.length > 0;\r\n\r\n    }\r\n    const setCookie = (key, value, day) => {\r\n        let expires = 13600 * 1000\r\n        let date = new Date( + new Date() + expires)\r\n        document.cookie = `${key}=${value};expires=${date.toUTCString()}`\r\n    }\r\n\r\n    function handleSubmit(event) {\r\n        let login = !isLogin\r\n        event.preventDefault();\r\n        setIsLogin(login)\r\n        \r\n        // console.log(password.toLowerCase()])\r\n        // console.log(sha256(password))\r\n            if (sha256(password).localeCompare(tok.tokens)===0) {\r\n                // console.log(tok.tokens[password])\r\n                setCookie('login', true, 1)\r\n                history.push('/13')\r\n            }\r\n            else{\r\n                alert(\"Token is not right, please contact jzha524@emory.edu for web access\")\r\n                setCookie('login', '', -1)\r\n                history.push('/')\r\n            }\r\n        }\r\n\r\n\r\n        // if(password.toLowerCase() in tok.tokens){\r\n        //     // console.log(tok.tokens[password.toLowerCase()])\r\n        //     if (tok.tokens[password.toLowerCase()].localeCompare(email)===0) {\r\n        //         // console.log(tok.tokens[password])\r\n        //         setCookie('login', true, 1)\r\n        //         history.push('/13')\r\n        //     }\r\n        //     else{\r\n        //         alert(\"Name and email are not match\")\r\n        //         setCookie('login', '', -1)\r\n        //         history.push('/')\r\n        //     }\r\n        // }\r\n        // else{\r\n        //     alert(\"No such user, please contact the admin\")\r\n        //         setCookie('login', '', -1)\r\n        //         history.push('/')\r\n        // }\r\n    // }\r\n        \r\n\r\n    if (user === null) {\r\n        return <p>Loading profile...</p>;\r\n    }\r\n    else {\r\n\r\n        return (\r\n\r\n            <Layout header=\"Dashboard Log in\">\r\n                <Form.Input\r\n                    fluid\r\n                    icon=\"edit\"\r\n                    iconPosition=\"left\"\r\n                    type=\"password\"\r\n                    placeholder=\"Password\"\r\n                    className=\"auth-input-field\"\r\n                    onChange={e => setPassword(e.target.value)}\r\n                />\r\n                {/* <Form.Input\r\n                    fluid\r\n                    icon=\"envelope\"\r\n                    iconPosition=\"left\"\r\n                    placeholder=\"E-mail address\"\r\n                    className=\"auth-input-field\"\r\n                    onChange={e => setEmail(e.target.value)}\r\n                /> */}\r\n                <Button color=\"teal\" fluid size=\"huge\" onClick={handleSubmit} disabled={!validateForm()}>\r\n                    Login\r\n        </Button>\r\n        <p>Contact jzha524@emory.edu for web access</p>\r\n            </Layout>\r\n            \r\n        )\r\n    }\r\n}","// React\r\nimport React, { Suspense, useState, useEffect } from 'react'\r\n// Components & Hooks\r\n\r\nimport 'semantic-ui-css/semantic.min.css'\r\n\r\nexport default function fetchProfileData() {\r\n    return Promise.all([\r\n      fetchUser(),\r\n    ]).then((user) => {\r\n      return  user ;\r\n    });\r\n  }\r\n  \r\n  function fetchUser() {\r\n    // console.log(\"fetch user...\");\r\n    return new Promise(resolve => {\r\n      setTimeout(() => {\r\n        // console.log(\"fetched user\");\r\n        resolve(fetch('/data/token.json')\r\n        .then(res => {\r\n            res.json()}));\r\n      }, 1000);\r\n    });\r\n  }","// React\r\nimport React from 'react'\r\n// Components & Hooks\r\nimport StateMap from \"./StateMap\";\r\nimport CountyReport from \"./CountyReport\";\r\n// import AboutUs from \"./AboutUs\";\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\n\r\nimport PrivateRoute from \"./privateRoute\"\r\n\r\nimport Login from './login';\r\n\r\n\r\n\r\nApp.propTypes = {};\r\nexport default function App() {\r\n\r\n\r\n\r\n      return (\r\n\r\n        <Router>\r\n          <Switch>\r\n          <PrivateRoute path='/:stateFips/:countyFips' component = {CountyReport}/>\r\n          <PrivateRoute path='/:stateFips' component = {StateMap}/>\r\n          <Route exact path='/'>\r\n              <Login />\r\n            </Route>\r\n    \r\n          </Switch>\r\n        </Router>\r\n      );\r\n\r\n}\r\n\r\n","import 'react-app-polyfill/ie9';\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}