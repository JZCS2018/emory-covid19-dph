{"version":3,"sources":["components/AppBar.js","components/MapProvider.js","utils.js","components/useGeographies.js","components/Geographies.js","components/Geography.js","components/ComposableMap.js","components/Notes.js","components/StateMap.js","components/CountyReport.js","components/privateRoute.js","components/Layout.js","components/login.js","components/TokenGet.js","components/App.js","index.js"],"names":["AppBar","props","history","useHistory","Menu","borderless","inverted","fixed","style","backgroundImage","backgroundSize","Container","paddingRight","Item","as","header","Image","size","src","onClick","push","fontSize","fontWeight","color","lineHeight","geoPath","d3Geo","projections","MapContext","createContext","MapProvider","width","height","offsetX","offsetY","projection","projectionConfig","restProps","center","cx","cy","rotate","rx","ry","rz","parallels","p1","p2","s","scale","projMemo","useMemo","scl","proj","translate","forEach","d","makeProjection","useCallback","value","path","Provider","getFeatures","geographies","parseGeographies","Array","isArray","feats","feature","objects","Object","keys","features","useGeographies","geography","useContext","useState","setGeographies","useEffect","url","window","fetch","then","res","ok","Error","statusText","json","catch","error","console","log","geos","map","i","rsmKey","svgPath","prepareFeatures","Geographies","children","className","length","memo","onMouseEnter","onMouseLeave","onMouseDown","onMouseUp","onFocus","onBlur","isPressed","setPressed","isFocused","setFocus","tabIndex","evt","ComposableMap","Notes","paddingTop","casesColor","mortalityColor","colorPalette","colorPalette1","colorPalette2","nameList","createRef","sectionStyle2","numberWithCommas","x","toString","pattern","test","replace","StickyExampleAdjacentContext","activeItem","sTate","setsTate","Rail","attached","position","Sticky","offset","compact","pointing","secondary","vertical","href","name","active","activeCharacter","e","Header","paddingLeft","SvgMap","_","key","y","fill","strokeWidth","stroke","legendSplit","splitpoint","toFixed","legendSplit1","legendMax","legendMin","ChartGraph","dataTS","varGraphPair","metric","stateFips","countyFips","countyname","data1","theme","VictoryTheme","material","containerComponent","responsive","flyoutStyle","padding","left","right","top","bottom","tickLabels","tickFormat","t","Date","toLocaleDateString","month","day","tickValues","Math","round","dependentAxis","tickCount","data","barWidth","alignment","data2","labels","datum","labelComponent","orientation","fontFamily","constrainToVisibleArea","dx","textAnchor","fillOpacity","takeRight","DiscrpMap","textAlign","List","DiscrpChart","county","StateMap","config","setConfig","setStateName","setCountyFips","countyFipscvi","setCountyFipscvi","countyFipssi","setCountyFipssi","countyFipsubr","setCountyFipsubr","countyFipsblack","setCountyFipsblack","countyFipshis","setCountyFipshis","countyFipspov","setCountyFipspov","countyFipsdia","setCountyFipsdia","countyFipsa65","setCountyFipsa65","countyFipsmale","setCountyFipsmale","countyName","setCountyName","countyNamecvi","setCountyNamecvi","countyNamesi","setCountyNamesi","countyNameubr","setCountyNameubr","countyNameblack","setCountyNameblack","countyNamehis","setCountyNamehis","countyNamepov","setCountyNamepov","countyNamedia","setCountyNamedia","countyNamea65","setCountyNamea65","countyNamemale","setCountyNamemale","characterRef","setData","dataUs","setDataUs","data_index","setIndexData","dataCha","setDataCha","dateCur","setDateCur","colorCVI","setColorCVI","colorSI","setColorSI","colorUbr","setColorUbr","colorBlack","setColorBlack","colorHis","setColorHis","colorPov","setColorPov","colorDia","setColorDia","colorA65","setColorA65","colorMale","setColorMale","casesdaily","casesdailymean14","setCovidMetric","covidMetric14","setCovidMetric14","colors","setDataTS","setTooltipContent","setTooltipContentcvi","setTooltipContentsi","setTooltipContentubr","setTooltipContentblack","setTooltipContenthis","setTooltipContentpov","setTooltipContentdia","setTooltipContenta65","setTooltipContentmale","colorScale","setColorScale","data_cases","setDataCG","data_deaths","setDataDG","datades_cases","setDatadesCG","datades_deaths","setDatadesDG","setLegendMax","setLegendMax1","setLegendMin","setLegendMaxGraph","setLegendSplit","setLegendSplit1","setMetric","thresh_chara","metricOptions1","text","dropdownopt","metricName","setMetricName","delayHandler","setDelayHandler","configMatched","configs","find","fips","k","temp_Data_metric","each","sort","a","b","countIqr","quantile","belowIqr","filter","upIqr","split","scaleQuantile","domain","range","split1","thr","thr1","quantiles","floor","csUs","max","min","slice","indexColor","rateIqr","IQR3","interV","dicto","m","cs","scaleMap","si","scaleMapsi","his","scaleMap_his","black","scaleMap_black","pov","scaleMap_pov","dia","scaleMap_dia","age","scaleMap_age","male","scaleMap_male","id","ref","imageSrc","isCentered","opacity","parallaxOffset","minHeight","Grid","column","paddingBottom","divided","Column","Row","Content","marginTop","minWidth","stackable","columns","Subheader","Dropdown","background","borderTop","borderLeft","borderRight","borderBottom","borderRadius","inline","search","fluid","options","onChange","data-tip","data-for","geo","properties","COUNTYFP","default","outline","pressed","setTimeout","fips2county","clearTimeout","todaydate","year","Accordion","defaultActiveIndex","panels","title","content","icon","centered","domainPadding","ylog","minDomain","label","axisLabel","gutter","symbol","type","parseFloat","backgroundColor","maxDomain","scale1","offsetX1","offsetY2","ticks","axis","grid","horizontal","barRatio","ez","includes","Loader","sectionStyle1","BarChart","numm","cate","var_num","pad","keyv","var","co","var1","CountyReport","useParams","configsCounty","stateName","zipCode","setZipCode","setZipCodeFinal","dataG","setDataG","dataZip","setDataZip","setDataMapOut","setLegendMaxD","setLegendMinD","setLegendSplitD","setColorScaleD","tooltipContent","casescum","deathscum","casescumR","deathscumR","deathsdailymean14","casesdailymean14R","deathsdailymean14R","covidMetric","covidMetricLast","setCovidMetricLast","covidMetricGa","setCovidMetricGa","varMap","setVarMap","varNameMap","configscounty","countyfips","Number","csD","menu","Breadcrumb","Section","link","Divider","Table","celled","colSpan","font","Popup","trigger","todaydat","basic","flowing","hoverable","HeaderCell","toLocaleString","casescum14day","casescum14dayR","category14day","change14day","singleLine","date","deathscum14day","deathscum14dayR","cfr","align","cfrcompare","casesdailymean7","deathsdaily","deathsdailymean7","event","ZCTA5CE10","standalone","labelRadius","padAngle","striped","Body","v","Cell","isNaN","PrivateRoute","Component","component","render","p","document","cookie","alert","to","pathname","state","from","location","Layout","alt","Form","Group","autoComplete","Login","isLogin","setIsLogin","password","setPassword","user","setUser","tok","setTok","promise","Promise","all","resolve","setCookie","toUTCString","Input","iconPosition","placeholder","target","Button","login","preventDefault","sha256","localeCompare","tokens","disabled","App","exact","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.0c658204.chunk.js","sourcesContent":["import React from \"react\";\nimport ErrorBoundary from \"react-error-boundary\";\nimport { Container, Menu, Image, Divider } from 'semantic-ui-react';\n\nimport { useHistory } from 'react-router-dom';\n\n\nexport default function AppBar(props) {\n\n  const history = useHistory();\n\n  return (\n    <ErrorBoundary>\n      <Menu borderless inverted fixed='top'\n        style={{backgroundImage: 'url(\"/Emory_COVID_header_LightBlue.jpg\")',\n                backgroundSize: 'cover'}}>\n      {/* <Menu borderless inverted fixed='top'\n        style={{backgroundImage: 'url(\"https://www.htmlcsscolor.com/preview/128x128/103052.png\")',\n                backgroundSize: 'cover'}}> */}\n        <Container style = {{paddingRight: '150em'}}>\n          <Menu.Item as='a' header >\n                <Image size='mini' src='https://dph.georgia.gov/themes/custom/ga_forest/orchard/assets/images/icons/logo/ga-logo--gold.svg' />\n          </Menu.Item>\n          \n          <Menu.Item as='a' header onClick={() => history.push('/13')}>\n            <span style={{fontSize: '17px',fontWeight: 400, color: '#fff', lineHeight: 1.3}}>\n           <strong>Georgia Department</strong>\n           <br></br>\n           <em>of</em>\n           <strong>&nbsp;Public Health</strong>\n           </span>\n          </Menu.Item>\n          {/* <Menu.Item \n            active={props.menu==='countyReport'} \n            content='Home'\n            onClick={() => history.push('/13')}\n            name='countyReport'/> */}\n          {/* <Menu.Item \n            active={props.menu==='countyCompare'} \n            onClick={() => history.push('/compare-counties')}\n            name='countyCompare'>\n            Compare Counties\n          </Menu.Item> */}\n          {/* <Menu.Item \n            active={props.menu==='dataSources'} \n            onClick={() => history.push('/data-sources')}\n            name='dataSources'>\n            Data Sources &<br/>Interpretation\n          </Menu.Item>\n          <Menu.Item \n            active={props.menu==='aboutUs'} \n            content='About Us'\n            onClick={() => history.push('/about-team')}\n            name='aboutUs'/>             */}\n          {/* <Menu.Menu position='left'>\n            <Menu.Item as='a' header>\n              <Image size='mini' src='https://dph.georgia.gov/themes/custom/ga_forest/orchard/assets/images/icons/logo/ga-logo--gold.svg' />\n            </Menu.Item>\n          </Menu.Menu> */}\n        </Container>\n      </Menu>\n    </ErrorBoundary>\n  );\n}\n\n\n\n","\nimport React, {\n  createContext,\n  useMemo,\n  useCallback,\n} from \"react\"\nimport PropTypes from \"prop-types\"\nimport * as d3Geo from \"d3-geo\"\n\nconst { geoPath, ...projections } = d3Geo\n\nconst MapContext = createContext()\n\nconst makeProjection = ({\n  projectionConfig = {},\n  projection = \"geoEqualEarth\",\n  width = 800,\n  height = 600,\n  offsetX = 0,\n  offsetY = 0\n}) => {\n  const isFunc = typeof projection === \"function\"\n\n  if (isFunc) return projection\n\n  const scl = projectionConfig.scale || null;\n\n  let proj = projections[projection]().translate([width/2 + (offsetX)*scl/1000 ,\n                                              height/2 +(offsetY)*scl/1000]);\n\n  const supported = [\n    proj.center ? \"center\" : null,\n    proj.rotate ? \"rotate\" : null,\n    proj.scale ? \"scale\" : null,\n    proj.parallels ? \"parallels\" : null,\n  ]\n\n  supported.forEach(d => {\n    if (!d) return\n    proj = proj[d](projectionConfig[d] || proj[d]())\n  })\n\n  return proj\n}\n\nconst MapProvider = ({\n  width,\n  height,\n  offsetX,\n  offsetY,\n  projection,\n  projectionConfig,\n  ...restProps\n}) => {\n  const [cx, cy] = projectionConfig.center || []\n  const [rx, ry, rz] = projectionConfig.rotate || []\n  const [p1, p2] = projectionConfig.parallels || []\n  const s = projectionConfig.scale || null\n\n  const projMemo = useMemo(() => {\n    return makeProjection({\n      projectionConfig: {\n        center: (cx || cx === 0) || (cy || cy === 0) ? [cx, cy] : null,\n        rotate: (rx || rx === 0) || (ry || ry === 0) ? [rx, ry, rz] : null,\n        parallels: (p1 || p1 === 0) || (p2 || p2 === 0) ? [p1, p2] : null,\n        scale: s,\n      },\n      projection,\n      width,\n      height,\n      offsetX,\n      offsetY,\n    })\n  }, [ width, height, projection, cx, cy, rx, ry, rz, p1, p2, s, offsetX, offsetY ])\n\n  const proj = useCallback(projMemo, [projMemo])\n\n  const value = useMemo(() => {\n    return {\n      width,\n      height,\n      projection: proj,\n      path: geoPath().projection(proj),\n    }\n  }, [ width, height, proj ])\n\n  return (<MapContext.Provider value={value} {...restProps} />)\n}\n\nMapProvider.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  offsetX: PropTypes.number,\n  offsetY: PropTypes.number,\n  projection: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.func,\n  ]),\n  projectionConfig: PropTypes.object,\n}\n\nexport { MapProvider, MapContext }\n","\nimport { feature } from \"topojson-client\"\n\nexport function getCoords(w, h, t) {\n  const xOffset = (w * t.k - w) / 2\n  const yOffset = (h * t.k - h) / 2\n  return [w / 2 - (xOffset + t.x) / t.k, h / 2 - (yOffset + t.y) / t.k]\n}\n\nexport function fetchGeographies(url) {\n  return fetch(url)\n    .then(res => {\n      if (!res.ok) {\n        throw Error(res.statusText)\n      }\n      return res.json()\n    }).catch(error => {\n      console.log(\"There was a problem when fetching the data: \", error)\n    })\n}\n\nexport function getFeatures(geographies, parseGeographies) {\n  if (Array.isArray(geographies)) return parseGeographies ? parseGeographies(geographies) : geographies\n  const feats = feature(\n    geographies,\n    geographies.objects[Object.keys(geographies.objects)[0]]\n  ).features\n  return parseGeographies ? parseGeographies(feats) : feats\n}\n\nexport function prepareFeatures(geographies, path) {\n  return geographies ? geographies.map((d, i) => {\n    return {\n      ...d,\n      rsmKey: `geo-${i}`,\n      svgPath: path(d),\n    }\n  }) : []\n}\n\nexport function createConnectorPath(dx = 30, dy = 30, curve = 0.5) {\n  const curvature = Array.isArray(curve) ? curve : [curve, curve]\n  const curveX = dx / 2 * curvature[0]\n  const curveY = dy / 2 * curvature[1]\n  return `M${0},${0} Q${-dx / 2 - curveX},${-dy / 2 + curveY} ${-dx},${-dy}`\n}\n\nexport function isString(geo) { return typeof geo === \"string\" }\n","\nimport { useMemo, useState, useEffect, useContext } from \"react\"\nimport { MapContext } from \"./MapProvider\"\n\nimport { fetchGeographies, getFeatures, prepareFeatures, isString } from \"../utils\"\n\nexport default function useGeographies({ geography, parseGeographies }) {\n  const { path } = useContext(MapContext)\n  const [geographies, setGeographies] = useState()\n\n  useEffect(() => {\n    if (typeof window === `undefined`) return\n\n    if (isString(geography)) {\n      fetchGeographies(geography).then(geos => {\n        if (geos) setGeographies(getFeatures(geos, parseGeographies))\n      })\n    } else {\n      setGeographies(getFeatures(geography, parseGeographies))\n    }\n  }, [geography, parseGeographies])\n\n  const output = useMemo(() => {\n    return prepareFeatures(geographies, path)\n  }, [geographies, path])\n\n  return { geographies: output }\n}\n","\nimport React, { useContext } from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport { MapContext } from \"./MapProvider\"\nimport useGeographies from \"./useGeographies\"\n\nconst Geographies = ({\n  geography,\n  children,\n  parseGeographies,\n  className = \"\",\n  ...restProps\n}) => {\n  const { path, projection } = useContext(MapContext)\n  const { geographies } = useGeographies({ geography, parseGeographies })\n  // console.log(geographies)\n\n  return (\n    <g className={`rsm-geographies ${className}`} {...restProps}>\n      {\n        geographies && geographies.length > 0 &&\n        children({ geographies, path, projection })\n        \n      }\n    </g>\n  )\n}\n\nGeographies.propTypes = {\n  geography: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.object,\n    PropTypes.array,\n  ]),\n  children: PropTypes.func,\n  parseGeographies: PropTypes.func,\n  className: PropTypes.string,\n}\n\nexport default Geographies\n","\nimport React, { useState, memo } from \"react\"\nimport PropTypes from \"prop-types\"\n\nconst Geography = ({\n  geography,\n  onMouseEnter,\n  onMouseLeave,\n  onMouseDown,\n  onMouseUp,\n  onFocus,\n  onBlur,\n  style = {},\n  className = \"\",\n  ...restProps\n}) => {\n  const [isPressed, setPressed] = useState(false)\n  const [isFocused, setFocus] = useState(false)\n\n  function handleMouseEnter(evt) {\n    setFocus(true)\n    if (onMouseEnter) onMouseEnter(evt)\n    // console.log(onMouseEnter)\n  }\n\n  function handleMouseLeave(evt) {\n    setFocus(false)\n    if (isPressed) setPressed(false)\n    if (onMouseLeave) onMouseLeave(evt)\n  }\n\n  function handleFocus(evt) {\n    setFocus(true)\n    if (onFocus) onFocus(evt)\n  }\n\n  function handleBlur(evt) {\n    setFocus(false)\n    if (isPressed) setPressed(false)\n    if (onBlur) onBlur(evt)\n  }\n\n  function handleMouseDown(evt) {\n    setPressed(true)\n    if (onMouseDown) onMouseDown(evt)\n  }\n\n  function handleMouseUp(evt) {\n    setPressed(false)\n    if (onMouseUp) onMouseUp(evt)\n  }\n\n  return (\n    <path\n      tabIndex=\"0\"\n      className={`rsm-geography ${className}`}\n      d={geography.svgPath}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      onFocus={handleFocus}\n      onBlur={handleBlur}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n      style={style[isPressed || isFocused ? (isPressed ? \"pressed\" : \"hover\") : \"default\"]}\n      {...restProps}\n    />\n  )\n}\n\nGeography.propTypes = {\n  geography: PropTypes.object,\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  onMouseDown: PropTypes.func,\n  onMouseUp: PropTypes.func,\n  onFocus: PropTypes.func,\n  onBlur: PropTypes.func,\n  style: PropTypes.object,\n  className: PropTypes.string,\n}\n\nexport default memo(Geography)\n","\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport { MapProvider } from \"./MapProvider\"\n\nconst ComposableMap = ({\n  width = 800,\n  height = 600,\n  offsetX = 0,\n  offsetY = 0,\n  projection = \"geoEqualEarth\",\n  projectionConfig = {},\n  className = \"\",\n  ...restProps\n}) => {\n  return (\n    <MapProvider\n      width={width}\n      height={height}\n      offsetX={offsetX}\n      offsetY={offsetY}\n      projection={projection}\n      projectionConfig={projectionConfig}\n    >\n      <svg\n        width={width}\n        height={height}\n        className={`rsm-svg ${className}`}\n        {...restProps}\n      />\n    </MapProvider>\n  )\n}\n\nComposableMap.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  projection: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.func,\n  ]),\n  projectionConfig: PropTypes.object,\n  className: PropTypes.string,\n}\n\nexport default ComposableMap\n","import React from 'react'\nimport { Grid, List, Divider, Image } from 'semantic-ui-react'\n\nexport default function Notes(props){\n\n  return (\n    <div style={{paddingTop: '2em', fontWeight: 300}}>\n    {/* <Divider/>\n    <Grid>\n      <Grid.Row>\n        <Grid.Column style={{fontSize: '1em', lineHeight: '1.5em'}}>\n          Early data about COVID-19 suggests that communities are affected very differently due to social determinants of health like population density, poverty, residential segregation, underlying chronic health conditions, and availability of medical services. \n          In order to predict how the epidemic will continue to unfold and prepare for the future, it is critical to understand differences in underlying risk factors. \n          There is no one-size-fits all approach to combat the epidemic, but accurate and meaningful data is a key component of a robust public health response that is informed by contextual factors and prioritizes health equity.\n          <br/><br/>\n          The COVID-19 Health Equity Dashboard seeks to fill the gaps in county-level data about the virus and underlying social determinants of health. \n          Our goal is for this Dashboard to facilitate easy comparisons of counties with respect to COVID-19 outcomes and social determinants. \n          We hope this becomes a valuable resource for and critical component of tailored public health responses to COVID-19 across the wide range of environments that Americans inhabit.\n        </Grid.Column>\n      </Grid.Row>\n      <Divider hidden/>\n      <Grid.Row columns={2}>\n        <Grid.Column>          \n          <Image size='small' src='/logo.png' />\n          &copy; 2020 Emory University. All rights reserved.\n        </Grid.Column>\n        <Grid.Column>          \n          <small>\n            This dashboard is created using\n            <List as='ol'>\n              <List.Item as='li' value='-'><a href=\"https://www.react-simple-maps.io/\">React Simple Maps</a> by <a href=\"https://www.zcreativelabs.com/\">z creative labs</a></List.Item>\n              <List.Item as='li' value='-'><a href=\"https://formidable.com/open-source/victory/\">Victory</a> by <a href=\"https://formidable.com/\">Formidable</a></List.Item>\n              <List.Item as='li' value='-'><a href=\"https://github.com/Semantic-Org/Semantic-UI-React\">Semantic UI React</a> by <a href=\"https://github.com/levithomason\">@levithomason</a>and an amazing community of <a href=\"https://github.com/Semantic-Org/Semantic-UI-React/graphs/contributors\">contributors</a></List.Item> \n              <List.Item as='li' value='-'><a href=\"https://github.com/facebook/create-react-app\">Create React App</a> by <a href=\"https://about.fb.com/company-info/\">Facebook</a></List.Item> \n            </List>\n          </small>\n        </Grid.Column>\n      </Grid.Row>\n    </Grid> */}\n    </div>);\n}\n","import React, { useEffect, Component, useState, createRef, useRef, Text } from 'react'\r\nimport { Container, Grid, Breadcrumb, Dropdown, Header, Loader, Divider, Rail, Sticky, Popup, Button, Menu, Modal, Accordion, Icon, List } from 'semantic-ui-react'\r\nimport AppBar from './AppBar';\r\nimport Geographies from './Geographies';\r\nimport Geography from './Geography';\r\nimport ComposableMap from './ComposableMap';\r\nimport {\r\n    VictoryChart,\r\n    VictoryTooltip,\r\n    VictoryVoronoiContainer,\r\n    VictoryContainer,\r\n    VictoryGroup,\r\n    VictoryBar,\r\n    VictoryTheme,\r\n    VictoryAxis,\r\n    VictoryLegend,\r\n    VictoryLine,\r\n    VictoryLabel,\r\n    VictoryScatter,\r\n    VictoryPie\r\n} from 'victory';\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport LazyHero from 'react-lazy-hero';\r\nimport { Waypoint } from 'react-waypoint'\r\n// import Background from '/CoronaVirus_LightBlue.jpg';\r\n\r\nimport { useParams, useHistory } from 'react-router-dom';\r\nimport Notes from './Notes';\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport _ from 'lodash';\r\nimport { scaleQuantile, scaleQuantize } from \"d3-scale\";\r\nimport { quantile, ascending } from 'd3';\r\nimport fips2county from './fips2county.json'\r\n// import configscounty from \"./county_config.json\";\r\n\r\nimport configs from \"./state_config.json\";\r\n\r\nconst casesColor = [\r\n    \"#72ABB1\",\r\n    \"#337fb5\"\r\n];\r\nconst mortalityColor = [\r\n    \"#0270A1\",\r\n    \"#024174\"\r\n];\r\nconst colorPalette = [\r\n    \"#e1dce2\",\r\n    \"#d3b6cd\",\r\n    \"#bf88b5\",\r\n    \"#af5194\",\r\n    \"#99528c\",\r\n    \"#633c70\",\r\n];\r\nconst colorPalette1 = [\r\n    \"#67335E\",\r\n    \"#6B2A4D\",\r\n    \"#70213B\",\r\n    \"#74182A\",\r\n    '#7d0707'\r\n];\r\nconst colorPalette2 = [\r\n    \"#e1dce2\",\r\n    \"#d3b6cd\",\r\n    \"#bf88b5\",\r\n    \"#af5194\",\r\n    \"#99528c\",\r\n\r\n];\r\n\r\nconst dataupColor = '#6899ce';\r\nconst colorOut = '#c6007e';\r\nconst contextRef = createRef()\r\nconst nameList = ['summary', 're', 'cvi', 'si', 'urbanrural', 'poverty', 'black', 'hispanic', 'diabetes', 'age', 'male'];\r\nvar scrollCount = 0;\r\n\r\nconst countyColor = '#f2a900';\r\nconst stateColor = '#bdbfc1';\r\nconst nationColor = '#d9d9d7';\r\nconst colorHighlight = '#f2a900';\r\nconst marks = [\r\n    {\r\n        value: 0,\r\n        label: 'Mar 1',\r\n    },\r\n    {\r\n        value: 10,\r\n        label: 'April 1',\r\n    },\r\n    {\r\n        value: 20,\r\n        label: 'May 1',\r\n    },\r\n    {\r\n        value: 30,\r\n        label: 'June 1',\r\n    },\r\n];\r\n\r\nconst sectionStyle1 = {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    backgroundColor: '#f0fafe'\r\n};\r\nconst sectionStyle2 = {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    backgroundSize: 'cover',\r\n    backgroundImage: `url(\"/CoronaVirus_LightBlue.jpg\")`\r\n};\r\n\r\nfunction valuetext(value) {\r\n    return `${value}°C`;\r\n}\r\n\r\nfunction numberWithCommas(x) {\r\n    x = x.toString();\r\n    var pattern = /(-?\\d+)(\\d{3})/;\r\n    while (pattern.test(x))\r\n        x = x.replace(pattern, \"$1,$2\");\r\n    return x;\r\n}\r\n\r\nfunction StickyExampleAdjacentContext(props) {\r\n    const [sTate, setsTate] = useState({ activeItem: 'Interactive Map' })\r\n    const { activeItem } = sTate\r\n    useEffect(() => {\r\n        setsTate(nameList[scrollCount])\r\n        console.log('name changed!!!!!!!!')\r\n    }, [scrollCount])\r\n    // console.log(props.activeCharacter)\r\n    return (\r\n\r\n        <div >\r\n            <Rail attached size='mini' position='left'>\r\n                <Sticky offset={150}>\r\n                    <Menu\r\n                        size='small'\r\n                        compact\r\n                        pointing secondary vertical>\r\n                        <Menu.Item as='a' href=\"#summary\" name='Interactive Map' active={props.activeCharacter == 'Interactive Map' || activeItem === 'Interactive Map'}\r\n                            onClick={(e, { name }) => { setsTate({ activeItem: name }) }}><Header as='h4'>Georgia Interactive Map</Header></Menu.Item>\r\n                        <Menu.Item as='a' href=\"#age_g\" name='COVID-19 Demographics' active={props.activeCharacter === 'COVID-19 Demographics' || activeItem === 'COVID-19 Demographics'}\r\n                            onClick={(e, { name }) => { setsTate({ activeItem: name }) }}><Header as='h4'>COVID-19 Demographics</Header></Menu.Item>\r\n\r\n\r\n                        <Menu.Item as='a' style={{ paddingLeft: '3em' }} href=\"#age_g\" name='COVID-19 by Age' active={props.activeCharacter === 'COVID-19 by Age' || activeItem === 'COVID-19 by Age'}\r\n                            onClick={(e, { name }) => { setsTate({ activeItem: name }) }}>Age</Menu.Item>\r\n                        <Menu.Item as='a' style={{ paddingLeft: '3em' }} href=\"#sex_g\" name='COVID-19 by Sex' active={props.activeCharacter === 'COVID-19 by Sex' || activeItem === 'COVID-19 by Sex'}\r\n                            onClick={(e, { name }) => { setsTate({ activeItem: name }) }}>Sex</Menu.Item>\r\n                        <Menu.Item style={{ paddingLeft: '3em' }} as='a' href=\"#re\" name='COVID-19 by Race/Ethnicity' active={props.activeCharacter === 'COVID-19 by Race/Ethnicity' || activeItem === 'COVID-19 by Race/Ethnicity'}\r\n                            onClick={(e, { name }) => { setsTate({ activeItem: name }) }}>Race and Ethnicity</Menu.Item>\r\n\r\n\r\n                        <Menu.Item as='a' href=\"#chara\" name='COVID-19 by County Characteristics' active={props.activeCharacter === 'COVID-19 by County Characteristics' || activeItem === 'COVID-19 by County Characteristics'}\r\n                            onClick={(e, { name }) => { setsTate({ activeItem: name }) }}><Header as='h4'>COVID-19 County Disparities</Header></Menu.Item>\r\n\r\n                        <Menu.Item as='a' style={{ paddingLeft: '3em' }} href=\"#cvi\" name='Community Vulnerability Index' active={props.activeCharacter === 'Community Vulnerability Index' || activeItem === 'Community Vulnerability Index'}\r\n                            onClick={(e, { name }) => { setsTate({ activeItem: name }) }} >Community COVID-19 Vulnerability Index</Menu.Item>\r\n                        <Menu.Item as='a' style={{ paddingLeft: '3em' }} href=\"#si\" name='Residential Segregation Index' active={props.activeCharacter === 'Residential Segregation Index' || activeItem === 'Residential Segregation Index'}\r\n                            onClick={(e, { name }) => { setsTate({ activeItem: name }) }}>County Racial Segregation Index</Menu.Item>\r\n                        <Menu.Item as='a' style={{ paddingLeft: '3em' }} href=\"#urbanrural\" name='County Metropolitan Status' active={props.activeCharacter === 'Characteristics - Metropolitan Status' || activeItem === 'Characteristics - Metropolitan Status'}\r\n                            onClick={(e, { name }) => { setsTate({ activeItem: name }) }} />\r\n                        <Menu.Item as='a' style={{ paddingLeft: '3em' }} href=\"#poverty\" name='County Poverty' active={props.activeCharacter === 'Characteristics - Poverty' || activeItem === 'Characteristics - Poverty'}\r\n                            onClick={(e, { name }) => { setsTate({ activeItem: name }) }} />\r\n                        <Menu.Item as='a' style={{ paddingLeft: '3em' }} href=\"#black\" name='County African American' active={props.activeCharacter === 'Characteristics - African American' || activeItem === 'Characteristics - African American'}\r\n                            onClick={(e, { name }) => { setsTate({ activeItem: name }) }} />\r\n                        <Menu.Item as='a' style={{ paddingLeft: '3em' }} href=\"#hispanic\" name='County Hispanic' active={props.activeCharacter === 'Characteristics - Hispanic' || activeItem === 'Characteristics - Hispanic'}\r\n                            onClick={(e, { name }) => { setsTate({ activeItem: name }) }} />\r\n                        <Menu.Item as='a' style={{ paddingLeft: '3em' }} href=\"#diabetes\" name='County Diabetes' active={props.activeCharacter === 'Characteristics - Diabetes' || activeItem === 'Characteristics - Diabetes'}\r\n                            onClick={(e, { name }) => { setsTate({ activeItem: name }) }} />\r\n                        <Menu.Item as='a' style={{ paddingLeft: '3em' }} href=\"#age\" name='County Age over 65' active={props.activeCharacter === 'Characteristics - Age over 65' || activeItem === 'Characteristics - Age over 65'}\r\n                            onClick={(e, { name }) => { setsTate({ activeItem: name }) }} />\r\n                        <Menu.Item as='a' style={{ paddingLeft: '3em' }} href=\"#male\" name='County Male Percentage' active={props.activeCharacter === 'Characteristics - Male Percentage' || activeItem === 'Characteristics - Male Percentage'}\r\n                            onClick={(e, { name }) => { setsTate({ activeItem: name }) }} />\r\n                    </Menu>\r\n                </Sticky>\r\n            </Rail>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nfunction SvgMap(props) {\r\n    // var lengthSplit1 = props.lengthSplit1;\r\n    if (props.name === 'casescum') {\r\n        return (\r\n            <svg width=\"500\" height=\"55\">\r\n                {_.map(colorPalette, (color, i) => {\r\n                    return <rect key={i} x={50 + 25 * i} y={20} width=\"25\" height=\"20\" style={{ fill: color, strokeWidth: 1, stroke: color }} />\r\n                })}\r\n                {_.map(colorPalette1, (color, i) => {\r\n                    return <rect key={i} x={200 + 25 * i} y={20} width=\"25\" height=\"20\" style={{ fill: color, strokeWidth: 1, stroke: color }} />\r\n                })}\r\n\r\n                {/* <rect x={180} y={20} width=\"25\" height=\"20\" style={{ fill: colorOut, strokeWidth: 1, stroke: colorOut }} /> */}\r\n                <text x={50} y={52} style={{ fontSize: '0.8em' }}>Low</text>\r\n                <text x={300} y={52} style={{ fontSize: '0.8em' }}>High</text>\r\n                {_.map(props.legendSplit, (splitpoint, i) => {\r\n                    if (props.legendSplit[i] < 1) {\r\n                        return <text key={i} x={57 + 25 * (i)} y={15} style={{ fontSize: '0.7em' }}> {props.legendSplit[i].toFixed(1)}</text>\r\n                    }\r\n                    if (props.legendSplit[i] >= 1000) {\r\n                        return <text key={i} x={70 + 25 * (i)} y={15} style={{ fontSize: '0.7em' }}> {(props.legendSplit[i] / 1000).toFixed(1) + \"K\"}</text>\r\n                    }\r\n                    return <text key={i} x={70 + 25 * (i)} y={15} style={{ fontSize: '0.7em' }}> {props.legendSplit[i].toFixed(0)}</text>\r\n                })}\r\n\r\n                {_.map(props.legendSplit1, (splitpoint, i) => {\r\n                    if (props.legendSplit1[i] >= 1000) {\r\n                        return <text key={i} x={220 + 25 * (i)} y={15} style={{ fontSize: '0.7em' }}> {(props.legendSplit1[i] / 1000).toFixed(1) + \"K\"}</text>\r\n                    }\r\n                    return <text key={i} x={220 + 25 * (i)} y={15} style={{ fontSize: '0.7em' }}> {props.legendSplit1[i].toFixed(0)}</text>\r\n                })}\r\n                <text x={325} y={15} style={{ fontSize: '0.7em' }}>{props.legendMax}</text>\r\n                <text x={50} y={15} style={{ fontSize: '0.7em' }}> {(props.legendMin / 100).toFixed(0)} </text>\r\n                <rect x={5} y={20} width=\"25\" height=\"20\" style={{ fill: \"#FFFFFF\", strokeWidth: 0.5, stroke: \"#000000\" }} />\r\n                <text x={8} y={52} style={{ fontSize: '0.7em' }}> N/A </text>\r\n            </svg>\r\n\r\n        )\r\n    }\r\n    if (props.name === 'casescum14dayR') {\r\n        return (\r\n            <svg width=\"500\" height=\"55\">\r\n                {_.map(colorPalette, (color, i) => {\r\n                    return <rect key={i} x={55 + 25 * i} y={20} width=\"25\" height=\"20\" style={{ fill: color, strokeWidth: 1, stroke: color }} />\r\n                })}\r\n\r\n                <rect x={230} y={20} width=\"25\" height=\"20\" style={{ fill: colorOut, strokeWidth: 1, stroke: colorOut }} />\r\n                <text x={55} y={52} style={{ fontSize: '0.8em' }}>Low</text>\r\n                <text x={230} y={52} style={{ fontSize: '0.8em' }}>High</text>\r\n                {_.map(props.legendSplit, (splitpoint, i) => {\r\n                    if (props.legendSplit[i] < 1) {\r\n                        return <text key={i} x={62 + 25 * (i)} y={15} style={{ fontSize: '0.7em' }}> {props.legendSplit[i].toFixed(1)}</text>\r\n                    }\r\n                    if (props.legendSplit[i] >= 1000) {\r\n                        return <text key={i} x={72 + 25 * (i)} y={15} style={{ fontSize: '0.7em' }}> {(props.legendSplit[i] / 1000).toFixed(1) + \"K\"}</text>\r\n                    }\r\n                    return <text key={i} x={72 + 25 * (i)} y={15} style={{ fontSize: '0.7em' }}> {props.legendSplit[i].toFixed(0)}</text>\r\n                })}\r\n                {props.legendMin < 100 ? <text x={55} y={15} style={{ fontSize: '0.7em' }}> {(props.legendMin / 1).toFixed(0)} </text> :\r\n                    <text x={47} y={15} style={{ fontSize: '0.7em' }}> {(props.legendMin / 1).toFixed(0)} </text>\r\n                }\r\n\r\n\r\n\r\n                <text x={224} y={15} style={{ fontSize: '0.7em' }}>{props.legendSplit[colorPalette.length - 1] < 1 ? props.legendSplit[colorPalette.length - 1].toFixed(1)\r\n                    : props.legendSplit[colorPalette.length - 1] > 1000 ?\r\n                        (props.legendSplit[colorPalette.length - 1] / 1000).toFixed(1) + \"K\" : props.legendSplit[colorPalette.length - 1].toFixed(0)\r\n                }</text>\r\n                {/* <text x={251} y={15} style={{ fontSize: '0.7em' }}>{props.legendMax}</text> */}\r\n                <rect x={5} y={20} width=\"25\" height=\"20\" style={{ fill: \"#FFFFFF\", strokeWidth: 0.5, stroke: \"#000000\" }} />\r\n                <text x={8} y={52} style={{ fontSize: '0.7em' }}> N/A </text>\r\n\r\n                {/* <text x={250} y={42} style={{fontSize: '0.8em'}}> Click on a county below </text>\r\n          <text x={250} y={52} style={{fontSize: '0.8em'}}> for a detailed report. </text> */}\r\n            </svg>\r\n\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <svg width=\"500\" height=\"55\">\r\n                {_.map(colorPalette, (color, i) => {\r\n                    return <rect key={i} x={55 + 25 * i} y={20} width=\"25\" height=\"20\" style={{ fill: color, strokeWidth: 1, stroke: color }} />\r\n                })}\r\n\r\n                <rect x={230} y={20} width=\"25\" height=\"20\" style={{ fill: colorOut, strokeWidth: 1, stroke: colorOut }} />\r\n                <text x={55} y={52} style={{ fontSize: '0.8em' }}>Low</text>\r\n                <text x={230} y={52} style={{ fontSize: '0.8em' }}>High</text>\r\n                {_.map(props.legendSplit, (splitpoint, i) => {\r\n                    if (props.legendSplit[i] < 1) {\r\n                        return <text key={i} x={62 + 25 * (i)} y={15} style={{ fontSize: '0.7em' }}> {props.legendSplit[i].toFixed(1)}</text>\r\n                    }\r\n                    if (props.legendSplit[i] >= 1000) {\r\n                        return <text key={i} x={72 + 25 * (i)} y={15} style={{ fontSize: '0.7em' }}> {(props.legendSplit[i] / 1000).toFixed(1) + \"K\"}</text>\r\n                    }\r\n                    return <text key={i} x={72 + 25 * (i)} y={15} style={{ fontSize: '0.7em' }}> {props.legendSplit[i].toFixed(0)}</text>\r\n                })}\r\n                {props.legendMin < 100 ? <text x={55} y={15} style={{ fontSize: '0.7em' }}> {(props.legendMin / 1).toFixed(0)} </text> :\r\n                    <text x={47} y={15} style={{ fontSize: '0.7em' }}> {(props.legendMin / 1).toFixed(0)} </text>\r\n                }\r\n\r\n\r\n\r\n                <text x={224} y={15} style={{ fontSize: '0.7em' }}>{props.legendSplit[colorPalette.length - 1] < 1 ? props.legendSplit[colorPalette.length - 1].toFixed(1)\r\n                    : props.legendSplit[colorPalette.length - 1] > 1000 ?\r\n                        (props.legendSplit[colorPalette.length - 1] / 1000).toFixed(1) + \"K\" : props.legendSplit[colorPalette.length - 1].toFixed(0)\r\n                }</text>\r\n                <text x={251} y={15} style={{ fontSize: '0.7em' }}>{props.legendMax}</text>\r\n                <rect x={5} y={20} width=\"25\" height=\"20\" style={{ fill: \"#FFFFFF\", strokeWidth: 0.5, stroke: \"#000000\" }} />\r\n                <text x={8} y={52} style={{ fontSize: '0.7em' }}> N/A </text>\r\n\r\n                {/* <text x={250} y={42} style={{fontSize: '0.8em'}}> Click on a county below </text>\r\n          <text x={250} y={52} style={{fontSize: '0.8em'}}> for a detailed report. </text> */}\r\n            </svg>\r\n\r\n        )\r\n    }\r\n}\r\n\r\n\r\nfunction ChartGraph(props) {\r\n    var varGraphPair = props.name;\r\n    var dataTS;\r\n    var metric = props.metric;\r\n    var stateFips = props.stateFips;\r\n    var countyFips = props.countyFips;\r\n    var countyname = props.countyname;\r\n\r\n    if (props.metric === \"casescum14dayR\") {\r\n        dataTS = props.data1;\r\n\r\n        return (\r\n            <VictoryChart theme={VictoryTheme.material}\r\n                containerComponent={\r\n                    <VictoryVoronoiContainer\r\n                        responsive={false}\r\n                        flyoutStyle={{ fill: \"white\" }}\r\n                    />\r\n                }\r\n                width={730}\r\n                height={500}\r\n                padding={{ left: 55, right: 70, top: 10, bottom: 50 }}>\r\n                <VictoryAxis\r\n                    style={{\r\n                        tickLabels: { fontSize: 25, padding: 5 }\r\n                    }}\r\n                    tickFormat={(t) => new Date(t * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric' })}\r\n\r\n                    tickValues={[\r\n                        dataTS[dataTS.length - Math.round(dataTS.length / 4) * 3 - 1].t,\r\n                        dataTS[dataTS.length - Math.round(dataTS.length / 4) * 2 - 1].t,\r\n                        dataTS[dataTS.length - Math.round(dataTS.length / 4) - 1].t,\r\n                        dataTS[dataTS.length - 1].t]}\r\n\r\n                />\r\n                <VictoryAxis dependentAxis tickCount={5}\r\n                    style={{\r\n                        tickLabels: { fontSize: 25, padding: 5 }\r\n                    }}\r\n                    tickFormat={(y) => (y < 1000 ? (Math.round(y, 2) === 0.00 ? \" \" : y) : (y / 1000 + 'k'))}\r\n                />\r\n                <VictoryBar style={{ data: { fill: stateColor } }} barWidth={8} alignment=\"start\" data={dataTS ? dataTS : props.data2[\"99999\"]}\r\n                    x='t' y={varGraphPair[metric]['name'][0]}\r\n\r\n                />\r\n                <VictoryLine name=\"Line1\" style={{ data: { stroke: countyColor, strokeWidth: ({ active }) => active ? 7 : 5 } }} data={dataTS ? dataTS : props.data2[\"99999\"]}\r\n                    x='t' y={varGraphPair[metric]['name'][1]}\r\n                    labels={({ datum }) => `${countyname}\\n` +\r\n                        `Date: ${new Date(datum.t * 1000).toLocaleDateString()}\\n` +\r\n                        `${varGraphPair[metric]['legend'][1]}: ${Math.round(datum[varGraphPair[metric]['name'][1]], 2)}\\n` +\r\n                        `${varGraphPair[metric]['legend'][0]}: ${Math.round(datum[varGraphPair[metric]['name'][0]], 2)}`\r\n                    }\r\n                    labelComponent={\r\n                        <VictoryTooltip\r\n                            orientation=\"top\"\r\n                            style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'white' }}\r\n                            constrainToVisibleArea\r\n                            labelComponent={<VictoryLabel dx={-100} textAnchor='start' />}\r\n                            flyoutStyle={{ fill: \"black\", fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\r\n                        />\r\n                    }\r\n                />\r\n                {varGraphPair[metric]['name'][1] === 'casesdailymean7' || varGraphPair[metric]['name'][1] === 'deathsdailymean7' ?\r\n                    <VictoryAxis dependentAxis tickCount={5}\r\n                        style={{\r\n                            tickLabels: { fontSize: 25, padding: 5 }\r\n                        }}\r\n                        tickFormat={(y) => (y < 1000 ? (Math.round(y, 2) === 0.00 ? \" \" : y) : (y / 1000 + 'k'))}\r\n                    /> :\r\n                    <VictoryLine name=\"Line11\" style={{ data: { stroke: '#007dba', strokeWidth: ({ active }) => active ? 5 : 3 } }} data={_.takeRight(props.data2[stateFips], 14) ? _.takeRight(props.data2[stateFips], 14) : props.data2[\"99999\"]}\r\n                        x='t' y={varGraphPair[metric]['name'][1]}\r\n                        labels={({ datum }) => [`Georgia\\n`,\r\n                            `Date: ${new Date(datum.t * 1000).toLocaleDateString()}\\n`,\r\n                            `${varGraphPair[metric]['legend'][1]}: ${Math.round(datum[varGraphPair[metric]['name'][1]], 2)}\\n`,\r\n                            `${varGraphPair[metric]['legend'][0]}: ${Math.round(datum[varGraphPair[metric]['name'][0]], 2)}`\r\n                        ]}\r\n                        labelComponent={\r\n                            <VictoryTooltip\r\n                                orientation=\"top\"\r\n                                style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'white' }}\r\n                                constrainToVisibleArea\r\n                                labelComponent={<VictoryLabel dx={-100} textAnchor='start' />}\r\n                                flyoutStyle={{ fill: \"black\", fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\r\n                            />\r\n                        }\r\n                    />}\r\n            </VictoryChart>)\r\n    }\r\n    else {\r\n        dataTS = props.data2;\r\n        return (\r\n            <VictoryChart theme={VictoryTheme.material}\r\n                containerComponent={\r\n                    <VictoryVoronoiContainer\r\n\r\n                        responsive={false}\r\n                        flyoutStyle={{ fill: \"black\" }}\r\n                    />\r\n                }\r\n                width={730}\r\n                height={500}\r\n                padding={{ left: 55, right: 70, top: 10, bottom: 50 }}>\r\n                <VictoryAxis\r\n                    style={{\r\n                        tickLabels: { fontSize: 25, padding: 5 }\r\n                    }}\r\n                    tickFormat={(t) => new Date(t * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric' })}\r\n                    tickValues={[\r\n                        // 1583035200, 1585713600, 1588305600, 1590984000, 1593576000\r\n                        dataTS['13001'][0].t,\r\n                        dataTS[\"13001\"][31].t,\r\n                        dataTS[\"13001\"][61].t,\r\n                        dataTS[\"13001\"][92].t,\r\n                        dataTS[\"13001\"][122].t,\r\n                        dataTS[\"13001\"][153].t,\r\n                        dataTS[\"13001\"][184].t,\r\n                        dataTS[\"13001\"][214].t,\r\n                        dataTS[\"13001\"][245].t,\r\n\r\n                        dataTS[\"13001\"][dataTS[\"13001\"].length - 1].t\r\n                    ]}\r\n\r\n\r\n                />\r\n                <VictoryAxis dependentAxis tickCount={6}\r\n                    style={{\r\n                        tickLabels: { fontSize: 25, padding: 5 }\r\n                    }}\r\n                    tickFormat={(y) => (y < 1000 ? (Math.round(y, 2) === 0.00 ? \" \" : y) : (y / 1000 + 'k'))}\r\n                />\r\n                <VictoryBar style={{ data: { fill: stateColor } }} barWidth={4} data={dataTS[stateFips + countyFips] ? dataTS[stateFips + countyFips] : dataTS[\"99999\"]}\r\n                    x='t' y={varGraphPair[metric]['name'][0]}\r\n\r\n                />\r\n                {countyFips === '' ? <VictoryLine style={{ data: { stroke: '007dba', strokeWidth: 0 } }} data={dataTS[stateFips + countyFips] ? dataTS[stateFips + countyFips] : dataTS[\"99999\"]}\r\n                    x='t' y={varGraphPair[metric]['name'][1]}\r\n\r\n                /> :\r\n                    <VictoryLine name=\"Line1\" style={{ data: { stroke: countyColor, strokeWidth: ({ active }) => active ? 7 : 5 } }} data={dataTS[stateFips + countyFips] ? dataTS[stateFips + countyFips] : dataTS[\"99999\"]}\r\n                        x='t' y={varGraphPair[metric]['name'][1]}\r\n                        labels={({ datum }) => `${countyname}\\n` +\r\n                            `Date: ${new Date(datum.t * 1000).toLocaleDateString()}\\n` +\r\n                            `${varGraphPair[metric]['legend'][1]}: ${Math.round(datum[varGraphPair[metric]['name'][1]], 2)}\\n` +\r\n                            `${varGraphPair[metric]['legend'][0]}: ${Math.round(datum[varGraphPair[metric]['name'][0]], 2)}`\r\n                        }\r\n                        labelComponent={\r\n                            <VictoryTooltip\r\n                                orientation=\"top\"\r\n                                style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'white' }}\r\n                                constrainToVisibleArea\r\n                                labelComponent={<VictoryLabel dx={-75} textAnchor='start' />}\r\n                                flyoutStyle={{ fill: \"black\", fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\r\n                            />\r\n                        }\r\n                    />}\r\n                {countyFips === '' ? (varGraphPair[metric]['name'][1] === 'casesdailymean7' || varGraphPair[metric]['name'][1] === 'deathsdailymean7' ?\r\n                    <VictoryLine name=\"Line11\" style={{ data: { stroke: '#007dba', strokeWidth: ({ active }) => active ? 5 : 3 } }} data={dataTS[stateFips] ? dataTS[stateFips] : dataTS[\"99999\"]}\r\n                        x='t' y={varGraphPair[metric]['name'][1]}\r\n                        labels={({ datum }) => [`Georgia\\n`,\r\n                            `Date: ${new Date(datum.t * 1000).toLocaleDateString()}    \\n`,\r\n                            `${varGraphPair[metric]['legend'][1]}: ${Math.round(datum[varGraphPair[metric]['name'][1]], 2)}\\n`,\r\n                            `${varGraphPair[metric]['legend'][0]}: ${Math.round(datum[varGraphPair[metric]['name'][0]], 2)}`\r\n                        ]}\r\n                        labelComponent={\r\n                            <VictoryTooltip\r\n                                // orientation=\"top\"\r\n                                style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'white' }}\r\n                                constrainToVisibleArea\r\n                                // flyoutComponent={<CustomFlyout/>}\r\n                                labelComponent={<VictoryLabel dx={-80} textAnchor='start' />}\r\n                                flyoutStyle={{ fill: \"black\", fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\r\n                            />\r\n                        }\r\n                    /> :\r\n                    <VictoryLine name=\"Line11\" style={{ data: { stroke: '#007dba', strokeWidth: ({ active }) => active ? 5 : 3 } }} data={dataTS[stateFips] ? dataTS[stateFips] : dataTS[\"99999\"]}\r\n                        x='t' y={varGraphPair[metric]['name'][1]}\r\n                        labels={({ datum }) => [`Georgia\\n`,\r\n                            `Date: ${new Date(datum.t * 1000).toLocaleDateString()}    \\n`,\r\n                            `${varGraphPair[metric]['legend'][1]}: ${Math.round(datum[varGraphPair[metric]['name'][1]], 2)}\\n`,\r\n                            `${varGraphPair[metric]['legend'][0]}: ${Math.round(datum[varGraphPair[metric]['name'][0]], 2)}`\r\n                        ]}\r\n                        labelComponent={\r\n                            <VictoryTooltip\r\n                                // orientation=\"top\"\r\n                                style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'white' }}\r\n                                constrainToVisibleArea\r\n                                // flyoutComponent={<CustomFlyout/>}\r\n                                labelComponent={<VictoryLabel dx={-80} textAnchor='start' />}\r\n                                flyoutStyle={{ fill: \"black\", fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\r\n                            />\r\n                        }\r\n\r\n                    />) :\r\n                    (varGraphPair[metric]['name'][1] === 'casesdailymean7' || varGraphPair[metric]['name'][1] === 'deathsdailymean7' ?\r\n                        <VictoryAxis dependentAxis tickCount={6}\r\n                            style={{\r\n                                tickLabels: { fontSize: 25, padding: 5 }\r\n                            }}\r\n                            tickFormat={(y) => (y < 1000 ? (Math.round(y, 2) === 0.00 ? \" \" : y) : (y / 1000 + 'k'))} /> :\r\n                        <VictoryLine name=\"Line11\" style={{ data: { stroke: '#007dba', strokeWidth: ({ active }) => active ? 5 : 3 } }} data={dataTS[stateFips] ? dataTS[stateFips] : dataTS[\"99999\"]}\r\n                            x='t' y={varGraphPair[metric]['name'][1]}\r\n                            labels={({ datum }) => [`Georgia\\n`,\r\n                                `Date: ${new Date(datum.t * 1000).toLocaleDateString()}    \\n`,\r\n                                `${varGraphPair[metric]['legend'][1]}: ${Math.round(datum[varGraphPair[metric]['name'][1]], 2)}\\n`,\r\n                                `${varGraphPair[metric]['legend'][0]}: ${Math.round(datum[varGraphPair[metric]['name'][0]], 2)}`\r\n                            ]}\r\n                            labelComponent={\r\n                                <VictoryTooltip\r\n                                    // orientation=\"top\"\r\n                                    style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'white' }}\r\n                                    constrainToVisibleArea\r\n                                    // flyoutComponent={<CustomFlyout/>}\r\n                                    labelComponent={<VictoryLabel dx={-80} textAnchor='start' />}\r\n                                    flyoutStyle={{ fill: \"black\", fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\r\n                                />\r\n                            }\r\n                        />\r\n                    )}\r\n\r\n            </VictoryChart>)\r\n    }\r\n}\r\n// [\"casescum\",\r\n// \"deathscum\",\r\n// \"casescumR\",\r\n// \"deathscumR\",\r\n// \"casescum14dayR\"] \r\n\r\nfunction DiscrpMap(props) {\r\n    if (props.name === 'casescum') {\r\n        return (\r\n            <p style={{ textAlign: \"justify\", fontFamily: 'lato', fontSize: 18 }}>\r\n                The map shows the total number of COVID-19 cases recorded in each county. The darker shading indicates a larger number of cases.\r\n                This number represents confirmed cases only, defined as an individual with a positive molecular test. Only molecular test results\r\n                are used in identifying confirmed cases. These test results are reported through multiple sources including:\r\n                <br></br>\r\n\r\n                <List as='ul'>\r\n                    <List.Item as='li'>Electronic Lab Reporting (ELR)</List.Item>\r\n                    <List.Item as='li'>State Electronic Notifiable Disease Surveillance System (SendSS)</List.Item>\r\n                    <List.Item as='li'>Faxed case reports</List.Item>\r\n                    <List.Item as='li'>Calls from providers to DPH</List.Item>\r\n                </List>\r\n            </p>\r\n        )\r\n    }\r\n    if (props.name === 'deathscum') {\r\n        return (\r\n            <p style={{ textAlign: \"justify\", fontFamily: 'lato', fontSize: 18 }}>\r\n                The map shows the total number of COVID-19 deaths recorded in each county. This number includes confirmed COVID-19 cases that were\r\n                either reported to DPH as deceased by healthcare providers, medical examiners/coroners, or identified by death certificates with COVID-19\r\n                indicated as the cause of death.\r\n            </p>\r\n        )\r\n    }\r\n    if (props.name === 'casescumR') {\r\n        return (\r\n            <p style={{ textAlign: \"justify\", fontFamily: 'lato', fontSize: 18 }}>\r\n                The map shows the total number of COVID-19 cases per 100,000 residents recorded in each county. The darker shading indicates a larger number\r\n                of cases per 100,000 residents. This number represents confirmed cases only, defined as an individual with a positive molecular test. Only molecular\r\n                test results are used in identifying confirmed cases. These test results are reported through multiple sources including:\r\n                <br></br>\r\n                <List as='ul'>\r\n                    <List.Item as='li'>Electronic Lab Reporting (ELR)</List.Item>\r\n                    <List.Item as='li'>State Electronic Notifiable Disease Surveillance System (SendSS)</List.Item>\r\n                    <List.Item as='li'>Faxed case reports</List.Item>\r\n                    <List.Item as='li'>Calls from providers to DPH</List.Item>\r\n                </List>\r\n            </p>\r\n        )\r\n    }\r\n    if (props.name === 'deathscumR') {\r\n        return (\r\n            <p style={{ textAlign: \"justify\", fontFamily: 'lato', fontSize: 18 }}>\r\n                The map shows the total number of COVID-19 deaths per 100,000 residents recorded in each county. This number includes confirmed COVID-19 cases that\r\n                were either reported to DPH as deceased by healthcare providers, medical examiners/coroners, or identified by death certificates with COVID-19 indicated as the cause of death.\r\n            </p>\r\n        )\r\n    }\r\n    if (props.name === 'casescum14dayR') {\r\n        return (\r\n            <p style={{ textAlign: \"justify\", fontFamily: 'lato', fontSize: 18 }}>\r\n                The map shows the number of new COVID-19 cases per 100,000 residents recorded in the last two weeks for each county. The darker shading indicates a larger number of cases per 100,000\r\n                residents in the last two weeks. This number represents confirmed cases only, defined as an individual with a positive molecular test. Only molecular test results are used in identifying\r\n                confirmed cases. These test results are reported through multiple sources including:\r\n                <br></br>\r\n\r\n                <List as='ul'>\r\n                    <List.Item as='li'>Electronic Lab Reporting (ELR)</List.Item>\r\n                    <List.Item as='li'>State Electronic Notifiable Disease Surveillance System (SendSS)</List.Item>\r\n                    <List.Item as='li'>Faxed case reports</List.Item>\r\n                    <List.Item as='li'>Calls from providers to DPH</List.Item>\r\n                </List>\r\n            </p>\r\n        )\r\n    }\r\n}\r\n\r\nfunction DiscrpChart(props) {\r\n    if (props.name === 'casescum') {\r\n        return (\r\n            <p style={{ textAlign: \"justify\", fontFamily: 'lato', fontSize: 18 }}>\r\n                This chart shows the daily number of new confirmed COVID-19 cases in {props.county}. The vertical bars show the\r\n                number of new daily cases while the line shows the 7-day moving average of new daily cases. The daily COVID-19\r\n                case numbers represent confirmed cases only, defined as an individual with a positive molecular test. Only molecular\r\n                test results are used in identifying confirmed cases. These test results are reported through multiple sources including:\r\n                <br></br>\r\n\r\n                <List as='ul'>\r\n                    <List.Item as='li'>Electronic Lab Reporting (ELR)</List.Item>\r\n                    <List.Item as='li'>State Electronic Notifiable Disease Surveillance System (SendSS)</List.Item>\r\n                    <List.Item as='li'>Faxed case reports</List.Item>\r\n                    <List.Item as='li'>Calls from providers to DPH</List.Item>\r\n                </List>\r\n                <br></br>\r\n                The daily number reflects the date the case was first reported to DPH.\r\n            </p>\r\n        )\r\n    }\r\n    if (props.name === 'deathscum') {\r\n        return (\r\n            <p style={{ textAlign: \"justify\", fontFamily: 'lato', fontSize: 18 }}>\r\n                This chart shows the daily number of new confirmed COVID-19 deaths in {props.county}. The vertical bars show the number of new daily\r\n                deaths while the line shows the 7-day moving average of new daily deaths. This number includes confirmed COVID-19 cases that were\r\n                either reported to DPH as deceased by healthcare providers, medical examiners/coroners, or identified by death certificates with COVID-19\r\n                indicated as the cause of death. The daily number reflects the date the death was first reported to DPH.\r\n            </p>\r\n        )\r\n    }\r\n    if (props.name === 'casescumR') {\r\n        return (\r\n            <p style={{ textAlign: \"justify\", fontFamily: 'lato', fontSize: 18 }}>\r\n                This chart shows the daily number of new confirmed COVID-19 cases per 100,000 residents in {props.county}. The vertical bars show the number of new\r\n                daily cases per 100,000 residents while the line shows the 7-day moving average of new daily cases. The daily COVID-19 case numbers represent\r\n                confirmed cases only, defined as an individual with a positive molecular test. Only molecular test results are used in identifying confirmed cases.\r\n                These test results are reported through multiple sources including:\r\n                <br></br>\r\n                <List as='ul'>\r\n                    <List.Item as='li'>Electronic Lab Reporting (ELR)</List.Item>\r\n                    <List.Item as='li'>State Electronic Notifiable Disease Surveillance System (SendSS)</List.Item>\r\n                    <List.Item as='li'>Faxed case reports</List.Item>\r\n                    <List.Item as='li'>Calls from providers to DPH</List.Item>\r\n                </List>\r\n                            The daily number reflects the date the case was first reported to DPH.\r\n            </p>\r\n        )\r\n    }\r\n    if (props.name === 'deathscumR') {\r\n        return (\r\n            <p style={{ textAlign: \"justify\", fontFamily: 'lato', fontSize: 18 }}>\r\n                This chart shows the daily number of new confirmed COVID-19 deaths per 100,000 residents in {props.county}. The vertical bars show the number of new daily deaths\r\n               per 100,000 residents while the line shows the 7-day moving average of new daily deaths per 100,000 residents. This number includes confirmed COVID-19 cases\r\n               that were either reported to DPH as deceased by healthcare providers, medical examiners/coroners, or identified by death certificates with COVID-19 indicated\r\n               as the cause of death. The daily number reflects the date the death was first reported to DPH.\r\n            </p>\r\n        )\r\n    }\r\n    if (props.name === 'casescum14dayR') {\r\n        return (\r\n            <p style={{ textAlign: \"justify\", fontFamily: 'lato', fontSize: 18 }}>\r\n                <p style={{ textAlign: \"justify\", fontFamily: 'lato', fontSize: 18 }}>\r\n                    This chart shows the daily number of new confirmed COVID-19 cases in {props.county}. The vertical bars show the\r\n                number of new daily cases while the line shows the 7-day moving average of new daily cases. The daily COVID-19\r\n                case numbers represent confirmed cases only, defined as an individual with a positive molecular test. Only molecular\r\n                test results are used in identifying confirmed cases. These test results are reported through multiple sources including:\r\n                <br></br>\r\n\r\n                    <List as='ul'>\r\n                        <List.Item as='li'>Electronic Lab Reporting (ELR)</List.Item>\r\n                        <List.Item as='li'>State Electronic Notifiable Disease Surveillance System (SendSS)</List.Item>\r\n                        <List.Item as='li'>Faxed case reports</List.Item>\r\n                        <List.Item as='li'>Calls from providers to DPH</List.Item>\r\n                    </List>\r\n                    <br></br>\r\n                The daily number reflects the date the case was first reported to DPH.\r\n            </p>\r\n            </p>\r\n        )\r\n    }\r\n}\r\n\r\nexport default function StateMap(props) {\r\n\r\n    // let { stateFips } = useParams();\r\n    const hig = '80';\r\n    const stateFips = '13';\r\n    const [config, setConfig] = useState();\r\n    const [stateName, setStateName] = useState('');\r\n\r\n    const [countyFips, setCountyFips] = useState('');\r\n    const [countyFipscvi, setCountyFipscvi] = useState('');\r\n    const [countyFipssi, setCountyFipssi] = useState('');\r\n    const [countyFipsubr, setCountyFipsubr] = useState('');\r\n    const [countyFipsblack, setCountyFipsblack] = useState('');\r\n    const [countyFipshis, setCountyFipshis] = useState('');\r\n    const [countyFipspov, setCountyFipspov] = useState('');\r\n    const [countyFipsdia, setCountyFipsdia] = useState('');\r\n    const [countyFipsa65, setCountyFipsa65] = useState('');\r\n    const [countyFipsmale, setCountyFipsmale] = useState('');\r\n    const [countyName, setCountyName] = useState('Georgia');\r\n    const [countyNamecvi, setCountyNamecvi] = useState('Fulton County');\r\n    const [countyNamesi, setCountyNamesi] = useState('Fulton County');\r\n    const [countyNameubr, setCountyNameubr] = useState('Fulton County');\r\n    const [countyNameblack, setCountyNameblack] = useState('Fulton County');\r\n    const [countyNamehis, setCountyNamehis] = useState('Fulton County');\r\n    const [countyNamepov, setCountyNamepov] = useState('Fulton County');\r\n    const [countyNamedia, setCountyNamedia] = useState('Fulton County');\r\n    const [countyNamea65, setCountyNamea65] = useState('Fulton County');\r\n    const [countyNamemale, setCountyNamemale] = useState('Fulton County');\r\n\r\n    const history = useHistory();\r\n    const [fips, setFips] = useState('13');\r\n    const [activeCharacter, setActiveCharacter] = useState('')\r\n    const activeClass = 'character-block--active';\r\n    const characterRef = createRef();\r\n    // const [dataFltrd, setDataFltrd] = useState();\r\n    // const [dataFltrdUs, setDataFltrdUs] = useState();\r\n\r\n    // const [dataStateFltrd, setDataStateFltrd] = useState();\r\n    // const [dataState, setDataState] = useState();\r\n\r\n    const [data, setData] = useState();\r\n    const [dataUs, setDataUs] = useState();\r\n    const [data_index, setIndexData] = useState();\r\n    const [dataCha, setDataCha] = useState();\r\n\r\n    const [dateCur, setDateCur] = useState();\r\n    const [colorCVI, setColorCVI] = useState();\r\n    const [colorSI, setColorSI] = useState();\r\n    const [colorUbr, setColorUbr] = useState();\r\n    const [colorBlack, setColorBlack] = useState();\r\n    const [colorHis, setColorHis] = useState();\r\n    const [colorPov, setColorPov] = useState();\r\n    const [colorDia, setColorDia] = useState();\r\n    const [colorA65, setColorA65] = useState();\r\n    const [colorMale, setColorMale] = useState();\r\n    // const [stateLabels, setStateLabels] = useState();\r\n    const [covidMetric, setCovidMetric] = useState({ casesdaily: 'N/A', casesdailymean14: 'N/A', t: 'n/a' });\r\n    const [covidMetric14, setCovidMetric14] = useState({ casesdaily: 'N/A', casesdailymean14: 'N/A', t: 'n/a' });\r\n    const colors = {\r\n        \"3\": '#024174',\r\n        '2': \"#99bbcf\",\r\n        '1': '#337fb5'\r\n    };\r\n    const [dataTS, setDataTS] = useState();\r\n    const [tooltipContent, setTooltipContent] = useState('');\r\n    const [tooltipContentcvi, setTooltipContentcvi] = useState('');\r\n    const [tooltipContentsi, setTooltipContentsi] = useState('');\r\n    const [tooltipContentubr, setTooltipContentubr] = useState('');\r\n    const [tooltipContentblack, setTooltipContentblack] = useState('');\r\n    const [tooltipContenthis, setTooltipContenthis] = useState('');\r\n    const [tooltipContentpov, setTooltipContentpov] = useState('');\r\n    const [tooltipContentdia, setTooltipContentdia] = useState('');\r\n    const [tooltipContenta65, setTooltipContenta65] = useState('');\r\n    const [tooltipContentmale, setTooltipContentmale] = useState('');\r\n\r\n    const [colorScale, setColorScale] = useState();\r\n    const [data_cases, setDataCG] = useState();\r\n    const [data_deaths, setDataDG] = useState();\r\n    const [datades_cases, setDatadesCG] = useState();\r\n    const [datades_deaths, setDatadesDG] = useState();\r\n\r\n    const [legendMax, setLegendMax] = useState([]);\r\n    const [legendMax1, setLegendMax1] = useState([]);\r\n    const [legendMin, setLegendMin] = useState([]);\r\n    const [legendMax_graph, setLegendMaxGraph] = useState({});\r\n    const [legendSplit, setLegendSplit] = useState([]);\r\n    const [legendSplit1, setLegendSplit1] = useState([]);\r\n\r\n    const [metric, setMetric] = useState('casescumR');\r\n    const [metric_graph, setMetricGraph] = useState(['casesdaily', 'casesdailymean14']);\r\n    const [open, setOpen] = useState(false)\r\n\r\n    const thresh_chara = {\r\n        'cvi': [0, 0.53, 0.71, 0.85, 0.94, 1],\r\n        'si': [0, 22, 29, 34, 43, 73],\r\n        'poverty': [0, 13, 15, 16, 18, 42],\r\n        'black': [0, 10, 23, 30, 42, 72],\r\n        'hispanic': [0, 3, 4, 6, 9, 35],\r\n        'diabetes': [0, 10, 12, 13, 17, 33],\r\n        'age65over': [0, 14, 16, 17, 19, 35],\r\n        'male': [0, 48, 49, 50, 51, 67]\r\n    }\r\n\r\n    const metricOptions1 = [{ key: 'cacum', value: 'casescum', text: 'Total COVID-19 cases' },\r\n    { key: 'decum', value: 'deathscum', text: 'Total COVID-19 deaths' },\r\n    { key: 'cacumr', value: 'casescumR', text: 'COVID-19 cases per 100,000 population' },\r\n    { key: 'decumr', value: 'deathscumR', text: 'COVID-19 deaths per 100,000 population' },\r\n    { key: 'cacum14R', value: 'casescum14dayR', text: 'Last 14 days cases per 100,000 population' }];\r\n\r\n    const metricOptions2 = [{ key: 'cs', value: 'cs', text: 'Confirmed cases per 100,000 population' },\r\n    { key: 'hp', value: 'hp', text: 'Hospitalizations per 100,000 population' },\r\n    { key: 'ds', value: 'ds', text: 'Deaths per 100,000 population' }];\r\n    const dropdownopt = {\r\n        'casescum': 'Total COVID-19 cases',\r\n        'deathscum': 'Total COVID-19 deaths',\r\n        'casescumR': 'COVID-19 cases per 100,000 population',\r\n        'deathscumR': 'COVID-19 deaths per 100,000 population'\r\n    };\r\n\r\n    const varGraphPair = {\r\n        \"casescum\": { \"name\": ['casesdaily', 'casesdailymean7'], \"legend\": ['Daily cases', '7-d rolling average '] },\r\n        \"deathscum\": { \"name\": ['deathsdaily', 'deathsdailymean7'], \"legend\": ['Daily deaths', '7-d rolling average '] },\r\n        \"casescumR\": { \"name\": ['casesdailyR', 'casesdailymean7R'], \"legend\": ['Daily cases per 100,000', '7-d rolling average'] },\r\n        \"deathscumR\": { \"name\": ['deathsdailyR', 'deathsdailymean7R'], \"legend\": ['Daily deaths per 100,000', '7-d rolling average'] },\r\n        \"casescum14dayR\": { \"name\": ['casesdailyR', 'casesdailymean7R'], \"legend\": ['Last 14 days cases per 100,000', '7-d rolling average'] }\r\n    };\r\n    const [metricName, setMetricName] = useState('COVID-19 cases per 100,000 population');\r\n    const varNameMap = {\r\n        \"casescum\": { \"name\": 'cases', \"text\": \"The map shows the total number of confirmed COVID-19 cases in each county as of \", \"cat\": 'case' },\r\n        \"casescum14dayR\": { \"name\": 'cases per 100,000 residents', \"text\": \"The map shows the number of confirmed COVID-19 cases for past two weeks in each county as of \", \"cat\": 'case' },\r\n        \"deathscum\": { \"name\": 'deaths', \"text\": \"The map shows the total number of confirmed COVID-19 deaths in each county as of \", \"cat\": 'death' },\r\n        \"casescumR\": { \"name\": 'cases per 100,000 residents', \"text\": \"The map shows the total number of confirmed COVID-19 cases per 100,000 residents in each county as of \", \"cat\": 'case' },\r\n        \"deathscumR\": { \"name\": 'deaths per 100,000 residents', \"text\": \"The map shows the total number of confirmed COVID-19 deaths per 100,000 residents in each county as of \", \"cat\": 'death' }\r\n    };\r\n    const varMap = { \"cacum\": metricOptions2[0], \"decum\": metricOptions2[1], \"cacumr\": metricOptions2[2], \"decumr\": metricOptions1[1] };\r\n    const [delayHandler, setDelayHandler] = useState(null)\r\n    // contextRef = createRef()\r\n\r\n    // useEffect(() => {\r\n    //     console.log(characterRef)\r\n    //     const handleIntersection = function(entries) {\r\n    //       entries.forEach((entry) => {\r\n    //         if (entry.target.id !== activeCharacter && entry.isIntersecting) {\r\n    //           setActiveCharacter(entry.target.id);\r\n    //         }\r\n    //       });\r\n    //     };\r\n    //     const observer = new IntersectionObserver(handleIntersection);\r\n    //     observer.observe(characterRef.current);\r\n    //     return () => observer.disconnect(); // Clenaup the observer if component unmount.\r\n    //   }, [activeCharacter, setActiveCharacter, characterRef]);\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        const configMatched = configs.find(s => s.fips === stateFips);\r\n        // console.log(configMatched.fips);\r\n        if (!configMatched) {\r\n            history.push('/');\r\n        } else {\r\n\r\n            setConfig(configMatched);\r\n            // console.log(countyFips);\r\n            setStateName(configMatched.name);\r\n            fetch('/data/data_cases_ga.json').then(res => res.json())\r\n                .then(x => setDataCG(x)\r\n                );\r\n            fetch('/data/data_deaths_ga.json').then(res => res.json())\r\n                .then(x => setDataDG(x));\r\n            fetch('/data/data_describe_cases.json').then(res => res.json())\r\n                .then(x => setDatadesCG(x));\r\n            fetch('/data/data_describe_deaths.json').then(res => res.json())\r\n                .then(x => setDatadesDG(x));\r\n            fetch('/data/data.json').then(res => res.json())\r\n                .then(x => {\r\n                    setData(x);\r\n                    setDataUs(x);\r\n                    if (metric === 'casescum') {\r\n\r\n                        _.map(x, (d, k) => {\r\n                            d.fips = k\r\n                            return d\r\n                        });\r\n                        var temp_Data_metric = [];\r\n                        // retrieve metric data as list\r\n                        _.each(x, d => {\r\n                            if (d.fips.length === 5 && d.fips[0] === '1' && d.fips[1] === '3') {\r\n                                temp_Data_metric.push(d[metric]);\r\n                            }\r\n                        });\r\n\r\n                        temp_Data_metric.sort(function (a, b) {\r\n                            return a - b;\r\n                        });\r\n                        var countIqr = 3 * quantile(temp_Data_metric, 0.75) - 2 * quantile(temp_Data_metric, 0.25);\r\n                        // console.log(temp_Data_metric);\r\n                        //   var top10 = _.takeRight(temp_Data_metric,10)[0];\r\n\r\n                        //   var belowIqr = _.map(_.filter(temp_Data_metric,\r\n                        //     d => (d<top10\r\n                        //       )),\r\n                        //     d => d);\r\n                        // console.log(belowTop)\r\n                        var belowIqr = _.map(_.filter(temp_Data_metric,\r\n                            d => (d < countIqr\r\n                            )),\r\n                            d => d);\r\n\r\n                        var upIqr = _.map(_.filter(temp_Data_metric,\r\n                            d => (d >= countIqr\r\n                            )),\r\n                            d => d);\r\n\r\n                        var split = scaleQuantile()\r\n                            .domain(belowIqr).range(colorPalette);\r\n                        var split1 = scaleQuantile()\r\n                            .domain(upIqr).range(colorPalette1);\r\n                        // console.log(split.quantiles())\r\n                        // console.log(split1.quantiles())\r\n\r\n\r\n                        var thr = [];\r\n                        var thr1 = [];\r\n                        for (i = 0; i < split1.quantiles().length; i++) {\r\n                            thr1[i] = split1.quantiles()[i];\r\n                        }\r\n                        thr1.push(_.takeRight(temp_Data_metric)[0]);\r\n\r\n                        for (i = 0; i < split.quantiles().length; i++) {\r\n                            thr[i] = split.quantiles()[i];\r\n                        }\r\n                        thr.push(Math.round(countIqr / 100) * 100);\r\n\r\n                        // console.log(thr1);\r\n                        var i;\r\n                        for (i = 0; i < thr.length; i++) {\r\n                            if (thr[i] < 100) {\r\n                                thr[i] = Math.round(thr[i] / 10) * 10;\r\n                            }\r\n                            else {\r\n                                thr[i] = Math.round(thr[i] / 100) * 100;\r\n                            }\r\n                        }\r\n                        for (i = 0; i < thr1.length; i++) {\r\n                            if (thr1[i] < 100) {\r\n                                thr1[i] = Math.floor(thr1[i] / 10) * 10;\r\n                            }\r\n                            else {\r\n                                thr1[i] = Math.floor(thr1[i] / 100) * 100;\r\n                            }\r\n\r\n                        }\r\n                        // console.log(thr1)\r\n\r\n                        const csUs = {};\r\n                        var indexColor;\r\n                        _.map(belowIqr, d => {\r\n                            if (d >= 0 && d <= thr[0]) {\r\n                                csUs[d] = colorPalette[0];\r\n                            };\r\n                            if (d > thr[0] && d <= thr[1]) {\r\n                                csUs[d] = colorPalette[1];\r\n                            }\r\n                            if (d > thr[1] && d <= thr[2]) {\r\n                                csUs[d] = colorPalette[2];\r\n                            }\r\n                            if (d > thr[2] && d <= thr[3]) {\r\n                                csUs[d] = colorPalette[3];\r\n                            }\r\n                            if (d > thr[3] && d <= thr[4]) {\r\n                                csUs[d] = colorPalette[4];\r\n                            }\r\n                            if (d > thr[4] && d <= thr[5]) {\r\n                                csUs[d] = colorPalette[5];\r\n                            }\r\n                        });\r\n\r\n                        _.map(upIqr, d => {\r\n                            if (d > thr[5] && d <= thr1[0]) {\r\n                                csUs[d] = colorPalette1[0];\r\n                            }\r\n                            if (d > thr1[0] && d <= thr1[1]) {\r\n                                csUs[d] = colorPalette1[1];\r\n                            }\r\n                            if (d > thr1[1] && d <= thr1[2]) {\r\n                                csUs[d] = colorPalette1[2];\r\n                            }\r\n                            if (d > thr1[2] && d <= thr1[3]) {\r\n                                csUs[d] = colorPalette1[3];\r\n                            }\r\n                            if (d > thr1[3] && d <= thr1[4]) {\r\n                                csUs[d] = colorPalette1[4];\r\n                            }\r\n                        })\r\n                        let scaleMap = csUs;\r\n\r\n                        setColorScale(scaleMap);\r\n\r\n                        var max = _.takeRight(temp_Data_metric)[0];\r\n                        var min = temp_Data_metric[0];\r\n                        // console.log(max);\r\n                        if (max > 999) {\r\n                            max = (max / 1000).toFixed(0) + \"K\";\r\n                            // console.log(max);\r\n                            setLegendMax(max);\r\n                        } else {\r\n                            setLegendMax(max.toFixed(0));\r\n\r\n                        }\r\n                        setLegendMin(min.toFixed(0));\r\n\r\n                        setLegendSplit(thr);\r\n                        // console.log(thr1[4])\r\n                        setLegendSplit1(thr1.slice(0, 4));\r\n                        setLegendMax1(thr1[4]);\r\n\r\n                    }\r\n                    else {\r\n                        _.map(x, (d, k) => {\r\n                            d.fips = k\r\n                            return d\r\n                        });\r\n\r\n                        var temp_Data = {};\r\n                        var temp_Data_metric = [];\r\n                        // retrieve metric data as list\r\n                        _.each(x, d => {\r\n                            if (d.fips.length === 5 && d.fips[0] === '1' && d.fips[1] === '3') {\r\n                                temp_Data_metric.push(d[metric]);\r\n                            }\r\n                        });\r\n                        temp_Data[metric] = temp_Data_metric;\r\n\r\n                        temp_Data_metric.sort(function (a, b) {\r\n                            return a - b;\r\n                        });\r\n                        // console.log(temp_Data_metric);\r\n                        //   console.log(quantile(temp_Data_metric, 0.75));\r\n                        //   console.log(quantile(temp_Data_metric, 0.25));\r\n                        //   console.log(3*quantile(temp_Data_metric, 0.75)-2*quantile(temp_Data_metric, 0.25));\r\n                        // console.log(6*quantile(temp_Data_metric, 0.75)-5*quantile(temp_Data_metric, 0.25))\r\n                        var countIqr = 6 * quantile(temp_Data_metric, 0.75) - 5 * quantile(temp_Data_metric, 0.25);\r\n                        var rateIqr = 3 * quantile(temp_Data_metric, 0.75) - 2 * quantile(temp_Data_metric, 0.25);\r\n                        var IQR3 = _.map(_.filter(_.map(x, (d, k) => {\r\n                            d.fips = k\r\n                            return d\r\n                        }),\r\n                            d => (metric === 'casescumR' || metric === 'deathscumR' ? d[metric] > 0 && d[metric] < rateIqr &&\r\n                                d.fips.length === 5\r\n                                : d[metric] > 0 && d[metric] < countIqr &&\r\n                                d.fips.length === 5\r\n                            )),\r\n                            d => d[metric]);\r\n\r\n                        // console.log(rateIqr);\r\n\r\n                        const csUs = {};\r\n                        var indexColor;\r\n                        _.map(IQR3, d => {\r\n                            if (metric === 'casescumR' || metric === 'deathscumR' || metric == 'casescum14dayR') { var interV = (rateIqr.toFixed(0)) / colorPalette.length }\r\n                            else { var interV = (countIqr.toFixed(0)) / colorPalette.length }\r\n\r\n                            if (metric === 'deathscum' || metric === 'deathscumR') {\r\n                                indexColor = Math.round(interV / 10) * 10;\r\n                            }\r\n                            else {\r\n                                indexColor = Math.round(interV / 100) * 100;\r\n                            }\r\n                            // console.log(indexColor);\r\n                            csUs[d] = colorPalette[Math.floor(d / indexColor)];\r\n                        })\r\n                        // console.log(csUs);\r\n\r\n                        _.map(x, d => {\r\n                            if (d[metric] > indexColor * colorPalette.length) {\r\n                                csUs[d[metric]] = colorOut;\r\n                            }\r\n                            if (d[metric] < indexColor * colorPalette.length && d[metric] > 3 * quantile(temp_Data_metric, 0.75) - 2 * quantile(temp_Data_metric, 0.25).toFixed(0)) {\r\n                                csUs[d[metric]] = colorPalette[colorPalette.length - 1];\r\n                            }\r\n                        })\r\n                        let scaleMap = csUs;\r\n\r\n                        setColorScale(scaleMap);\r\n\r\n                        var max = _.takeRight(temp_Data_metric)[0];\r\n                        var min\r\n                        if (temp_Data_metric[0] > indexColor) {\r\n                            min = 0\r\n                        }\r\n                        else {\r\n                            min = temp_Data_metric[0]\r\n                        }\r\n\r\n                        // console.log(temp_Data_metric);\r\n                        if (max > 999) {\r\n                            max = (max / 1000).toFixed(0) + \"K\";\r\n                            // console.log(max);\r\n                            setLegendMax(max);\r\n                        } else {\r\n                            setLegendMax(max.toFixed(0));\r\n\r\n                        }\r\n                        setLegendMin(min.toFixed(0));\r\n                        var split = [];\r\n                        var i = 0;\r\n                        for (i = 0; i < colorPalette.length; i++) {\r\n                            split.push((i + 1) * indexColor);\r\n                        }\r\n\r\n                        setLegendSplit(split);\r\n                        // console.log(split);\r\n\r\n                    }\r\n                });\r\n\r\n            // fetch('/data/timeseries13' + '.json').then(res => res.json())\r\n            //   .then(x => setDataTS(x));\r\n            fetch('/data/timeseries13' + '.json').then(res => res.json())\r\n                .then(\r\n                    x => {\r\n                        setDataTS(x);\r\n                        // var max = 0\r\n                        var dicto = {}\r\n                        for (var key in x) {\r\n                            var max = 0\r\n                            _.each(x[key], m => {\r\n                                if (m[varGraphPair[metric]['name'][0]] > max) {\r\n                                    max = m[varGraphPair[metric]['name'][0]];\r\n                                }\r\n                            });\r\n                            dicto[key] = max;\r\n                            // console.log(varNameMap['cacum'].text);\r\n                        }\r\n                        // console.log(dicto);\r\n                        setLegendMaxGraph(dicto);\r\n                    });\r\n\r\n            fetch('/data/data.json').then(res => res.json())\r\n                .then(x => {\r\n                    setDateCur(x)\r\n\r\n                    const cs = scaleQuantile()\r\n                        .domain(_.map(_.filter(_.map(x, (d, k) => {\r\n                            d.fips = k\r\n                            return d\r\n                        }),\r\n                            d => (\r\n                                d['cvi'] >= 0)),\r\n                            d => d['cvi']))\r\n                        .range(colorPalette2);\r\n\r\n                    let scaleMap = {}\r\n                    _.each(x, d => {\r\n                        if (d[metric] >= 0) {\r\n                            scaleMap[d['cvi']] = cs(d['cvi'])\r\n                        }\r\n                    });\r\n                    // console.log(cs)\r\n                    setColorCVI(scaleMap);\r\n\r\n                    const si = scaleQuantile()\r\n                        .domain(_.map(_.filter(_.map(x, (d, k) => {\r\n                            d.fips = k\r\n                            return d\r\n                        }),\r\n                            d => (\r\n                                d['si'] >= 0)),\r\n                            d => d['si']))\r\n                        .range(colorPalette2);\r\n\r\n                    let scaleMapsi = {}\r\n                    _.each(x, d => {\r\n                        if (d[metric] >= 0) {\r\n                            scaleMapsi[d['si']] = si(d['si'])\r\n                        }\r\n                    });\r\n\r\n                    setColorSI(scaleMapsi);\r\n\r\n                });\r\n            fetch('/data/index_data.json').then(res => res.json())\r\n                .then(x => {\r\n                    setIndexData(x)\r\n                    // console.log(x)\r\n\r\n                });\r\n            fetch('/data/data_cases_ga.json').then(res => res.json())\r\n                .then(x => {\r\n\r\n                    // setDataCG(x)\r\n                    const his = scaleQuantile()\r\n                        .domain(_.map(_.filter(_.map(x, (d, k) => {\r\n                            d.fips = k\r\n                            return d\r\n                        }),\r\n                            d => (\r\n                                d['hispanicP'] >= 0)),\r\n                            d => d['hispanicP']))\r\n                        .range(colorPalette2);\r\n\r\n                    let scaleMap_his = {}\r\n                    _.each(x, d => {\r\n                        if (d['hispanicP'] >= 0) {\r\n                            scaleMap_his[d['hispanicP']] = his(d['hispanicP'])\r\n                        }\r\n                    });\r\n                    setColorHis(scaleMap_his);\r\n\r\n\r\n\r\n                }\r\n                );\r\n\r\n\r\n\r\n            fetch('/data/data_us.json').then(res => res.json())\r\n                .then(x => {\r\n                    setDataCha(x)\r\n                    // const cs = scaleQuantile()\r\n                    //     .domain(_.map(_.filter(_.map(x, (d, k) => {\r\n                    //         d.fips = k\r\n                    //         return d\r\n                    //     }),\r\n                    //         d => (\r\n                    //             d['_013_Urbanization_Code'] >= 0)),\r\n                    //         d => d['_013_Urbanization_Code']))\r\n                    //     .range(colorPalette);\r\n\r\n                    let scaleMap = {}\r\n                    _.each(x, d => {\r\n                        if (d['_013_Urbanization_Code'] === 1.0) {\r\n                            scaleMap[d['_013_Urbanization_Code']] = colorPalette[0]\r\n                        }\r\n                        if (d['_013_Urbanization_Code'] === 2.0) {\r\n                            scaleMap[d['_013_Urbanization_Code']] = colorPalette[1]\r\n                        }\r\n                        if (d['_013_Urbanization_Code'] === 3.0) {\r\n                            scaleMap[d['_013_Urbanization_Code']] = colorPalette[2]\r\n                        }\r\n                        if (d['_013_Urbanization_Code'] === 4.0) {\r\n                            scaleMap[d['_013_Urbanization_Code']] = colorPalette[3]\r\n                        }\r\n                        if (d['_013_Urbanization_Code'] === 5.0) {\r\n                            scaleMap[d['_013_Urbanization_Code']] = colorPalette[4]\r\n                        }\r\n                        if (d['_013_Urbanization_Code'] === 6.0) {\r\n                            scaleMap[d['_013_Urbanization_Code']] = colorPalette[5]\r\n                        }\r\n                    });\r\n\r\n                    setColorUbr(scaleMap);\r\n                    // console.log(scaleMap)\r\n\r\n                    const black = scaleQuantile()\r\n                        .domain(_.map(_.filter(_.map(x, (d, k) => {\r\n                            d.fips = k\r\n                            return d\r\n                        }),\r\n                            d => (\r\n                                d['black'] >= 0)),\r\n                            d => d['black']))\r\n                        .range(colorPalette2);\r\n\r\n                    let scaleMap_black = {}\r\n                    _.each(x, d => {\r\n                        if (d['black'] >= 0) {\r\n                            scaleMap_black[d['black']] = black(d['black'])\r\n                        }\r\n                    });\r\n                    setColorBlack(scaleMap_black);\r\n\r\n                    const pov = scaleQuantile()\r\n                        .domain(_.map(_.filter(_.map(x, (d, k) => {\r\n                            d.fips = k\r\n                            return d\r\n                        }),\r\n                            d => (\r\n                                d['poverty'] >= 0)),\r\n                            d => d['poverty']))\r\n                        .range(colorPalette2);\r\n\r\n                    let scaleMap_pov = {}\r\n                    _.each(x, d => {\r\n                        if (d['poverty'] >= 0) {\r\n                            scaleMap_pov[d['poverty']] = pov(d['poverty'])\r\n                        }\r\n                    });\r\n                    setColorPov(scaleMap_pov);\r\n\r\n\r\n                    const dia = scaleQuantile()\r\n                        .domain(_.map(_.filter(_.map(x, (d, k) => {\r\n                            d.fips = k\r\n                            return d\r\n                        }),\r\n                            d => (\r\n                                d['diabetes'] >= 0)),\r\n                            d => d['diabetes']))\r\n                        .range(colorPalette2);\r\n\r\n                    let scaleMap_dia = {}\r\n                    _.each(x, d => {\r\n                        if (d['diabetes'] >= 0) {\r\n                            scaleMap_dia[d['diabetes']] = dia(d['diabetes'])\r\n                        }\r\n                    });\r\n                    setColorDia(scaleMap_dia);\r\n\r\n                    const age = scaleQuantile()\r\n                        .domain(_.map(_.filter(_.map(x, (d, k) => {\r\n                            d.fips = k\r\n                            return d\r\n                        }),\r\n                            d => (\r\n                                d['age65over'] >= 0)),\r\n                            d => d['age65over']))\r\n                        .range(colorPalette2);\r\n\r\n                    let scaleMap_age = {}\r\n                    _.each(x, d => {\r\n                        if (d['age65over'] >= 0) {\r\n                            scaleMap_age[d['age65over']] = age(d['age65over'])\r\n                        }\r\n                    });\r\n                    setColorA65(scaleMap_age);\r\n\r\n\r\n                    const male = scaleQuantile()\r\n                        .domain(_.map(_.filter(_.map(x, (d, k) => {\r\n                            d.fips = k\r\n                            return d\r\n                        }),\r\n                            d => (\r\n                                d['male'] >= 0)),\r\n                            d => d['male']))\r\n                        .range(colorPalette2);\r\n\r\n                    let scaleMap_male = {}\r\n                    _.each(x, d => {\r\n                        if (d['male'] >= 0) {\r\n                            scaleMap_male[d['male']] = male(d['male'])\r\n                        }\r\n                    });\r\n                    setColorMale(scaleMap_male);\r\n                });\r\n        }\r\n    }, [stateFips, metric]);\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if (dataTS && dataTS[stateFips + countyFips]) {\r\n            setCovidMetric(_.takeRight(dataTS[stateFips + countyFips])[0]);\r\n            setCovidMetric14(_.takeRight(dataTS[stateFips + countyFips], 14));\r\n\r\n        }\r\n    }, [dataTS, countyFips])\r\n\r\n    if (dataTS && dataUs) {\r\n\r\n        return (\r\n            <div\r\n                className={`character-block ${activeClass}`}\r\n                id=\"mycontent\"\r\n                ref={characterRef}>\r\n\r\n                <div>\r\n                    <LazyHero\r\n                        imageSrc={\"/CoronaVirus_LightBlue.jpg\"}\r\n                        color={'#E0F5FF'}\r\n                        isCentered={true}\r\n                        opacity={0}\r\n                        parallaxOffset={0}\r\n                        minHeight={'40vh'}\r\n                        //chidren={}\r\n                        style={{\r\n                            height: \"450px\"\r\n                        }}\r\n                    >\r\n                        <Grid column={2} style={{ paddingTop: '4em', paddingLeft: '0em', paddingBottom: '1em', width: \"1260px\" }} divided>\r\n                            <Grid.Column width={5}>\r\n                                <Grid.Row>\r\n                                    <Header as='h1' style={{ fontWeight: 300 }}>\r\n                                        <Header.Content style={{\r\n                                            fontSize: \"20pt\",\r\n                                            color: '#0072AE',\r\n                                            fontWeight: 1000,\r\n                                            textAlign: \"left\",\r\n                                            paddingRight: '5em'\r\n                                        }}>\r\n                                            <b>Georgia COVID-19</b>\r\n                                        </Header.Content>\r\n                                    </Header>\r\n                                </Grid.Row>\r\n                                <Grid.Row>\r\n                                    <Header as=\"h1\" style={{\r\n                                        fontSize: \"44pt\",\r\n                                        fontWeight: 1000,\r\n                                        textAlign: \"left\"\r\n                                    }}>\r\n                                        Health Equity Dashboard\r\n                            </Header>\r\n                                </Grid.Row>\r\n                            </Grid.Column>\r\n\r\n                            <Grid.Column width={11}>\r\n                                <Header as='h2' style={{\r\n                                    fontWeight: 400,\r\n                                    fontSize: \"16pt\",\r\n                                    paddingRight: 0,\r\n                                    textAlign: \"justify\",\r\n                                }}>\r\n                                    <Header.Content>\r\n                                        The Georgia COVID-19 Health Equity dashboard is a tool to dynamically track and compare the burden of cases and deaths across the counties in Georgia.\r\n                                        <br></br>\r\n                                        <br></br>\r\n                                        We pair data on COVID-19 cases and deaths collected by the Georgia Department of Public Health with county population characteristics to document the\r\n                                        differential impact of the epidemic across the state. These data are made available to the public in an effort to inform planning, policy development,\r\n                                        and decision making by county health officials and individual residents. Additional information on the data used on this website can be found <a href='https://ga-covid19.ondemand.sas.com/docs/GA_COVID19_Dashboard_Guide.pdf'>here</a>.\r\n                                        For more information on COVID-19 in Georgia, please see the Georgia Department of Public <a href=\"https://dph.georgia.gov/covid-19-daily-status-report \">COVD-19 Status Report</a>.\r\n                                    </Header.Content>\r\n                                </Header>\r\n                            </Grid.Column>\r\n                        </Grid>\r\n                    </LazyHero>\r\n                </div>\r\n                <AppBar />\r\n\r\n                <Container style={{ marginTop: '2em', minWidth: '1260px' }}>\r\n\r\n                    {config &&\r\n                        <div>\r\n\r\n                            {/* <Breadcrumb>\r\n                                <Breadcrumb.Section link onClick={() => history.push('/')}></Breadcrumb.Section>\r\n            <Breadcrumb.Divider />\r\n                                <Breadcrumb.Section active>{stateName}</Breadcrumb.Section>\r\n                                <Breadcrumb.Divider />\r\n                            </Breadcrumb> */}\r\n                            <Grid stackable columns={3} style={{ width: \"100%\", height: \"100%\" }} >\r\n                                <Grid.Column>\r\n                                    <StickyExampleAdjacentContext activeCharacter={activeCharacter} />\r\n                                </Grid.Column>\r\n\r\n                                <Grid.Column width={16} style={{ width: \"100%\", height: \"100%\" }}>\r\n                                    {/* <Divider id='summary' hidden /> */}\r\n                                    <Grid.Row>\r\n                                        <div id='summary' style={sectionStyle2}>\r\n                                            <Header as='h2' style={{ textAlign: 'center', color: 'black', fontSize: \"22pt\", paddingTop: '1em', paddingBottom: '1em' }}>\r\n                                                <Header.Content>\r\n                                                    Georgia Interactive Map\r\n                                    </Header.Content>\r\n                                            </Header>\r\n                                        </div>\r\n                                    </Grid.Row>\r\n                                    <Grid columns={2} style={{ paddingBottom: '3em' }}>\r\n                                        <Grid.Row>\r\n                                            <Grid.Column width={16}>\r\n                                                <Header as='h2' style={{ fontFamily: 'lato', fontSize: \"16px\", paddingRight: 0, color: 'black' }}>\r\n                                                    <Header.Content>\r\n                                                        <Header.Subheader style={{ fontFamily: 'lato', fontSize: \"16px\", paddingRight: 0, paddingTop: '1em', color: 'black' }}>\r\n                                                            <List as='ul'>\r\n                                                                <List.Item as='li'>Select an indicator from the dropdown menu</List.Item>\r\n                                                                <List.Item as='li'>Hover on map to see the summary of county-level data</List.Item>\r\n                                                                <List.Item as='li'>Click map below to see county-level data</List.Item>\r\n                                                            </List>\r\n                                                        </Header.Subheader>\r\n                                                    </Header.Content>\r\n                                                </Header>\r\n                                            </Grid.Column>\r\n                                        </Grid.Row>\r\n                                        <Grid.Column width={7} style={{ paddingLeft: \"2\", paddingLeft: \"1\" }}>\r\n                                            <Header as='h2' style={{ fontWeight: 600 }}>\r\n                                                <Header.Content>\r\n                                                    <Dropdown\r\n                                                        style={{\r\n                                                            background: '#fff',\r\n                                                            fontSize: \"17pt\",\r\n                                                            fontWeight: 600,\r\n                                                            theme: '#000000',\r\n                                                            width: '520px',\r\n                                                            top: '0em',\r\n                                                            left: '0em',\r\n                                                            text: \"Select\",\r\n                                                            borderTop: 'none',\r\n                                                            borderLeft: '1px solid #FFFFFF',\r\n                                                            borderRight: 'none',\r\n                                                            borderBottom: '0.9px solid #bdbfc1',\r\n                                                            borderRadius: 0,\r\n                                                            minHeight: '1.0em',\r\n                                                            paddingBottom: '0.2em'\r\n                                                        }}\r\n                                                        text={metricName}\r\n                                                        inline\r\n                                                        search\r\n                                                        fluid\r\n\r\n\r\n                                                        pointing='top'\r\n                                                        options={metricOptions1}\r\n                                                        onChange={(e, { value }) => {\r\n                                                            setMetric(value);\r\n                                                            setMetricName(dropdownopt[value]);\r\n                                                        }}\r\n                                                    />\r\n\r\n                                                </Header.Content>\r\n                                            </Header>\r\n                                            <SvgMap name={metric}\r\n                                                legendSplit={legendSplit}\r\n                                                legendSplit1={legendSplit1}\r\n                                                legendMin={legendMin}\r\n                                                legendMax={legendMax}\r\n                                            />\r\n                                            {/* <Header.Subheader style={{paddingLeft:'1em', fontFamily: 'lato', fontSize: \"10pt\", paddingTop: 1, color: 'black' }}>\r\n                                                        Click map below to see county-level data.\r\n                                        </Header.Subheader> */}\r\n                                            <ComposableMap projection=\"geoAlbersUsa\"\r\n                                                projectionConfig={{ scale: `${config.scale}` }}\r\n                                                width={500}\r\n                                                height={550}\r\n                                                data-tip=\"\"\r\n                                                offsetX={config.offsetX}\r\n                                                offsetY={config.offsetY}>\r\n                                                <Geographies data-tip='ga' data-for='ga' geography={config.url} >\r\n                                                    {({ geographies }) => geographies.map(geo =>\r\n                                                        <Geography\r\n                                                            key={geo.rsmKey}\r\n                                                            geography={geo}\r\n                                                            onClick={() => {\r\n                                                                history.push(\"/\" + stateFips + \"/\" + geo.properties.COUNTYFP);\r\n                                                                // console.log(geo.properties.COUNTYFP);\r\n                                                            }}\r\n                                                            style={{\r\n                                                                default: {\r\n                                                                    //  fill: \"#ECEFF1\",\r\n                                                                    stroke: \"#607D8B\",\r\n                                                                    strokeWidth: 0.95,\r\n                                                                    outline: \"none\",\r\n                                                                },\r\n                                                                pressed: {\r\n                                                                    outline: \"none\",\r\n                                                                }\r\n                                                            }}\r\n                                                            onMouseEnter={() => {\r\n                                                                setDelayHandler(setTimeout(() => {\r\n                                                                    setCountyFips(geo.properties.COUNTYFP);\r\n                                                                    setCountyName(fips2county[stateFips + geo.properties.COUNTYFP]);\r\n                                                                    // setTooltipContent('Click to see more county data');\r\n                                                                }, 0))\r\n                                                            }}\r\n                                                            onMouseLeave={() => {\r\n                                                                clearTimeout(delayHandler)\r\n                                                                setTooltipContent(\"\")\r\n                                                            }}\r\n                                                            fill={countyFips === geo.properties.COUNTYFP ? countyColor :\r\n                                                                ((colorScale && dataUs[stateFips + geo.properties.COUNTYFP] &&\r\n                                                                    dataUs[stateFips + geo.properties.COUNTYFP][metric] && dataUs[stateFips + geo.properties.COUNTYFP][metric] > 0) ?\r\n                                                                    colorScale[dataUs[stateFips + geo.properties.COUNTYFP][metric]] :\r\n                                                                    (colorScale && dataUs[stateFips + geo.properties.COUNTYFP] && dataUs[stateFips + geo.properties.COUNTYFP][metric] === 0) ? '#e1dce2' : '#FFFFFF')}\r\n                                                        />\r\n                                                    )}\r\n                                                </Geographies>\r\n                                            </ComposableMap>\r\n\r\n                                            <Grid.Row style={{ fontFamily: 'lato', fontSize: 18, color: dataupColor, paddingLeft: '0.3em', paddingTop: '0.5em', paddingRight: '2em' }} >\r\n                                                Data updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' : (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}\r\n                                            </Grid.Row>\r\n                                            <Grid.Row>\r\n                                                <Accordion defaultActiveIndex={1} panels={[\r\n                                                    {\r\n                                                        key: 'acquire-dog',\r\n                                                        title: {\r\n                                                            content: <u style={{ fontFamily: 'lato', fontSize: 18, color: dataupColor }}>About the data</u>,\r\n                                                            icon: 'dropdown',\r\n                                                        },\r\n                                                        content: {\r\n                                                            content: (\r\n                                                                <DiscrpMap\r\n                                                                    name={metric}\r\n                                                                />\r\n                                                            ),\r\n                                                        },\r\n                                                    }\r\n                                                ]\r\n\r\n                                                } />\r\n\r\n                                            </Grid.Row>\r\n\r\n                                        </Grid.Column>\r\n                                        <Grid.Column width={9} style={{ paddingLeft: \"2\", paddingLeft: \"1\" }}>\r\n                                            <Header as='h2' style={{ fontWeight: 400, paddingLeft: \"1em\" }}>\r\n                                                <Header.Content>\r\n                                                    {/* {varGraphPair[metric]['legend'][0]} for <span style={{ color: countyColor }}>{countyName}</span> */}\r\n                                                    {varGraphPair[metric]['legend'][0]} for <b>{countyName}</b>\r\n                                                    <Header.Subheader style={{ fontWeight: 300 }}>\r\n                                                    </Header.Subheader>\r\n                                                </Header.Content>\r\n                                            </Header>\r\n                                            <Grid>\r\n                                                <Grid.Column>\r\n                                                    <Grid.Row style={{ paddingLeft: \"1.5\", paddingTop: \"1\", paddingBottom: 0 }} centered>\r\n\r\n                                                        <svg width=\"630\" height='80'>\r\n                                                            {countyName === 'Georgia' ? <text x={75} y={20} style={{ fontSize: 16 }}></text> : <text x={75} y={20} style={{ fontSize: 16 }}>7-day rolling average in {countyName}</text>}\r\n                                                            {countyName === 'Georgia' ? <rect x={50} y={12} width=\"0\" height=\"0\" /> : <rect x={50} y={12} width=\"15\" height=\"2\" style={{ fill: countyColor, strokeWidth: 1, stroke: countyColor }} />}\r\n                                                            {/* {console.log(countyFips)} */}\r\n\r\n\r\n                                                            {varGraphPair[metric]['name'][1] === 'casesdailymean7' || varGraphPair[metric]['name'][1] === 'deathsdailymean7' ?\r\n                                                                <rect x={50} y={40} width=\"15\" height=\"15\" style={{ fill: stateColor, strokeWidth: 1, stroke: stateColor }} /> :\r\n                                                                <rect x={50} y={35} width=\"15\" height=\"1\" style={{ fill: '#007dba', strokeWidth: 1, stroke: '#007dba' }} />}\r\n\r\n                                                            {varGraphPair[metric]['name'][1] === 'casesdailymean7' || varGraphPair[metric]['name'][1] === 'deathsdailymean7' ?\r\n                                                                <text x={75} y={52} style={{ fontSize: 16 }}> {varGraphPair[metric]['legend'][0]} </text> :\r\n                                                                <rect x={50} y={35} width=\"15\" height=\"1\" style={{ fill: '#007dba', strokeWidth: 1, stroke: '#007dba' }} />}\r\n\r\n                                                            {countyName === 'Georgia' ? (varGraphPair[metric]['name'][1] === 'casesdailymean7' || varGraphPair[metric]['name'][1] === 'deathsdailymean7' ?\r\n                                                                <text x={75} y={20} style={{ fontSize: 16 }}>7-day rolling average in Georgia</text> :\r\n                                                                <text x={75} y={43} style={{ fontSize: 16 }}>7-day rolling average in Georgia</text>) :\r\n\r\n                                                                (varGraphPair[metric]['name'][1] === 'casesdailymean7' || varGraphPair[metric]['name'][1] === 'deathsdailymean7' ?\r\n                                                                    <text x={250} y={12} style={{ fontSize: 0 }}></text> :\r\n                                                                    <text x={75} y={43} style={{ fontSize: 16 }}>7-day rolling average in Georgia</text>)}\r\n\r\n                                                            {countyName === 'Georgia' ? (varGraphPair[metric]['name'][1] === 'casesdailymean7' || varGraphPair[metric]['name'][1] === 'deathsdailymean7' ?\r\n                                                                <rect x={50} y={12} width=\"15\" height=\"1\" style={{ fill: '#007dba', strokeWidth: 1, stroke: '#007dba' }} /> :\r\n                                                                <rect x={50} y={55} width=\"15\" height=\"15\" style={{ fill: stateColor, strokeWidth: 1, stroke: stateColor }} />)\r\n                                                                :\r\n                                                                (varGraphPair[metric]['name'][1] === 'casesdailymean7' || varGraphPair[metric]['name'][1] === 'deathsdailymean7' ?\r\n                                                                    <rect x={0} y={0} width=\"0\" height=\"0\" style={{ fill: 'white', strokeWidth: 0, stroke: 'white' }} /> :\r\n                                                                    <rect x={50} y={55} width=\"15\" height=\"15\" style={{ fill: stateColor, strokeWidth: 1, stroke: stateColor }} />)}\r\n\r\n                                                            {varGraphPair[metric]['name'][1] === 'casesdailymean7' || varGraphPair[metric]['name'][1] === 'deathsdailymean7' ?\r\n                                                                <rect x={0} y={0} width=\"0\" height=\"0\" style={{ fill: 'white', strokeWidth: 0, stroke: 'white' }} /> :\r\n                                                                <text x={75} y={68} style={{ fontSize: 16 }}> {varGraphPair[metric]['legend'][0]} </text>}\r\n\r\n                                                        </svg>\r\n\r\n                                                        <ChartGraph\r\n                                                            name={varGraphPair}\r\n                                                            metric={metric}\r\n                                                            stateFips={stateFips}\r\n                                                            countyFips={countyFips}\r\n                                                            data1={covidMetric14}\r\n                                                            data2={dataTS}\r\n                                                            countyname={countyName}\r\n                                                        />\r\n                                                    </Grid.Row>\r\n                                                    <Grid.Row style={{ fontFamily: 'lato', fontSize: 18, color: dataupColor, paddingTop: '2em', paddingLeft: '2.9em', paddingRight: '2.9em' }} centered>\r\n                                                        {/* <p style ={{fontFamily: 'lato', fontSize: 18, color:dataupColor, paddingLeft:'0.5em'}}> */}\r\n                                                    Data updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' : (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}\r\n                                                        {/* </p> */}\r\n                                                    </Grid.Row>\r\n                                                    <Grid.Row style={{ paddingLeft: '3.4em', paddingRight: '2.9em' }} centered>\r\n                                                        <Accordion defaultActiveIndex={1} panels={[\r\n                                                            {\r\n                                                                key: 'acquire-dog',\r\n                                                                title: {\r\n                                                                    content: <u style={{ fontFamily: 'lato', fontSize: 18, color: dataupColor }}>About the data</u>,\r\n                                                                    icon: 'dropdown',\r\n                                                                },\r\n                                                                content: {\r\n                                                                    content: (\r\n                                                                        <DiscrpChart\r\n                                                                            name={metric}\r\n                                                                            county={countyName}\r\n                                                                        />\r\n                                                                    ),\r\n                                                                },\r\n                                                            }\r\n                                                        ]\r\n\r\n                                                        } />\r\n\r\n                                                    </Grid.Row>\r\n                                                </Grid.Column>\r\n                                            </Grid>\r\n                                        </Grid.Column>\r\n\r\n                                    </Grid>\r\n\r\n                                    <Grid style={{ paddingBottom: '2em' }}>\r\n                                        <Grid.Row>\r\n                                            <div id='chara' style={sectionStyle2}>\r\n                                                <Header as='h2' style={{ textAlign: 'center', color: 'black', fontSize: \"22pt\", paddingTop: '1em', paddingBottom: '1em' }}>\r\n                                                    <Header.Content>\r\n                                                        COVID-19 Demographics\r\n                                    </Header.Content>\r\n                                                </Header>\r\n                                            </div>\r\n                                        </Grid.Row>\r\n\r\n                                    </Grid>\r\n                                    <Grid >\r\n\r\n                                        <div id='age_g' style={{ width: \"100%\", height: \"100%\" }}>\r\n                                            <Header as='h2' style={{ textAlign: 'center', color: 'black', fontSize: \"19pt\", paddingTop: '1em', paddingBottom: '1em' }}>\r\n                                                <Header.Content>\r\n                                                    COVID-19 by Age\r\n                                    </Header.Content>\r\n                                            </Header>\r\n                                        </div>\r\n                                        <Grid style={{ paddingLeft: \"7em\", paddingTop: '0.5em', paddingRight: \"7em\", width: \"100%\", height: \"100%\" }}>\r\n                                            <Grid.Row columns={2} style={{ paddingTop: 11 }}>\r\n                                                <Grid.Column style={{ paddingTop: '1em', paddingBottom: 18 }}>\r\n                                                    <Header as='h2' style={{ textAlign: 'center', fontSize: \"18pt\", lineHeight: \"16pt\", paddingRight: '2em' }}>\r\n                                                        <Header.Content>\r\n                                                            Distribution of COVID-19 Cases in Georgia by Age\r\n            \t\t                        </Header.Content>\r\n                                                    </Header>\r\n                                                    <VictoryChart\r\n                                                        theme={VictoryTheme.material}\r\n                                                        width={500}\r\n                                                        height={300}\r\n                                                        domainPadding={10}\r\n                                                        scale={{ y: props.ylog ? 'log' : 'linear' }}\r\n                                                        minDomain={{ y: props.ylog ? 1 : 0 }}\r\n                                                        padding={{ left: 79, right: 40, top: 60, bottom: 50 }}\r\n                                                        containerComponent={<VictoryContainer responsive={false} />}\r\n                                                    >\r\n\r\n                                                        <VictoryAxis label='Age group'\r\n                                                            style={{\r\n                                                                axisLabel: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato', padding: 25 },\r\n                                                                tickLabels: { fontSize: 18, padding: 2 }\r\n                                                            }} />\r\n                                                        <VictoryAxis dependentAxis\r\n                                                            domain={[0, 1]}\r\n                                                            style={{\r\n                                                                tickLabels: { fontSize: 18, padding: 2 }\r\n                                                            }}\r\n                                                            tickFormat={(y) => (y <= 1 ? y * 100 : (y / 1000 + 'k'))} />\r\n                                                        <VictoryLegend x={80} y={40}\r\n                                                            orientation=\"horizontal\"\r\n                                                            gutter={1}\r\n                                                            data={[\r\n                                                                { name: 'Percentage of Cases', symbol: { fill: colors['1'], type: \"square\" } },\r\n                                                                { name: \"Percentage of Population\", symbol: { fill: colors['2'], type: \"square\" } },\r\n                                                            ]}\r\n                                                        />\r\n                                                        <VictoryGroup offset={20}\r\n                                                            colorScale={\"qualitative\"}\r\n                                                        >\r\n\r\n                                                            <VictoryBar\r\n                                                                alignment=\"start\"\r\n                                                                barWidth={20}\r\n                                                                labels={({ datum }) => `Percentage of Cases: ${(datum.value * 100).toFixed(0)}%`}\r\n                                                                data={[{ key: \"< 20\", 'value': data_cases['13'][\"019ageC_P\"] || 0, 'colors': '1' },\r\n                                                                { key: \"20-44\", 'value': data_cases['13'][\"2044ageC_P\"] || 0, 'colors': '1' },\r\n                                                                { key: \"45-64\", 'value': data_cases['13'][\"4564ageC_P\"] || 0, 'colors': '1' },\r\n                                                                { key: \"65+\", 'value': data_cases['13'][\"65ageC_P\"] || 0, 'colors': '1' }]}\r\n                                                                labelComponent={<VictoryTooltip\r\n                                                                    orientation=\"top\"\r\n                                                                    style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'black' }}\r\n                                                                    constrainToVisibleArea\r\n                                                                    // labelComponent={<VictoryLabel dx={-90} textAnchor='start' />}\r\n                                                                    flyoutStyle={{ fill: colors['1'], fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\r\n                                                                />}\r\n                                                                style={{\r\n                                                                    data: {\r\n                                                                        fill: ({ datum }) => colors[datum.colors],\r\n                                                                        fillOpacity: 2\r\n                                                                    }\r\n                                                                }}\r\n                                                                x=\"key\"\r\n                                                                y=\"value\"\r\n                                                            />\r\n                                                            <VictoryBar\r\n                                                                alignment=\"start\"\r\n                                                                barWidth={20}\r\n                                                                data={[{ key: \"< 20\", 'value': data_cases['13'][\"019ageP\"] || 0, 'colors': '2' },\r\n                                                                { key: \"20-44\", 'value': data_cases['13'][\"2044ageP\"] || 0, 'colors': '2' },\r\n                                                                { key: \"45-64\", 'value': data_cases['13'][\"4564ageP\"] || 0, 'colors': '2' },\r\n                                                                { key: \"65+\", 'value': data_cases['13'][\"65ageP\"] || 0, 'colors': '2' }]}\r\n                                                                labels={({ datum }) =>\r\n                                                                    `Percentage of Population: ${numberWithCommas(parseFloat(datum.value * 100).toFixed(0))}%`\r\n                                                                }\r\n                                                                labelComponent={<VictoryTooltip\r\n                                                                    orientation=\"top\"\r\n                                                                    style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'black' }}\r\n                                                                    constrainToVisibleArea\r\n                                                                    // labelComponent={<VictoryLabel dx={-50} textAnchor='start' />}\r\n                                                                    flyoutStyle={{ fill: \"grey\", fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\r\n                                                                />}\r\n                                                                style={{\r\n                                                                    data: {\r\n                                                                        fill: ({ datum }) => colors[datum.colors],\r\n                                                                        fillOpacity: 0.7\r\n                                                                    }\r\n                                                                }}\r\n                                                                x=\"key\"\r\n                                                                y=\"value\"\r\n                                                            />\r\n                                                        </VictoryGroup>\r\n                                                    </VictoryChart>\r\n                                                    <Grid.Row style={{ fontFamily: 'lato', fontSize: 18, color: dataupColor, paddingTop: '0.5em', paddingLeft: '4em', paddingRight: '2em' }} centered>\r\n                                                        Data updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' : (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}\r\n                                                    </Grid.Row>\r\n                                                    <Grid.Row style={{ paddingTop: '0em', paddingLeft: '4.9em', paddingRight: '2em' }}>\r\n                                                        <Accordion defaultActiveIndex={1} panels={[\r\n                                                            {\r\n                                                                key: 'acquire-dog',\r\n                                                                title: {\r\n                                                                    content: <u style={{ fontFamily: 'lato', fontSize: 18, color: dataupColor }}>About the data</u>,\r\n                                                                    icon: 'dropdown',\r\n                                                                },\r\n                                                                content: {\r\n                                                                    content: (\r\n                                                                        <p style={{ textAlign: \"justify\", fontFamily: 'lato', fontSize: 18 }}>\r\n                                                                            This chart shows the percentage of cases and percentage of the population by age for Georgia. The chart excludes data from {datades_cases['13']['age4catPmiss'].toFixed(2)}% of\r\n                                                            confirmed cases who were missing information on age. confirmed cases who\r\n                                                            were missing information on age. The COVID-19 case numbers represent confirmed cases only, defined as an individual with a positive\r\n                                                            molecular test. Only molecular test results are used in identifying confirmed cases.\r\n                                                                        </p>\r\n                                                                    ),\r\n                                                                },\r\n                                                            }\r\n                                                        ]\r\n\r\n                                                        } />\r\n\r\n                                                    </Grid.Row>\r\n                                                </Grid.Column>\r\n                                                <Grid.Column style={{ paddingTop: '1em', paddingBottom: 18 }}>\r\n                                                    <Header as='h2' style={{ textAlign: 'center', fontSize: \"18pt\", lineHeight: \"16pt\", paddingRight: '2em' }}>\r\n                                                        <Header.Content>\r\n                                                            Distribution of COVID-19 Deaths in Georgia by Age\r\n            \t\t                        </Header.Content>\r\n                                                    </Header>\r\n                                                    <VictoryChart\r\n                                                        theme={VictoryTheme.material}\r\n                                                        width={500}\r\n                                                        height={300}\r\n                                                        domainPadding={10}\r\n                                                        scale={{ y: props.ylog ? 'log' : 'linear' }}\r\n                                                        minDomain={{ y: props.ylog ? 1 : 0 }}\r\n                                                        padding={{ left: 79, right: 40, top: 60, bottom: 50 }}\r\n                                                        containerComponent={<VictoryContainer responsive={false} />}\r\n                                                    >\r\n                                                        <VictoryAxis\r\n                                                            label='Age group'\r\n                                                            style={{\r\n                                                                axisLabel: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato', padding: 25 },\r\n                                                                tickLabels: { fontSize: 18, padding: 2 }\r\n                                                            }} />\r\n                                                        <VictoryAxis dependentAxis\r\n                                                            domain={[0, 1]}\r\n                                                            style={{\r\n                                                                tickLabels: { fontSize: 18, padding: 2 }\r\n                                                            }}\r\n                                                            tickFormat={(y) => (y <= 1 ? y * 100 : (y / 1000 + 'k'))} />\r\n                                                        <VictoryLegend x={80} y={40}\r\n                                                            orientation=\"horizontal\"\r\n                                                            gutter={1}\r\n                                                            data={[\r\n                                                                { name: 'Percentage of Deaths', symbol: { fill: colors['3'], type: \"square\" } },\r\n                                                                { name: \"Percentage of Population\", symbol: { fill: colors['2'], type: \"square\" } },\r\n                                                            ]}\r\n                                                        />\r\n                                                        <VictoryGroup offset={20}\r\n                                                            colorScale={\"qualitative\"}\r\n                                                        >\r\n\r\n                                                            <VictoryBar\r\n                                                                alignment=\"start\"\r\n                                                                barWidth={20}\r\n                                                                // labels={({ datum }) => (Math.round(datum.value * 100) / 100)}\r\n                                                                labels={({ datum }) => `Percentage of Deaths: ${numberWithCommas(parseFloat(datum.value * 100).toFixed(0))}%`}\r\n                                                                data={[{ key: \"< 20\", 'value': data_deaths['13'][\"019ageC_P\"] || 0, 'colors': '3' },\r\n                                                                { key: \"20-44\", 'value': data_deaths['13'][\"2044ageC_P\"] || 0, 'colors': '3' },\r\n                                                                { key: \"45-64\", 'value': data_deaths['13'][\"4564ageC_P\"] || 0, 'colors': '3' },\r\n                                                                { key: \"65+\", 'value': data_deaths['13'][\"65ageC_P\"] || 0, 'colors': '3' }]}\r\n                                                                labelComponent={<VictoryTooltip\r\n                                                                    orientation=\"top\"\r\n                                                                    style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'black' }}\r\n                                                                    constrainToVisibleArea\r\n                                                                    // labelComponent={<VictoryLabel dx={-60} textAnchor='start' />}\r\n                                                                    flyoutStyle={{ fill: colors['1'], fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\r\n                                                                />}\r\n                                                                style={{\r\n                                                                    data: {\r\n                                                                        fill: ({ datum }) => colors[datum.colors],\r\n                                                                        fillOpacity: 2\r\n                                                                    }\r\n                                                                }}\r\n                                                                x=\"key\"\r\n                                                                y=\"value\"\r\n                                                            />\r\n                                                            <VictoryBar\r\n                                                                alignment=\"start\"\r\n                                                                barWidth={20}\r\n                                                                data={[{ key: \"< 20\", 'value': data_deaths['13'][\"019ageP\"] || 0, 'colors': '2' },\r\n                                                                { key: \"20-44\", 'value': data_deaths['13'][\"2044ageP\"] || 0, 'colors': '2' },\r\n                                                                { key: \"45-64\", 'value': data_deaths['13'][\"4564ageP\"] || 0, 'colors': '2' },\r\n                                                                { key: \"65+\", 'value': data_deaths['13'][\"65ageP\"] || 0, 'colors': '2' }]}\r\n                                                                labels={({ datum }) =>\r\n                                                                    `Percentage of Population: ${numberWithCommas(parseFloat(datum.value * 100).toFixed(0))}%`\r\n                                                                }\r\n                                                                labelComponent={<VictoryTooltip\r\n                                                                    orientation=\"top\"\r\n                                                                    style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'black' }}\r\n                                                                    constrainToVisibleArea\r\n                                                                    flyoutStyle={{ fill: \"grey\", fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\r\n                                                                />}\r\n                                                                style={{\r\n                                                                    data: {\r\n                                                                        fill: ({ datum }) => colors[datum.colors],\r\n                                                                        fillOpacity: 0.7\r\n                                                                    }\r\n                                                                }}\r\n                                                                x=\"key\"\r\n                                                                y=\"value\"\r\n                                                            />\r\n                                                        </VictoryGroup>\r\n                                                    </VictoryChart>\r\n                                                    <Grid.Row style={{ fontFamily: 'lato', fontSize: 18, color: dataupColor, paddingTop: '0.5em', paddingLeft: '4em', paddingRight: '2em' }} centered>\r\n                                                        Data updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' : (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}\r\n                                                    </Grid.Row>\r\n                                                    <Grid.Row style={{ paddingTop: '0em', paddingLeft: '4.9em', paddingRight: '2em' }}>\r\n                                                        <Accordion defaultActiveIndex={1} panels={[\r\n                                                            {\r\n                                                                key: 'acquire-dog',\r\n                                                                title: {\r\n                                                                    content: <u style={{ fontFamily: 'lato', fontSize: 18, color: dataupColor }}>About the data</u>,\r\n                                                                    icon: 'dropdown',\r\n                                                                },\r\n                                                                content: {\r\n                                                                    content: (\r\n                                                                        <p style={{ textAlign: \"justify\", fontFamily: 'lato', fontSize: 18 }}>\r\n                                                                            This chart shows the percentage of deaths and percentage of the population by age for Georgia. The chart excludes data from {datades_deaths['13']['age4catPmiss'].toFixed(2)}% of confirmed deaths who were missing information on age. The number of deaths includes\r\n                                                            confirmed COVID-19 cases that were either reported to DPH as deceased by healthcare providers, medical examiners/coroners, or identified by\r\n                                                            death certificates with COVID-19 indicated as the cause of death.\r\n                                                                        </p>\r\n                                                                    ),\r\n                                                                },\r\n                                                            }\r\n                                                        ]\r\n\r\n                                                        } />\r\n\r\n                                                    </Grid.Row>\r\n                                                </Grid.Column>\r\n                                            </Grid.Row>\r\n                                        </Grid>\r\n\r\n\r\n                                        <hr\r\n                                            style={{\r\n                                                color: '#44a0e2',\r\n                                                backgroundColor: '#44a0e2',\r\n                                                height: 5,\r\n                                                width: '100%'\r\n                                            }}\r\n                                        />\r\n\r\n                                        <div id='sex_g' style={{ width: \"100%\", height: \"100%\" }}>\r\n                                            <Header as='h2' style={{ textAlign: 'center', color: 'black', fontSize: \"19pt\", paddingTop: '1em', paddingBottom: '1em' }}>\r\n                                                <Header.Content>\r\n                                                    COVID-19 by Sex\r\n                                    </Header.Content>\r\n                                            </Header>\r\n                                        </div>\r\n                                        <Grid style={{ paddingLeft: \"7em\", paddingTop: '0.5em', paddingRight: \"7em\", width: \"100%\", height: \"100%\" }}>\r\n                                            <Grid.Row columns={2} style={{ paddingTop: 11 }}>\r\n                                                <Grid.Column style={{ paddingTop: '1em', paddingBottom: 18 }}>\r\n                                                    <Header as='h2' style={{ textAlign: 'center', fontSize: \"18pt\", lineHeight: \"16pt\", paddingRight: '2em' }}>\r\n                                                        <Header.Content>\r\n                                                            Distribution of COVID-19 Cases in Georgia by Sex\r\n            \t\t                        </Header.Content>\r\n                                                    </Header>\r\n                                                    <VictoryChart\r\n                                                        theme={VictoryTheme.material}\r\n                                                        width={500}\r\n                                                        height={300}\r\n                                                        domainPadding={100}\r\n                                                        scale={{ y: props.ylog ? 'log' : 'linear' }}\r\n                                                        // minDomain={{ y: props.ylog ? 1 : 0 }}\r\n                                                        maxDomain={{ y: 1 }}\r\n                                                        padding={{ left: 79, right: 40, top: 60, bottom: 50 }}\r\n                                                        containerComponent={<VictoryContainer responsive={false} />}\r\n                                                    >\r\n                                                        {/* <VictoryLabel style={{\r\n                                                fontSize: 20, paddingBottom: '0.5em'\r\n                                            }} text={props.title} x={(560) / 2} y={20} textAnchor=\"middle\" /> */}\r\n                                                        <VictoryAxis\r\n                                                            label='Sex'\r\n                                                            style={{\r\n                                                                axisLabel: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato', padding: 25 },\r\n                                                                tickLabels: { fontSize: 18, padding: 2 }\r\n                                                            }} />\r\n                                                        <VictoryAxis dependentAxis\r\n                                                            domain={[0, 1]}\r\n                                                            style={{\r\n                                                                tickLabels: { fontSize: 18, padding: 2 }\r\n                                                            }}\r\n                                                            tickFormat={(y) => (y <= 1 ? y * 100 : (y / 1000 + 'k'))} />\r\n                                                        <VictoryLegend x={80} y={40}\r\n                                                            orientation=\"horizontal\"\r\n                                                            gutter={1}\r\n                                                            // style={{ border: { stroke: \"black\" } }}\r\n                                                            data={[\r\n                                                                { name: 'Percentage of Cases', symbol: { fill: colors['1'], type: \"square\" } },\r\n                                                                { name: \"Percentage of Population\", symbol: { fill: colors['2'], type: \"square\" } },\r\n                                                            ]}\r\n                                                        />\r\n                                                        <VictoryGroup offset={20}\r\n                                                            colorScale={\"qualitative\"}\r\n                                                        >\r\n\r\n                                                            <VictoryBar\r\n                                                                alignment=\"start\"\r\n                                                                barWidth={20}\r\n                                                                // labels={({ datum }) => (Math.round(datum.value * 100) / 100)}\r\n                                                                labels={({ datum }) => `Percentage of Cases: ${numberWithCommas(parseFloat(datum.value * 100).toFixed(0))}%`}\r\n                                                                data={[\r\n                                                                    { key: \"Male\", 'value': data_cases['13'][\"maleC_P\"] || 0, 'colors': '1' },\r\n                                                                    { key: \"Female\", 'value': data_cases['13'][\"femaleC_P\"] || 0, 'colors': '1' }]}\r\n                                                                labelComponent={<VictoryTooltip\r\n                                                                    orientation=\"top\"\r\n                                                                    style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'black' }}\r\n                                                                    constrainToVisibleArea\r\n                                                                    // labelComponent={<VictoryLabel dx={-60} textAnchor='start' />}\r\n                                                                    flyoutStyle={{ fill: colors['1'], fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\r\n                                                                />}\r\n                                                                style={{\r\n                                                                    data: {\r\n                                                                        fill: ({ datum }) => colors[datum.colors],\r\n                                                                        fillOpacity: 2\r\n                                                                    }\r\n                                                                }}\r\n                                                                x=\"key\"\r\n                                                                y=\"value\"\r\n                                                            />\r\n                                                            <VictoryBar\r\n                                                                alignment=\"start\"\r\n                                                                barWidth={20}\r\n                                                                data={[\r\n                                                                    { key: \"Male\", 'value': data_cases['13'][\"maleP\"] || 0, 'colors': '2' },\r\n                                                                    { key: \"Female\", 'value': data_cases['13'][\"femaleP\"] || 0, 'colors': '2' }]}\r\n                                                                labels={({ datum }) =>\r\n                                                                    `Percentage of Population: ${numberWithCommas(parseFloat(datum.value * 100).toFixed(0))}%`\r\n                                                                }\r\n                                                                labelComponent={<VictoryTooltip\r\n                                                                    orientation=\"top\"\r\n                                                                    style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'black' }}\r\n                                                                    constrainToVisibleArea\r\n                                                                    flyoutStyle={{ fill: \"grey\", fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\r\n                                                                />}\r\n                                                                style={{\r\n                                                                    data: {\r\n                                                                        fill: ({ datum }) => colors[datum.colors],\r\n                                                                        fillOpacity: 0.7\r\n                                                                    }\r\n                                                                }}\r\n                                                                x=\"key\"\r\n                                                                y=\"value\"\r\n                                                            />\r\n                                                        </VictoryGroup>\r\n                                                    </VictoryChart>\r\n                                                    <Grid.Row style={{ fontFamily: 'lato', fontSize: 18, color: dataupColor, paddingTop: '0.5em', paddingLeft: '4em', paddingRight: '2em' }} centered>\r\n                                                        Data updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' : (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}\r\n                                                    </Grid.Row>\r\n                                                    <Grid.Row style={{ paddingTop: '0em', paddingLeft: '4.9em', paddingRight: '2em' }}>\r\n                                                        <Accordion defaultActiveIndex={1} panels={[\r\n                                                            {\r\n                                                                key: 'acquire-dog',\r\n                                                                title: {\r\n                                                                    content: <u style={{ fontFamily: 'lato', fontSize: 18, color: dataupColor }}>About the data</u>,\r\n                                                                    icon: 'dropdown',\r\n                                                                },\r\n                                                                content: {\r\n                                                                    content: (\r\n                                                                        <p style={{ textAlign: \"justify\", fontFamily: 'lato', fontSize: 18 }}>\r\n                                                                            This chart shows the percentage of cases and percentage of the population by sex for Georgia. The chart excludes data from {datades_cases['13']['femalePmiss'].toFixed(2)}% of confirmed cases who were missing information on sex. Confirmed cases who\r\n                                                            were missing information on sex. The COVID-19 case numbers represent confirmed cases only, defined as an individual with a positive\r\n                                                            molecular test. Only molecular test results are used in identifying confirmed cases.\r\n                                                                        </p>\r\n                                                                    ),\r\n                                                                },\r\n                                                            }\r\n                                                        ]\r\n\r\n                                                        } />\r\n\r\n                                                    </Grid.Row>\r\n\r\n                                                </Grid.Column>\r\n                                                <Grid.Column style={{ paddingTop: '1em', paddingBottom: 18 }}>\r\n                                                    <Header as='h2' style={{ textAlign: 'center', fontSize: \"18pt\", lineHeight: \"16pt\", paddingRight: '2em' }}>\r\n                                                        <Header.Content>\r\n                                                            Distribution of COVID-19 Deaths in Georgia by Sex\r\n            \t\t                        </Header.Content>\r\n                                                    </Header>\r\n                                                    <VictoryChart\r\n                                                        theme={VictoryTheme.material}\r\n                                                        width={500}\r\n                                                        height={300}\r\n                                                        domainPadding={100}\r\n                                                        scale={{ y: props.ylog ? 'log' : 'linear' }}\r\n                                                        // minDomain={{ y: props.ylog ? 1 : 0 }}\r\n                                                        maxDomain={{ y: 1 }}\r\n                                                        padding={{ left: 79, right: 40, top: 60, bottom: 50 }}\r\n                                                        containerComponent={<VictoryContainer responsive={false} />}\r\n                                                    >\r\n                                                        <VictoryAxis label='Sex'\r\n                                                            style={{\r\n                                                                axisLabel: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato', padding: 25 },\r\n                                                                tickLabels: { fontSize: 18, padding: 2 }\r\n                                                            }} />\r\n                                                        <VictoryAxis dependentAxis\r\n                                                            domain={[0, 1]}\r\n                                                            style={{\r\n                                                                tickLabels: { fontSize: 18, padding: 2 }\r\n                                                            }}\r\n                                                            tickFormat={(y) => (y <= 1 ? y * 100 : (y / 1000 + 'k'))} />\r\n                                                        <VictoryLegend x={80} y={40}\r\n                                                            orientation=\"horizontal\"\r\n                                                            gutter={1}\r\n                                                            // style={{ border: { stroke: \"black\" } }}\r\n                                                            data={[\r\n                                                                { name: 'Percentage of Deaths', symbol: { fill: colors['3'], type: \"square\" } },\r\n                                                                { name: \"Percentage of Population\", symbol: { fill: colors['2'], type: \"square\" } },\r\n                                                            ]}\r\n                                                        />\r\n                                                        <VictoryGroup offset={20}\r\n                                                            colorScale={\"qualitative\"}\r\n                                                        >\r\n\r\n                                                            <VictoryBar\r\n                                                                alignment=\"start\"\r\n                                                                barWidth={20}\r\n                                                                // labels={({ datum }) => (Math.round(datum.value * 100) / 100)}\r\n                                                                labels={({ datum }) => `Percentage of Deaths: ${numberWithCommas(parseFloat(datum.value * 100).toFixed(0))}%`}\r\n                                                                data={[\r\n                                                                    { key: \"Male\", 'value': data_deaths['13'][\"maleC_P\"] || 0, 'colors': '3' },\r\n                                                                    { key: \"Female\", 'value': data_deaths['13'][\"femaleC_P\"] || 0, 'colors': '3' }]}\r\n                                                                labelComponent={<VictoryTooltip\r\n                                                                    orientation=\"top\"\r\n                                                                    style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'black' }}\r\n                                                                    constrainToVisibleArea\r\n                                                                    // labelComponent={<VictoryLabel dx={-60} textAnchor='start' />}\r\n                                                                    flyoutStyle={{ fill: colors['1'], fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\r\n                                                                />}\r\n                                                                style={{\r\n                                                                    data: {\r\n                                                                        fill: ({ datum }) => colors[datum.colors],\r\n                                                                        fillOpacity: 2\r\n                                                                    }\r\n                                                                }}\r\n                                                                x=\"key\"\r\n                                                                y=\"value\"\r\n                                                            />\r\n                                                            <VictoryBar\r\n                                                                alignment=\"start\"\r\n                                                                barWidth={20}\r\n                                                                data={[\r\n                                                                    { key: \"Male\", 'value': data_deaths['13'][\"maleP\"] || 0, 'colors': '2' },\r\n                                                                    { key: \"Female\", 'value': data_deaths['13'][\"femaleP\"] || 0, 'colors': '2' }]}\r\n                                                                labels={({ datum }) =>\r\n                                                                    `Percentage of Population: ${numberWithCommas(parseFloat(datum.value * 100).toFixed(0))}%`\r\n                                                                }\r\n                                                                labelComponent={<VictoryTooltip\r\n                                                                    orientation=\"top\"\r\n                                                                    style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'black' }}\r\n                                                                    constrainToVisibleArea\r\n                                                                    // labelComponent={<VictoryLabel dx={-50} textAnchor='start' />}\r\n                                                                    flyoutStyle={{ fill: \"grey\", fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\r\n                                                                />}\r\n                                                                style={{\r\n                                                                    data: {\r\n                                                                        fill: ({ datum }) => colors[datum.colors],\r\n                                                                        fillOpacity: 0.7\r\n                                                                    }\r\n                                                                }}\r\n                                                                x=\"key\"\r\n                                                                y=\"value\"\r\n                                                            />\r\n                                                        </VictoryGroup>\r\n                                                    </VictoryChart>\r\n                                                    <Grid.Row style={{ fontFamily: 'lato', fontSize: 18, color: dataupColor, paddingTop: '0.5em', paddingLeft: '4em', paddingRight: '2em' }} centered>\r\n                                                        Data updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' : (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}\r\n                                                    </Grid.Row>\r\n                                                    <Grid.Row style={{ paddingTop: '0em', paddingLeft: '4.9em', paddingRight: '2em' }}>\r\n                                                        <Accordion defaultActiveIndex={1} panels={[\r\n                                                            {\r\n                                                                key: 'acquire-dog',\r\n                                                                title: {\r\n                                                                    content: <u style={{ fontFamily: 'lato', fontSize: 18, color: dataupColor }}>About the data</u>,\r\n                                                                    icon: 'dropdown',\r\n                                                                },\r\n                                                                content: {\r\n                                                                    content: (\r\n                                                                        <p style={{ textAlign: \"justify\", fontFamily: 'lato', fontSize: 18 }}>\r\n                                                                            This chart shows the percentage of deaths and percentage of the population by sex for Georgia. The chart excludes data from {datades_deaths['13']['femalePmiss'].toFixed(2)}% of confirmed deaths who were missing information on sex.\r\n                                                            The number of deaths includes confirmed COVID-19 cases that were either reported to DPH as deceased by healthcare providers, medical examiners/coroners, or identified by\r\n                                                            death certificates with COVID-19 indicated as the cause of death.\r\n                                                                        </p>\r\n                                                                    ),\r\n                                                                },\r\n                                                            }\r\n                                                        ]\r\n\r\n                                                        } />\r\n\r\n                                                    </Grid.Row>\r\n                                                </Grid.Column>\r\n                                            </Grid.Row>\r\n                                        </Grid>\r\n\r\n                                        <hr\r\n                                            style={{\r\n                                                color: '#44a0e2',\r\n                                                backgroundColor: '#44a0e2',\r\n                                                height: 5,\r\n                                                width: '100%'\r\n                                            }}\r\n                                        />\r\n                                        <div id='re' style={{ width: \"100%\", height: \"100%\" }}>\r\n                                            <Header as='h2' style={{ textAlign: 'center', color: 'black', fontSize: \"19pt\", paddingTop: '1em', paddingBottom: '1em' }}>\r\n                                                <Header.Content>\r\n                                                    COVID-19 by Race/Ethnicity\r\n                                    </Header.Content>\r\n                                            </Header>\r\n                                        </div>\r\n\r\n                                        <Grid style={{ paddingLeft: \"7em\", paddingTop: '0.5em', paddingRight: \"7em\", width: \"100%\", height: \"100%\" }}>\r\n                                            <Grid.Row columns={2} style={{ paddingTop: 11 }}>\r\n                                                <Grid.Column style={{ paddingTop: '1em', paddingBottom: 18 }}>\r\n                                                    <Header as='h2' style={{ textAlign: 'center', fontSize: \"18pt\", lineHeight: \"16pt\", paddingRight: '2em' }}>\r\n                                                        <Header.Content>\r\n                                                            Distribution of COVID-19 Cases in Georgia by Race and Ethnicity\r\n            \t\t                        </Header.Content>\r\n                                                    </Header>\r\n                                                    <VictoryChart\r\n                                                        theme={VictoryTheme.material}\r\n                                                        width={500}\r\n                                                        height={300}\r\n                                                        domainPadding={10}\r\n                                                        scale={{ y: props.ylog ? 'log' : 'linear' }}\r\n                                                        minDomain={{ y: props.ylog ? 1 : 0 }}\r\n                                                        padding={{ left: 79, right: 40, top: 60, bottom: 50 }}\r\n                                                        containerComponent={<VictoryContainer responsive={false} />}\r\n                                                    >\r\n                                                        {/* <VictoryLabel style={{\r\n                                                fontSize: 20, paddingBottom: '0.5em'\r\n                                            }} text={props.title} x={(560) / 2} y={20} textAnchor=\"middle\" /> */}\r\n                                                        <VictoryAxis label='Race/Ethnicity'\r\n                                                            style={{\r\n                                                                axisLabel: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato', padding: 25 },\r\n                                                                tickLabels: { fontSize: 18, padding: 2 }\r\n                                                            }} />\r\n                                                        <VictoryAxis dependentAxis\r\n                                                            domain={[0, 1]}\r\n                                                            style={{\r\n                                                                tickLabels: { fontSize: 18, padding: 2 }\r\n                                                            }}\r\n                                                            tickFormat={(y) => (y <= 1 ? y * 100 : (y / 1000 + 'k'))} />\r\n                                                        <VictoryLegend x={80} y={40}\r\n                                                            orientation=\"horizontal\"\r\n                                                            gutter={1}\r\n                                                            // style={{ border: { stroke: \"black\" } }}\r\n                                                            data={[\r\n                                                                { name: 'Percentage of Cases', symbol: { fill: colors['1'], type: \"square\" } },\r\n                                                                { name: \"Percentage of Population\", symbol: { fill: colors['2'], type: \"square\" } },\r\n                                                            ]}\r\n                                                        />\r\n                                                        <VictoryGroup offset={20}\r\n                                                            colorScale={\"qualitative\"}\r\n                                                        >\r\n\r\n                                                            <VictoryBar\r\n                                                                alignment=\"start\"\r\n                                                                barWidth={20}\r\n                                                                // labels={({ datum }) => (Math.round(datum.value * 100) / 100)}\r\n                                                                labels={({ datum }) => `Percentage of Cases: ${numberWithCommas(parseFloat(datum.value * 100).toFixed(0))}%`}\r\n                                                                data={[{ key: \"White\", 'value': data_cases['13'][\"whiteC_P\"] || 0, 'colors': '1' },\r\n                                                                { key: \"Black\", 'value': data_cases['13'][\"blackC_P\"] || 0, 'colors': '1' },\r\n                                                                { key: \"Hispanic\", 'value': data_cases['13'][\"hispanicC_P\"] || 0, 'colors': '1' },\r\n                                                                { key: \"Other\", 'value': data_cases['13'][\"otherNHC_P\"] || 0, 'colors': '1' }]}\r\n                                                                labelComponent={<VictoryTooltip\r\n                                                                    orientation=\"top\"\r\n                                                                    style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'black' }}\r\n                                                                    constrainToVisibleArea\r\n                                                                    // labelComponent={<VictoryLabel dx={-60} textAnchor='start' />}\r\n                                                                    flyoutStyle={{ fill: colors['1'], fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\r\n                                                                />}\r\n                                                                style={{\r\n                                                                    data: {\r\n                                                                        fill: ({ datum }) => colors[datum.colors],\r\n                                                                        fillOpacity: 2\r\n                                                                    }\r\n                                                                }}\r\n                                                                x=\"key\"\r\n                                                                y=\"value\"\r\n                                                            />\r\n                                                            <VictoryBar\r\n                                                                alignment=\"start\"\r\n                                                                barWidth={20}\r\n                                                                data={[{ key: \"White\", 'value': data_cases['13'][\"whiteP\"] || 0, 'colors': '2' },\r\n                                                                { key: \"Black\", 'value': data_cases['13'][\"blackP\"] || 0, 'colors': '2' },\r\n                                                                { key: \"Hispanic\", 'value': data_cases['13'][\"hispanicP\"] || 0, 'colors': '2' },\r\n                                                                { key: \"Other\", 'value': data_cases['13'][\"otherNHP\"] || 0, 'colors': '2' }]}\r\n                                                                labels={({ datum }) =>\r\n                                                                    `Percentage of Population: ${numberWithCommas(parseFloat(datum.value * 100).toFixed(0))}%`\r\n                                                                }\r\n                                                                labelComponent={<VictoryTooltip\r\n                                                                    orientation=\"top\"\r\n                                                                    style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'black' }}\r\n                                                                    constrainToVisibleArea\r\n                                                                    // labelComponent={<VictoryLabel dx={-50} textAnchor='start' />}\r\n                                                                    flyoutStyle={{ fill: \"grey\", fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\r\n                                                                />}\r\n                                                                style={{\r\n                                                                    data: {\r\n                                                                        fill: ({ datum }) => colors[datum.colors],\r\n                                                                        fillOpacity: 0.7\r\n                                                                    }\r\n                                                                }}\r\n                                                                x=\"key\"\r\n                                                                y=\"value\"\r\n                                                            />\r\n                                                        </VictoryGroup>\r\n                                                    </VictoryChart>\r\n                                                    <Grid.Row style={{ fontFamily: 'lato', fontSize: 18, color: dataupColor, paddingTop: '0.5em', paddingLeft: '4em', paddingRight: '2em' }} centered>\r\n                                                        Data updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' : (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}\r\n                                                    </Grid.Row>\r\n                                                    <Grid.Row style={{ paddingTop: '0em', paddingLeft: '4.9em', paddingRight: '2em' }}>\r\n                                                        <Accordion defaultActiveIndex={1} panels={[\r\n                                                            {\r\n                                                                key: 'acquire-dog',\r\n                                                                title: {\r\n                                                                    content: <u style={{ fontFamily: 'lato', fontSize: 18, color: dataupColor }}>About the data</u>,\r\n                                                                    icon: 'dropdown',\r\n                                                                },\r\n                                                                content: {\r\n                                                                    content: (\r\n                                                                        <p style={{ textAlign: \"justify\", fontFamily: 'lato', fontSize: 18 }}>\r\n                                                                            This chart shows the percentage of cases and percentage of the population by race/ethnicity for Georgia. The chart excludes data from {datades_cases['13']['race_3Pmiss'].toFixed(2)}% of confirmed cases\r\n                                                            who were missing information on race/ethnicity. Confirmed cases who\r\n                                                            were missing information on race/ethnicity. The COVID-19 case numbers represent confirmed cases only, defined as an individual with a positive\r\n                                                            molecular test. Only molecular test results are used in identifying confirmed cases.\r\n                                                                        </p>\r\n                                                                    ),\r\n                                                                },\r\n                                                            }\r\n                                                        ]\r\n\r\n                                                        } />\r\n\r\n                                                    </Grid.Row>\r\n\r\n                                                </Grid.Column>\r\n                                                <Grid.Column style={{ paddingTop: '1em', paddingBottom: 18 }}>\r\n                                                    <Header as='h2' style={{ textAlign: 'center', fontSize: \"18pt\", lineHeight: \"16pt\", paddingRight: '2em' }}>\r\n                                                        <Header.Content>\r\n                                                            Distribution of COVID-19 Deaths in Georgia by Race and Ethnicity\r\n\r\n            \t\t                        </Header.Content>\r\n                                                    </Header>\r\n                                                    <VictoryChart\r\n                                                        theme={VictoryTheme.material}\r\n                                                        width={500}\r\n                                                        height={300}\r\n                                                        domainPadding={10}\r\n                                                        scale={{ y: props.ylog ? 'log' : 'linear' }}\r\n                                                        minDomain={{ y: props.ylog ? 1 : 0 }}\r\n                                                        padding={{ left: 79, right: 40, top: 60, bottom: 50 }}\r\n                                                        containerComponent={<VictoryContainer responsive={false} />}\r\n                                                    >\r\n                                                        {/* <VictoryLabel style={{\r\n                                                fontSize: 20, paddingBottom: '0.5em'\r\n                                            }} text={props.title} x={(560) / 2} y={20} textAnchor=\"middle\" /> */}\r\n                                                        <VictoryAxis label='Race/Ethnicity'\r\n                                                            style={{\r\n                                                                axisLabel: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato', padding: 25 },\r\n                                                                tickLabels: { fontSize: 18, padding: 2 }\r\n                                                            }} />\r\n                                                        <VictoryAxis dependentAxis\r\n                                                            domain={[0, 1]}\r\n                                                            style={{\r\n                                                                tickLabels: { fontSize: 18, padding: 2 }\r\n                                                            }}\r\n                                                            tickFormat={(y) => (y <= 1 ? y * 100 : (y / 1000 + 'k'))} />\r\n                                                        <VictoryLegend x={80} y={40}\r\n                                                            orientation=\"horizontal\"\r\n                                                            gutter={1}\r\n                                                            // style={{ border: { stroke: \"black\" } }}\r\n                                                            data={[\r\n                                                                { name: 'Percentage of Deaths', symbol: { fill: colors['3'], type: \"square\" } },\r\n                                                                { name: \"Percentage of Population\", symbol: { fill: colors['2'], type: \"square\" } },\r\n                                                            ]}\r\n                                                        />\r\n                                                        <VictoryGroup offset={20}\r\n                                                            colorScale={\"qualitative\"}\r\n                                                        >\r\n\r\n                                                            <VictoryBar\r\n                                                                alignment=\"start\"\r\n                                                                barWidth={20}\r\n                                                                // labels={({ datum }) => (Math.round(datum.value * 100) / 100)}\r\n                                                                labels={({ datum }) => `Percentage of Deaths: ${numberWithCommas(parseFloat(datum.value * 100).toFixed(0))}%`}\r\n                                                                data={[{ key: \"White\", 'value': data_deaths['13'][\"whiteC_P\"] || 0, 'colors': '3' },\r\n                                                                { key: \"Black\", 'value': data_deaths['13'][\"blackC_P\"] || 0, 'colors': '3' },\r\n                                                                { key: \"Hispanic\", 'value': data_deaths['13'][\"hispanicC_P\"] || 0, 'colors': '3' },\r\n                                                                { key: \"Other\", 'value': data_deaths['13'][\"otherNHC_P\"] || 0, 'colors': '3' }]}\r\n                                                                labelComponent={<VictoryTooltip\r\n                                                                    orientation=\"top\"\r\n                                                                    style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'black' }}\r\n                                                                    constrainToVisibleArea\r\n                                                                    // labelComponent={<VictoryLabel dx={-60} textAnchor='start' />}\r\n                                                                    flyoutStyle={{ fill: colors['1'], fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\r\n                                                                />}\r\n                                                                style={{\r\n                                                                    data: {\r\n                                                                        fill: ({ datum }) => colors[datum.colors],\r\n                                                                        fillOpacity: 2\r\n                                                                    }\r\n                                                                }}\r\n                                                                x=\"key\"\r\n                                                                y=\"value\"\r\n                                                            />\r\n                                                            <VictoryBar\r\n                                                                alignment=\"start\"\r\n                                                                barWidth={20}\r\n                                                                data={[{ key: \"White\", 'value': data_deaths['13'][\"whiteP\"] || 0, 'colors': '2' },\r\n                                                                { key: \"Black\", 'value': data_deaths['13'][\"blackP\"] || 0, 'colors': '2' },\r\n                                                                { key: \"Hispanic\", 'value': data_deaths['13'][\"hispanicP\"] || 0, 'colors': '2' },\r\n                                                                { key: \"Other\", 'value': data_deaths['13'][\"otherNHP\"] || 0, 'colors': '2' }]}\r\n                                                                labels={({ datum }) =>\r\n                                                                    `Percentage of Population: ${numberWithCommas(parseFloat(datum.value * 100).toFixed(0))}%`\r\n                                                                }\r\n                                                                labelComponent={<VictoryTooltip\r\n                                                                    orientation=\"top\"\r\n                                                                    style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'black' }}\r\n                                                                    constrainToVisibleArea\r\n                                                                    // labelComponent={<VictoryLabel dx={-50} textAnchor='start' />}\r\n                                                                    flyoutStyle={{ fill: \"grey\", fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\r\n                                                                />}\r\n                                                                style={{\r\n                                                                    data: {\r\n                                                                        fill: ({ datum }) => colors[datum.colors],\r\n                                                                        fillOpacity: 0.7\r\n                                                                    }\r\n                                                                }}\r\n                                                                x=\"key\"\r\n                                                                y=\"value\"\r\n                                                            />\r\n                                                        </VictoryGroup>\r\n                                                    </VictoryChart>\r\n                                                    <Grid.Row style={{ fontFamily: 'lato', fontSize: 18, color: dataupColor, paddingTop: '0.5em', paddingLeft: '4em', paddingRight: '2em' }} centered>\r\n                                                        Data updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' : (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}\r\n                                                    </Grid.Row>\r\n                                                    <Grid.Row style={{ paddingTop: '0em', paddingLeft: '4.9em', paddingRight: '2em' }}>\r\n                                                        <Accordion defaultActiveIndex={1} panels={[\r\n                                                            {\r\n                                                                key: 'acquire-dog',\r\n                                                                title: {\r\n                                                                    content: <u style={{ fontFamily: 'lato', fontSize: 18, color: dataupColor }}>About the data</u>,\r\n                                                                    icon: 'dropdown',\r\n                                                                },\r\n                                                                content: {\r\n                                                                    content: (\r\n                                                                        <p style={{ textAlign: \"justify\", fontFamily: 'lato', fontSize: 18 }}>\r\n                                                                            This chart shows the percentage of deaths and percentage of the population by race/ethnicity for Georgia. The chart excludes data from {datades_deaths['13']['race_3Pmiss'].toFixed(2)}% of confirmed\r\n                                                            deaths who were missing information on race/ethnicity.\r\n                                                            The number of deaths includes confirmed COVID-19 cases that were either reported to DPH as deceased by healthcare providers, medical examiners/coroners, or identified by\r\n                                                            death certificates with COVID-19 indicated as the cause of death.\r\n                                                                        </p>\r\n                                                                    ),\r\n                                                                },\r\n                                                            }\r\n                                                        ]\r\n\r\n                                                        } />\r\n\r\n                                                    </Grid.Row>\r\n\r\n\r\n                                                </Grid.Column>\r\n                                            </Grid.Row>\r\n                                        </Grid>\r\n\r\n\r\n\r\n                                        {/* Charactor */}\r\n                                        {/* <center> <Waypoint\r\n                                            onEnter={() => {\r\n                                                setActiveCharacter('COVID-19 by County Characteristics')\r\n                                                console.log(activeCharacter)\r\n                                            }}>\r\n                                        </Waypoint> </center> */}\r\n                                        <Grid id='chara' style={{ paddingBottom: '2em' }}>\r\n                                            <Grid.Row>\r\n                                                <div id='chara' style={sectionStyle2}>\r\n                                                    <Header as='h2' style={{ textAlign: 'center', color: 'black', fontSize: \"22pt\", paddingTop: '1em', paddingBottom: '1em' }}>\r\n                                                        <Header.Content>\r\n                                                            COVID-19 County Disparities\r\n                                    </Header.Content>\r\n                                                    </Header>\r\n                                                </div>\r\n                                            </Grid.Row>\r\n                                            <Header as='h2' style={{ textAlign: 'center', color: 'black', fontSize: \"18pt\", paddingTop: 0 }}>\r\n\r\n                                                <Header.Subheader style={{ color: '#000000', textAlign: 'left', fontSize: \"16pt\", paddingTop: 16, paddingBottom: 10, paddingLeft: 0, paddingRight: 0 }}>\r\n                                                    {/* <center> <b style={{ fontSize: \"18pt\" }}>COVID-19 cases per 100,000 across the population characteristics of all the counties in the United States </b> </center> */}\r\n                                                        COVID-19 affects communities very differently. Underlying medical conditions;\r\n                                                        racial, gender, and age demographics; income levels; and population density are\r\n                                                        all contributing factors that determine the rate of COVID-19 in different counties.\r\n                                                        Some of the many county characteristics that may have a large impact on disparate rates\r\n                                                        of infection are displayed below, with counties divided into quintiles based on each characteristic,\r\n                                                        unless otherwise noted.\r\n                                                        </Header.Subheader>\r\n                                            </Header>\r\n                                        </Grid>\r\n                                        <hr\r\n                                            style={{\r\n                                                color: '#44a0e2',\r\n                                                backgroundColor: '#44a0e2',\r\n                                                height: 5,\r\n                                                width: '100%'\r\n                                            }}\r\n                                        />\r\n\r\n                                        <Grid id=\"cvi\" style={{ paddingBottom: '2em' }}>\r\n                                            <Grid.Row>\r\n                                                <div id='cvi' style={{ width: \"100%\", height: \"100%\" }}>\r\n                                                    <Header as='h2' style={{ textAlign: 'center', color: 'black', fontSize: \"19pt\", paddingTop: '1em', paddingBottom: '1em' }}>\r\n                                                        <Header.Content>COVID-19 by Community Vulnerability Index</Header.Content>\r\n                                                    </Header>\r\n                                                </div>\r\n                                            </Grid.Row>\r\n                                            <Header as='h2' style={{ textAlign: 'center', color: 'black', fontSize: \"18pt\", paddingTop: 1 }}>\r\n                                                <Header.Subheader style={{ color: '#000000', textAlign: 'left', fontSize: \"16pt\", paddingTop: 1, paddingBottom: 28, paddingLeft: 0, paddingRight: 0 }}>\r\n                                                    The COVID-19 Community Vulnerability Index measures the expected negative impact that a community may face in the context of the COVID-19 epidemic.\r\n                                                    Identifying counties at risk for worse COVID-19 health outcomes can help inform politics and distribution of resources. The COVID-19 Community Vulnerability\r\n                                                    Index (CCVI) was created by Surgo Foundation. CCVI incorporates 34 county characteristics, with six core themes: socioeconomic status, household composition\r\n                                                    and disability, minority status and language, housing type and transportation, epidemiologic factors, healthcare system factors. More information about the\r\n                                                COVID-19 Community Vulnerability Index can be found <a href=\"https://precisionforcovid.org/ccvi\">here</a>.\r\n\r\n<br />\r\n                                                    <br />\r\n\r\n                                                </Header.Subheader>\r\n                                            </Header>\r\n                                            <Grid.Column width={7} style={{ paddingLeft: \"2\", paddingLeft: \"1\" }}>\r\n                                                <Grid.Row style={{ paddingTop: \"0\" }}>\r\n                                                    <Header as='h2' style={{ fontWeight: 600, fontSize: \"16pt\", lineHeight: \"16pt\" }}>\r\n                                                        <Header.Content>\r\n                                                            Georgia Community Vulnerability Index Map\r\n                                        </Header.Content>\r\n                                                    </Header>\r\n                                                </Grid.Row>\r\n                                                <Grid.Row style={{ paddingTop: \"0\", paddingBottom: '1em' }}>\r\n                                                    <svg width=\"600\" height=\"80\">\r\n                                                        {_.map(colorPalette2, (color, i) => {\r\n                                                            return <rect key={i} x={110 + 40 * i} y={40} width=\"40\" height=\"20\" style={{ fill: color, strokeWidth: 1, stroke: color }} />\r\n                                                        })}\r\n                                                        <text x={20} y={50} style={{ fontSize: '0.8em' }}>Least vulnerable</text>\r\n                                                        <text x={20} y={59} style={{ fontSize: '0.8em' }}>counties</text>\r\n                                                        <text x={160 + 40 * (colorPalette2.length - 1)} y={50} style={{ fontSize: '0.8em' }}>Highest vulnerable</text>\r\n                                                        <text x={160 + 40 * (colorPalette2.length - 1)} y={59} style={{ fontSize: '0.8em' }}>counties</text>\r\n                                                        {_.map(thresh_chara['cvi'], (splitpoint, i) => {\r\n                                                            return <text key={i} x={105 + 40 * (i)} y={35} style={{ fontSize: '0.7em' }}> {thresh_chara['cvi'][i]}</text>\r\n                                                        })}\r\n                                                    </svg>\r\n                                                    <ComposableMap projection=\"geoAlbersUsa\"\r\n                                                        projectionConfig={{ scale: `${config.scale1}` }}\r\n                                                        width={600}\r\n                                                        height={600}\r\n                                                        data-tip=\"\"\r\n                                                        offsetX={config.offsetX1}\r\n                                                        offsetY={config.offsetY2}>\r\n                                                        <Geographies data-tip='cvi' data-for='cvi' geography={config.url}>\r\n                                                            {({ geographies }) => geographies.map(geo =>\r\n                                                                <Geography\r\n                                                                    key={geo.rsmKey}\r\n                                                                    geography={geo}\r\n\r\n                                                                    style={{\r\n                                                                        default: {\r\n                                                                            //  fill: \"#ECEFF1\",\r\n                                                                            stroke: \"#607D8B\",\r\n                                                                            strokeWidth: 0.95,\r\n                                                                            outline: \"none\",\r\n                                                                        },\r\n                                                                        pressed: {\r\n                                                                            outline: \"none\",\r\n                                                                        }\r\n                                                                    }}\r\n                                                                    onMouseEnter={() => {\r\n\r\n                                                                        setCountyFipscvi(geo.properties.COUNTYFP);\r\n                                                                        setCountyNamecvi(fips2county[stateFips + geo.properties.COUNTYFP]);\r\n                                                                        setTooltipContentcvi(fips2county[stateFips + geo.properties.COUNTYFP] + \"'s CCVI: \" + dataUs[stateFips + geo.properties.COUNTYFP]['cvi'].toFixed(2));\r\n\r\n                                                                    }}\r\n                                                                    onMouseLeave={() => {\r\n                                                                        setTooltipContent(\"\")\r\n                                                                    }}\r\n                                                                    fill={countyFipscvi === geo.properties.COUNTYFP ? countyColor :\r\n                                                                        ((colorCVI && dataUs[stateFips + geo.properties.COUNTYFP] &&\r\n                                                                            dataUs[stateFips + geo.properties.COUNTYFP]['cvi'] && dataUs[stateFips + geo.properties.COUNTYFP]['cvi'] > 0) ?\r\n                                                                            colorCVI[dataUs[stateFips + geo.properties.COUNTYFP]['cvi']] :\r\n                                                                            (colorCVI && dataUs[stateFips + geo.properties.COUNTYFP] && dataUs[stateFips + geo.properties.COUNTYFP]['cvi'] === 0) ? '#e1dce2' : '#FFFFFF')}\r\n                                                                />\r\n                                                            )}\r\n                                                        </Geographies>\r\n                                                    </ComposableMap>\r\n\r\n                                                    {/* <svg width=\"600\" height=\"80\">\r\n                                                        <rect key={0} x={50} y={0} width=\"20\" height=\"20\" style={{ fill: colorPalette[0], strokeWidth: 1, stroke: colorPalette[0] }} />\r\n                                                        <text x={80} y={15} style={{ fontSize: '1em' }}>0 {'-'} 0.53</text>\r\n                                                        <rect key={1} x={200} y={0} width=\"20\" height=\"20\" style={{ fill: colorPalette[1], strokeWidth: 1, stroke: colorPalette[1] }} />\r\n                                                        <text x={230} y={15} style={{ fontSize: '1em' }}>0.53 {'-'} 0.71</text>\r\n                                                        <rect key={2} x={360} y={0} width=\"20\" height=\"20\" style={{ fill: colorPalette[2], strokeWidth: 1, stroke: colorPalette[2] }} />\r\n                                                        <text x={390} y={15} style={{ fontSize: '1em' }}>0.71 {'-'} 0.85</text>\r\n\r\n                                                        <rect key={3} x={130} y={40} width=\"20\" height=\"20\" style={{ fill: colorPalette[3], strokeWidth: 1, stroke: colorPalette[3] }} />\r\n                                                        <text x={160} y={55} style={{ fontSize: '1em' }}>0.85 {'-'} 0.94</text>\r\n                                                        <rect key={4} x={280} y={40} width=\"20\" height=\"20\" style={{ fill: colorPalette[4], strokeWidth: 1, stroke: colorPalette[4] }} />\r\n                                                        <text x={310} y={55} style={{ fontSize: '1em' }}>0.94 {'+'}</text>\r\n                                                        \r\n                                                    </svg> */}\r\n                                                </Grid.Row>\r\n                                                <Grid.Row style={{ fontFamily: 'lato', fontSize: 18, color: dataupColor, paddingTop: '0.5em', paddingLeft: '4em', paddingRight: '2em' }} centered>\r\n                                                    Data updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' : (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}\r\n                                                </Grid.Row>\r\n                                                <Grid.Row style={{ paddingTop: '0em', paddingLeft: '4.9em', paddingRight: '2em' }}>\r\n                                                    <Accordion defaultActiveIndex={1} panels={[\r\n                                                        {\r\n                                                            key: 'acquire-dog',\r\n                                                            title: {\r\n                                                                content: <u style={{ fontFamily: 'lato', fontSize: 18, color: dataupColor }}>About the data</u>,\r\n                                                                icon: 'dropdown',\r\n                                                            },\r\n                                                            content: {\r\n                                                                content: (\r\n                                                                    <p style={{ textAlign: \"justify\", fontFamily: 'lato', fontSize: 18 }}>\r\n                                                                        This map shows each Georgia county according to its Community Vulnerability ranking. County rankings are based on CCVI quintile, which ranks each county in one of five groups depending on\r\n                                                                        CCVI score. The ranking classified counties into five groups designed to be of equal size, so that the lowest quintile contains the counties with values in the 0%-20% range for this county\r\n                                                                        characteristic, and the highest quintile contains counties with values in the 80%-100% range for this county characteristic.\r\n                                                                    </p>\r\n                                                                ),\r\n                                                            },\r\n                                                        }\r\n                                                    ]\r\n\r\n                                                    } />\r\n\r\n                                                </Grid.Row>\r\n                                            </Grid.Column>\r\n                                            <Grid.Column width={9} style={{ paddingLeft: \"2\", paddingLeft: \"1\" }}>\r\n                                                <Grid.Row columns={1}>\r\n                                                    <Grid.Column style={{ paddingTop: 0, paddingBottom: 3 }}>\r\n                                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"16pt\", lineHeight: \"16pt\" }}>\r\n                                                            <Header.Content>\r\n                                                                COVID-19 Case Rate by Community Vulnerability Index\r\n                                                </Header.Content>\r\n                                                        </Header>\r\n                                                        <VictoryChart\r\n                                                            theme={VictoryTheme.material}\r\n                                                            width={730}\r\n                                                            height={270}\r\n                                                            domainPadding={20}\r\n                                                            minDomain={{ y: props.ylog ? 1 : 0 }}\r\n                                                            padding={{ left: 200, right: 50, top: 10, bottom: 35 }}\r\n                                                            style={{ fontSize: \"14pt\" }}\r\n                                                            containerComponent={<VictoryContainer responsive={false} />}\r\n                                                        >\r\n                                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\r\n                                                            <VictoryAxis dependentAxis\r\n                                                                label='COVID-19 Cases per 100,000 Residents'\r\n                                                                style={{\r\n                                                                    ticks: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, axisLabel: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' },\r\n                                                                    labels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' }, tickLabels: { fontSize: \"0px\", fill: '#000000', padding: 10, fontFamily: 'lato' }\r\n                                                                }} />\r\n                                                            <VictoryBar\r\n                                                                horizontal\r\n                                                                barRatio={0.75}\r\n                                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(0))}\r\n                                                                data={[\r\n                                                                    { key: \"Least vulnerable\\n counties\", 'value': (data_index['cvi_index'][\"low20\"]['casescumR'] / data_index['cvi_index'][\"low20\"]['casescumR']) * data_index['cvi_index'][\"low20\"]['casescumR'] || 0, 'ez': data_index['cvi_index'][\"low20\"]['county_list'] },\r\n                                                                    { key: \"Q2\", 'value': (data_index['cvi_index'][\"Q2\"]['casescumR'] / data_index['cvi_index'][\"Q2\"]['casescumR']) * data_index['cvi_index'][\"Q2\"]['casescumR'] || 0, 'ez': data_index['cvi_index'][\"Q2\"]['county_list'] },\r\n                                                                    { key: \"Q3\", 'value': (data_index['cvi_index'][\"Q3\"]['casescumR'] / data_index['cvi_index'][\"Q3\"]['casescumR']) * data_index['cvi_index'][\"Q3\"]['casescumR'] || 0, 'ez': data_index['cvi_index'][\"Q3\"]['county_list'] },\r\n                                                                    { key: \"Q4\", 'value': (data_index['cvi_index'][\"Q4\"]['casescumR'] / data_index['cvi_index'][\"Q4\"]['casescumR']) * data_index['cvi_index'][\"Q4\"]['casescumR'] || 0, 'ez': data_index['cvi_index'][\"Q4\"]['county_list'] },\r\n                                                                    { key: \"Most vulnerable\\n counties\", 'value': (data_index['cvi_index'][\"high20\"]['casescumR'] / data_index['cvi_index'][\"high20\"]['casescumR']) * data_index['cvi_index'][\"high20\"]['casescumR'] || 0, 'ez': data_index['cvi_index'][\"high20\"]['county_list'] }\r\n                                                                ]}\r\n                                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"20px\", fill: \"#000000\" }} />}\r\n                                                                style={{\r\n                                                                    data: {\r\n                                                                        fill: ({ datum }) => datum.ez.includes(countyFipscvi) ? countyColor : casesColor[1]\r\n                                                                    }\r\n                                                                }}\r\n                                                                // style={{\r\n                                                                //     data: {\r\n                                                                //         fill: casesColor[1]\r\n                                                                //     }\r\n                                                                // }}\r\n                                                                x=\"key\"\r\n                                                                y=\"value\"\r\n                                                            />\r\n                                                        </VictoryChart>\r\n                                                    </Grid.Column>\r\n                                                </Grid.Row>\r\n                                                <Grid.Row columns={1} style={{ paddingTop: \"3em\" }}>\r\n                                                    <Grid.Column style={{ paddingTop: 15, paddingBottom: 3 }}>\r\n                                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"16pt\", lineHeight: \"16pt\", paddingLeft: \"1em\" }}>\r\n                                                            <Header.Content>\r\n                                                                COVID-19 Death Rate by Community Vulnerability Index\r\n                                            </Header.Content>\r\n                                                        </Header>\r\n                                                        <VictoryChart\r\n                                                            theme={VictoryTheme.material}\r\n                                                            width={730}\r\n                                                            height={270}\r\n                                                            domainPadding={20}\r\n                                                            minDomain={{ y: props.ylog ? 1 : 0 }}\r\n                                                            padding={{ left: 200, right: 60, top: 10, bottom: 35 }}\r\n                                                            style={{ fontSize: \"14pt\" }}\r\n                                                            containerComponent={<VictoryContainer responsive={false} />}\r\n                                                        >\r\n                                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\r\n                                                            <VictoryAxis dependentAxis\r\n                                                                label='COVID-19 Deaths per 100,000 Residents'\r\n                                                                style={{\r\n                                                                    ticks: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, axisLabel: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' },\r\n                                                                    labels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' }, tickLabels: { fontSize: \"0px\", fill: '#000000', padding: 10, fontFamily: 'lato' }\r\n                                                                }} />\r\n                                                            <VictoryBar\r\n                                                                horizontal\r\n                                                                barRatio={0.75}\r\n                                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(0))}\r\n                                                                data={[\r\n                                                                    { key: \"Least vulnerable\\n counties\", 'value': data_index['cvi_index'][\"low20\"]['deathscumR'] || 0, 'ez': data_index['cvi_index'][\"low20\"]['county_list'] },\r\n                                                                    { key: \"Q2\", 'value': data_index['cvi_index'][\"Q2\"]['deathscumR'] || 0, 'ez': data_index['cvi_index'][\"Q2\"]['county_list'] },\r\n                                                                    { key: \"Q3\", 'value': data_index['cvi_index'][\"Q3\"]['deathscumR'] || 0, 'ez': data_index['cvi_index'][\"Q3\"]['county_list'] },\r\n                                                                    { key: \"Q4\", 'value': data_index['cvi_index'][\"Q4\"]['deathscumR'] || 0, 'ez': data_index['cvi_index'][\"Q4\"]['county_list'] },\r\n                                                                    { key: \"Most vulnerable\\n counties\", 'value': data_index['cvi_index'][\"high20\"]['deathscumR'] || 0, 'ez': data_index['cvi_index'][\"high20\"]['county_list'] }\r\n                                                                ]}\r\n                                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"20px\", fill: \"#000000\" }} />}\r\n                                                                style={{\r\n                                                                    data: {\r\n                                                                        fill: ({ datum }) => datum.ez.includes(countyFipscvi) ? countyColor : mortalityColor[1]\r\n                                                                    }\r\n                                                                }}\r\n                                                                x=\"key\"\r\n                                                                y=\"value\"\r\n                                                            />\r\n                                                        </VictoryChart>\r\n\r\n                                                    </Grid.Column>\r\n                                                </Grid.Row>\r\n\r\n                                                <Grid.Row style={{fontFamily: 'lato', fontSize: 18, color: dataupColor, paddingTop: '2.8em', paddingLeft: '4em', paddingRight: '2em' }} centered>\r\n                                                        Data updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' : (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}\r\n                                                    </Grid.Row>\r\n                                                    <Grid.Row style={{paddingLeft: '4.9em', paddingRight: '2em' }}>\r\n                                                    <Accordion defaultActiveIndex={1} panels={[\r\n                                                        {\r\n                                                            key: 'acquire-dog',\r\n                                                            title: {\r\n                                                                content: <u style={{ fontFamily: 'lato', fontSize: 18, color: dataupColor }}>About the data</u>,\r\n                                                                icon: 'dropdown',\r\n                                                            },\r\n                                                            content: {\r\n                                                                content: (\r\n                                                                    <p style={{ textAlign: \"justify\", fontFamily: 'lato', fontSize: 18 }}>\r\n                                                                        This chart shows the number of COVID-19 cases (top chart) and deaths (bottom chart) per 100,000 residents by CCVI ranking.\r\n                                                                        The y-axis displays CCVI rankings based on quintiles (groups of 20%). The x-axis displays the average number\r\n                                                                        of COVID-19 cases (top chart) or deaths (bottom chart) per 100,000 that occurred in each group of counties ranked by CCVI. The ranking classified counties into five groups designed to be of equal size, so that the lowest\r\n                                                                        quintile contains the counties with values in the 0%-20% range for this county characteristic, and the highest quintile contains counties with values in the 80%-100% range for this county characteristic. Q2 indicates counties\r\n                                                                        in the 20%-40% range, Q3 indicates counties in the 40%-60% range, and Q4 indicates counties in the 60%-80% range.\r\n                                                                    </p>\r\n                                                                ),\r\n                                                            },\r\n                                                        }\r\n                                                    ]\r\n\r\n                                                    } />\r\n\r\n                                                </Grid.Row>\r\n\r\n                                            </Grid.Column>\r\n\r\n                                        </Grid>\r\n                                        <hr\r\n                                            style={{\r\n                                                color: '#44a0e2',\r\n                                                backgroundColor: '#44a0e2',\r\n                                                height: 5,\r\n                                                width: '100%'\r\n                                            }}\r\n                                        />\r\n                                        {/* SI */}\r\n                                        {/* <center> <Waypoint\r\n                                            onEnter={() => {\r\n                                                setActiveCharacter('Residential Segregation Index')\r\n                                                console.log(activeCharacter)\r\n                                            }}>\r\n                                        </Waypoint> </center> */}\r\n                                        <Grid id='si' style={{ paddingBottom: '2em' }} >\r\n                                            <Grid.Row>\r\n                                                <div id='si' style={{ width: \"100%\", height: \"100%\" }}>\r\n                                                    <Header as='h2' style={{ textAlign: 'center', color: 'black', fontSize: \"19pt\", paddingTop: '1em', paddingBottom: '1em' }}>\r\n                                                        <Header.Content>\r\n                                                            COVID-19 by Residential Segregation Index\r\n                                    </Header.Content>\r\n                                                    </Header>\r\n                                                </div>\r\n\r\n                                            </Grid.Row>\r\n\r\n                                            <Header as='h2' style={{ textAlign: 'center', color: 'black', fontSize: \"18pt\", paddingTop: 0 }}>\r\n\r\n                                                <Header.Subheader style={{ fontFamily: 'lato', color: '#000000', textAlign: 'left', fontSize: \"16pt\", paddingTop: 0, paddingBottom: 28, paddingLeft: 0, paddingRight: 0 }}>\r\n\r\n                                                    Racial residential segregation refers to the phenomenon of racial and ethnic groups living in separate neighborhoods. Residing in separate neighborhoods leads to the experience\r\n                                                    of differing living conditions across racial and ethnic groups. In the United States, African American/Black populations in particular have been forced into living in areas with\r\n                                                    worse housing quality, educational opportunities, and employment prospects through various policies that have promoted residential segregation. The Residential Segregation Index\r\n                                                    is a measure of the degree to which black and white Americans reside in separate neighborhoods, with 100 indicating total separation and 0 indicating total integration.\r\n                                <br></br>\r\n                                In the figures below, we show the case and death rates of COVID-19 across Georgia counties with different levels of residential segregation index.\r\n\r\n                <br />\r\n                                                    <br />\r\n\r\n                                                </Header.Subheader>\r\n                                            </Header>\r\n                                            <Grid.Column width={7} style={{ paddingLeft: \"2\", paddingLeft: \"1\" }}>\r\n\r\n                                                <Grid.Row style={{ paddingLeft: \"2\", paddingLeft: \"1\", paddingBottom: '1.5em' }}>\r\n                                                    <Header as='h2' style={{ fontWeight: 600, fontSize: \"16pt\", lineHeight: \"16pt\" }}>\r\n                                                        <Header.Content>\r\n                                                            Georgia Residential Segregation Index Map\r\n                                        </Header.Content>\r\n                                                    </Header>\r\n                                                    <svg width=\"600\" height=\"80\">\r\n                                                        {_.map(colorPalette2, (color, i) => {\r\n                                                            return <rect key={i} x={110 + 40 * i} y={40} width=\"40\" height=\"20\" style={{ fill: color, strokeWidth: 1, stroke: color }} />\r\n                                                        })}\r\n                                                        <text x={20} y={50} style={{ fontSize: '0.8em' }}>Least vulnerable</text>\r\n                                                        <text x={20} y={59} style={{ fontSize: '0.8em' }}>counties</text>\r\n                                                        <text x={160 + 40 * (colorPalette2.length - 1)} y={50} style={{ fontSize: '0.8em' }}>Highest vulnerable</text>\r\n                                                        <text x={160 + 40 * (colorPalette2.length - 1)} y={59} style={{ fontSize: '0.8em' }}>counties</text>\r\n                                                        {_.map(thresh_chara['si'], (splitpoint, i) => {\r\n                                                            return <text key={i} x={105 + 40 * (i)} y={35} style={{ fontSize: '0.7em' }}> {thresh_chara['si'][i]}</text>\r\n                                                        })}\r\n                                                    </svg>\r\n                                                    <ComposableMap projection=\"geoAlbersUsa\"\r\n                                                        projectionConfig={{ scale: `${config.scale1}` }}\r\n                                                        width={600}\r\n                                                        height={600}\r\n                                                        data-tip=\"\"\r\n                                                        offsetX={config.offsetX1}\r\n                                                        offsetY={config.offsetY2}>\r\n                                                        <Geographies data-tip='si' data-for='si' geography={config.url}>\r\n                                                            {({ geographies }) => geographies.map(geo =>\r\n                                                                <Geography\r\n                                                                    key={geo.rsmKey}\r\n                                                                    geography={geo}\r\n\r\n                                                                    style={{\r\n                                                                        default: {\r\n                                                                            //  fill: \"#ECEFF1\",\r\n                                                                            stroke: \"#607D8B\",\r\n                                                                            strokeWidth: 0.95,\r\n                                                                            outline: \"none\",\r\n                                                                        },\r\n                                                                        pressed: {\r\n                                                                            outline: \"none\",\r\n                                                                        }\r\n                                                                    }}\r\n                                                                    onMouseEnter={() => {\r\n\r\n                                                                        setCountyFipssi(geo.properties.COUNTYFP);\r\n                                                                        setCountyNamesi(fips2county[stateFips + geo.properties.COUNTYFP]);\r\n                                                                        setTooltipContentsi(fips2county[stateFips + geo.properties.COUNTYFP] + \"'s SI: \" + dataUs[stateFips + geo.properties.COUNTYFP]['si'].toFixed(0));\r\n\r\n                                                                    }}\r\n                                                                    onMouseLeave={() => {\r\n                                                                        setTooltipContent(\"\")\r\n                                                                    }}\r\n                                                                    fill={countyFipssi === geo.properties.COUNTYFP ? countyColor :\r\n                                                                        ((colorSI && dataUs[stateFips + geo.properties.COUNTYFP] &&\r\n                                                                            dataUs[stateFips + geo.properties.COUNTYFP]['si'] && dataUs[stateFips + geo.properties.COUNTYFP]['si'] > 0) ?\r\n                                                                            colorSI[dataUs[stateFips + geo.properties.COUNTYFP]['si']] :\r\n                                                                            (colorScale && dataUs[stateFips + geo.properties.COUNTYFP] && dataUs[stateFips + geo.properties.COUNTYFP][metric] === 0) ? '#e1dce2' : '#FFFFFF')}\r\n                                                                />\r\n                                                            )}\r\n                                                        </Geographies>\r\n                                                    </ComposableMap>\r\n\r\n                                                    {/* <svg width=\"600\" height=\"80\">\r\n                                                        <rect key={0} x={50} y={0} width=\"20\" height=\"20\" style={{ fill: colorPalette[0], strokeWidth: 1, stroke: colorPalette[0] }} />\r\n                                                        <text x={80} y={15} style={{ fontSize: '1em' }}>0 {'-'} 22</text>\r\n                                                        <rect key={1} x={200} y={0} width=\"20\" height=\"20\" style={{ fill: colorPalette[1], strokeWidth: 1, stroke: colorPalette[1] }} />\r\n                                                        <text x={230} y={15} style={{ fontSize: '1em' }}>22 {'-'} 29</text>\r\n                                                        <rect key={2} x={360} y={0} width=\"20\" height=\"20\" style={{ fill: colorPalette[2], strokeWidth: 1, stroke: colorPalette[2] }} />\r\n                                                        <text x={390} y={15} style={{ fontSize: '1em' }}>29 {'-'} 34</text>\r\n\r\n                                                        <rect key={3} x={130} y={40} width=\"20\" height=\"20\" style={{ fill: colorPalette[3], strokeWidth: 1, stroke: colorPalette[3] }} />\r\n                                                        <text x={160} y={55} style={{ fontSize: '1em' }}>34 {'-'} 43</text>\r\n                                                        <rect key={4} x={280} y={40} width=\"20\" height=\"20\" style={{ fill: colorPalette[4], strokeWidth: 1, stroke: colorPalette[4] }} />\r\n                                                        <text x={310} y={55} style={{ fontSize: '1em' }}>43 {'+'}</text>\r\n                                                        \r\n                                                    </svg> */}\r\n                                                </Grid.Row>\r\n                                                <Grid.Row style={{ fontFamily: 'lato', fontSize: 18, color: dataupColor, paddingTop: '0.5em', paddingLeft: '4em', paddingRight: '2em' }} centered>\r\n                                                    Data updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' : (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}\r\n                                                </Grid.Row>\r\n                                                <Grid.Row style={{ paddingTop: '0em', paddingLeft: '4.9em', paddingRight: '2em' }}>\r\n                                                    <Accordion defaultActiveIndex={1} panels={[\r\n                                                        {\r\n                                                            key: 'acquire-dog',\r\n                                                            title: {\r\n                                                                content: <u style={{ fontFamily: 'lato', fontSize: 18, color: dataupColor }}>About the data</u>,\r\n                                                                icon: 'dropdown',\r\n                                                            },\r\n                                                            content: {\r\n                                                                content: (\r\n                                                                    <p style={{ textAlign: \"justify\", fontFamily: 'lato', fontSize: 18 }}>\r\n                                                                        This map shows each Georgia county according to its residential segregation ranking.\r\n                                                                        County rankings are based on residential segregation quintile, which ranks each county\r\n                                                                        in one of five groups depending on residential segregation score. The ranking classified counties into five groups designed to be of equal size, so that the lowest quintile contains the counties with values in the 0%-20% range for this county\r\n                                                                        characteristic, and the highest quintile contains counties with values in the 80%-100% range for this county characteristic.\r\n                                                                    </p>\r\n                                                                ),\r\n                                                            },\r\n                                                        }\r\n                                                    ]\r\n\r\n                                                    } />\r\n\r\n                                                </Grid.Row>\r\n                                            </Grid.Column>\r\n                                            <Grid.Column width={9} style={{ paddingLeft: \"2\", paddingLeft: \"1\" }}>\r\n                                                <Grid.Row columns={1}>\r\n                                                    <Grid.Column style={{ paddingTop: 0, paddingBottom: 3 }}>\r\n                                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"16pt\", lineHeight: \"16pt\" }}>\r\n                                                            <Header.Content>\r\n                                                                COVID-19 Case Rate by Residential Segregation Index\r\n                                                    </Header.Content>\r\n                                                        </Header>\r\n                                                        <VictoryChart\r\n                                                            theme={VictoryTheme.material}\r\n                                                            width={730}\r\n                                                            height={270}\r\n                                                            domainPadding={20}\r\n                                                            minDomain={{ y: props.ylog ? 1 : 0 }}\r\n                                                            padding={{ left: 220, right: 60, top: 10, bottom: 35 }}\r\n                                                            style={{ fontSize: \"14pt\" }}\r\n                                                            containerComponent={<VictoryContainer responsive={false} />}\r\n                                                        >\r\n                                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\r\n                                                            <VictoryAxis dependentAxis\r\n                                                                label='COVID-19 Cases per 100,000 Residents'\r\n                                                                style={{\r\n                                                                    ticks: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, axisLabel: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' },\r\n                                                                    labels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' }, tickLabels: { fontSize: \"0px\", fill: '#000000', padding: 10, fontFamily: 'lato' }\r\n                                                                }} />\r\n                                                            <VictoryBar\r\n                                                                horizontal\r\n                                                                barRatio={0.75}\r\n                                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(0))}\r\n                                                                data={[\r\n                                                                    {\r\n                                                                        key: \"Counties with lowest\\n residential segregation\", 'value':\r\n                                                                            data_index['s_index'][\"low20\"]['casescumR'] || 0, 'ez': data_index['s_index'][\"low20\"]['county_list']\r\n                                                                    },\r\n                                                                    { key: \"Q2\", 'value': data_index['s_index'][\"Q2\"]['casescumR'] || 0, 'ez': data_index['s_index'][\"Q2\"]['county_list'] },\r\n                                                                    {\r\n                                                                        key: \"Q3\", 'value': data_index['s_index'][\"Q3\"]['casescumR']\r\n                                                                            || 0, 'ez': data_index['s_index'][\"Q3\"]['county_list']\r\n                                                                    },\r\n                                                                    { key: \"Q4\", 'value': data_index['s_index'][\"Q4\"]['casescumR'] || 0, 'ez': data_index['s_index'][\"Q4\"]['county_list'] },\r\n                                                                    {\r\n                                                                        key: \"Counties with highest\\n residential segregation\",\r\n                                                                        'value': data_index['s_index'][\"high20\"]['casescumR'] || 0, 'ez': data_index['s_index'][\"high20\"]['county_list']\r\n                                                                    }\r\n                                                                ]}\r\n                                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"20px\", fill: \"#000000\" }} />}\r\n                                                                style={{\r\n                                                                    data: {\r\n                                                                        fill: ({ datum }) => datum.ez.includes(countyFipssi) ? countyColor : casesColor[1]\r\n                                                                    }\r\n                                                                }}\r\n                                                                x=\"key\"\r\n                                                                y=\"value\"\r\n                                                            />\r\n                                                        </VictoryChart>\r\n                                                    </Grid.Column>\r\n                                                </Grid.Row>\r\n\r\n                                                <Grid.Row columns={1} style={{ paddingTop: \"3em\" }}>\r\n                                                    <Grid.Column style={{ paddingTop: 15, paddingBottom: 3 }}>\r\n                                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"16pt\", lineHeight: \"16pt\", paddingLeft: \"1em\" }}>\r\n                                                            <Header.Content>\r\n                                                                COVID-19 Death Rate by Residential Segregation Index\r\n                                                    </Header.Content>\r\n                                                        </Header>\r\n                                                        <VictoryChart\r\n                                                            theme={VictoryTheme.material}\r\n                                                            width={730}\r\n                                                            height={270}\r\n                                                            domainPadding={20}\r\n                                                            minDomain={{ y: props.ylog ? 1 : 0 }}\r\n                                                            padding={{ left: 220, right: 60, top: 10, bottom: 35 }}\r\n                                                            style={{ fontSize: \"14pt\" }}\r\n                                                            containerComponent={<VictoryContainer responsive={false} />}\r\n                                                        >\r\n                                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\r\n                                                            <VictoryAxis dependentAxis\r\n                                                                label='COVID-19 Deaths per 100,000 Residents'\r\n                                                                style={{\r\n                                                                    ticks: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, axisLabel: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' },\r\n                                                                    labels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' }, tickLabels: { fontSize: \"0px\", fill: '#000000', padding: 10, fontFamily: 'lato' }\r\n                                                                }} />\r\n                                                            <VictoryBar\r\n                                                                horizontal\r\n                                                                barRatio={0.75}\r\n                                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(0))}\r\n                                                                data={[\r\n                                                                    {\r\n                                                                        key: \"Counties with lowest\\n residential segregation\", 'value':\r\n                                                                            (data_index['s_index'][\"low20\"]['deathscumR'] / data_index['s_index'][\"Q2\"]['deathscumR'])\r\n                                                                            * data_index['s_index'][\"Q2\"]['deathscumR'] || 0, 'ez': data_index['s_index'][\"low20\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Q2\", 'value': (data_index['s_index'][\"Q2\"]['deathscumR']\r\n                                                                            / data_index['s_index'][\"Q2\"]['deathscumR']) *\r\n                                                                            data_index['s_index'][\"Q2\"]['deathscumR'] || 0, 'ez': data_index['s_index'][\"Q2\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Q3\", 'value': (data_index['s_index'][\"Q3\"]['deathscumR']\r\n                                                                            / data_index['s_index'][\"Q2\"]['deathscumR'])\r\n                                                                            * data_index['s_index'][\"Q2\"]['deathscumR'] || 0, 'ez': data_index['s_index'][\"Q3\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Q4\", 'value': (data_index['s_index'][\"Q4\"]['deathscumR']\r\n                                                                            / data_index['s_index'][\"Q2\"]['deathscumR'])\r\n                                                                            * data_index['s_index'][\"Q2\"]['deathscumR'] || 0, 'ez': data_index['s_index'][\"Q4\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Counties with highest\\n residential segregation\", 'value': (data_index['s_index'][\"high20\"]['deathscumR']\r\n                                                                            / data_index['s_index'][\"Q2\"]['deathscumR'])\r\n                                                                            * data_index['s_index'][\"Q2\"]['deathscumR'] || 0, 'ez': data_index['s_index'][\"high20\"]['county_list']\r\n                                                                    }\r\n                                                                ]}\r\n                                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"20px\", fill: \"#000000\" }} />}\r\n                                                                style={{\r\n                                                                    data: {\r\n                                                                        fill: ({ datum }) => datum.ez.includes(countyFipssi) ? countyColor : mortalityColor[1]\r\n                                                                    }\r\n                                                                }}\r\n                                                                x=\"key\"\r\n                                                                y=\"value\"\r\n                                                            />\r\n                                                        </VictoryChart>\r\n\r\n                                                    </Grid.Column>\r\n                                                </Grid.Row>\r\n                                                <Grid.Row style={{fontFamily: 'lato', fontSize: 18, color: dataupColor, paddingTop: '3.9em', paddingLeft: '4em', paddingRight: '2em' }} centered>\r\n                                                        Data updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' : (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}\r\n                                                        </Grid.Row>\r\n                                                        <Grid.Row style={{paddingLeft: '4.9em', paddingRight: '2em' }}>\r\n                                                        <Accordion defaultActiveIndex={1} panels={[\r\n                                                        {\r\n                                                            key: 'acquire-dog',\r\n                                                            title: {\r\n                                                                content: <u style={{ fontFamily: 'lato', fontSize: 18, color: dataupColor }}>About the data</u>,\r\n                                                                icon: 'dropdown',\r\n                                                            },\r\n                                                            content: {\r\n                                                                content: (\r\n                                                                    <p style={{ textAlign: \"justify\", fontFamily: 'lato', fontSize: 18 }}>\r\n                                                                        This chart shows the number of COVID-19 cases (top chart) and deaths (bottom chart) per 100,000 residents by residential segregation index.\r\n                                                                        The y-axis displays residential segregation rankings based on quintiles (groups of 20%). The x-axis displays the average number\r\n                                                                        of COVID-19 cases (top chart) or deaths (bottom chart) per 100,000 that occurred in each group of counties ranked by residential segregation. The ranking classified counties into five groups designed to be of equal size, so that the lowest\r\n                                                                        quintile contains the counties with values in the 0%-20% range for this county characteristic, and the highest quintile contains counties with values in the 80%-100% range for this county characteristic. Q2 indicates counties\r\n                                                                        in the 20%-40% range, Q3 indicates counties in the 40%-60% range, and Q4 indicates counties in the 60%-80% range.\r\n                                                                    </p>\r\n                                                                ),\r\n                                                            },\r\n                                                        }\r\n                                                    ]\r\n\r\n                                                    } />\r\n\r\n                                                </Grid.Row>\r\n\r\n\r\n                                            </Grid.Column>\r\n                                        </Grid>\r\n                                        <hr\r\n                                            style={{\r\n                                                color: '#44a0e2',\r\n                                                backgroundColor: '#44a0e2',\r\n                                                height: 5,\r\n                                                width: '100%'\r\n                                            }}\r\n                                        />\r\n\r\n\r\n\r\n                                        <Grid id=\"urbanrural\" style={{ paddingBottom: '2em' }}>\r\n                                            <Grid.Row>\r\n                                                <div id='urbanrural' style={{ width: \"100%\", height: \"100%\" }}>\r\n                                                    <Header as='h2' style={{ textAlign: 'center', color: 'black', fontSize: \"19pt\", paddingTop: '1em', paddingBottom: '1em' }}>\r\n                                                        <Header.Content>COVID-19 by Metropolitan Status</Header.Content>\r\n                                                    </Header>\r\n                                                </div>\r\n                                            </Grid.Row>\r\n                                            <Grid.Column width={7} style={{ paddingLeft: \"2\", paddingLeft: \"1\" }}>\r\n                                                <Grid.Row style={{ paddingTop: \"0\" }}>\r\n                                                    <Header as='h2' style={{ fontWeight: 600, fontSize: \"16pt\", lineHeight: \"16pt\" }}>\r\n                                                        <Header.Content>\r\n                                                            Georgia Metropolitan Status Map\r\n                                        </Header.Content>\r\n                                                    </Header>\r\n                                                </Grid.Row>\r\n                                                <Grid.Row style={{ paddingTop: \"0\", paddingBottom: '0em' }}>\r\n                                                    <ComposableMap projection=\"geoAlbersUsa\"\r\n                                                        projectionConfig={{ scale: `${config.scale1}` }}\r\n                                                        width={600}\r\n                                                        height={600}\r\n                                                        data-tip=\"\"\r\n                                                        offsetX={config.offsetX1}\r\n                                                        offsetY={config.offsetY2}>\r\n                                                        <Geographies data-tip='urb' data-for='urb' geography={config.url}>\r\n                                                            {({ geographies }) => geographies.map(geo =>\r\n                                                                <Geography\r\n                                                                    key={geo.rsmKey}\r\n                                                                    geography={geo}\r\n\r\n                                                                    style={{\r\n                                                                        default: {\r\n                                                                            //  fill: \"#ECEFF1\",\r\n                                                                            stroke: \"#607D8B\",\r\n                                                                            strokeWidth: 0.95,\r\n                                                                            outline: \"none\",\r\n                                                                        },\r\n                                                                        pressed: {\r\n                                                                            outline: \"none\",\r\n                                                                        }\r\n                                                                    }}\r\n                                                                    onMouseEnter={() => {\r\n\r\n                                                                        setCountyFipsubr(geo.properties.COUNTYFP);\r\n                                                                        setCountyNameubr(fips2county[stateFips + geo.properties.COUNTYFP]);\r\n                                                                        setTooltipContentubr(fips2county[stateFips + geo.properties.COUNTYFP] + \"'s status: \" + dataCha[stateFips + geo.properties.COUNTYFP]['_013_Urbanization']);\r\n\r\n                                                                    }}\r\n                                                                    onMouseLeave={() => {\r\n                                                                        setTooltipContent(\"\")\r\n                                                                    }}\r\n                                                                    fill={countyFipsubr === geo.properties.COUNTYFP ? countyColor :\r\n                                                                        ((colorUbr && dataCha[stateFips + geo.properties.COUNTYFP] &&\r\n                                                                            dataCha[stateFips + geo.properties.COUNTYFP]['_013_Urbanization_Code'] && dataCha[stateFips + geo.properties.COUNTYFP]['_013_Urbanization_Code'] > 0) ?\r\n                                                                            colorUbr[dataCha[stateFips + geo.properties.COUNTYFP]['_013_Urbanization_Code']] :\r\n                                                                            (colorUbr && dataCha[stateFips + geo.properties.COUNTYFP] && dataCha[stateFips + geo.properties.COUNTYFP]['_013_Urbanization_Code'] === 0) ? '#e1dce2' : '#FFFFFF')}\r\n                                                                />\r\n                                                            )}\r\n                                                        </Geographies>\r\n                                                    </ComposableMap>\r\n                                                    <svg width=\"600\" height=\"120\">\r\n                                                        <rect key={0} x={50} y={40} width=\"20\" height=\"20\" style={{ fill: colorPalette[0], strokeWidth: 1, stroke: colorPalette[0] }} />\r\n                                                        <text x={80} y={55} style={{ fontSize: '0.8em' }}>Remote rural areas</text>\r\n                                                        <rect key={1} x={200} y={40} width=\"20\" height=\"20\" style={{ fill: colorPalette[1], strokeWidth: 1, stroke: colorPalette[1] }} />\r\n                                                        <text x={230} y={55} style={{ fontSize: '0.8em' }}>Rural areas near cities</text>\r\n                                                        <rect key={2} x={360} y={40} width=\"20\" height=\"20\" style={{ fill: colorPalette[2], strokeWidth: 1, stroke: colorPalette[2] }} />\r\n                                                        <text x={390} y={55} style={{ fontSize: '0.8em' }}>Small cities</text>\r\n\r\n                                                        <rect key={3} x={50} y={80} width=\"20\" height=\"20\" style={{ fill: colorPalette[3], strokeWidth: 1, stroke: colorPalette[3] }} />\r\n                                                        <text x={80} y={95} style={{ fontSize: '0.8em' }}>Small suburbs</text>\r\n                                                        <rect key={4} x={200} y={80} width=\"20\" height=\"20\" style={{ fill: colorPalette[4], strokeWidth: 1, stroke: colorPalette[4] }} />\r\n                                                        <text x={230} y={95} style={{ fontSize: '0.8em' }}>Large suburbs</text>\r\n                                                        <rect key={5} x={360} y={80} width=\"20\" height=\"20\" style={{ fill: colorPalette[5], strokeWidth: 1, stroke: colorPalette[5] }} />\r\n                                                        <text x={390} y={95} style={{ fontSize: '0.8em' }}>Inner city</text>\r\n                                                    </svg>\r\n                                                </Grid.Row>\r\n                                                <Grid.Row style={{fontFamily: 'lato', fontSize: 18, color: dataupColor, paddingTop: '0em', paddingLeft: '4em', paddingRight: '2em' }} centered>\r\n                                                        Data updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' : (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}\r\n                                                        </Grid.Row>\r\n                                                        <Grid.Row style={{paddingLeft: '4.9em', paddingRight: '2em' }}>\r\n                                                        <Accordion defaultActiveIndex={1} panels={[\r\n\r\n                                                        {\r\n                                                            key: 'acquire-dog',\r\n                                                            title: {\r\n                                                                content: <u style={{ fontFamily: 'lato', fontSize: 18, color: dataupColor }}>About the data</u>,\r\n                                                                icon: 'dropdown',\r\n                                                            },\r\n                                                            content: {\r\n                                                                content: (\r\n                                                                    <p style={{ textAlign: \"justify\", fontFamily: 'lato', fontSize: 18 }}>\r\n                                                                        This map shows each Georgia county according to its metropolitan status.\r\n                                                                        County rankings are based on metropolitan status, which ranks each county in one of six\r\n                                                                        groups depending on population.\r\n                                                                    </p>\r\n                                                                ),\r\n                                                            },\r\n                                                        }\r\n                                                    ]\r\n\r\n                                                    } />\r\n\r\n                                                </Grid.Row>\r\n\r\n                                            </Grid.Column>\r\n\r\n                                            <Grid.Column width={9} style={{ paddingLeft: \"2\", paddingLeft: \"1\" }}>\r\n                                                <Grid.Row columns={1} style={{ paddingBottom: \"2\" }}>\r\n                                                    <Grid.Column style={{ paddingTop: 0, paddingBottom: 3 }}>\r\n                                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"16pt\", lineHeight: \"16pt\" }}>\r\n                                                            <Header.Content>\r\n                                                                COVID-19 Cases Rate by Urban-Rural Classification\r\n                                                </Header.Content>\r\n                                                        </Header>\r\n                                                        <VictoryChart\r\n                                                            theme={VictoryTheme.material}\r\n                                                            width={730}\r\n                                                            height={270}\r\n                                                            domainPadding={20}\r\n                                                            minDomain={{ y: props.ylog ? 1 : 0 }}\r\n                                                            padding={{ left: 200, right: 60, top: 10, bottom: 35 }}\r\n                                                            style={{ fontSize: \"14pt\" }}\r\n                                                            containerComponent={<VictoryContainer responsive={false} />}\r\n                                                        >\r\n                                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\r\n                                                            <VictoryAxis dependentAxis\r\n                                                                label={\"COVID-19 Cases per 100,000 Residents\"}\r\n                                                                style={{\r\n                                                                    ticks: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, axisLabel: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' },\r\n                                                                    labels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' }, tickLabels: { fontSize: \"0px\", fill: '#000000', padding: 10, fontFamily: 'lato' }\r\n                                                                }} />\r\n                                                            <VictoryBar\r\n                                                                horizontal\r\n                                                                barRatio={0.75}\r\n                                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(0))}\r\n                                                                data={[\r\n                                                                    {\r\n                                                                        key: \"Inner city\", 'value': data_index['urbanrural'][\"LargeCentralMetro\"]['casescumR'] || 0,\r\n                                                                        'ez': data_index['urbanrural'][\"LargeCentralMetro\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Large suburbs\", 'value': data_index['urbanrural'][\"LargeFringeMetro\"]['casescumR'] || 0,\r\n                                                                        'ez': data_index['urbanrural'][\"LargeFringeMetro\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Small suburbs\", 'value': data_index['urbanrural'][\"MediumMetro\"]['casescumR'] || 0,\r\n                                                                        'ez': data_index['urbanrural'][\"MediumMetro\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Small cities\", 'value': data_index['urbanrural'][\"SmallMetro\"]['casescumR'] || 0,\r\n                                                                        'ez': data_index['urbanrural'][\"SmallMetro\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Rural areas near\\n cities\", 'value': data_index['urbanrural'][\"Micropolitan(Nonmetro)\"]['casescumR'] || 0,\r\n                                                                        'ez': data_index['urbanrural'][\"Micropolitan(Nonmetro)\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Remote rural areas\", 'value': data_index['urbanrural'][\"NonCore(Nonmetro)\"]['casescumR'] || 0,\r\n                                                                        'ez': data_index['urbanrural'][\"NonCore(Nonmetro)\"]['county_list']\r\n                                                                    }\r\n                                                                ]}\r\n                                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"20px\", fill: \"#000000\" }} />}\r\n                                                                style={{\r\n                                                                    data: {\r\n                                                                        fill: ({ datum }) => datum.ez.includes(countyFipsubr) ? countyColor : casesColor[1]\r\n                                                                    }\r\n                                                                }}\r\n                                                                x=\"key\"\r\n                                                                y=\"value\"\r\n                                                            />\r\n                                                        </VictoryChart>\r\n                                                    </Grid.Column>\r\n                                                </Grid.Row>\r\n\r\n                                                <Grid.Row columns={1} style={{ paddingTop: '4.5em' }}>\r\n                                                    <Grid.Column style={{ paddingTop: 15, paddingBottom: 3 }}>\r\n                                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"16pt\", lineHeight: \"16pt\", paddingLeft: \"1em\" }}>\r\n                                                            <Header.Content>\r\n                                                                COVID-19 Death Rate by Urban-Rural Classification\r\n                                            </Header.Content>\r\n                                                        </Header>\r\n                                                        <VictoryChart\r\n                                                            theme={VictoryTheme.material}\r\n                                                            width={730}\r\n                                                            height={270}\r\n                                                            domainPadding={20}\r\n                                                            minDomain={{ y: props.ylog ? 1 : 0 }}\r\n                                                            padding={{ left: 200, right: 60, top: 10, bottom: 35 }}\r\n                                                            style={{ fontSize: \"14pt\" }}\r\n                                                            containerComponent={<VictoryContainer responsive={false} />}\r\n                                                        >\r\n                                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\r\n                                                            <VictoryAxis dependentAxis\r\n                                                                label='COVID-19 Deaths per 100,000 Residents'\r\n                                                                style={{\r\n                                                                    ticks: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, axisLabel: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' },\r\n                                                                    labels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' }, tickLabels: { fontSize: \"0px\", fill: '#000000', padding: 10, fontFamily: 'lato' }\r\n                                                                }} />\r\n                                                            <VictoryBar\r\n                                                                horizontal\r\n                                                                barRatio={0.75}\r\n                                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(0))}\r\n                                                                data={[\r\n                                                                    {\r\n                                                                        key: \"Inner city\", 'value': data_index['urbanrural'][\"LargeCentralMetro\"]['deathscumR'] || 0,\r\n                                                                        'ez': data_index['urbanrural'][\"LargeCentralMetro\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Large suburbs\", 'value': data_index['urbanrural'][\"LargeFringeMetro\"]['deathscumR'] || 0,\r\n                                                                        'ez': data_index['urbanrural'][\"LargeFringeMetro\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Small suburbs\", 'value': data_index['urbanrural'][\"MediumMetro\"]['deathscumR'] || 0,\r\n                                                                        'ez': data_index['urbanrural'][\"MediumMetro\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Small cities\", 'value': data_index['urbanrural'][\"SmallMetro\"]['deathscumR'] || 0,\r\n                                                                        'ez': data_index['urbanrural'][\"SmallMetro\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Rural areas near\\n cities\", 'value': data_index['urbanrural'][\"Micropolitan(Nonmetro)\"]['deathscumR'] || 0,\r\n                                                                        'ez': data_index['urbanrural'][\"Micropolitan(Nonmetro)\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Remote rural areas\", 'value': data_index['urbanrural'][\"NonCore(Nonmetro)\"]['deathscumR'] || 0,\r\n                                                                        'ez': data_index['urbanrural'][\"NonCore(Nonmetro)\"]['county_list']\r\n                                                                    }\r\n                                                                ]}\r\n                                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"18px\", fill: \"#000000\" }} />}\r\n                                                                style={{\r\n                                                                    data: {\r\n                                                                        fill: ({ datum }) => datum.ez.includes(countyFipsubr) ? countyColor : mortalityColor[1]\r\n                                                                    }\r\n                                                                }}\r\n                                                                x=\"key\"\r\n                                                                y=\"value\"\r\n                                                            />\r\n                                                        </VictoryChart>\r\n\r\n                                                    </Grid.Column>\r\n                                                </Grid.Row>\r\n\r\n                                                <Grid.Row style={{fontFamily: 'lato', fontSize: 18, color: dataupColor, paddingTop: '2.4em', paddingLeft: '4em', paddingRight: '2em' }} centered>\r\nData updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' : (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}\r\n</Grid.Row>\r\n<Grid.Row style={{paddingLeft: '4.9em', paddingRight: '2em' }}>\r\n<Accordion defaultActiveIndex={1} panels={[\r\n                                                        {\r\n                                                            key: 'acquire-dog',\r\n                                                            title: {\r\n                                                                content: <u style={{ fontFamily: 'lato', fontSize: 18, color: dataupColor }}>About the data</u>,\r\n                                                                icon: 'dropdown',\r\n                                                            },\r\n                                                            content: {\r\n                                                                content: (\r\n                                                                    <p style={{ textAlign: \"justify\", fontFamily: 'lato', fontSize: 18 }}>\r\n                                                                        This chart shows the number of COVID-19 cases (top chart) and deaths (bottom chart) per 100,000 residents by metropolitan status (y-axis).\r\n                                                             Inner city counties have {'>'} 1 million population or contain the entire or large part of the population of the largest principle city.\r\n                                                Large suburban counties have a population {'>'} 1 million, but do not qualify as inner city. Small suburban counties have a population of 250,000-999,999.\r\n                                                Small cities have populations {'<'} 250,000 and are near large cities. Smallest city counties have an urbanized area with population between 10,000-49,999.\r\n                                                Remote rural counties have populations less than 10,000 individuals. This urban-rural classification comes from the National Center for Health Statistics.\r\n                                                                    </p>\r\n                                                                ),\r\n                                                            },\r\n                                                        }\r\n                                                    ]\r\n\r\n                                                    } />\r\n\r\n                                                </Grid.Row>\r\n                                            </Grid.Column>\r\n                                        </Grid>\r\n\r\n                                        <hr\r\n                                            style={{\r\n                                                color: '#44a0e2',\r\n                                                backgroundColor: '#44a0e2',\r\n                                                height: 5,\r\n                                                width: '100%'\r\n                                            }}\r\n                                        />\r\n\r\n                                        <Grid id=\"poverty\" style={{ paddingBottom: '2em' }}>\r\n                                            <Grid.Row>\r\n                                                <div id='poverty' style={{ width: \"100%\", height: \"100%\" }}>\r\n                                                    <Header as='h2' style={{ textAlign: 'center', color: 'black', fontSize: \"19pt\", paddingTop: '1em', paddingBottom: '1em' }}>\r\n                                                        <Header.Content> COVID-19 by Percentage Population in Poverty</Header.Content>\r\n                                                    </Header>\r\n                                                </div>\r\n                                            </Grid.Row>\r\n                                            <Grid.Column width={7} style={{ paddingLeft: \"2\", paddingLeft: \"1\" }}>\r\n                                                <Grid.Row style={{ paddingTop: \"0\" }}>\r\n                                                    <Header as='h2' style={{ fontWeight: 600, fontSize: \"16pt\", lineHeight: \"16pt\" }}>\r\n                                                        <Header.Content>\r\n                                                            Georgia Percentage Population in Poverty Map\r\n                                        </Header.Content>\r\n                                                    </Header>\r\n                                                </Grid.Row>\r\n                                                <Grid.Row style={{ paddingTop: \"0\", paddingBottom: '1em' }}>\r\n                                                    <svg width=\"600\" height=\"80\">\r\n                                                        {_.map(colorPalette2, (color, i) => {\r\n                                                            return <rect key={i} x={110 + 40 * i} y={40} width=\"40\" height=\"20\" style={{ fill: color, strokeWidth: 1, stroke: color }} />\r\n                                                        })}\r\n                                                        <text x={20} y={50} style={{ fontSize: '0.8em' }}>Least vulnerable</text>\r\n                                                        <text x={20} y={59} style={{ fontSize: '0.8em' }}>counties</text>\r\n                                                        <text x={160 + 40 * (colorPalette2.length - 1)} y={50} style={{ fontSize: '0.8em' }}>Highest vulnerable</text>\r\n                                                        <text x={160 + 40 * (colorPalette2.length - 1)} y={59} style={{ fontSize: '0.8em' }}>counties</text>\r\n                                                        {_.map(thresh_chara['poverty'], (splitpoint, i) => {\r\n                                                            return <text key={i} x={105 + 40 * (i)} y={35} style={{ fontSize: '0.7em' }}> {thresh_chara['poverty'][i]}</text>\r\n                                                        })}\r\n                                                    </svg>\r\n                                                    <ComposableMap projection=\"geoAlbersUsa\"\r\n                                                        projectionConfig={{ scale: `${config.scale1}` }}\r\n                                                        width={600}\r\n                                                        height={600}\r\n                                                        data-tip=\"\"\r\n                                                        offsetX={config.offsetX1}\r\n                                                        offsetY={config.offsetY2}>\r\n                                                        <Geographies data-tip='pov' data-for='pov' geography={config.url}>\r\n                                                            {({ geographies }) => geographies.map(geo =>\r\n                                                                <Geography\r\n                                                                    key={geo.rsmKey}\r\n                                                                    geography={geo}\r\n\r\n                                                                    style={{\r\n                                                                        default: {\r\n                                                                            //  fill: \"#ECEFF1\",\r\n                                                                            stroke: \"#607D8B\",\r\n                                                                            strokeWidth: 0.95,\r\n                                                                            outline: \"none\",\r\n                                                                        },\r\n                                                                        pressed: {\r\n                                                                            outline: \"none\",\r\n                                                                        }\r\n                                                                    }}\r\n                                                                    onMouseEnter={() => {\r\n\r\n                                                                        setCountyFipspov(geo.properties.COUNTYFP);\r\n                                                                        setCountyNamepov(fips2county[stateFips + geo.properties.COUNTYFP]);\r\n                                                                        setTooltipContentpov(fips2county[stateFips + geo.properties.COUNTYFP]);\r\n\r\n                                                                    }}\r\n                                                                    onMouseLeave={() => {\r\n                                                                        setTooltipContent(\"\")\r\n                                                                    }}\r\n                                                                    fill={countyFipspov === geo.properties.COUNTYFP ? countyColor :\r\n                                                                        ((colorPov && dataCha[stateFips + geo.properties.COUNTYFP] &&\r\n                                                                            dataCha[stateFips + geo.properties.COUNTYFP]['poverty'] && dataCha[stateFips + geo.properties.COUNTYFP]['poverty'] > 0) ?\r\n                                                                            colorPov[dataCha[stateFips + geo.properties.COUNTYFP]['poverty']] :\r\n                                                                            (colorPov && dataCha[stateFips + geo.properties.COUNTYFP] && dataCha[stateFips + geo.properties.COUNTYFP]['poverty'] === 0) ? '#e1dce2' : '#FFFFFF')}\r\n                                                                />\r\n                                                            )}\r\n                                                        </Geographies>\r\n                                                    </ComposableMap>\r\n                                                    {/* <svg width=\"600\" height=\"80\">\r\n                                                        <rect key={0} x={50} y={0} width=\"20\" height=\"20\" style={{ fill: colorPalette[0], strokeWidth: 1, stroke: colorPalette[0] }} />\r\n                                                        <text x={80} y={15} style={{ fontSize: '1em' }}>0 {'-'} 14.49</text>\r\n                                                        <rect key={1} x={200} y={0} width=\"20\" height=\"20\" style={{ fill: colorPalette[1], strokeWidth: 1, stroke: colorPalette[1] }} />\r\n                                                        <text x={230} y={15} style={{ fontSize: '1em' }}>14.49 {'-'} 19.06</text>\r\n                                                        <rect key={2} x={360} y={0} width=\"20\" height=\"20\" style={{ fill: colorPalette[2], strokeWidth: 1, stroke: colorPalette[2] }} />\r\n                                                        <text x={390} y={15} style={{ fontSize: '1em' }}>19.06 {'-'} 22.34</text>\r\n\r\n                                                        <rect key={3} x={130} y={40} width=\"20\" height=\"20\" style={{ fill: colorPalette[3], strokeWidth: 1, stroke: colorPalette[3] }} />\r\n                                                        <text x={160} y={55} style={{ fontSize: '1em' }}>22.34 {'-'} 25.65</text>\r\n                                                        <rect key={4} x={280} y={40} width=\"20\" height=\"20\" style={{ fill: colorPalette[4], strokeWidth: 1, stroke: colorPalette[4] }} />\r\n                                                        <text x={310} y={55} style={{ fontSize: '1em' }}>25.65 {'+'}</text>\r\n\r\n                                                    </svg> */}\r\n                                                </Grid.Row>\r\n                                                <Grid.Row style={{ fontFamily: 'lato', fontSize: 18, color: dataupColor, paddingTop: '0.5em', paddingLeft: '4em', paddingRight: '2em' }} centered>\r\n                                                    Data updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' : (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}\r\n                                                </Grid.Row>\r\n                                                <Grid.Row style={{ paddingTop: '0em', paddingLeft: '4.9em', paddingRight: '2em' }}>\r\n                                                    <Accordion defaultActiveIndex={1} panels={[\r\n                                                        {\r\n                                                            key: 'acquire-dog',\r\n                                                            title: {\r\n                                                                content: <u style={{ fontFamily: 'lato', fontSize: 18, color: dataupColor }}>About the data</u>,\r\n                                                                icon: 'dropdown',\r\n                                                            },\r\n                                                            content: {\r\n                                                                content: (\r\n                                                                    <p style={{ textAlign: \"justify\", fontFamily: 'lato', fontSize: 18 }}>\r\n                                                                        This map shows each Georgia county according to its percentage population in poverty.\r\n                                                                        County rankings are based on  percentage of population in poverty, which ranks each county in one of five\r\n                                                                        groups depending on population in poverty. The ranking classified counties into five groups designed to be of equal size, so that the lowest quintile contains the counties with values in the 0%-20% range for this county\r\n                                                                        characteristic, and the highest quintile contains counties with values in the 80%-100% range for this county characteristic.\r\n                                                                    </p>\r\n                                                                ),\r\n                                                            },\r\n                                                        }\r\n                                                    ]\r\n\r\n                                                    } />\r\n\r\n                                                </Grid.Row>\r\n                                            </Grid.Column>\r\n\r\n                                            <Grid.Column width={9} style={{ paddingLeft: \"2\", paddingLeft: \"1\" }}>\r\n                                                <Grid.Row columns={1} style={{ paddingBottom: \"2\" }}>\r\n                                                    <Grid.Column style={{ paddingTop: 0, paddingBottom: 3 }}>\r\n                                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"16pt\", lineHeight: \"16pt\" }}>\r\n                                                            <Header.Content>\r\n                                                                COVID-19 Case Rate by Percentage of Population in Poverty\r\n                                                </Header.Content>\r\n                                                        </Header>\r\n                                                        <VictoryChart\r\n                                                            theme={VictoryTheme.material}\r\n                                                            width={730}\r\n                                                            height={270}\r\n                                                            domainPadding={20}\r\n                                                            minDomain={{ y: props.ylog ? 1 : 0 }}\r\n                                                            padding={{ left: 305, right: 60, top: 10, bottom: 35 }}\r\n                                                            style={{ fontSize: \"14pt\" }}\r\n                                                            containerComponent={<VictoryContainer responsive={false} />}\r\n                                                        >\r\n                                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\r\n                                                            <VictoryAxis dependentAxis\r\n                                                                label={\"COVID-19 Cases per 100,000 Residents\"}\r\n                                                                style={{\r\n                                                                    ticks: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, axisLabel: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' },\r\n                                                                    labels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' }, tickLabels: { fontSize: \"0px\", fill: '#000000', padding: 10, fontFamily: 'lato' }\r\n                                                                }} />\r\n                                                            <VictoryBar\r\n                                                                horizontal\r\n                                                                barRatio={0.75}\r\n                                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(0))}\r\n                                                                data={[\r\n                                                                    {\r\n                                                                        key: \"Counties with lowest\\n percentage population in poverty\", 'value': data_index['poverty'][\"low20\"]['casescumR'] || 0,\r\n                                                                        'ez': data_index['poverty'][\"low20\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Q2\", 'value': data_index['poverty'][\"Q2\"]['casescumR'] || 0,\r\n                                                                        'ez': data_index['poverty'][\"Q2\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Q3\", 'value': data_index['poverty'][\"Q3\"]['casescumR'] || 0,\r\n                                                                        'ez': data_index['poverty'][\"Q3\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Q4\", 'value': data_index['poverty'][\"Q4\"]['casescumR'] || 0,\r\n                                                                        'ez': data_index['poverty'][\"Q4\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Counties with highest\\n percentage  population in poverty\", 'value': data_index['poverty'][\"high20\"]['casescumR'] || 0,\r\n                                                                        'ez': data_index['poverty'][\"high20\"]['county_list']\r\n                                                                    }\r\n                                                                ]}\r\n                                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"20px\", fill: \"#000000\" }} />}\r\n                                                                style={{\r\n                                                                    data: {\r\n                                                                        fill: ({ datum }) => datum.ez.includes(countyFipspov) ? countyColor : casesColor[1]\r\n                                                                    }\r\n                                                                }}\r\n                                                                x=\"key\"\r\n                                                                y=\"value\"\r\n                                                            />\r\n                                                        </VictoryChart>\r\n                                                    </Grid.Column>\r\n                                                </Grid.Row>\r\n\r\n                                                <Grid.Row columns={1} style={{ paddingTop: '3.5em' }}>\r\n                                                    <Grid.Column style={{ paddingTop: 15, paddingBottom: 3 }}>\r\n                                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"16pt\", lineHeight: \"16pt\", paddingLeft: \"1em\" }}>\r\n                                                            <Header.Content>\r\n                                                                COVID-19 Death Rate by Percentage of Population in Poverty\r\n                                            </Header.Content>\r\n                                                        </Header>\r\n                                                        <VictoryChart\r\n                                                            theme={VictoryTheme.material}\r\n                                                            width={730}\r\n                                                            height={270}\r\n                                                            domainPadding={20}\r\n                                                            minDomain={{ y: props.ylog ? 1 : 0 }}\r\n                                                            padding={{ left: 305, right: 60, top: 10, bottom: 35 }}\r\n                                                            style={{ fontSize: \"14pt\" }}\r\n                                                            containerComponent={<VictoryContainer responsive={false} />}\r\n                                                        >\r\n                                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\r\n                                                            <VictoryAxis dependentAxis\r\n                                                                label='COVID-19 Deaths per 100,000 Residents'\r\n                                                                style={{\r\n                                                                    ticks: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, axisLabel: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' },\r\n                                                                    labels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' }, tickLabels: { fontSize: \"0px\", fill: '#000000', padding: 10, fontFamily: 'lato' }\r\n                                                                }} />\r\n                                                            <VictoryBar\r\n                                                                horizontal\r\n                                                                barRatio={0.75}\r\n                                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(0))}\r\n                                                                data={[\r\n                                                                    {\r\n                                                                        key: \"Counties with lowest\\n percentage population in poverty\", 'value': data_index['poverty'][\"low20\"]['deathscumR'] || 0,\r\n                                                                        'ez': data_index['poverty'][\"low20\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Q2\", 'value': data_index['poverty'][\"Q2\"]['deathscumR'] || 0,\r\n                                                                        'ez': data_index['poverty'][\"Q2\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Q3\", 'value': data_index['poverty'][\"Q3\"]['deathscumR'] || 0,\r\n                                                                        'ez': data_index['poverty'][\"Q3\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Q4\", 'value': data_index['poverty'][\"Q4\"]['deathscumR'] || 0,\r\n                                                                        'ez': data_index['poverty'][\"Q4\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Counties with highest\\n percentage  population in poverty\", 'value': data_index['poverty'][\"high20\"]['deathscumR'] || 0,\r\n                                                                        'ez': data_index['poverty'][\"high20\"]['county_list']\r\n                                                                    }\r\n                                                                ]}\r\n                                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"18px\", fill: \"#000000\" }} />}\r\n                                                                style={{\r\n                                                                    data: {\r\n                                                                        fill: ({ datum }) => datum.ez.includes(countyFipspov) ? countyColor : mortalityColor[1]\r\n                                                                    }\r\n                                                                }}\r\n                                                                x=\"key\"\r\n                                                                y=\"value\"\r\n                                                            />\r\n                                                        </VictoryChart>\r\n\r\n                                                    </Grid.Column>\r\n                                                </Grid.Row>\r\n\r\n                                                <Grid.Row style={{fontFamily: 'lato', fontSize: 18, color: dataupColor, paddingTop: '2.4em', paddingLeft: '4em', paddingRight: '2em' }} centered>\r\n                                                    Data updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' : (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}\r\n                                                    </Grid.Row>\r\n                                                    <Grid.Row style={{paddingLeft: '4.9em', paddingRight: '2em' }}>\r\n                                                    <Accordion defaultActiveIndex={1} panels={[\r\n                                                        {\r\n                                                            key: 'acquire-dog',\r\n                                                            title: {\r\n                                                                content: <u style={{ fontFamily: 'lato', fontSize: 18, color: dataupColor }}>About the data</u>,\r\n                                                                icon: 'dropdown',\r\n                                                            },\r\n                                                            content: {\r\n                                                                content: (\r\n                                                                    <p style={{ textAlign: \"justify\", fontFamily: 'lato', fontSize: 18 }}>\r\n                                                                        This chart shows the number of COVID-19 cases (top chart) and deaths (bottom chart) per 100,000 residents by county ranking on percentage of population in poverty.\r\n                                                                        The y-axis displays percentage population in poverty rankings based on quintiles (groups of 20%). The x-axis displays the average number\r\n                                                                        of COVID-19 cases (top chart) or deaths (bottom chart) per 100,000 that occurred in each group of counties ranked by percentage population in poverty. The ranking classified counties into five groups designed to be of equal size, so that the lowest\r\n                                                                        quintile contains the counties with values in the 0%-20% range for this county characteristic, and the highest quintile contains counties with values in the 80%-100% range for this county characteristic. Q2 indicates counties\r\n                                                                        in the 20%-40% range, Q3 indicates counties in the 40%-60% range, and Q4 indicates counties in the 60%-80% range.\r\n                                                                    </p>\r\n                                                                ),\r\n                                                            },\r\n                                                        }\r\n                                                    ]\r\n\r\n                                                    } />\r\n\r\n                                                </Grid.Row>\r\n                                            </Grid.Column>\r\n                                        </Grid>\r\n\r\n                                        <hr\r\n                                            style={{\r\n                                                color: '#44a0e2',\r\n                                                backgroundColor: '#44a0e2',\r\n                                                height: 5,\r\n                                                width: '100%'\r\n                                            }}\r\n                                        />\r\n                                        <Grid id=\"black\" style={{ paddingBottom: '2em' }}>\r\n                                            <Grid.Row>\r\n                                                <div id='black' style={{ width: \"100%\", height: \"100%\" }}>\r\n                                                    <Header as='h2' style={{ textAlign: 'center', color: 'black', fontSize: \"19pt\", paddingTop: '1em', paddingBottom: '1em' }}>\r\n                                                        <Header.Content> COVID-19 by Percentage African American Population</Header.Content>\r\n                                                    </Header>\r\n                                                </div>\r\n                                            </Grid.Row>\r\n                                            <Grid.Column width={7} style={{ paddingLeft: \"2\", paddingLeft: \"1\" }}>\r\n                                                <Grid.Row style={{ paddingTop: \"0\" }}>\r\n                                                    <Header as='h2' style={{ fontWeight: 600, fontSize: \"16pt\", lineHeight: \"16pt\" }}>\r\n                                                        <Header.Content>\r\n                                                            Georgia Percentage African American Population Map\r\n                                        </Header.Content>\r\n                                                    </Header>\r\n                                                </Grid.Row>\r\n                                                <Grid.Row style={{ paddingTop: \"0\", paddingBottom: '1em' }}>\r\n                                                    <svg width=\"600\" height=\"80\">\r\n                                                        {_.map(colorPalette2, (color, i) => {\r\n                                                            return <rect key={i} x={110 + 40 * i} y={40} width=\"40\" height=\"20\" style={{ fill: color, strokeWidth: 1, stroke: color }} />\r\n                                                        })}\r\n                                                        <text x={20} y={50} style={{ fontSize: '0.8em' }}>Least vulnerable</text>\r\n                                                        <text x={20} y={59} style={{ fontSize: '0.8em' }}>counties</text>\r\n                                                        <text x={160 + 40 * (colorPalette2.length - 1)} y={50} style={{ fontSize: '0.8em' }}>Highest vulnerable</text>\r\n                                                        <text x={160 + 40 * (colorPalette2.length - 1)} y={59} style={{ fontSize: '0.8em' }}>counties</text>\r\n                                                        {_.map(thresh_chara['black'], (splitpoint, i) => {\r\n                                                            return <text key={i} x={105 + 40 * (i)} y={35} style={{ fontSize: '0.7em' }}> {thresh_chara['black'][i]}</text>\r\n                                                        })}\r\n                                                    </svg>\r\n                                                    <ComposableMap projection=\"geoAlbersUsa\"\r\n                                                        projectionConfig={{ scale: `${config.scale1}` }}\r\n                                                        width={600}\r\n                                                        height={600}\r\n                                                        data-tip=\"\"\r\n                                                        offsetX={config.offsetX1}\r\n                                                        offsetY={config.offsetY2}>\r\n                                                        <Geographies data-tip='black' data-for='black' geography={config.url}>\r\n                                                            {({ geographies }) => geographies.map(geo =>\r\n                                                                <Geography\r\n                                                                    key={geo.rsmKey}\r\n                                                                    geography={geo}\r\n\r\n                                                                    style={{\r\n                                                                        default: {\r\n                                                                            //  fill: \"#ECEFF1\",\r\n                                                                            stroke: \"#607D8B\",\r\n                                                                            strokeWidth: 0.95,\r\n                                                                            outline: \"none\",\r\n                                                                        },\r\n                                                                        pressed: {\r\n                                                                            outline: \"none\",\r\n                                                                        }\r\n                                                                    }}\r\n                                                                    onMouseEnter={() => {\r\n\r\n                                                                        setCountyFipsblack(geo.properties.COUNTYFP);\r\n                                                                        setCountyNameblack(fips2county[stateFips + geo.properties.COUNTYFP]);\r\n                                                                        setTooltipContentblack(fips2county[stateFips + geo.properties.COUNTYFP]);\r\n\r\n                                                                    }}\r\n                                                                    onMouseLeave={() => {\r\n                                                                        setTooltipContent(\"\")\r\n                                                                    }}\r\n                                                                    fill={countyFipsblack === geo.properties.COUNTYFP ? countyColor :\r\n                                                                        ((colorBlack && dataCha[stateFips + geo.properties.COUNTYFP] &&\r\n                                                                            dataCha[stateFips + geo.properties.COUNTYFP]['black'] && dataCha[stateFips + geo.properties.COUNTYFP]['black'] > 0) ?\r\n                                                                            colorBlack[dataCha[stateFips + geo.properties.COUNTYFP]['black']] :\r\n                                                                            (colorBlack && dataCha[stateFips + geo.properties.COUNTYFP] && dataCha[stateFips + geo.properties.COUNTYFP]['black'] === 0) ? '#e1dce2' : '#FFFFFF')}\r\n                                                                />\r\n                                                            )}\r\n                                                        </Geographies>\r\n                                                    </ComposableMap>\r\n\r\n                                                </Grid.Row>\r\n                                                <Grid.Row style={{ fontFamily: 'lato', fontSize: 18, color: dataupColor, paddingTop: '0.5em', paddingLeft: '4em', paddingRight: '2em' }} centered>\r\n                                                    Data updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' : (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}\r\n                                                </Grid.Row>\r\n                                                <Grid.Row style={{ paddingTop: '0em', paddingLeft: '4.9em', paddingRight: '2em' }}>\r\n                                                    <Accordion defaultActiveIndex={1} panels={[\r\n                                                        {\r\n                                                            key: 'acquire-dog',\r\n                                                            title: {\r\n                                                                content: <u style={{ fontFamily: 'lato', fontSize: 18, color: dataupColor }}>About the data</u>,\r\n                                                                icon: 'dropdown',\r\n                                                            },\r\n                                                            content: {\r\n                                                                content: (\r\n                                                                    <p style={{ textAlign: \"justify\", fontFamily: 'lato', fontSize: 18 }}>\r\n                                                                        This map shows each Georgia county according to its percentage African American population.\r\n                                                                        County rankings are based on percentage African American population quintile, which ranks each county in one of five\r\n                                                                        groups depending on African American population. The ranking classified counties into five groups designed to be of equal size, so that the lowest quintile contains the counties with values in the 0%-20% range for this county\r\n                                                                        characteristic, and the highest quintile contains counties with values in the 80%-100% range for this county characteristic.\r\n                                                                    </p>\r\n                                                                ),\r\n                                                            },\r\n                                                        }\r\n                                                    ]\r\n\r\n                                                    } />\r\n\r\n                                                </Grid.Row>\r\n                                            </Grid.Column>\r\n\r\n                                            <Grid.Column width={9} style={{ paddingLeft: \"2\", paddingLeft: \"1\" }}>\r\n                                                <Grid.Row columns={1} style={{ paddingBottom: \"2\" }}>\r\n                                                    <Grid.Column style={{ paddingTop: 0, paddingBottom: 3 }}>\r\n                                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"16pt\", lineHeight: \"16pt\" }}>\r\n                                                            <Header.Content>\r\n                                                                COVID-19 Case Rate by Percentage of African American Population\r\n                                                </Header.Content>\r\n                                                        </Header>\r\n                                                        <VictoryChart\r\n                                                            theme={VictoryTheme.material}\r\n                                                            width={730}\r\n                                                            height={270}\r\n                                                            domainPadding={20}\r\n                                                            minDomain={{ y: props.ylog ? 1 : 0 }}\r\n                                                            padding={{ left: 305, right: 60, top: 10, bottom: 35 }}\r\n                                                            style={{ fontSize: \"14pt\" }}\r\n                                                            containerComponent={<VictoryContainer responsive={false} />}\r\n                                                        >\r\n                                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\r\n                                                            <VictoryAxis dependentAxis\r\n                                                                label={\"COVID-19 Cases per 100,000 Residents\"}\r\n                                                                style={{\r\n                                                                    ticks: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, axisLabel: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' },\r\n                                                                    labels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' }, tickLabels: { fontSize: \"0px\", fill: '#000000', padding: 10, fontFamily: 'lato' }\r\n                                                                }} />\r\n                                                            <VictoryBar\r\n                                                                horizontal\r\n                                                                barRatio={0.75}\r\n                                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(0))}\r\n                                                                data={[\r\n                                                                    {\r\n                                                                        key: \"Counties with lowest percentage\\n African American\", 'value': data_index['black'][\"low20\"]['casescumR'] || 0,\r\n                                                                        'ez': data_index['black'][\"low20\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Q2\", 'value': data_index['black'][\"Q2\"]['casescumR'] || 0,\r\n                                                                        'ez': data_index['black'][\"Q2\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Q3\", 'value': data_index['black'][\"Q3\"]['casescumR'] || 0,\r\n                                                                        'ez': data_index['black'][\"Q3\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Q4\", 'value': data_index['black'][\"Q4\"]['casescumR'] || 0,\r\n                                                                        'ez': data_index['black'][\"Q4\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Counties with highest percentage\\n African American\", 'value': data_index['black'][\"high20\"]['casescumR'] || 0,\r\n                                                                        'ez': data_index['black'][\"high20\"]['county_list']\r\n                                                                    }\r\n                                                                ]}\r\n                                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"20px\", fill: \"#000000\" }} />}\r\n                                                                style={{\r\n                                                                    data: {\r\n                                                                        fill: ({ datum }) => datum.ez.includes(countyFipsblack) ? countyColor : casesColor[1]\r\n                                                                    }\r\n                                                                }}\r\n                                                                x=\"key\"\r\n                                                                y=\"value\"\r\n                                                            />\r\n                                                        </VictoryChart>\r\n                                                    </Grid.Column>\r\n                                                </Grid.Row>\r\n\r\n                                                <Grid.Row columns={1} style={{ paddingTop: '3.5em' }}>\r\n                                                    <Grid.Column style={{ paddingTop: 15, paddingBottom: 3 }}>\r\n                                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"16pt\", lineHeight: \"16pt\", paddingLeft: \"1em\" }}>\r\n                                                            <Header.Content>\r\n                                                                COVID-19 Death Rate by Percentage of African American Population\r\n                                            </Header.Content>\r\n                                                        </Header>\r\n                                                        <VictoryChart\r\n                                                            theme={VictoryTheme.material}\r\n                                                            width={730}\r\n                                                            height={270}\r\n                                                            domainPadding={20}\r\n                                                            minDomain={{ y: props.ylog ? 1 : 0 }}\r\n                                                            padding={{ left: 305, right: 60, top: 10, bottom: 35 }}\r\n                                                            style={{ fontSize: \"14pt\" }}\r\n                                                            containerComponent={<VictoryContainer responsive={false} />}\r\n                                                        >\r\n                                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\r\n                                                            <VictoryAxis dependentAxis\r\n                                                                label='COVID-19 Deaths per 100,000 Residents'\r\n                                                                style={{\r\n                                                                    ticks: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, axisLabel: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' },\r\n                                                                    labels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' }, tickLabels: { fontSize: \"0px\", fill: '#000000', padding: 10, fontFamily: 'lato' }\r\n                                                                }} />\r\n                                                            <VictoryBar\r\n                                                                horizontal\r\n                                                                barRatio={0.75}\r\n                                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(0))}\r\n                                                                data={[\r\n                                                                    {\r\n                                                                        key: \"Counties with lowest percentage\\n African American\", 'value': data_index['black'][\"low20\"]['deathscumR'] || 0,\r\n                                                                        'ez': data_index['black'][\"low20\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Q2\", 'value': data_index['black'][\"Q2\"]['deathscumR'] || 0,\r\n                                                                        'ez': data_index['black'][\"Q2\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Q3\", 'value': data_index['black'][\"Q3\"]['deathscumR'] || 0,\r\n                                                                        'ez': data_index['black'][\"Q3\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Q4\", 'value': data_index['black'][\"Q4\"]['deathscumR'] || 0,\r\n                                                                        'ez': data_index['black'][\"Q4\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Counties with highest percentage\\n African American\", 'value': data_index['black'][\"high20\"]['deathscumR'] || 0,\r\n                                                                        'ez': data_index['black'][\"high20\"]['county_list']\r\n                                                                    }\r\n                                                                ]}\r\n                                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"18px\", fill: \"#000000\" }} />}\r\n                                                                style={{\r\n                                                                    data: {\r\n                                                                        fill: ({ datum }) => datum.ez.includes(countyFipsblack) ? countyColor : mortalityColor[1]\r\n                                                                    }\r\n                                                                }}\r\n                                                                x=\"key\"\r\n                                                                y=\"value\"\r\n                                                            />\r\n                                                        </VictoryChart>\r\n\r\n                                                    </Grid.Column>\r\n                                                </Grid.Row>\r\n\r\n                                                <Grid.Row style={{fontFamily: 'lato', fontSize: 18, color: dataupColor, paddingTop: '2.4em', paddingLeft: '4em', paddingRight: '2em' }} centered>\r\n                                                    Data updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' : (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}\r\n                                                    </Grid.Row>\r\n                                                    <Grid.Row style={{paddingLeft: '4.9em', paddingRight: '2em' }}>\r\n                                                    <Accordion defaultActiveIndex={1} panels={[\r\n                                                        {\r\n                                                            key: 'acquire-dog',\r\n                                                            title: {\r\n                                                                content: <u style={{ fontFamily: 'lato', fontSize: 18, color: dataupColor }}>About the data</u>,\r\n                                                                icon: 'dropdown',\r\n                                                            },\r\n                                                            content: {\r\n                                                                content: (\r\n                                                                    <p style={{ textAlign: \"justify\", fontFamily: 'lato', fontSize: 18 }}>\r\n                                                                        This chart shows the number of COVID-19 cases (top chart) and deaths (bottom chart) per 100,000 residents by percentage African American population ranking.\r\n                                                                        The y-axis displays percentage African American population rankings based on quintiles (groups of 20%). The x-axis displays the average number\r\n                                                                        of COVID-19 cases (top chart) or deaths (bottom chart) per 100,000 that occurred in each group of counties ranked by percentage percentage African American. The ranking classified counties into five groups designed to be of equal size, so that the lowest\r\n                                                                        quintile contains the counties with values in the 0%-20% range for this county characteristic, and the highest quintile contains counties with values in the 80%-100% range for this county characteristic. Q2 indicates counties\r\n                                                                        in the 20%-40% range, Q3 indicates counties in the 40%-60% range, and Q4 indicates counties in the 60%-80% range.\r\n                                                                    </p>\r\n                                                                ),\r\n                                                            },\r\n                                                        }\r\n                                                    ]\r\n\r\n                                                    } />\r\n\r\n                                                </Grid.Row>\r\n\r\n                                            </Grid.Column>\r\n                                        </Grid>\r\n\r\n                                        <hr\r\n                                            style={{\r\n                                                color: '#44a0e2',\r\n                                                backgroundColor: '#44a0e2',\r\n                                                height: 5,\r\n                                                width: '100%'\r\n                                            }}\r\n                                        />\r\n                                        <Grid id=\"hispanic\" style={{ paddingBottom: '2em' }}>\r\n                                            <Grid.Row>\r\n                                                <div id='hispanic' style={{ width: \"100%\", height: \"100%\" }}>\r\n                                                    <Header as='h2' style={{ textAlign: 'center', color: 'black', fontSize: \"19pt\", paddingTop: '1em', paddingBottom: '1em' }}>\r\n                                                        <Header.Content> COVID-19 by Percentage Hispanic Population</Header.Content>\r\n                                                    </Header>\r\n                                                </div>\r\n                                            </Grid.Row>\r\n                                            <Grid.Column width={7} style={{ paddingLeft: \"2\", paddingLeft: \"1\" }}>\r\n                                                <Grid.Row style={{ paddingTop: \"0\" }}>\r\n                                                    <Header as='h2' style={{ fontWeight: 600, fontSize: \"16pt\", lineHeight: \"16pt\" }}>\r\n                                                        <Header.Content>\r\n                                                            Georgia Percentage Hispanic Population Map\r\n                                        </Header.Content>\r\n                                                    </Header>\r\n                                                </Grid.Row>\r\n                                                <Grid.Row style={{ paddingTop: \"0\", paddingBottom: '1em' }}>\r\n                                                    <svg width=\"600\" height=\"80\">\r\n                                                        {_.map(colorPalette2, (color, i) => {\r\n                                                            return <rect key={i} x={110 + 40 * i} y={40} width=\"40\" height=\"20\" style={{ fill: color, strokeWidth: 1, stroke: color }} />\r\n                                                        })}\r\n                                                        <text x={20} y={50} style={{ fontSize: '0.8em' }}>Least vulnerable</text>\r\n                                                        <text x={20} y={59} style={{ fontSize: '0.8em' }}>counties</text>\r\n                                                        <text x={160 + 40 * (colorPalette2.length - 1)} y={50} style={{ fontSize: '0.8em' }}>Highest vulnerable</text>\r\n                                                        <text x={160 + 40 * (colorPalette2.length - 1)} y={59} style={{ fontSize: '0.8em' }}>counties</text>\r\n                                                        {_.map(thresh_chara['hispanic'], (splitpoint, i) => {\r\n                                                            return <text key={i} x={105 + 40 * (i)} y={35} style={{ fontSize: '0.7em' }}> {thresh_chara['hispanic'][i]}</text>\r\n                                                        })}\r\n                                                    </svg>\r\n                                                    <ComposableMap projection=\"geoAlbersUsa\"\r\n                                                        projectionConfig={{ scale: `${config.scale1}` }}\r\n                                                        width={600}\r\n                                                        height={600}\r\n                                                        data-tip=\"\"\r\n                                                        offsetX={config.offsetX1}\r\n                                                        offsetY={config.offsetY2}>\r\n                                                        <Geographies data-tip='his' data-for='his' geography={config.url}>\r\n                                                            {({ geographies }) => geographies.map(geo =>\r\n                                                                <Geography\r\n                                                                    key={geo.rsmKey}\r\n                                                                    geography={geo}\r\n\r\n                                                                    style={{\r\n                                                                        default: {\r\n                                                                            //  fill: \"#ECEFF1\",\r\n                                                                            stroke: \"#607D8B\",\r\n                                                                            strokeWidth: 0.95,\r\n                                                                            outline: \"none\",\r\n                                                                        },\r\n                                                                        pressed: {\r\n                                                                            outline: \"none\",\r\n                                                                        }\r\n                                                                    }}\r\n                                                                    onMouseEnter={() => {\r\n\r\n                                                                        setCountyFipshis(geo.properties.COUNTYFP);\r\n                                                                        setCountyNamehis(fips2county[stateFips + geo.properties.COUNTYFP]);\r\n                                                                        setTooltipContenthis(fips2county[stateFips + geo.properties.COUNTYFP]);\r\n\r\n                                                                    }}\r\n                                                                    onMouseLeave={() => {\r\n                                                                        setTooltipContent(\"\")\r\n                                                                    }}\r\n                                                                    fill={countyFipshis === geo.properties.COUNTYFP ? countyColor :\r\n                                                                        ((colorHis && data_cases[stateFips + geo.properties.COUNTYFP] &&\r\n                                                                            data_cases[stateFips + geo.properties.COUNTYFP]['hispanicP'] && data_cases[stateFips + geo.properties.COUNTYFP]['hispanicP'] > 0) ?\r\n                                                                            colorHis[data_cases[stateFips + geo.properties.COUNTYFP]['hispanicP']] :\r\n                                                                            (colorHis && data_cases[stateFips + geo.properties.COUNTYFP] && data_cases[stateFips + geo.properties.COUNTYFP]['hispanicP'] === 0) ? '#e1dce2' : '#FFFFFF')}\r\n                                                                />\r\n                                                            )}\r\n                                                        </Geographies>\r\n                                                    </ComposableMap>\r\n                                                    {/* <svg width=\"600\" height=\"80\">\r\n                                                        <rect key={0} x={50} y={0} width=\"20\" height=\"20\" style={{ fill: colorPalette[0], strokeWidth: 1, stroke: colorPalette[0] }} />\r\n                                                        <text x={80} y={15} style={{ fontSize: '1em' }}>0 {'-'} 2.28</text>\r\n                                                        <rect key={1} x={200} y={0} width=\"20\" height=\"20\" style={{ fill: colorPalette[1], strokeWidth: 1, stroke: colorPalette[1] }} />\r\n                                                        <text x={230} y={15} style={{ fontSize: '1em' }}>2.28 {'-'} 3.86</text>\r\n                                                        <rect key={2} x={360} y={0} width=\"20\" height=\"20\" style={{ fill: colorPalette[2], strokeWidth: 1, stroke: colorPalette[2] }} />\r\n                                                        <text x={390} y={15} style={{ fontSize: '1em' }}>3.86 {'-'} 5.73</text>\r\n\r\n                                                        <rect key={3} x={130} y={40} width=\"20\" height=\"20\" style={{ fill: colorPalette[3], strokeWidth: 1, stroke: colorPalette[3] }} />\r\n                                                        <text x={160} y={55} style={{ fontSize: '1em' }}>5.73 {'-'} 8.57</text>\r\n                                                        <rect key={4} x={280} y={40} width=\"20\" height=\"20\" style={{ fill: colorPalette[4], strokeWidth: 1, stroke: colorPalette[4] }} />\r\n                                                        <text x={310} y={55} style={{ fontSize: '1em' }}>8.57 {'+'}</text>\r\n\r\n                                                    </svg> */}\r\n                                                </Grid.Row>\r\n                                                <Grid.Row style={{ fontFamily: 'lato', fontSize: 18, color: dataupColor, paddingTop: '0.5em', paddingLeft: '4em', paddingRight: '2em' }} centered>\r\n                                                    Data updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' : (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}\r\n                                                </Grid.Row>\r\n                                                <Grid.Row style={{ paddingTop: '0em', paddingLeft: '4.9em', paddingRight: '2em' }}>\r\n                                                    <Accordion defaultActiveIndex={1} panels={[\r\n                                                        {\r\n                                                            key: 'acquire-dog',\r\n                                                            title: {\r\n                                                                content: <u style={{ fontFamily: 'lato', fontSize: 18, color: dataupColor }}>About the data</u>,\r\n                                                                icon: 'dropdown',\r\n                                                            },\r\n                                                            content: {\r\n                                                                content: (\r\n                                                                    <p style={{ textAlign: \"justify\", fontFamily: 'lato', fontSize: 18 }}>\r\n                                                                        This map shows each Georgia county according to its percentage Hispanic population.\r\n                                                                        County rankings are based on percentage Hispanic population quintile, which ranks each county in one of five\r\n                                                                        groups depending on Hispanic population. The ranking classified counties into five groups designed to be of equal size, so that the lowest quintile contains the counties with values in the 0%-20% range for this county\r\n                                                                        characteristic, and the highest quintile contains counties with values in the 80%-100% range for this county characteristic.\r\n                                                                    </p>\r\n                                                                ),\r\n                                                            },\r\n                                                        }\r\n                                                    ]\r\n\r\n                                                    } />\r\n\r\n                                                </Grid.Row>\r\n\r\n                                            </Grid.Column>\r\n\r\n                                            <Grid.Column width={9} style={{ paddingLeft: \"2\", paddingLeft: \"1\" }}>\r\n                                                <Grid.Row columns={1} style={{ paddingBottom: \"2\" }}>\r\n                                                    <Grid.Column style={{ paddingTop: 0, paddingBottom: 3 }}>\r\n                                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"16pt\", lineHeight: \"16pt\" }}>\r\n                                                            <Header.Content>\r\n                                                                COVID-19 Case Rate by Percentage of African American Population\r\n                                                </Header.Content>\r\n                                                        </Header>\r\n                                                        <VictoryChart\r\n                                                            theme={VictoryTheme.material}\r\n                                                            width={730}\r\n                                                            height={270}\r\n                                                            domainPadding={20}\r\n                                                            minDomain={{ y: props.ylog ? 1 : 0 }}\r\n                                                            padding={{ left: 305, right: 60, top: 10, bottom: 35 }}\r\n                                                            style={{ fontSize: \"14pt\" }}\r\n                                                            containerComponent={<VictoryContainer responsive={false} />}\r\n                                                        >\r\n                                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\r\n                                                            <VictoryAxis dependentAxis\r\n                                                                label={\"COVID-19 Cases per 100,000 Residents\"}\r\n                                                                style={{\r\n                                                                    ticks: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, axisLabel: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' },\r\n                                                                    labels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' }, tickLabels: { fontSize: \"0px\", fill: '#000000', padding: 10, fontFamily: 'lato' }\r\n                                                                }} />\r\n                                                            <VictoryBar\r\n                                                                horizontal\r\n                                                                barRatio={0.75}\r\n                                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(0))}\r\n                                                                data={[\r\n                                                                    {\r\n                                                                        key: \"Counties with lowest\\n percentage Hispanic\", 'value': data_index['hispanic'][\"low20\"]['casescumR'] || 0,\r\n                                                                        'ez': data_index['hispanic'][\"low20\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Q2\", 'value': data_index['hispanic'][\"Q2\"]['casescumR'] || 0,\r\n                                                                        'ez': data_index['hispanic'][\"Q2\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Q3\", 'value': data_index['hispanic'][\"Q3\"]['casescumR'] || 0,\r\n                                                                        'ez': data_index['hispanic'][\"Q3\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Q4\", 'value': data_index['hispanic'][\"Q4\"]['casescumR'] || 0,\r\n                                                                        'ez': data_index['hispanic'][\"Q4\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Counties with highest\\n percentage Hispanic\", 'value': data_index['hispanic'][\"high20\"]['casescumR'] || 0,\r\n                                                                        'ez': data_index['hispanic'][\"high20\"]['county_list']\r\n                                                                    }\r\n                                                                ]}\r\n                                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"20px\", fill: \"#000000\" }} />}\r\n                                                                style={{\r\n                                                                    data: {\r\n                                                                        fill: ({ datum }) => datum.ez.includes(countyFipshis) ? countyColor : casesColor[1]\r\n                                                                    }\r\n                                                                }}\r\n                                                                x=\"key\"\r\n                                                                y=\"value\"\r\n                                                            />\r\n                                                        </VictoryChart>\r\n                                                    </Grid.Column>\r\n                                                </Grid.Row>\r\n\r\n                                                <Grid.Row columns={1} style={{ paddingTop: '3.5em' }}>\r\n                                                    <Grid.Column style={{ paddingTop: 15, paddingBottom: 3 }}>\r\n                                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"16pt\", lineHeight: \"16pt\", paddingLeft: \"1em\" }}>\r\n                                                            <Header.Content>\r\n                                                                COVID-19 Death Rate by Percentage of Hispanic Population\r\n                                            </Header.Content>\r\n                                                        </Header>\r\n                                                        <VictoryChart\r\n                                                            theme={VictoryTheme.material}\r\n                                                            width={730}\r\n                                                            height={270}\r\n                                                            domainPadding={20}\r\n                                                            minDomain={{ y: props.ylog ? 1 : 0 }}\r\n                                                            padding={{ left: 305, right: 60, top: 10, bottom: 35 }}\r\n                                                            style={{ fontSize: \"14pt\" }}\r\n                                                            containerComponent={<VictoryContainer responsive={false} />}\r\n                                                        >\r\n                                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\r\n                                                            <VictoryAxis dependentAxis\r\n                                                                label='COVID-19 Deaths per 100,000 Residents'\r\n                                                                style={{\r\n                                                                    ticks: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, axisLabel: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' },\r\n                                                                    labels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' }, tickLabels: { fontSize: \"0px\", fill: '#000000', padding: 10, fontFamily: 'lato' }\r\n                                                                }} />\r\n                                                            <VictoryBar\r\n                                                                horizontal\r\n                                                                barRatio={0.75}\r\n                                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(0))}\r\n                                                                data={[\r\n                                                                    {\r\n                                                                        key: \"Counties with lowest\\n percentage Hispanic\", 'value': data_index['hispanic'][\"low20\"]['deathscumR'] || 0,\r\n                                                                        'ez': data_index['hispanic'][\"low20\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Q2\", 'value': data_index['hispanic'][\"Q2\"]['deathscumR'] || 0,\r\n                                                                        'ez': data_index['hispanic'][\"Q2\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Q3\", 'value': data_index['hispanic'][\"Q3\"]['deathscumR'] || 0,\r\n                                                                        'ez': data_index['hispanic'][\"Q3\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Q4\", 'value': data_index['hispanic'][\"Q4\"]['deathscumR'] || 0,\r\n                                                                        'ez': data_index['hispanic'][\"Q4\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Counties with highest\\n percentage Hispanic\", 'value': data_index['hispanic'][\"high20\"]['deathscumR'] || 0,\r\n                                                                        'ez': data_index['hispanic'][\"high20\"]['county_list']\r\n                                                                    }\r\n                                                                ]}\r\n                                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"18px\", fill: \"#000000\" }} />}\r\n                                                                style={{\r\n                                                                    data: {\r\n                                                                        fill: ({ datum }) => datum.ez.includes(countyFipshis) ? countyColor : mortalityColor[1]\r\n                                                                    }\r\n                                                                }}\r\n                                                                x=\"key\"\r\n                                                                y=\"value\"\r\n                                                            />\r\n                                                        </VictoryChart>\r\n\r\n                                                    </Grid.Column>\r\n                                                </Grid.Row>\r\n\r\n                                                <Grid.Row style={{fontFamily: 'lato', fontSize: 18, color: dataupColor, paddingTop: '2.4em', paddingLeft: '4em', paddingRight: '2em' }} centered>\r\nData updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' : (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}\r\n</Grid.Row>\r\n<Grid.Row style={{paddingLeft: '4.9em', paddingRight: '2em' }}>\r\n<Accordion defaultActiveIndex={1} panels={[\r\n                                                        {\r\n                                                            key: 'acquire-dog',\r\n                                                            title: {\r\n                                                                content: <u style={{ fontFamily: 'lato', fontSize: 18, color: dataupColor }}>About the data</u>,\r\n                                                                icon: 'dropdown',\r\n                                                            },\r\n                                                            content: {\r\n                                                                content: (\r\n                                                                    <p style={{ textAlign: \"justify\", fontFamily: 'lato', fontSize: 18 }}>\r\n                                                                        This chart shows the number of COVID-19 cases (top chart) and deaths (bottom chart) per 100,000 residents by percentage Hispanic population ranking.\r\n                                                                        The y-axis displays percentage Hispanic population rankings based on quintiles (groups of 20%). The x-axis displays the average number\r\n                                                                        of COVID-19 cases (top chart) or deaths (bottom chart) per 100,000 that occurred in each group of counties ranked by percentage Hispanic population. The ranking classified counties into five groups designed to be of equal size, so that the lowest\r\n                                                                        quintile contains the counties with values in the 0%-20% range for this county characteristic, and the highest quintile contains counties with values in the 80%-100% range for this county characteristic. Q2 indicates counties\r\n                                                                        in the 20%-40% range, Q3 indicates counties in the 40%-60% range, and Q4 indicates counties in the 60%-80% range.\r\n                                                                    </p>\r\n                                                                ),\r\n                                                            },\r\n                                                        }\r\n                                                    ]\r\n\r\n                                                    } />\r\n\r\n                                                </Grid.Row>\r\n\r\n                                            </Grid.Column>\r\n                                        </Grid>\r\n\r\n                                        <hr\r\n                                            style={{\r\n                                                color: '#44a0e2',\r\n                                                backgroundColor: '#44a0e2',\r\n                                                height: 5,\r\n                                                width: '100%'\r\n                                            }}\r\n                                        />\r\n                                        <Grid id=\"diabetes\" style={{ paddingBottom: '2em' }}>\r\n                                            <Grid.Row>\r\n                                                <div id='diabetes' style={{ width: \"100%\", height: \"100%\" }}>\r\n                                                    <Header as='h2' style={{ textAlign: 'center', color: 'black', fontSize: \"19pt\", paddingTop: '1em', paddingBottom: '1em' }}>\r\n                                                        <Header.Content> COVID-19 by Percentage of Population with Diabetes</Header.Content>\r\n                                                    </Header>\r\n                                                </div>\r\n                                            </Grid.Row>\r\n                                            <Grid.Column width={7} style={{ paddingLeft: \"2\", paddingLeft: \"1\" }}>\r\n                                                <Grid.Row style={{ paddingTop: \"0\" }}>\r\n                                                    <Header as='h2' style={{ fontWeight: 600, fontSize: \"16pt\", lineHeight: \"16pt\" }}>\r\n                                                        <Header.Content>\r\n                                                            Georgia Percentage of Population with Diabetes Map\r\n                                        </Header.Content>\r\n                                                    </Header>\r\n                                                </Grid.Row>\r\n                                                <Grid.Row style={{ paddingTop: \"0\", paddingBottom: '1em' }}>\r\n                                                    <svg width=\"600\" height=\"80\">\r\n                                                        {_.map(colorPalette2, (color, i) => {\r\n                                                            return <rect key={i} x={110 + 40 * i} y={40} width=\"40\" height=\"20\" style={{ fill: color, strokeWidth: 1, stroke: color }} />\r\n                                                        })}\r\n                                                        <text x={20} y={50} style={{ fontSize: '0.8em' }}>Least vulnerable</text>\r\n                                                        <text x={20} y={59} style={{ fontSize: '0.8em' }}>counties</text>\r\n                                                        <text x={160 + 40 * (colorPalette2.length - 1)} y={50} style={{ fontSize: '0.8em' }}>Highest vulnerable</text>\r\n                                                        <text x={160 + 40 * (colorPalette2.length - 1)} y={59} style={{ fontSize: '0.8em' }}>counties</text>\r\n                                                        {_.map(thresh_chara['diabetes'], (splitpoint, i) => {\r\n                                                            return <text key={i} x={105 + 40 * (i)} y={35} style={{ fontSize: '0.7em' }}> {thresh_chara['diabetes'][i]}</text>\r\n                                                        })}\r\n                                                    </svg>\r\n                                                    <ComposableMap projection=\"geoAlbersUsa\"\r\n                                                        projectionConfig={{ scale: `${config.scale1}` }}\r\n                                                        width={600}\r\n                                                        height={600}\r\n                                                        data-tip=\"\"\r\n                                                        offsetX={config.offsetX1}\r\n                                                        offsetY={config.offsetY2}>\r\n                                                        <Geographies data-tip='dia' data-for='dia' geography={config.url}>\r\n                                                            {({ geographies }) => geographies.map(geo =>\r\n                                                                <Geography\r\n                                                                    key={geo.rsmKey}\r\n                                                                    geography={geo}\r\n\r\n                                                                    style={{\r\n                                                                        default: {\r\n                                                                            //  fill: \"#ECEFF1\",\r\n                                                                            stroke: \"#607D8B\",\r\n                                                                            strokeWidth: 0.95,\r\n                                                                            outline: \"none\",\r\n                                                                        },\r\n                                                                        pressed: {\r\n                                                                            outline: \"none\",\r\n                                                                        }\r\n                                                                    }}\r\n                                                                    onMouseEnter={() => {\r\n\r\n                                                                        setCountyFipsdia(geo.properties.COUNTYFP);\r\n                                                                        setCountyNamedia(fips2county[stateFips + geo.properties.COUNTYFP]);\r\n                                                                        setTooltipContentdia(fips2county[stateFips + geo.properties.COUNTYFP]);\r\n\r\n                                                                    }}\r\n                                                                    onMouseLeave={() => {\r\n                                                                        setTooltipContent(\"\")\r\n                                                                    }}\r\n                                                                    fill={countyFipsdia === geo.properties.COUNTYFP ? countyColor :\r\n                                                                        ((colorDia && dataCha[stateFips + geo.properties.COUNTYFP] &&\r\n                                                                            dataCha[stateFips + geo.properties.COUNTYFP]['diabetes'] && dataCha[stateFips + geo.properties.COUNTYFP]['diabetes'] > 0) ?\r\n                                                                            colorDia[dataCha[stateFips + geo.properties.COUNTYFP]['diabetes']] :\r\n                                                                            (colorDia && dataCha[stateFips + geo.properties.COUNTYFP] && dataCha[stateFips + geo.properties.COUNTYFP]['diabetes'] === 0) ? '#e1dce2' : '#FFFFFF')}\r\n                                                                />\r\n                                                            )}\r\n                                                        </Geographies>\r\n                                                    </ComposableMap>\r\n                                                    {/* <svg width=\"600\" height=\"80\">\r\n                                                        <rect key={0} x={50} y={0} width=\"20\" height=\"20\" style={{ fill: colorPalette[0], strokeWidth: 1, stroke: colorPalette[0] }} />\r\n                                                        <text x={80} y={15} style={{ fontSize: '1em' }}>0 {'-'} 9.6</text>\r\n                                                        <rect key={1} x={200} y={0} width=\"20\" height=\"20\" style={{ fill: colorPalette[1], strokeWidth: 1, stroke: colorPalette[1] }} />\r\n                                                        <text x={230} y={15} style={{ fontSize: '1em' }}>9.6 {'-'} 11.5</text>\r\n                                                        <rect key={2} x={360} y={0} width=\"20\" height=\"20\" style={{ fill: colorPalette[2], strokeWidth: 1, stroke: colorPalette[2] }} />\r\n                                                        <text x={390} y={15} style={{ fontSize: '1em' }}>11.5 {'-'} 13.2</text>\r\n\r\n                                                        <rect key={3} x={130} y={40} width=\"20\" height=\"20\" style={{ fill: colorPalette[3], strokeWidth: 1, stroke: colorPalette[3] }} />\r\n                                                        <text x={160} y={55} style={{ fontSize: '1em' }}>13.2 {'-'} 16.6</text>\r\n                                                        <rect key={4} x={280} y={40} width=\"20\" height=\"20\" style={{ fill: colorPalette[4], strokeWidth: 1, stroke: colorPalette[4] }} />\r\n                                                        <text x={310} y={55} style={{ fontSize: '1em' }}>16.6 {'+'}</text>\r\n\r\n                                                    </svg> */}\r\n                                                </Grid.Row>\r\n                                                <Grid.Row style={{ fontFamily: 'lato', fontSize: 18, color: dataupColor, paddingTop: '0.5em', paddingLeft: '4em', paddingRight: '2em' }} centered>\r\n                                                    Data updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' : (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}\r\n                                                </Grid.Row>\r\n                                                <Grid.Row style={{ paddingTop: '0em', paddingLeft: '4.9em', paddingRight: '2em' }}>\r\n                                                    <Accordion defaultActiveIndex={1} panels={[\r\n                                                        {\r\n                                                            key: 'acquire-dog',\r\n                                                            title: {\r\n                                                                content: <u style={{ fontFamily: 'lato', fontSize: 18, color: dataupColor }}>About the data</u>,\r\n                                                                icon: 'dropdown',\r\n                                                            },\r\n                                                            content: {\r\n                                                                content: (\r\n                                                                    <p style={{ textAlign: \"justify\", fontFamily: 'lato', fontSize: 18 }}>\r\n                                                                        This map shows each Georgia county according to its percentage of population with diabetes.\r\n                                                                        County rankings are based on percentage of population with diabetes quintile, which ranks each county in one of five\r\n                                                                        groups depending on population with diabetes. The ranking classified counties into five groups designed to be of equal size, so that the lowest quintile contains the counties with values in the 0%-20% range for this county\r\n                                                                        characteristic, and the highest quintile contains counties with values in the 80%-100% range for this county characteristic.\r\n                                                                    </p>\r\n                                                                ),\r\n                                                            },\r\n                                                        }\r\n                                                    ]\r\n\r\n                                                    } />\r\n\r\n                                                </Grid.Row>\r\n\r\n                                            </Grid.Column>\r\n\r\n                                            <Grid.Column width={9} style={{ paddingLeft: \"2\", paddingLeft: \"1\" }}>\r\n                                                <Grid.Row columns={1} style={{ paddingBottom: \"2\" }}>\r\n                                                    <Grid.Column style={{ paddingTop: 0, paddingBottom: 3 }}>\r\n                                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"16pt\", lineHeight: \"16pt\" }}>\r\n                                                            <Header.Content>\r\n                                                                COVID-19 Case Rate by Percentage of Population with Diabetes\r\n                                                </Header.Content>\r\n                                                        </Header>\r\n                                                        <VictoryChart\r\n                                                            theme={VictoryTheme.material}\r\n                                                            width={730}\r\n                                                            height={270}\r\n                                                            domainPadding={20}\r\n                                                            minDomain={{ y: props.ylog ? 1 : 0 }}\r\n                                                            padding={{ left: 305, right: 60, top: 10, bottom: 35 }}\r\n                                                            style={{ fontSize: \"14pt\" }}\r\n                                                            containerComponent={<VictoryContainer responsive={false} />}\r\n                                                        >\r\n                                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\r\n                                                            <VictoryAxis dependentAxis\r\n                                                                label={\"COVID-19 Cases per 100,000 Residents\"}\r\n                                                                style={{\r\n                                                                    ticks: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, axisLabel: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' },\r\n                                                                    labels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' }, tickLabels: { fontSize: \"0px\", fill: '#000000', padding: 10, fontFamily: 'lato' }\r\n                                                                }} />\r\n                                                            <VictoryBar\r\n                                                                horizontal\r\n                                                                barRatio={0.75}\r\n                                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(0))}\r\n                                                                data={[\r\n                                                                    {\r\n                                                                        key: \"Counties with lowest percentage\\n population with diabetes\", 'value': data_index['diabetes'][\"low20\"]['casescumR'] || 0,\r\n                                                                        'ez': data_index['diabetes'][\"low20\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Q2\", 'value': data_index['diabetes'][\"Q2\"]['casescumR'] || 0,\r\n                                                                        'ez': data_index['diabetes'][\"Q2\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Q3\", 'value': data_index['diabetes'][\"Q3\"]['casescumR'] || 0,\r\n                                                                        'ez': data_index['diabetes'][\"Q3\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Q4\", 'value': data_index['diabetes'][\"Q4\"]['casescumR'] || 0,\r\n                                                                        'ez': data_index['diabetes'][\"Q4\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Counties with highest percentage\\n population with diabetes\", 'value': data_index['diabetes'][\"high20\"]['casescumR'] || 0,\r\n                                                                        'ez': data_index['diabetes'][\"high20\"]['county_list']\r\n                                                                    }\r\n                                                                ]}\r\n                                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"20px\", fill: \"#000000\" }} />}\r\n                                                                style={{\r\n                                                                    data: {\r\n                                                                        fill: ({ datum }) => datum.ez.includes(countyFipsdia) ? countyColor : casesColor[1]\r\n                                                                    }\r\n                                                                }}\r\n                                                                x=\"key\"\r\n                                                                y=\"value\"\r\n                                                            />\r\n                                                        </VictoryChart>\r\n                                                    </Grid.Column>\r\n                                                </Grid.Row>\r\n\r\n                                                <Grid.Row columns={1} style={{ paddingTop: '3.5em' }}>\r\n                                                    <Grid.Column style={{ paddingTop: 15, paddingBottom: 3 }}>\r\n                                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"16pt\", lineHeight: \"16pt\", paddingLeft: \"1em\" }}>\r\n                                                            <Header.Content>\r\n                                                                COVID-19 Death Rate by Percentage of Population with Diabetes\r\n                                            </Header.Content>\r\n                                                        </Header>\r\n                                                        <VictoryChart\r\n                                                            theme={VictoryTheme.material}\r\n                                                            width={730}\r\n                                                            height={270}\r\n                                                            domainPadding={20}\r\n                                                            minDomain={{ y: props.ylog ? 1 : 0 }}\r\n                                                            padding={{ left: 305, right: 60, top: 10, bottom: 35 }}\r\n                                                            style={{ fontSize: \"14pt\" }}\r\n                                                            containerComponent={<VictoryContainer responsive={false} />}\r\n                                                        >\r\n                                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\r\n                                                            <VictoryAxis dependentAxis\r\n                                                                label='COVID-19 Deaths per 100,000 Residents'\r\n                                                                style={{\r\n                                                                    ticks: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, axisLabel: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' },\r\n                                                                    labels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' }, tickLabels: { fontSize: \"0px\", fill: '#000000', padding: 10, fontFamily: 'lato' }\r\n                                                                }} />\r\n                                                            <VictoryBar\r\n                                                                horizontal\r\n                                                                barRatio={0.75}\r\n                                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(0))}\r\n                                                                data={[\r\n                                                                    {\r\n                                                                        key: \"Counties with lowest percentage\\n population with diabetes\", 'value': data_index['diabetes'][\"low20\"]['deathscumR'] || 0,\r\n                                                                        'ez': data_index['diabetes'][\"low20\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Q2\", 'value': data_index['diabetes'][\"Q2\"]['deathscumR'] || 0,\r\n                                                                        'ez': data_index['diabetes'][\"Q2\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Q3\", 'value': data_index['diabetes'][\"Q3\"]['deathscumR'] || 0,\r\n                                                                        'ez': data_index['diabetes'][\"Q3\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Q4\", 'value': data_index['diabetes'][\"Q4\"]['deathscumR'] || 0,\r\n                                                                        'ez': data_index['diabetes'][\"Q4\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Counties with highest percentage\\n population with diabetes\", 'value': data_index['diabetes'][\"high20\"]['deathscumR'] || 0,\r\n                                                                        'ez': data_index['diabetes'][\"high20\"]['county_list']\r\n                                                                    }\r\n                                                                ]}\r\n                                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"18px\", fill: \"#000000\" }} />}\r\n                                                                style={{\r\n                                                                    data: {\r\n                                                                        fill: ({ datum }) => datum.ez.includes(countyFipsdia) ? countyColor : mortalityColor[1]\r\n                                                                    }\r\n                                                                }}\r\n                                                                x=\"key\"\r\n                                                                y=\"value\"\r\n                                                            />\r\n                                                        </VictoryChart>\r\n\r\n                                                    </Grid.Column>\r\n                                                </Grid.Row>\r\n\r\n                                                <Grid.Row style={{fontFamily: 'lato', fontSize: 18, color: dataupColor, paddingTop: '2.4em', paddingLeft: '4em', paddingRight: '2em' }} centered>\r\nData updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' : (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}\r\n</Grid.Row>\r\n<Grid.Row style={{paddingLeft: '4.9em', paddingRight: '2em' }}>\r\n<Accordion defaultActiveIndex={1} panels={[\r\n                                                        {\r\n                                                            key: 'acquire-dog',\r\n                                                            title: {\r\n                                                                content: <u style={{ fontFamily: 'lato', fontSize: 18, color: dataupColor }}>About the data</u>,\r\n                                                                icon: 'dropdown',\r\n                                                            },\r\n                                                            content: {\r\n                                                                content: (\r\n                                                                    <p style={{ textAlign: \"justify\", fontFamily: 'lato', fontSize: 18 }}>\r\n                                                                        This chart shows the number of COVID-19 cases (top chart) and deaths (bottom chart) per 100,000 residents by county ranking on percentage of population with diabetes.\r\n                                                                        The y-axis displays percentage population with diabetes rankings based on quintiles (groups of 20%). The x-axis displays the average number\r\n                                                                        of COVID-19 cases (top chart) or deaths (bottom chart) per 100,000 that occurred in each group of counties ranked by percentage population with diabetes. The ranking classified counties into five groups designed to be of equal size, so that the lowest\r\n                                                                        quintile contains the counties with values in the 0%-20% range for this county characteristic, and the highest quintile contains counties with values in the 80%-100% range for this county characteristic. Q2 indicates counties\r\n                                                                        in the 20%-40% range, Q3 indicates counties in the 40%-60% range, and Q4 indicates counties in the 60%-80% range.\r\n                                                                    </p>\r\n                                                                ),\r\n                                                            },\r\n                                                        }\r\n                                                    ]\r\n\r\n                                                    } />\r\n\r\n                                                </Grid.Row>\r\n\r\n                                            </Grid.Column>\r\n                                        </Grid>\r\n\r\n                                        <hr\r\n                                            style={{\r\n                                                color: '#44a0e2',\r\n                                                backgroundColor: '#44a0e2',\r\n                                                height: 5,\r\n                                                width: '100%'\r\n                                            }}\r\n                                        />\r\n                                        <Grid id=\"age\" style={{ paddingBottom: '2em' }}>\r\n                                            <Grid.Row>\r\n                                                <div id='age' style={{ width: \"100%\", height: \"100%\" }}>\r\n                                                    <Header as='h2' style={{ textAlign: 'center', color: 'black', fontSize: \"19pt\", paddingTop: '1em', paddingBottom: '1em' }}>\r\n                                                        <Header.Content> COVID-19 by Percentage of Population Age Over 65</Header.Content>\r\n                                                    </Header>\r\n                                                </div>\r\n                                            </Grid.Row>\r\n                                            <Grid.Column width={7} style={{ paddingLeft: \"2\", paddingLeft: \"1\" }}>\r\n                                                <Grid.Row style={{ paddingTop: \"0\" }}>\r\n                                                    <Header as='h2' style={{ fontWeight: 600, fontSize: \"16pt\", lineHeight: \"16pt\" }}>\r\n                                                        <Header.Content>\r\n                                                            Georgia Percentage of Population Age Over 65 Map\r\n                                        </Header.Content>\r\n                                                    </Header>\r\n                                                </Grid.Row>\r\n                                                <Grid.Row style={{ paddingTop: \"0\", paddingBottom: '1em' }}>\r\n                                                    <svg width=\"600\" height=\"80\">\r\n                                                        {_.map(colorPalette2, (color, i) => {\r\n                                                            return <rect key={i} x={110 + 40 * i} y={40} width=\"40\" height=\"20\" style={{ fill: color, strokeWidth: 1, stroke: color }} />\r\n                                                        })}\r\n                                                        <text x={20} y={50} style={{ fontSize: '0.8em' }}>Least vulnerable</text>\r\n                                                        <text x={20} y={59} style={{ fontSize: '0.8em' }}>counties</text>\r\n                                                        <text x={160 + 40 * (colorPalette2.length - 1)} y={50} style={{ fontSize: '0.8em' }}>Highest vulnerable</text>\r\n                                                        <text x={160 + 40 * (colorPalette2.length - 1)} y={59} style={{ fontSize: '0.8em' }}>counties</text>\r\n                                                        {_.map(thresh_chara['age65over'], (splitpoint, i) => {\r\n                                                            return <text key={i} x={105 + 40 * (i)} y={35} style={{ fontSize: '0.7em' }}> {thresh_chara['age65over'][i]}</text>\r\n                                                        })}\r\n                                                    </svg>\r\n                                                    <ComposableMap projection=\"geoAlbersUsa\"\r\n                                                        projectionConfig={{ scale: `${config.scale1}` }}\r\n                                                        width={600}\r\n                                                        height={600}\r\n                                                        data-tip=\"\"\r\n                                                        offsetX={config.offsetX1}\r\n                                                        offsetY={config.offsetY2}>\r\n                                                        <Geographies data-tip='age' data-for='age' geography={config.url}>\r\n                                                            {({ geographies }) => geographies.map(geo =>\r\n                                                                <Geography\r\n                                                                    key={geo.rsmKey}\r\n                                                                    geography={geo}\r\n\r\n                                                                    style={{\r\n                                                                        default: {\r\n                                                                            //  fill: \"#ECEFF1\",\r\n                                                                            stroke: \"#607D8B\",\r\n                                                                            strokeWidth: 0.95,\r\n                                                                            outline: \"none\",\r\n                                                                        },\r\n                                                                        pressed: {\r\n                                                                            outline: \"none\",\r\n                                                                        }\r\n                                                                    }}\r\n                                                                    onMouseEnter={() => {\r\n\r\n                                                                        setCountyFipsa65(geo.properties.COUNTYFP);\r\n                                                                        setCountyNamea65(fips2county[stateFips + geo.properties.COUNTYFP]);\r\n                                                                        setTooltipContenta65(fips2county[stateFips + geo.properties.COUNTYFP]);\r\n\r\n                                                                    }}\r\n                                                                    onMouseLeave={() => {\r\n                                                                        setTooltipContent(\"\")\r\n                                                                    }}\r\n                                                                    fill={countyFipsa65 === geo.properties.COUNTYFP ? countyColor :\r\n                                                                        ((colorA65 && dataCha[stateFips + geo.properties.COUNTYFP] &&\r\n                                                                            dataCha[stateFips + geo.properties.COUNTYFP]['age65over'] && dataCha[stateFips + geo.properties.COUNTYFP]['age65over'] > 0) ?\r\n                                                                            colorA65[dataCha[stateFips + geo.properties.COUNTYFP]['age65over']] :\r\n                                                                            (colorA65 && dataCha[stateFips + geo.properties.COUNTYFP] && dataCha[stateFips + geo.properties.COUNTYFP]['age65over'] === 0) ? '#e1dce2' : '#FFFFFF')}\r\n                                                                />\r\n                                                            )}\r\n                                                        </Geographies>\r\n                                                    </ComposableMap>\r\n                                                    {/* <svg width=\"600\" height=\"80\">\r\n                                                        <rect key={0} x={50} y={0} width=\"20\" height=\"20\" style={{ fill: colorPalette[0], strokeWidth: 1, stroke: colorPalette[0] }} />\r\n                                                        <text x={80} y={15} style={{ fontSize: '1em' }}>0 {'-'} 13.33</text>\r\n                                                        <rect key={1} x={200} y={0} width=\"20\" height=\"20\" style={{ fill: colorPalette[1], strokeWidth: 1, stroke: colorPalette[1] }} />\r\n                                                        <text x={230} y={15} style={{ fontSize: '1em' }}>13.33 {'-'} 15.37</text>\r\n                                                        <rect key={2} x={360} y={0} width=\"20\" height=\"20\" style={{ fill: colorPalette[2], strokeWidth: 1, stroke: colorPalette[2] }} />\r\n                                                        <text x={390} y={15} style={{ fontSize: '1em' }}>15.37 {'-'} 16.86</text>\r\n\r\n                                                        <rect key={3} x={130} y={40} width=\"20\" height=\"20\" style={{ fill: colorPalette[3], strokeWidth: 1, stroke: colorPalette[3] }} />\r\n                                                        <text x={160} y={55} style={{ fontSize: '1em' }}>16.86 {'-'} 18.80</text>\r\n                                                        <rect key={4} x={280} y={40} width=\"20\" height=\"20\" style={{ fill: colorPalette[4], strokeWidth: 1, stroke: colorPalette[4] }} />\r\n                                                        <text x={310} y={55} style={{ fontSize: '1em' }}>18.80 {'+'}</text>\r\n\r\n                                                    </svg> */}\r\n                                                </Grid.Row>\r\n                                                <Grid.Row style={{ fontFamily: 'lato', fontSize: 18, color: dataupColor, paddingTop: '0.5em', paddingLeft: '4em', paddingRight: '2em' }} centered>\r\n                                                    Data updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' : (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}\r\n                                                </Grid.Row>\r\n                                                <Grid.Row style={{ paddingTop: '0em', paddingLeft: '4.9em', paddingRight: '2em' }}>\r\n                                                    <Accordion defaultActiveIndex={1} panels={[\r\n                                                        {\r\n                                                            key: 'acquire-dog',\r\n                                                            title: {\r\n                                                                content: <u style={{ fontFamily: 'lato', fontSize: 18, color: dataupColor }}>About the data</u>,\r\n                                                                icon: 'dropdown',\r\n                                                            },\r\n                                                            content: {\r\n                                                                content: (\r\n                                                                    <p style={{ textAlign: \"justify\", fontFamily: 'lato', fontSize: 18 }}>\r\n                                                                        This map shows each Georgia county according to its percentage of population over 65 years.\r\n                                                                        County rankings are based on percentage of population over 65 years quintile, which ranks each county in one of five\r\n                                                                        groups depending on population over age 65. The ranking classified counties into five groups designed to be of equal size, so that the lowest quintile contains the counties with values in the 0%-20% range for this county\r\n                                                                        characteristic, and the highest quintile contains counties with values in the 80%-100% range for this county characteristic.\r\n                                                                    </p>\r\n                                                                ),\r\n                                                            },\r\n                                                        }\r\n                                                    ]\r\n\r\n                                                    } />\r\n\r\n                                                </Grid.Row>\r\n\r\n                                            </Grid.Column>\r\n\r\n                                            <Grid.Column width={9} style={{ paddingLeft: \"2\", paddingLeft: \"1\" }}>\r\n                                                <Grid.Row columns={1} style={{ paddingBottom: \"2\" }}>\r\n                                                    <Grid.Column style={{ paddingTop: 0, paddingBottom: 3 }}>\r\n                                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"16pt\", lineHeight: \"16pt\" }}>\r\n                                                            <Header.Content>\r\n                                                                COVID-19 Case Rate by Percentage of Population over the Age 65 Years\r\n                                                </Header.Content>\r\n                                                        </Header>\r\n                                                        <VictoryChart\r\n                                                            theme={VictoryTheme.material}\r\n                                                            width={730}\r\n                                                            height={270}\r\n                                                            domainPadding={20}\r\n                                                            minDomain={{ y: props.ylog ? 1 : 0 }}\r\n                                                            padding={{ left: 305, right: 60, top: 10, bottom: 35 }}\r\n                                                            style={{ fontSize: \"14pt\" }}\r\n                                                            containerComponent={<VictoryContainer responsive={false} />}\r\n                                                        >\r\n                                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\r\n                                                            <VictoryAxis dependentAxis\r\n                                                                label={\"COVID-19 Cases per 100,000 Residents\"}\r\n                                                                style={{\r\n                                                                    ticks: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, axisLabel: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' },\r\n                                                                    labels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' }, tickLabels: { fontSize: \"0px\", fill: '#000000', padding: 10, fontFamily: 'lato' }\r\n                                                                }} />\r\n                                                            <VictoryBar\r\n                                                                horizontal\r\n                                                                barRatio={0.75}\r\n                                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(0))}\r\n                                                                data={[\r\n                                                                    {\r\n                                                                        key: \"Counties with lowest\\n percentage over 65\", 'value': data_index['age65over'][\"low20\"]['casescumR'] || 0,\r\n                                                                        'ez': data_index['age65over'][\"low20\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Q2\", 'value': data_index['age65over'][\"Q2\"]['casescumR'] || 0,\r\n                                                                        'ez': data_index['age65over'][\"Q2\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Q3\", 'value': data_index['age65over'][\"Q3\"]['casescumR'] || 0,\r\n                                                                        'ez': data_index['age65over'][\"Q3\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Q4\", 'value': data_index['age65over'][\"Q4\"]['casescumR'] || 0,\r\n                                                                        'ez': data_index['age65over'][\"Q4\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Counties with highest\\n percentage over 65\", 'value': data_index['age65over'][\"high20\"]['casescumR'] || 0,\r\n                                                                        'ez': data_index['age65over'][\"high20\"]['county_list']\r\n                                                                    }\r\n                                                                ]}\r\n                                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"20px\", fill: \"#000000\" }} />}\r\n                                                                style={{\r\n                                                                    data: {\r\n                                                                        fill: ({ datum }) => datum.ez.includes(countyFipsa65) ? countyColor : casesColor[1]\r\n                                                                    }\r\n                                                                }}\r\n                                                                x=\"key\"\r\n                                                                y=\"value\"\r\n                                                            />\r\n                                                        </VictoryChart>\r\n                                                    </Grid.Column>\r\n                                                </Grid.Row>\r\n\r\n                                                <Grid.Row columns={1} style={{ paddingTop: '1.5em' }}>\r\n                                                    <Grid.Column style={{ paddingTop: 15, paddingBottom: 3 }}>\r\n                                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"16pt\", lineHeight: \"16pt\", paddingLeft: \"1em\" }}>\r\n                                                            <Header.Content>\r\n                                                                COVID-19 Death Rate by Percentage of Population over the Age 65 Years\r\n                                            </Header.Content>\r\n                                                        </Header>\r\n                                                        <VictoryChart\r\n                                                            theme={VictoryTheme.material}\r\n                                                            width={730}\r\n                                                            height={270}\r\n                                                            domainPadding={20}\r\n                                                            minDomain={{ y: props.ylog ? 1 : 0 }}\r\n                                                            padding={{ left: 305, right: 60, top: 10, bottom: 35 }}\r\n                                                            style={{ fontSize: \"14pt\" }}\r\n                                                            containerComponent={<VictoryContainer responsive={false} />}\r\n                                                        >\r\n                                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\r\n                                                            <VictoryAxis dependentAxis\r\n                                                                label='COVID-19 Deaths per 100,000 Residents'\r\n                                                                style={{\r\n                                                                    ticks: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, axisLabel: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' },\r\n                                                                    labels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' }, tickLabels: { fontSize: \"0px\", fill: '#000000', padding: 10, fontFamily: 'lato' }\r\n                                                                }} />\r\n                                                            <VictoryBar\r\n                                                                horizontal\r\n                                                                barRatio={0.75}\r\n                                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(0))}\r\n                                                                data={[\r\n                                                                    {\r\n                                                                        key: \"Counties with lowest\\n percentage over 65\", 'value': data_index['age65over'][\"low20\"]['deathscumR'] || 0,\r\n                                                                        'ez': data_index['age65over'][\"low20\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Q2\", 'value': data_index['age65over'][\"Q2\"]['deathscumR'] || 0,\r\n                                                                        'ez': data_index['age65over'][\"Q2\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Q3\", 'value': data_index['age65over'][\"Q3\"]['deathscumR'] || 0,\r\n                                                                        'ez': data_index['age65over'][\"Q3\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Q4\", 'value': data_index['age65over'][\"Q4\"]['deathscumR'] || 0,\r\n                                                                        'ez': data_index['age65over'][\"Q4\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Counties with highest\\n percentage over 65\", 'value': data_index['age65over'][\"high20\"]['deathscumR'] || 0,\r\n                                                                        'ez': data_index['age65over'][\"high20\"]['county_list']\r\n                                                                    }\r\n                                                                ]}\r\n                                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"18px\", fill: \"#000000\" }} />}\r\n                                                                style={{\r\n                                                                    data: {\r\n                                                                        fill: ({ datum }) => datum.ez.includes(countyFipsa65) ? countyColor : mortalityColor[1]\r\n                                                                    }\r\n                                                                }}\r\n                                                                x=\"key\"\r\n                                                                y=\"value\"\r\n                                                            />\r\n                                                        </VictoryChart>\r\n\r\n                                                    </Grid.Column>\r\n                                                </Grid.Row>\r\n\r\n                                                <Grid.Row style={{fontFamily: 'lato', fontSize: 18, color: dataupColor, paddingTop: '1.5em', paddingLeft: '4em', paddingRight: '2em' }} centered>\r\n                                                    Data updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' : (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}\r\n                                                    </Grid.Row>\r\n                                                    <Grid.Row style={{paddingLeft: '4.9em', paddingRight: '2em' }}>\r\n                                                    <Accordion defaultActiveIndex={1} panels={[\r\n                                                        {\r\n                                                            key: 'acquire-dog',\r\n                                                            title: {\r\n                                                                content: <u style={{ fontFamily: 'lato', fontSize: 18, color: dataupColor }}>About the data</u>,\r\n                                                                icon: 'dropdown',\r\n                                                            },\r\n                                                            content: {\r\n                                                                content: (\r\n                                                                    <p style={{ textAlign: \"justify\", fontFamily: 'lato', fontSize: 18 }}>\r\n                                                                        This chart shows the number of COVID-19 cases (top chart) and deaths (bottom chart) per 100,000 residents by county ranking on percentage of population over 65 years.\r\n                                                                        The y-axis displays percentage population over 65 rankings based on quintiles (groups of 20%). The x-axis displays the average number\r\n                                                                        of COVID-19 cases (top chart) or deaths (bottom chart) per 100,000 that occurred in each group of counties ranked by percentage population over 65 years. The ranking classified counties into five groups designed to be of equal size, so that the lowest\r\n                                                                        quintile contains the counties with values in the 0%-20% range for this county characteristic, and the highest quintile contains counties with values in the 80%-100% range for this county characteristic. Q2 indicates counties\r\n                                                                        in the 20%-40% range, Q3 indicates counties in the 40%-60% range, and Q4 indicates counties in the 60%-80% range.\r\n                                                                    </p>\r\n                                                                ),\r\n                                                            },\r\n                                                        }\r\n                                                    ]\r\n\r\n                                                    } />\r\n\r\n                                                </Grid.Row>\r\n\r\n\r\n                                            </Grid.Column>\r\n                                        </Grid>\r\n\r\n                                        <hr\r\n                                            style={{\r\n                                                color: '#44a0e2',\r\n                                                backgroundColor: '#44a0e2',\r\n                                                height: 5,\r\n                                                width: '100%'\r\n                                            }}\r\n                                        />\r\n                                        <Grid id='male' style={{ paddingBottom: '2em' }}>\r\n                                            <Grid.Row>\r\n                                                <div id='male' style={{ width: \"100%\", height: \"100%\" }}>\r\n                                                    <Header as='h2' style={{ textAlign: 'center', color: 'black', fontSize: \"19pt\", paddingTop: '1em', paddingBottom: '1em' }}>\r\n                                                        <Header.Content> COVID-19 by Percentage of Male</Header.Content>\r\n                                                    </Header>\r\n                                                </div>\r\n                                            </Grid.Row>\r\n                                            <Grid.Column width={7} style={{ paddingLeft: \"2\", paddingLeft: \"1\" }}>\r\n                                                <Grid.Row style={{ paddingTop: \"0\" }}>\r\n                                                    <Header as='h2' style={{ fontWeight: 600, fontSize: \"16pt\", lineHeight: \"16pt\" }}>\r\n                                                        <Header.Content>\r\n                                                            Georgia Percentage of Male Map\r\n                                        </Header.Content>\r\n                                                    </Header>\r\n                                                </Grid.Row>\r\n                                                <Grid.Row style={{ paddingTop: \"0\", paddingBottom: '1em' }}>\r\n                                                    <svg width=\"600\" height=\"80\">\r\n                                                        {_.map(colorPalette2, (color, i) => {\r\n                                                            return <rect key={i} x={110 + 40 * i} y={40} width=\"40\" height=\"20\" style={{ fill: color, strokeWidth: 1, stroke: color }} />\r\n                                                        })}\r\n                                                        <text x={20} y={50} style={{ fontSize: '0.8em' }}>Least vulnerable</text>\r\n                                                        <text x={20} y={59} style={{ fontSize: '0.8em' }}>counties</text>\r\n                                                        <text x={160 + 40 * (colorPalette2.length - 1)} y={50} style={{ fontSize: '0.8em' }}>Highest vulnerable</text>\r\n                                                        <text x={160 + 40 * (colorPalette2.length - 1)} y={59} style={{ fontSize: '0.8em' }}>counties</text>\r\n                                                        {_.map(thresh_chara['male'], (splitpoint, i) => {\r\n                                                            return <text key={i} x={105 + 40 * (i)} y={35} style={{ fontSize: '0.7em' }}> {thresh_chara['male'][i]}</text>\r\n                                                        })}\r\n                                                    </svg>\r\n                                                    <ComposableMap projection=\"geoAlbersUsa\"\r\n                                                        projectionConfig={{ scale: `${config.scale1}` }}\r\n                                                        width={600}\r\n                                                        height={600}\r\n                                                        data-tip=\"\"\r\n                                                        offsetX={config.offsetX1}\r\n                                                        offsetY={config.offsetY2}>\r\n                                                        <Geographies data-tip='male' data-for='male' geography={config.url}>\r\n                                                            {({ geographies }) => geographies.map(geo =>\r\n                                                                <Geography\r\n                                                                    key={geo.rsmKey}\r\n                                                                    geography={geo}\r\n\r\n                                                                    style={{\r\n                                                                        default: {\r\n                                                                            //  fill: \"#ECEFF1\",\r\n                                                                            stroke: \"#607D8B\",\r\n                                                                            strokeWidth: 0.95,\r\n                                                                            outline: \"none\",\r\n                                                                        },\r\n                                                                        pressed: {\r\n                                                                            outline: \"none\",\r\n                                                                        }\r\n                                                                    }}\r\n                                                                    onMouseEnter={() => {\r\n\r\n                                                                        setCountyFipsmale(geo.properties.COUNTYFP);\r\n                                                                        setCountyNamemale(fips2county[stateFips + geo.properties.COUNTYFP]);\r\n                                                                        setTooltipContentmale(fips2county[stateFips + geo.properties.COUNTYFP]);\r\n\r\n                                                                    }}\r\n                                                                    onMouseLeave={() => {\r\n                                                                        setTooltipContent(\"\")\r\n                                                                    }}\r\n                                                                    fill={countyFipsmale === geo.properties.COUNTYFP ? countyColor :\r\n                                                                        ((colorMale && dataCha[stateFips + geo.properties.COUNTYFP] &&\r\n                                                                            dataCha[stateFips + geo.properties.COUNTYFP]['male'] && dataCha[stateFips + geo.properties.COUNTYFP]['male'] > 0) ?\r\n                                                                            colorMale[dataCha[stateFips + geo.properties.COUNTYFP]['male']] :\r\n                                                                            (colorMale && dataCha[stateFips + geo.properties.COUNTYFP] && dataCha[stateFips + geo.properties.COUNTYFP]['male'] === 0) ? '#e1dce2' : '#FFFFFF')}\r\n                                                                />\r\n                                                            )}\r\n                                                        </Geographies>\r\n                                                    </ComposableMap>\r\n                                                    {/* <svg width=\"600\" height=\"80\">\r\n                                                        <rect key={0} x={50} y={0} width=\"20\" height=\"20\" style={{ fill: colorPalette[0], strokeWidth: 1, stroke: colorPalette[0] }} />\r\n                                                        <text x={80} y={15} style={{ fontSize: '1em' }}>0 {'-'} 47.73</text>\r\n                                                        <rect key={1} x={200} y={0} width=\"20\" height=\"20\" style={{ fill: colorPalette[1], strokeWidth: 1, stroke: colorPalette[1] }} />\r\n                                                        <text x={230} y={15} style={{ fontSize: '1em' }}>47.73 {'-'} 48.52</text>\r\n                                                        <rect key={2} x={360} y={0} width=\"20\" height=\"20\" style={{ fill: colorPalette[2], strokeWidth: 1, stroke: colorPalette[2] }} />\r\n                                                        <text x={390} y={15} style={{ fontSize: '1em' }}>48.52 {'-'} 49.12</text>\r\n\r\n                                                        <rect key={3} x={130} y={40} width=\"20\" height=\"20\" style={{ fill: colorPalette[3], strokeWidth: 1, stroke: colorPalette[3] }} />\r\n                                                        <text x={160} y={55} style={{ fontSize: '1em' }}>49.12 {'-'} 50.11</text>\r\n                                                        <rect key={4} x={280} y={40} width=\"20\" height=\"20\" style={{ fill: colorPalette[4], strokeWidth: 1, stroke: colorPalette[4] }} />\r\n                                                        <text x={310} y={55} style={{ fontSize: '1em' }}>50.11 {'+'}</text>\r\n\r\n                                                    </svg> */}\r\n                                                </Grid.Row>\r\n                                                <Grid.Row style={{ fontFamily: 'lato', fontSize: 18, color: dataupColor, paddingTop: '0.5em', paddingLeft: '4em', paddingRight: '2em' }} centered>\r\n                                                    Data updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' : (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}\r\n                                                </Grid.Row>\r\n                                                <Grid.Row style={{ paddingTop: '0em', paddingLeft: '4.9em', paddingRight: '2em' }}>\r\n                                                    <Accordion defaultActiveIndex={1} panels={[\r\n                                                        {\r\n                                                            key: 'acquire-dog',\r\n                                                            title: {\r\n                                                                content: <u style={{ fontFamily: 'lato', fontSize: 18, color: dataupColor }}>About the data</u>,\r\n                                                                icon: 'dropdown',\r\n                                                            },\r\n                                                            content: {\r\n                                                                content: (\r\n                                                                    <p style={{ textAlign: \"justify\", fontFamily: 'lato', fontSize: 18 }}>\r\n                                                                        This map shows each Georgia county according to its percentage of male.\r\n                                                                        County rankings are based on percentage male quintile, which ranks each county in one of five\r\n                                                                        groups depending on percentage male. The ranking classified counties into five groups designed to be of equal size, so that the lowest quintile contains the counties with values in the 0%-20% range for this county\r\n                                                                        characteristic, and the highest quintile contains counties with values in the 80%-100% range for this county characteristic.\r\n                                                                    </p>\r\n                                                                ),\r\n                                                            },\r\n                                                        }\r\n                                                    ]\r\n\r\n                                                    } />\r\n\r\n                                                </Grid.Row>\r\n\r\n                                            </Grid.Column>\r\n\r\n                                            <Grid.Column width={9} style={{ paddingLeft: \"2\", paddingLeft: \"1\" }}>\r\n                                                <Grid.Row columns={1} style={{ paddingBottom: \"2\" }}>\r\n                                                    <Grid.Column style={{ paddingTop: 0, paddingBottom: 3 }}>\r\n                                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"16pt\", lineHeight: \"16pt\" }}>\r\n                                                            <Header.Content>\r\n                                                                COVID-19 Case Rate by Percentage of Male Population\r\n                                                </Header.Content>\r\n                                                        </Header>\r\n                                                        <VictoryChart\r\n                                                            theme={VictoryTheme.material}\r\n                                                            width={730}\r\n                                                            height={270}\r\n                                                            domainPadding={20}\r\n                                                            minDomain={{ y: props.ylog ? 1 : 0 }}\r\n                                                            padding={{ left: 305, right: 60, top: 10, bottom: 35 }}\r\n                                                            style={{ fontSize: \"14pt\" }}\r\n                                                            containerComponent={<VictoryContainer responsive={false} />}\r\n                                                        >\r\n                                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\r\n                                                            <VictoryAxis dependentAxis\r\n                                                                label={\"COVID-19 Cases per 100,000 Residents\"}\r\n                                                                style={{\r\n                                                                    ticks: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, axisLabel: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' },\r\n                                                                    labels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' }, tickLabels: { fontSize: \"0px\", fill: '#000000', padding: 10, fontFamily: 'lato' }\r\n                                                                }} />\r\n                                                            <VictoryBar\r\n                                                                horizontal\r\n                                                                barRatio={0.75}\r\n                                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(0))}\r\n                                                                data={[\r\n                                                                    {\r\n                                                                        key: \"Counties with lowest\\n percentage male population\", 'value': data_index['male'][\"low20\"]['casescumR'] || 0,\r\n                                                                        'ez': data_index['male'][\"low20\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Q2\", 'value': data_index['male'][\"Q2\"]['casescumR'] || 0,\r\n                                                                        'ez': data_index['male'][\"Q2\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Q3\", 'value': data_index['male'][\"Q3\"]['casescumR'] || 0,\r\n                                                                        'ez': data_index['male'][\"Q3\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Q4\", 'value': data_index['male'][\"Q4\"]['casescumR'] || 0,\r\n                                                                        'ez': data_index['male'][\"Q4\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Counties with highest\\n percentage male population\", 'value': data_index['male'][\"high20\"]['casescumR'] || 0,\r\n                                                                        'ez': data_index['male'][\"high20\"]['county_list']\r\n                                                                    }\r\n                                                                ]}\r\n                                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"20px\", fill: \"#000000\" }} />}\r\n                                                                style={{\r\n                                                                    data: {\r\n                                                                        fill: ({ datum }) => datum.ez.includes(countyFipsmale) ? countyColor : casesColor[1]\r\n                                                                    }\r\n                                                                }}\r\n                                                                x=\"key\"\r\n                                                                y=\"value\"\r\n                                                            />\r\n                                                        </VictoryChart>\r\n                                                    </Grid.Column>\r\n                                                </Grid.Row>\r\n\r\n                                                <Grid.Row columns={1} style={{ paddingTop: '3.5em' }}>\r\n                                                    <Grid.Column style={{ paddingTop: 15, paddingBottom: 3 }}>\r\n                                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"16pt\", lineHeight: \"16pt\", paddingLeft: \"1em\" }}>\r\n                                                            <Header.Content>\r\n                                                                COVID-19 Death Rate by Percentage of Male Population\r\n                                            </Header.Content>\r\n                                                        </Header>\r\n                                                        <VictoryChart\r\n                                                            theme={VictoryTheme.material}\r\n                                                            width={730}\r\n                                                            height={270}\r\n                                                            domainPadding={20}\r\n                                                            minDomain={{ y: props.ylog ? 1 : 0 }}\r\n                                                            padding={{ left: 305, right: 30, top: 10, bottom: 35 }}\r\n                                                            style={{ fontSize: \"14pt\" }}\r\n                                                            containerComponent={<VictoryContainer responsive={false} />}\r\n                                                        >\r\n                                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\r\n                                                            <VictoryAxis dependentAxis\r\n                                                                label='COVID-19 Deaths per 100,000 Residents'\r\n                                                                style={{\r\n                                                                    ticks: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, axisLabel: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' },\r\n                                                                    labels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' }, tickLabels: { fontSize: \"0px\", fill: '#000000', padding: 10, fontFamily: 'lato' }\r\n                                                                }} />\r\n                                                            <VictoryBar\r\n                                                                horizontal\r\n                                                                barRatio={0.75}\r\n                                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(0))}\r\n                                                                data={[\r\n                                                                    {\r\n                                                                        key: \"Counties with lowest\\n percentage male population\", 'value': data_index['male'][\"low20\"]['deathscumR'] || 0,\r\n                                                                        'ez': data_index['male'][\"low20\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Q2\", 'value': data_index['male'][\"Q2\"]['deathscumR'] || 0,\r\n                                                                        'ez': data_index['male'][\"Q2\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Q3\", 'value': data_index['male'][\"Q3\"]['deathscumR'] || 0,\r\n                                                                        'ez': data_index['male'][\"Q3\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Q4\", 'value': data_index['male'][\"Q4\"]['deathscumR'] || 0,\r\n                                                                        'ez': data_index['male'][\"Q4\"]['county_list']\r\n                                                                    },\r\n                                                                    {\r\n                                                                        key: \"Counties with highest\\n percentage male population\", 'value': data_index['male'][\"high20\"]['deathscumR'] || 0,\r\n                                                                        'ez': data_index['male'][\"high20\"]['county_list']\r\n                                                                    }\r\n                                                                ]}\r\n                                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"18px\", fill: \"#000000\" }} />}\r\n                                                                style={{\r\n                                                                    data: {\r\n                                                                        fill: ({ datum }) => datum.ez.includes(countyFipsmale) ? countyColor : mortalityColor[1]\r\n                                                                    }\r\n                                                                }}\r\n                                                                x=\"key\"\r\n                                                                y=\"value\"\r\n                                                            />\r\n                                                        </VictoryChart>\r\n\r\n                                                    </Grid.Column>\r\n                                                </Grid.Row>\r\n\r\n                                                <Grid.Row style={{fontFamily: 'lato', fontSize: 18, color: dataupColor, paddingTop: '2.4em', paddingLeft: '4em', paddingRight: '2em' }} centered>\r\n                                                        Data updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' : (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}\r\n                                                        </Grid.Row>\r\n                                                        <Grid.Row style={{paddingLeft: '4.9em', paddingRight: '2em' }}>\r\n                                                        <Accordion defaultActiveIndex={1} panels={[\r\n\r\n                                                        {\r\n                                                            key: 'acquire-dog',\r\n                                                            title: {\r\n                                                                content: <u style={{ fontFamily: 'lato', fontSize: 18, color: dataupColor }}>About the data</u>,\r\n                                                                icon: 'dropdown',\r\n                                                            },\r\n                                                            content: {\r\n                                                                content: (\r\n                                                                    <p style={{ textAlign: \"justify\", fontFamily: 'lato', fontSize: 18 }}>\r\n                                                                        This chart shows the number of COVID-19 cases (top chart) and deaths (bottom chart) per 100,000 residents by percentage male population ranking.\r\n                                                                        The y-axis displays percentage male rankings based on quintiles (groups of 20%). The x-axis displays the average number\r\n                                                                        of COVID-19 cases (top chart) or deaths (bottom chart) per 100,000 that occurred in each group of counties ranked by percentage male. The ranking classified counties into five groups designed to be of equal size, so that the lowest\r\n                                                                        quintile contains the counties with values in the 0%-20% range for this county characteristic, and the highest quintile contains counties with values in the 80%-100% range for this county characteristic. Q2 indicates counties\r\n                                                                        in the 20%-40% range, Q3 indicates counties in the 40%-60% range, and Q4 indicates counties in the 60%-80% range.\r\n                                                                    </p>\r\n                                                                ),\r\n                                                            },\r\n                                                        }\r\n                                                    ]\r\n\r\n                                                    } />\r\n\r\n                                                </Grid.Row>\r\n\r\n                                            </Grid.Column>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid.Column>\r\n\r\n                            </Grid>\r\n\r\n                        </div>\r\n                    }\r\n                    <Notes />\r\n                </Container>\r\n                <ReactTooltip id='cvi'><font size=\"+2\"><b >{countyNamecvi}</b> </font> <br />\r\n                    <b>CCVI</b>: {dataUs[stateFips + countyFipscvi]['cvi'].toFixed(2)} <br />\r\n                    <b>Total Cases</b>: {data[stateFips + countyFipscvi]['casescum'] >= 0 ? data[stateFips + countyFipscvi]['casescum'].toFixed(0) : \"N/A\"} <br />\r\n                    <b>Total Deaths</b>: {data[stateFips + countyFipscvi]['deathscum'] >= 0 ? data[stateFips + countyFipscvi]['deathscum'].toFixed(0) : \"N/A\"} <br />\r\n                </ReactTooltip>\r\n\r\n                <ReactTooltip id='si'><font size=\"+2\"><b >{countyNamesi}</b> </font> <br />\r\n                    <b>SI</b>: {dataUs[stateFips + countyFipssi]['si'].toFixed(0)} <br />\r\n                    <b>Total Cases</b>: {data[stateFips + countyFipssi]['casescum'] >= 0 ? data[stateFips + countyFipssi]['casescum'].toFixed(0) : \"N/A\"} <br />\r\n                    <b>Total Deaths</b>: {data[stateFips + countyFipssi]['deathscum'] >= 0 ? data[stateFips + countyFipssi]['deathscum'].toFixed(0) : \"N/A\"} <br />\r\n                </ReactTooltip>\r\n\r\n                <ReactTooltip id='urb'><font size=\"+2\"><b >{countyNameubr}</b> </font> <br />\r\n                    <b>Metropolitan Status</b>: {dataCha[stateFips + countyFipsubr]['_013_Urbanization']} <br />\r\n                    <b>Total Cases</b>: {data[stateFips + countyFipsubr]['casescum'] >= 0 ? data[stateFips + countyFipsubr]['casescum'].toFixed(0) : \"N/A\"} <br />\r\n                    <b>Total Deaths</b>: {data[stateFips + countyFipsubr]['deathscum'] >= 0 ? data[stateFips + countyFipsubr]['deathscum'].toFixed(0) : \"N/A\"} <br />\r\n                </ReactTooltip>\r\n\r\n                <ReactTooltip id='black'><font size=\"+2\"><b >{countyNameblack}</b> </font> <br />\r\n                    <b>Percentage African American</b>: {dataCha[stateFips + countyFipsblack]['black'].toFixed(0)} <br />\r\n                    <b>Total Cases</b>: {data[stateFips + countyFipsblack]['casescum'] >= 0 ? data[stateFips + countyFipsblack]['casescum'].toFixed(0) : \"N/A\"} <br />\r\n                    <b>Total Deaths</b>: {data[stateFips + countyFipsblack]['deathscum'] >= 0 ? data[stateFips + countyFipsblack]['deathscum'].toFixed(0) : \"N/A\"} <br />\r\n                </ReactTooltip>\r\n\r\n                <ReactTooltip id='his'><font size=\"+2\"><b >{countyNamehis}</b> </font> <br />\r\n                    <b>Percentage hispanic</b>: {dataCha[stateFips + countyFipshis]['minority'].toFixed(0)} <br />\r\n                    <b>Total Cases</b>: {data[stateFips + countyFipshis]['casescum'] >= 0 ? data[stateFips + countyFipshis]['casescum'].toFixed(0) : \"N/A\"} <br />\r\n                    <b>Total Deaths</b>: {data[stateFips + countyFipshis]['deathscum'] >= 0 ? data[stateFips + countyFipshis]['deathscum'].toFixed(0) : \"N/A\"} <br />\r\n                </ReactTooltip>\r\n                <ReactTooltip id='pov'><font size=\"+2\"><b >{countyNamepov}</b> </font> <br />\r\n                    <b>Percentage population in poverty</b>: {dataCha[stateFips + countyFipspov]['poverty'].toFixed(0)} <br />\r\n                    <b>Total Cases</b>: {data[stateFips + countyFipspov]['casescum'] >= 0 ? data[stateFips + countyFipspov]['casescum'].toFixed(0) : \"N/A\"} <br />\r\n                    <b>Total Deaths</b>: {data[stateFips + countyFipspov]['deathscum'] >= 0 ? data[stateFips + countyFipspov]['deathscum'].toFixed(0) : \"N/A\"} <br />\r\n                </ReactTooltip>\r\n                <ReactTooltip id='dia'><font size=\"+2\"><b >{countyNamedia}</b> </font> <br />\r\n                    <b>Percentage population with diabetes</b>: {dataCha[stateFips + countyFipsdia]['diabetes'].toFixed(0)} <br />\r\n                    <b>Total Cases</b>: {data[stateFips + countyFipsdia]['casescum'] >= 0 ? data[stateFips + countyFipsdia]['casescum'].toFixed(0) : \"N/A\"} <br />\r\n                    <b>Total Deaths</b>: {data[stateFips + countyFipsdia]['deathscum'] >= 0 ? data[stateFips + countyFipsdia]['deathscum'].toFixed(0) : \"N/A\"} <br />\r\n                </ReactTooltip>\r\n                <ReactTooltip id='age'><font size=\"+2\"><b >{countyNamea65}</b> </font> <br />\r\n                    <b>Percentage population age over 65</b>: {dataCha[stateFips + countyFipsa65]['age65over'].toFixed(0)} <br />\r\n                    <b>Total Cases</b>: {data[stateFips + countyFipsa65]['casescum'] >= 0 ? data[stateFips + countyFipsa65]['casescum'].toFixed(0) : \"N/A\"} <br />\r\n                    <b>Total Deaths</b>: {data[stateFips + countyFipsa65]['deathscum'] >= 0 ? data[stateFips + countyFipsa65]['deathscum'].toFixed(0) : \"N/A\"} <br />\r\n                </ReactTooltip>\r\n                <ReactTooltip id='male'><font size=\"+2\"><b >{countyNamemale}</b> </font> <br />\r\n                    <b>Percentage male</b>: {dataCha[stateFips + countyFipsmale]['male'].toFixed(0)} <br />\r\n                    <b>Total Cases</b>: {data[stateFips + countyFipsmale]['casescum'] >= 0 ? data[stateFips + countyFipsmale]['casescum'].toFixed(0) : \"N/A\"} <br />\r\n                    <b>Total Deaths</b>: {data[stateFips + countyFipsmale]['deathscum'] >= 0 ? data[stateFips + countyFipsmale]['deathscum'].toFixed(0) : \"N/A\"} <br />\r\n                </ReactTooltip>\r\n                <ReactTooltip id='ga'> <font size=\"+2\"><b >{countyName}</b> </font> <br />\r\n                    <b>Total Cases</b>: {data[stateFips + countyFips]['casescum'] >= 0 ? data[stateFips + countyFips]['casescum'].toFixed(0) : \"N/A\"} <br />\r\n                    <b>Total Deaths</b>: {data[stateFips + countyFips]['deathscum'] >= 0 ? data[stateFips + countyFips]['deathscum'].toFixed(0) : \"N/A\"} <br />\r\n                    <b>Total case per 100k</b>: {data[stateFips + countyFips]['casescumR'] >= 0 ? data[stateFips + countyFips]['casescumR'].toFixed(0) : \"N/A\"} <br />\r\n                    <b>Total Deaths per 100k</b>: {data[stateFips + countyFips]['deathscumR'] >= 0 ? data[stateFips + countyFips]['deathscumR'].toFixed(0) : 'N/A'} <br />\r\n                    <b>Last 14-day Cases per 100k</b>: {data[stateFips + countyFips]['casescum14dayR'] >= 0 ? data[stateFips + countyFips]['casescum14dayR'].toFixed(0) : \"N/A\"} <br />\r\n                    <b>Click to see county-level data.</b> </ReactTooltip>\r\n            </div>\r\n        );\r\n    }\r\n    else {\r\n        return <Loader active inline='centered' />\r\n    }\r\n}","import React, { useEffect, useState } from 'react'\nimport { Container, Grid, Breadcrumb, Header, Loader, List, Table, Divider, Popup } from 'semantic-ui-react'\nimport AppBar from './AppBar';\nimport Geographies from './Geographies';\nimport Geography from './Geography';\nimport ComposableMap from './ComposableMap';\nimport {\n  VictoryChart,\n  VictoryTooltip,\n  VictoryVoronoiContainer,\n  VictoryContainer,\n  VictoryGroup,\n  VictoryBar,\n  VictoryTheme,\n  VictoryAxis,\n  VictoryLegend,\n  VictoryLine,\n  VictoryLabel,\n  VictoryScatter,\n  VictoryPie\n} from 'victory';\n\nimport { useParams, useHistory } from 'react-router-dom';\nimport LazyHero from 'react-lazy-hero';\n\nimport Notes from './Notes';\nimport ReactTooltip from \"react-tooltip\";\nimport fips2county from './fips2county.json'\nimport configs from \"./state_config.json\";\nimport configscounty from \"./county_config.json\";\nimport _ from 'lodash';\nimport * as d3 from 'd3-geo'\nimport Chart from \"react-google-charts\";\nimport { scaleQuantile, scaleQuantize } from \"d3-scale\";\n\nconst countyColor = '#f2a900';\nconst stateColor = '#bdbfc1';\nconst nationColor = '#d9d9d7';\nconst colorPalette = [\n  \"#e1dce2\",\n  \"#d3b6cd\",\n  \"#bf88b5\",\n  \"#af5194\",\n  \"#99528c\",\n  \"#633c70\",\n];\n\n\nfunction ScatterChart(props) {\n\n  return (\n    <VictoryChart\n      width={400}\n      height={300}\n      scale={{ x: props.xlog ? 'log' : 'linear', y: props.ylog ? 'log' : 'linear' }}\n      minDomain={{ y: props.ylog ? 1 : 0 }}\n      padding={{ left: 80, right: 10, top: 50, bottom: 50 }}>\n      {props.showLegend && <VictoryLegend\n        x={10} y={10}\n        orientation=\"horizontal\"\n        colorScale={[stateColor, countyColor]}\n        data={[\n          { name: ('Other counties in ' + props.stateName) }, { name: props.countyName }\n        ]}\n      />}\n      <VictoryScatter\n        data={_.filter(_.map(props.data, (d, k) => { d.fips = k; return d; }), (d) => (\n          d.fips.length === 5 &&\n          d.fips.substring(0, 2) === props.stateFips &&\n          d[props.x] && d[props.y]))}\n        sortKey={(d) => d.fips === (props.stateFips + props.countyFips)}\n        style={{\n          data: {\n            fill: ({ datum }) => datum.fips === (props.stateFips + props.countyFips) ? countyColor : stateColor,\n            fillOpacity: ({ datum }) => datum.fips === (props.stateFips + props.countyFips) ? 1.0 : 0.7\n          }\n        }}\n        size={4}\n        x={props.x}\n        y={props.y}\n      />\n      <VictoryAxis label={props.varMap[props.x] ? props.varMap[props.x].name : props.x}\n        tickCount={4}\n        tickFormat={(y) => (props.rescaleX ? (Math.round(y / 1000) + 'k') : (Math.round(y * 100) / 100))} />\n      <VictoryAxis dependentAxis label={props.varMap[props.y] ? props.varMap[props.y].name : props.y}\n        style={{ axisLabel: { padding: 40 } }}\n        tickCount={5}\n        tickFormat={(y) => (Math.round(y * 100) / 100)} />\n    </VictoryChart>);\n\n}\n\nfunction numberWithCommas(x) {\n  x = x.toString();\n  var pattern = /(-?\\d+)(\\d{3})/;\n  while (pattern.test(x))\n    x = x.replace(pattern, \"$1,$2\");\n  return x;\n}\nconst sectionStyle1 = {\n  width: \"100%\",\n  height: \"100%\",\n  backgroundSize: 'auto auto',\n  backgroundImage: `url(\"/Emory_COVID_header_LightBlue_original.jpg\")`\n};\nconst sectionStyle2 = {\n  width: \"100%\",\n  height: \"100%\",\n  backgroundSize: 'cover',\n  backgroundImage: `url(\"/CoronaVirus_LightBlue.jpg\")`\n};\n\nfunction BarChart(props) {\n  const colors = {\n    \"3\": '#024174',\n    '2': \"#99bbcf\",\n    '1': '#337fb5'\n};\nvar numm\nif (props.cate==='Cases'){\n  numm = '1'\n}\nelse{\n  numm = '3'\n}\n  if (props.var_num === 4) {\n    return (\n      <VictoryChart\n        theme={VictoryTheme.material}\n        width={props.width || 650}\n        height={300}\n        domainPadding={props.pad || 10}\n        scale={{ y: props.ylog ? 'log' : 'linear' }}\n        minDomain={{ y: props.ylog ? 1 : 0 }}\n        padding={{ left: 79, right: 40, top: 60, bottom: 50 }}\n        containerComponent={<VictoryContainer responsive={false} />}\n      >\n        <VictoryLabel style={{\n          fontSize: 20, paddingBottom: '0.5em'\n        }} text={props.title} x={(props.width || 560) / 2} y={20} textAnchor=\"middle\" />\n        <VictoryAxis style={{\n          tickLabels: { fontSize: 18, padding: 2 }\n        }} />\n        <VictoryAxis dependentAxis\n          domain={[0, 1]}\n          style={{\n            tickLabels: { fontSize: 18, padding: 2 }\n          }}\n          tickFormat={(y) => (y <= 1 ? y * 100 : (y / 1000 + 'k'))} />\n        <VictoryLegend x={80} y={40}\n          orientation=\"horizontal\"\n          gutter={1}\n          // style={{ border: { stroke: \"black\" } }}\n          data={[\n            { name: `Percentage of ${props.cate}`, symbol: { fill: colors[numm], type: \"square\" } },\n            { name: \"Percentage of Population\", symbol: { fill: colors['2'], type: \"square\" } },\n          ]}\n        />\n        <VictoryGroup offset={20}\n          colorScale={\"qualitative\"}\n        >\n\n          <VictoryBar\n            alignment=\"start\"\n            barWidth={20}\n            // labels={({ datum }) => (Math.round(datum.value * 100) / 100)}\n            labels={({ datum }) => `${props.cate} Percent: ${(datum.value* 100).toFixed(0)}%`}\n            data={[{ key: props.keyv[0], 'value': props.data[props.stateFips + props.countyFips][props.var[0]] || 0, 'colors': props.co },\n            { key: props.keyv[1], 'value': props.data[props.stateFips + props.countyFips][props.var[1]] || 0, 'colors': props.co },\n            { key: props.keyv[2], 'value': props.data[props.stateFips + props.countyFips][props.var[2]] || 0, 'colors': props.co },\n            { key: props.keyv[3], 'value': props.data[props.stateFips + props.countyFips][props.var[3]] || 0, 'colors': props.co }]}\n            labelComponent={<VictoryTooltip\n              orientation=\"top\"\n              style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'black' }}\n              constrainToVisibleArea\n              // labelComponent={<VictoryLabel dx={-60} textAnchor='start' />}\n              flyoutStyle={{ fill: colors['1'], fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\n            />}\n            style={{\n              data: {\n                fill: ({ datum }) => colors[datum.colors],\n                fillOpacity: 2\n              }\n            }}\n            x=\"key\"\n            y=\"value\"\n          />\n          <VictoryBar\n            alignment=\"start\"\n            barWidth={20}\n            data={[{ key: props.keyv[0], 'value': props.data[props.stateFips + props.countyFips][props.var1[0]] || 0, 'colors': '2' },\n            { key: props.keyv[1], 'value': props.data[props.stateFips + props.countyFips][props.var1[1]] || 0, 'colors': '2' },\n            { key: props.keyv[2], 'value': props.data[props.stateFips + props.countyFips][props.var1[2]] || 0, 'colors': '2' },\n            { key: props.keyv[3], 'value': props.data[props.stateFips + props.countyFips][props.var1[3]] || 0, 'colors': '2' }]}\n            labels={({ datum }) =>\n              `Population Percent: ${(datum.value* 100).toFixed(0)}%`\n            }\n            labelComponent={<VictoryTooltip\n              orientation=\"top\"\n              style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'black' }}\n              constrainToVisibleArea\n              // labelComponent={<VictoryLabel dx={-50} textAnchor='start' />}\n              flyoutStyle={{ fill: \"grey\", fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\n            />}\n            style={{\n              data: {\n                fill: ({ datum }) => colors[datum.colors],\n                fillOpacity: 0.7\n              }\n            }}\n            x=\"key\"\n            y=\"value\"\n          />\n        </VictoryGroup>\n      </VictoryChart>);\n  }\n  else {\n    return (\n      <VictoryChart\n        theme={VictoryTheme.material}\n        width={props.width || 650}\n        height={300}\n        domainPadding={props.pad || 100}\n\n        scale={{ y: props.ylog ? 'log' : 'linear' }}\n        // minDomain={{ y: props.ylog ? 1 : 0 }}\n        maxDomain={{ y: 1 }}\n        // domain={{ y: [0, 1] }}\n        padding={{ left: 79, right: 40, top: 60, bottom: 50 }}\n        containerComponent={<VictoryContainer responsive={false} />}\n      >\n        <VictoryLabel style={{\n          fontSize: 20, paddingBottom: '5em'\n        }} text={props.title} x={(props.width || 560) / 2} y={20} textAnchor=\"middle\" />\n        <VictoryAxis style={{\n          tickLabels: { fontSize: 18, padding: 2 }\n        }} />\n        <VictoryAxis dependentAxis\n          // domain={{x: [0, 1]}}\n          style={{\n            tickLabels: { fontSize: 18, padding: 2 }\n          }}\n          tickFormat={(y) => (y <= 1 ? y * 100 : console.log(y))}\n        />\n        <VictoryLegend x={80} y={40}\n          orientation=\"horizontal\"\n          gutter={1}\n          // style={{ border: { stroke: \"black\" } }}\n          data={[\n            { name: `Percentage of ${props.cate}`, symbol: { fill: colors[numm], type: \"square\" } },\n            { name: \"Percentage of Population\", symbol: { fill: colors['2'], type: \"square\" } },\n          ]}\n        />\n        <VictoryGroup offset={20}\n          colorScale={\"qualitative\"}\n        >\n          <VictoryBar\n\n            barWidth={20}\n            // labels={({ datum }) => (Math.round(datum.value * 100) / 100)}\n            labels={({ datum }) => `${props.cate} Percent: ${(parseFloat(datum.value)* 100).toFixed(0) }%`}\n            data={[{ key: props.keyv[0], 'value': props.data[props.stateFips + props.countyFips][props.var[0]] || 0, 'colors': props.co },\n            { key: props.keyv[1], 'value': props.data[props.stateFips + props.countyFips][props.var[1]] || 0, 'colors': props.co }]}\n            labelComponent={<VictoryTooltip\n              orientation=\"top\"\n              style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'black' }}\n              constrainToVisibleArea\n              // labelComponent={<VictoryLabel dx={-60} textAnchor='start' />}\n              flyoutStyle={{ fill: colors['1'], fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\n            />}\n            style={{\n              data: {\n                fill: ({ datum }) => colors[datum.colors],\n                fillOpacity: 2\n              }\n            }}\n            x=\"key\"\n            y=\"value\"\n          />\n          <VictoryBar\n\n            barWidth={20}\n            data={[{ key: props.keyv[0], 'value': props.data[props.stateFips + props.countyFips][props.var1[0]] || 0, 'colors': '2' },\n            { key: props.keyv[1], 'value': props.data[props.stateFips + props.countyFips][props.var1[1]] || 0, 'colors': '2' }]}\n\n            labels={({ datum }) =>\n              `Population Percent: ${numberWithCommas(parseFloat(datum.value* 100).toFixed(0) )}%`\n            }\n            labelComponent={<VictoryTooltip\n              orientation=\"top\"\n              style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'black' }}\n              constrainToVisibleArea\n              // labelComponent={<VictoryLabel dx={-70} textAnchor='start' />}\n              flyoutStyle={{ fill: \"grey\", fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\n            />}\n            style={{\n              data: {\n                fill: ({ datum }) => colors[datum.colors],\n                fillOpacity: 0.7\n              }\n            }}\n            x=\"key\"\n            y=\"value\"\n          />\n        </VictoryGroup>\n      </VictoryChart>);\n  }\n  // console.log(props.data)\n\n}\n\nexport default function CountyReport() {\n\n  let { stateFips, countyFips } = useParams();\n  const allZero = arr => arr.every(v => Math.round(v, 2) === 0.00)\n  // const [countyFips, setCountyFips] = useState('121');\n  const [configsCounty, setConfig] = useState();\n  const [stateName, setStateName] = useState('Georgia');\n  const [countyName, setCountyName] = useState('');\n  const [dateCur, setDateCur] = useState();\n  const [zipCode, setZipCode] = useState('30328');\n  const [zipCodeH, setZipCodeH] = useState('30328');\n  const [zipCodeD, setZipCodeD] = useState('30328');\n  const [zipCodeFinal, setZipCodeFinal] = useState('30328');\n  const history = useHistory();\n  const [data, setData] = useState();\n  const [data_cases, setDataCG] = useState();\n  const [data_deaths, setDataDG] = useState();\n  const [datades_cases, setDatadesCG] = useState();\n  const [datades_deaths, setDatadesDG] = useState();\n  const [dataG, setDataG] = useState();\n  const [dataZip, setDataZip] = useState();\n  const [dataTS, setDataTS] = useState();\n  const [mapOut, setDataMapOut] = useState();\n\n  const [legendMax, setLegendMax] = useState([]);\n  const [legendMaxD, setLegendMaxD] = useState([]);\n\n  const [legendMax_graph, setLegendMaxGraph] = useState(0);\n\n  const [legendMin, setLegendMin] = useState([]);\n  const [legendMinD, setLegendMinD] = useState([]);\n\n  const [legendSplit, setLegendSplit] = useState([]);\n  const [legendSplitD, setLegendSplitD] = useState([]);\n  const [colorScale, setColorScale] = useState();\n  const [colorScaleD, setColorScaleD] = useState();\n\n\n  // const [metric, setMetric] = useState('mean7daycases');\n  const [tooltipContent, setTooltipContent] = useState('');\n  const [covidMetric, setCovidMetric] = useState({\n    casescum: 'N/A', deathscum: 'N/A', casescumR: 'N/A', deathscumR: 'N/A',\n    casesdailymean14: 'N/A', deathsdailymean14: 'N/A', casesdailymean14R: 'N/A', deathsdailymean14R: 'N/A', \"cfr\": 'N/A', \"cfrcompare\": '', t: 'n/a'\n  });\n  const [covidMetricLast, setCovidMetricLast] = useState({\n    casescum: 'N/A', deathscum: 'N/A', casescumR: 'N/A', deathscumR: 'N/A',\n    casesdailymean14: 'N/A', deathsdailymean14: 'N/A', casesdailymean14R: 'N/A', deathsdailymean14R: 'N/A', \"cfr\": 'N/A', \"cfrcompare\": '', t: 'n/a'\n  });\n  const [covidMetricGa, setCovidMetricGa] = useState({\n    casescum: 'N/A', deathscum: 'N/A', casescumR: 'N/A', deathscumR: 'N/A',\n    casesdailymean14: 'N/A', deathsdailymean14: 'N/A', casesdailymean14R: 'N/A', deathsdailymean14R: 'N/A', \"cfr\": 'N/A', \"cfrcompare\": '', t: 'n/a'\n  });\n  const [covidMetric14, setCovidMetric14] = useState({\n    casescum: 'N/A', deathscum: 'N/A', casescumR: 'N/A', deathscumR: 'N/A',\n    casesdailymean14: 'N/A', deathsdailymean14: 'N/A', casesdailymean14R: 'N/A', deathsdailymean14R: 'N/A', \"cfr\": 'N/A', \"cfrcompare\": '', t: 'n/a'\n  });\n  const [varMap, setVarMap] = useState({});\n  // const [countyFips, setCountyFips] = useState('');\n\n\n  const varNameMap = {\n    \"casescum\": { \"name\": 'cases', \"text\": \"The map shows the total number of confirmed COVID-19 cases in each zip code as of \" },\n    \"deathscum\": { \"name\": 'deaths', \"text\": \"The map shows the total number of confirmed COVID-19 deaths in each zip code as of \" },\n    \"casescumR\": { \"name\": 'cases per 100,000 residents', \"text\": \"The map shows the total number of confirmed COVID-19 cases per 100,000 residents in each zip code as of \" },\n    \"deathscumR\": { \"name\": 'deaths per 100,000 residents', \"text\": \"The map shows the total number of confirmed COVID-19 deaths per 100,000 residents in each zip code as of \" }\n  };\n\n  const [delayHandler, setDelayHandler] = useState(null)\n\n  useEffect(() => {\n\n    const configMatched = configscounty.find(s => s.countyfips === countyFips);\n\n    // let projection = d3.geoAlbersUsa();\n    // // let gps = [-85.504701, 34.855196]\n    // let gps = [-0.6, 38.7]\n    // console.log(projection.center)\n    // console.log(countyfips);\n\n    // console.log(configMatched);\n    if (!configMatched || !fips2county[stateFips + countyFips]) {\n      history.push('/');\n    } else {\n      setConfig(configMatched);\n      // setStateName(configMatched.name);\n      setCountyName(fips2county[stateFips + countyFips]);\n\n      fetch('/data/rawdata/variable_mapping.json').then(res => res.json())\n        .then(x => setVarMap(x));\n\n      fetch('/data/data_us.json').then(res => res.json())\n        .then(x => setData(x));\n      fetch('/data/data.json').then(res => res.json())\n        .then(x => setDateCur(x));\n      fetch('/data/data_cases_ga.json').then(res => res.json())\n        .then(x => setDataCG(x)\n        );\n      fetch('/data/data_deaths_ga.json').then(res => res.json())\n        .then(x => setDataDG(x));\n      fetch('/data/data_describe_cases.json').then(res => res.json())\n        .then(x => setDatadesCG(x));\n      fetch('/data/data_describe_deaths.json').then(res => res.json())\n        .then(x => setDatadesDG(x));\n      fetch('/data/data.json').then(res => res.json())\n        .then(x => setDataG(x));\n\n      fetch('/data/zipcode.json').then(res => res.json())\n        .then(x => setDataZip(x));\n\n      fetch('/data/timeseries13' + '.json').then(res => res.json())\n        .then(x => setDataTS(x));\n\n      fetch('/data/mapout' + '.json').then(res => res.json())\n        .then(x => setDataMapOut(x));\n\n      fetch('/data/timeseries13' + '.json').then(res => res.json())\n        .then(\n          x => {\n            // setDataTS(x);\n            var max = 0\n            var length = 0\n            _.each(x[stateFips + countyFips], d => {\n              length = length + 1\n              // console.log(d);\n              if (d['cases'] > max) {\n                max = d['cases'];\n              }\n\n            });\n            setLegendMaxGraph(max.toFixed(0));\n            // console.log(max.toFixed(0));\n          });\n\n      fetch('/data/zipcode.json').then(res => res.json())\n        .then(x => {\n          // setDataZip(x);\n\n          const cs = scaleQuantile()\n            .domain(_.map(_.filter(_.map(x, (d, k) => {\n              d.fips = k\n              return d\n            }),\n              d => (\n                (d.casescum >= 0 &&\n                  d.fips.length === 5 && Number(d.fips) >= 30001 && Number(d.fips) <= 31999) || (d.casescum >= 0 &&\n                    d.fips.length === 5 && Number(d.fips) >= 39800 && Number(d.fips) <= 39999))),\n              d => d['casescum']))\n            .range(colorPalette);\n\n          let scaleMap = {}\n          _.each(_.filter(_.map(x, (d, k) => {\n            d.fips = k\n            return d\n          }),\n            d => (\n              (d.casescum >= 0 &&\n                d.fips.length === 5 && Number(d.fips) >= 30001 && Number(d.fips) <= 31999) || (d.casescum >= 0 &&\n                  d.fips.length === 5 && Number(d.fips) >= 39800 && Number(d.fips) <= 39999)))\n            , d => {\n              scaleMap[d['casescum']] = cs(d['casescum'])\n            });\n          setColorScale(scaleMap);\n\n          var max = 0\n          var min = 100\n          var length = 0\n          _.each(x, d => {\n            // console.log(d.fips[0]);\n            if ((d['casescum'] > max && d.fips.length === 5 && Number(d.fips) >= 30001 && Number(d.fips) <= 31999) ||\n              (d['casescum'] > max && d.fips.length === 5 && Number(d.fips) >= 39800 && Number(d.fips) <= 39999)\n            ) {\n              max = d['casescum'];\n              // console.log(d.fips)\n            } else if ((d.fips.length === 5 && d['casescum'] < min && d['casescum'] >= 0 && Number(d.fips) >= 30001 && Number(d.fips) <= 31999) ||\n              (d.fips.length === 5 && d['casescum'] < min && d['casescum'] >= 0 && Number(d.fips) >= 39800 && Number(d.fips) <= 39999)\n            ) {\n              min = d['casescum']\n              // console.log(d.fips)\n            }\n\n          });\n          if (max > 999) {\n            max = (max / 1000).toFixed(0) + \"K\";\n            setLegendMax(max);\n          } else {\n            setLegendMax(max.toFixed(0));\n\n          }\n          setLegendMin(min.toFixed(0));\n\n          var split = scaleQuantile()\n            .domain(_.map(_.filter(_.map(x, (d, k) => {\n              d.fips = k\n              return d\n            }),\n              d => (\n                (d.casescum >= 0 &&\n                  d.fips.length === 5 && Number(d.fips) >= 30001 && Number(d.fips) <= 31999) || (d.casescum >= 0 &&\n                    d.fips.length === 5 && Number(d.fips) >= 39800 && Number(d.fips) <= 39999))),\n              d => d['casescum']))\n            .range(colorPalette);\n\n          setLegendSplit(split.quantiles());\n          // console.log(split.quantiles());\n        });\n\n\n    }\n  }, [countyFips]);\n\n  useEffect(() => {\n    fetch('/data/zipcode.json').then(res => res.json())\n      .then(x => {\n        const csD = scaleQuantile()\n          .domain(_.map(_.filter(_.map(x, (d, k) => {\n            d.fips = k\n            return d\n          }),\n            d => (\n              (d.deathscum >= 0 &&\n                d.fips.length === 5 && Number(d.fips) >= 30001 && Number(d.fips) <= 31999) || (d.deathscum >= 0 &&\n                  d.fips.length === 5 && Number(d.fips) >= 39800 && Number(d.fips) <= 39999))),\n            d => d['deathscum']))\n          .range(colorPalette);\n\n        let scaleMap = {}\n        _.each(_.filter(_.map(x, (d, k) => {\n          d.fips = k\n          return d\n        }),\n          d => (\n            (d.deathscum >= 0 &&\n              d.fips.length === 5 && Number(d.fips) >= 30001 && Number(d.fips) <= 31999) || (d.deathscum >= 0 &&\n                d.fips.length === 5 && Number(d.fips) >= 39800 && Number(d.fips) <= 39999)))\n          , d => {\n            scaleMap[d['deathscum']] = csD(d['deathscum'])\n          });\n        setColorScaleD(scaleMap);\n\n        var max = 0\n        var min = 100\n        _.each(x, d => {\n          // console.log(d.fips[0]);\n          if ((d['deathscum'] > max && d.fips.length === 5 && Number(d.fips) >= 30001 && Number(d.fips) <= 31999) ||\n            (d['deathscum'] > max && d.fips.length === 5 && Number(d.fips) >= 39800 && Number(d.fips) <= 39999)\n          ) {\n            max = d['deathscum'];\n            // console.log(max)\n          } else if ((d.fips.length === 5 && d['deathscum'] < min && d['deathscum'] >= 0 && Number(d.fips) >= 30001 && Number(d.fips) <= 31999) ||\n            (d.fips.length === 5 && d['deathscum'] < min && d['deathscum'] >= 0 && Number(d.fips) >= 39800 && Number(d.fips) <= 39999)\n          ) {\n            min = d['deathscum']\n            // console.log(d.fips)\n          }\n\n\n        });\n        if (max > 999) {\n          max = (max / 1000).toFixed(0) + \"K\";\n          setLegendMaxD(max);\n        } else {\n          setLegendMaxD(max.toFixed(0));\n\n        }\n        setLegendMinD(min.toFixed(0));\n\n        var split = scaleQuantile()\n          .domain(_.map(_.filter(_.map(x, (d, k) => {\n            d.fips = k\n            return d\n          }),\n            d => (\n              (d.deathscum >= 0 &&\n                d.fips.length === 5 && Number(d.fips) >= 30001 && Number(d.fips) <= 31999) || (d.deathscum >= 0 &&\n                  d.fips.length === 5 && Number(d.fips) >= 39800 && Number(d.fips) <= 39999))),\n            d => d['deathscum']))\n          .range(colorPalette);\n\n        setLegendSplitD(split.quantiles());\n        // console.log(split.thresholds().reverse());\n      });\n  }, [])\n\n  useEffect(() => {\n    if (dataTS && dataTS[stateFips + countyFips]) {\n      setCovidMetric(dataG[stateFips + countyFips]);\n      setCovidMetricGa(dataG[stateFips]);\n      // setCovidMetric(dataG[stateFips + countyFips]);\n      setCovidMetric14(_.takeRight(dataTS[stateFips + countyFips], 14)[0]);\n      setCovidMetricLast(_.takeRight(dataTS[stateFips + countyFips])[0]);\n    }\n  }, [dataTS])\n\n  if (data && dataTS && varMap) {\n\n    return (\n      <div>\n\n        <AppBar menu='countyReport' />\n        <Container fluid style={{ marginTop: '8em' }}>\n          <Breadcrumb style={{ paddingBottom: '2em', paddingLeft: '30em' }}>\n            <Breadcrumb.Section link onClick={() => history.push('/' + stateFips)}>{stateName}</Breadcrumb.Section>\n            <Breadcrumb.Divider />\n            <Breadcrumb.Section active>{countyName}</Breadcrumb.Section>\n            <Breadcrumb.Divider />\n          </Breadcrumb>\n\n          <div style={sectionStyle2}>\n            <Header as='h2' style={{\n              textAlign: 'center', color: 'black', fontSize: \"22pt\",\n              paddingTop: '3em', paddingBottom: '3em'\n            }}>\n              <Header.Content>\n                Summary of COVID-19 in <b>{countyName}</b>, GA\n              </Header.Content>\n            </Header>\n          </div>\n        </Container>\n        <Container style={{ marginTop: '8em', minWidth: '1260px', paddingRight: 0 }}>\n          {configsCounty &&\n            <div>\n              {/* <Header as='h1' style={{ fontWeight: 300 }}>\n                <Header.Content>\n                  \n                  <b>{countyName}</b>\n                  <Header.Subheader style={{fontWeight: 300}}>\n              See how health determinants impact COVID-19 outcomes. \n              </Header.Subheader>\n                </Header.Content>\n              </Header> */}\n              <Divider horizontal style={{ minWidth: '1260px', fontWeight: 600, color: '#232423', fontSize: '18pt', paddingTop: '1em' }}> COVID-19 <b>cases</b> in {countyName}</Divider>\n\n              <Grid style={{ paddingTop: '2em', width: \"1260px\", paddingLeft: '1.5em' }} centered>\n                {/* <Header as='h2' style={{ fontWeight: 300, textAlign: 'center' }} >\n                  <Header.Content>\n                    COVID-19 <b>cases</b> in {countyName}\n                  </Header.Content>\n                </Header> */}\n                <Grid.Row style={{ paddingTop: '1em' }}>\n                  <Grid.Column width={16} style={{ paddingLeft: '0', paddingRight: '0' }}>\n\n                    <Table celled fixed >\n                      <Table.Header >\n                      <tr textAlign = \"center\" colSpan = \"6\" style={sectionStyle1}>\n                      <td colSpan='1' style={{width:150}}> </td>\n                      <td colSpan='1' style={{width:200, fontSize: '14px', textAlign : \"center\", font: \"lato\", fontWeight: 600, color: \"#FFFFFF\"}}> <Popup\n                            trigger={<p>ALL CASES TO DATE</p>\n                            }\n                            content={\"All confirmed cases reported to DPH as of \" + new Date(dateCur[stateFips + countyFips].todaydat * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' })}\n                            basic /></td>\n                      <td colSpan='1' style={{width:200, fontSize: '14px', textAlign : \"center\", font: \"lato\", fontWeight: 600, color: \"#FFFFFF\"}}> <Popup\n                            trigger={<p>CASES IN PAST 14 DAYS</p>\n                            }\n                            content={\"All confirmed cases reported to DPH during the 14 days preceding the report publication date.\"}\n                            basic /></td>\n                      <td colSpan='1' style={{width:200, fontSize: '14px', textAlign : \"center\", font: \"lato\", fontWeight: 600, color: \"#FFFFFF\"}}> <Popup\n                            trigger={<p >CASES PER 100K (PAST 14 DAYS)</p>\n                            }\n                            content={\"14-day case count/100K residents based on 2020 population projects derived from census data.\"}\n                            basic /></td>\n                      <td colSpan='1' style={{width:200, fontSize: '14px', textAlign : \"center\", font: \"lato\", fontWeight: 600, color: \"#FFFFFF\"}}><Popup\n                            trigger={<p>14-DAY RATE CATEGORY</p>\n                            } flowing hoverable>\n                            Based on the 14-day case rate\n                          <List as='ul'>\n                              <List.Item as='li'>High: {'>'} 100 cases/100K</List.Item>\n                              <List.Item as='li'>Moderately high: {\">\"} 50-100 cases/100K</List.Item>\n                              <List.Item as='li'>Moderately: {\">\"} 10-50 cases/100K</List.Item>\n                              <List.Item as='li'>Low: {\">\"} 0-10 cases/100K</List.Item>\n                              <List.Item as='li'>Less than 5 cases reported, rate not calculated</List.Item>\n                            </List>\n                          </Popup></td>\n                      <td colSpan='1' style={{width:200, fontSize: '14px', textAlign : \"center\", font: \"lato\", fontWeight: 600, color: \"#FFFFFF\"}}> <Popup\n                            trigger={<p>CHANGE IN LAST 2 WEEKS</p>\n                            } flowing hoverable>\n                            Change in case count during the previous 14 days, comparing<br></br> the second 7-day period to the first 7-day period.\n                          <List as='ul'>\n                              <List.Item as='li'>Increasing: 5% or greater change</List.Item>\n                              <List.Item as='li'>Decreasing: -5% or less change</List.Item>\n                              <List.Item as='li'>Less than 5% change</List.Item>\n                            </List>\n                          </Popup></td>\n                  </tr>\n                        <Table.Row textAlign='center'>\n                          <Table.HeaderCell style={{ fontSize: '18px' }}> {countyName} </Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px', color: '#337fb5' }}>{covidMetric.casescum === null || covidMetric.casescum < 0 ? '0' : covidMetric.casescum.toLocaleString()}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px', color: '#337fb5' }}>{covidMetric.casescum14day === null || covidMetric.casescum14day < 0 ? '0' : numberWithCommas(parseFloat(covidMetric.casescum14day).toFixed(0)).toLocaleString()}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px', color: '#337fb5' }}>{covidMetric.casescum14dayR === null || covidMetric.casescum14dayR < 0 ? '0' : numberWithCommas(parseFloat(covidMetric.casescum14dayR).toFixed(0)).toLocaleString()}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '18px' }}>{covidMetric.category14day === null || covidMetric.category14day < 0 ? '0' : covidMetric.category14day}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '18px' }}>{covidMetric.change14day === null ? '0' : covidMetric.change14day}</Table.HeaderCell>\n                        </Table.Row>\n                        <Table.Row textAlign='center'>\n                          <Table.HeaderCell style={{ fontSize: '18px' }}>Georgia</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px', color: '#337fb5' }}>{covidMetricGa.casescum === null || covidMetricGa.casescum < 0 ? '0' : covidMetricGa.casescum.toLocaleString()}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px', color: '#337fb5' }}>{covidMetricGa.casescum14day === null || covidMetricGa.casescum14day < 0 ? '0' : numberWithCommas(parseFloat(covidMetricGa.casescum14day).toFixed(0)).toLocaleString()}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px', color: '#337fb5' }}>{covidMetricGa.casescum14dayR === null || covidMetricGa.casescum14dayR < 0 ? '0' : numberWithCommas(parseFloat(covidMetricGa.casescum14dayR).toFixed(0)).toLocaleString()}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '18px' }}>{covidMetricGa.category14day === null || covidMetricGa.category14day < 0 ? '0' : covidMetricGa.category14day}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '18px' }}>{covidMetricGa.change14day === null || covidMetricGa.change14day < 0 ? '0' : covidMetricGa.change14day}</Table.HeaderCell>\n                        </Table.Row>\n                      </Table.Header>\n                    </Table>\n                  </Grid.Column>\n\n                </Grid.Row>\n              </Grid>\n\n              <Divider horizontal style={{ fontWeight: 600, color: '#232423', fontSize: '18pt', paddingTop: '1em' }}> COVID-19 <b>deaths</b> in {countyName}</Divider>\n              <Grid style={{ paddingTop: '2em', width: \"1260px\", paddingLeft: '1.5em' }} centered>\n                <Grid.Row style={{ paddingTop: '1em' }}>\n                  <Grid.Column width={16} style={{ paddingLeft: '0', paddingRight: '0' }}>\n                \n                    <Table celled fixed singleLine>\n                      <Table.Header>\n                      <tr textAlign = \"center\" colSpan = \"5\" style={sectionStyle1}>\n                      <td colSpan='1' style={{width:150}}> </td>\n                      <td colSpan='1' style={{width:200, fontSize: '14px', textAlign : \"center\", font: \"lato\", fontWeight: 600, color: \"#FFFFFF\"}}> <Popup\n                            trigger={<p>ALL DEATHS TO DATE</p>\n                            }\n                            content={\"All confirmed deaths reported to DPH as of \" + new Date(dateCur.date * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' })}\n                            basic /></td>\n                      <td colSpan='1' style={{width:200, fontSize: '14px', textAlign : \"center\", font: \"lato\", fontWeight: 600, color: \"#FFFFFF\"}}> <Popup\n                            trigger={<p > DEATHS IN PAST 14 DAYS</p>\n                            }\n                            content={\"All confirmed deaths reported to DPH during the 14 days preceding the report publication date.\"}\n                            basic /></td>\n                      <td colSpan='1' style={{width:200, fontSize: '14px', textAlign : \"center\", font: \"lato\", fontWeight: 600, color: \"#FFFFFF\"}}> <Popup\n                            trigger={<p > DEATHS PER 100K (PAST 14 DAYS)</p>\n                            }\n                            content={\"14-day deaths count/100K residents based on 2020 population projects derived from census data.\"}\n                            basic /></td>\n                      <td colSpan='1' style={{width:200, fontSize: '14px', textAlign : \"center\", font: \"lato\", fontWeight: 600, color: \"#FFFFFF\"}}><Popup\n                            trigger={<p>CASE FATALITY RATIO (%)</p>\n                            }\n                            content={\"The case fatality ratio is the percent of all confirmed cases who have been reported as having died. While this is used as a measure of disease severity, the ratio may also be affected by the level of testing and quality of follow-up data on cases.\"}\n                            basic /></td>\n                     \n                  </tr>    \n\n                        <Table.Row textAlign='center'>\n                          <Table.HeaderCell style={{ fontSize: '18px' }}> {countyName} </Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px', color: '#337fb5' }}>{covidMetric.deathscum === null || covidMetric.deathscum < 0 ? '0' : covidMetric.deathscum.toLocaleString()}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px' , color: '#337fb5'}}>{covidMetric.deathscum14day === null || covidMetric.deathscum14day < 0 ? '0' : numberWithCommas(parseFloat(covidMetric.deathscum14day).toFixed(0)).toLocaleString()}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px' , color: '#337fb5'}}>{covidMetric.deathscum14dayR === null || covidMetric.deathscum14dayR < 0 ? '0' : numberWithCommas(parseFloat(covidMetric.deathscum14dayR).toFixed(2)).toLocaleString()}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px', color: '#337fb5' }}>{covidMetric.cfr === null || covidMetric.cfr < 0 ? '0' : numberWithCommas(parseFloat(covidMetric.cfr).toFixed(2)).toLocaleString() + '%'}</Table.HeaderCell>\n                        </Table.Row>\n                        <Table.Row textAlign='center'>\n                          <Table.HeaderCell style={{ fontSize: '18px' }}>Georgia</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px', color: '#337fb5' }}>{covidMetricGa.deathscum === null || covidMetricGa.deathscum < 0 ? '0' : covidMetricGa.deathscum.toLocaleString()}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px', color: '#337fb5' }}>{covidMetricGa.deathscum14day === null || covidMetricGa.deathscum14day < 0 ? '0' : numberWithCommas(parseFloat(covidMetricGa.deathscum14day).toFixed(0)).toLocaleString()}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px', color: '#337fb5' }}>{covidMetricGa.deathscum14dayR === null || covidMetricGa.deathscum14dayR < 0 ? '0' : numberWithCommas(parseFloat(covidMetricGa.deathscum14dayR).toFixed(2)).toLocaleString()}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px' , color: '#337fb5'}}>{covidMetricGa.cfr === null || covidMetricGa.cfr < 0 ? '0' : numberWithCommas(parseFloat(covidMetricGa.cfr).toFixed(2)).toLocaleString() + '%'}</Table.HeaderCell>\n                        </Table.Row>\n                      </Table.Header>\n                    </Table>\n                  </Grid.Column>\n\n                </Grid.Row>\n\n                <Grid.Row style={{ paddingTop: 0 }}>\n                  <Grid.Column style={{ paddingLeft: '0.01', paddingRight: '0' }}>\n                    <small style={{ fontWeight: 300, fontSize: 16, color: 'black' }} align=\"justify\">\n                      As of {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' : (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}, there were a total of {covidMetric.casescum.toLocaleString()} confirmed cases of COVID-19 and {covidMetric.deathscum.toLocaleString()} deaths due to COVID-19 reported to DPH for {countyName}. In {countyName}, this translates to {numberWithCommas(parseFloat(covidMetric.casescumR).toFixed(0)).toLocaleString()} case(s) per 100,000 residents and {numberWithCommas(parseFloat(covidMetric.deathscumR).toFixed(0)).toLocaleString()} death(s) per 100,000 residents.\n                        On a day-to-day basis, {numberWithCommas(parseFloat(covidMetric.casescum14dayR).toFixed(0)).toLocaleString()} new cases and {numberWithCommas(parseFloat(covidMetric.deathscum14dayR).toFixed(0)).toLocaleString()} new deaths are reported to DPH on average (based on a 14-day rolling average). This means that there are {covidMetric.casescum14dayR === null || covidMetric.casescum14dayR < 0 ? '0' : numberWithCommas(parseFloat(covidMetric.casescum14dayR).toFixed(0)).toLocaleString()} new cases and {covidMetric.deathscum14dayR === null || covidMetric.deathscum14dayR < 0 ? '0' : numberWithCommas(parseFloat(covidMetric.deathscum14dayR).toFixed(0)).toLocaleString()} new deaths per 100,000 residents in {countyName}. The case-fatality ratio measures\n                          the proportion of confirmed COVID-19 cases that ultimately die due to the disease. This is used by epidemiologists to gauge the severity of disease in a particular locale.  In {countyName}, the case-fatality ratio was {covidMetric.cfr === null || covidMetric.cfr < 0 ? '0' : numberWithCommas(parseFloat(covidMetric.cfr).toFixed(2)).toLocaleString() + '%'}, which is {covidMetric.cfrcompare === null || covidMetric.cfrcompare < 0 ? '0' : covidMetric.cfrcompare} than the national average of 4%. All of these data must be interpreted in light of constraints on testing, PUI follow-up quality, and reporting lags in the county.\n                  </small>\n                  </Grid.Column>\n                </Grid.Row>\n              </Grid>\n\n              <Divider horizontal style={{ fontWeight: 300, color: '#b1b3b3', fontSize: '1.2em', paddingTop: '1em' }}></Divider>\n              <Grid column={2} style={{ paddingTop: '2em', paddingBottom: '2em', width: \"1260px\" }}>\n                <Grid.Row style={{ paddingTop: '2em' }}>\n\n                  <Grid.Column width={8}>\n                    <Header as='h2' style={{ fontWeight: \"bold\", fontSize: \"27px\", paddingLeft: \".5em\" }}>\n                      <Header.Content>\n                        Daily cases in {countyName}\n                        <Header.Subheader style={{ fontWeight: 300 }}>\n                        </Header.Subheader>\n                      </Header.Content>\n                    </Header>\n                    <svg width=\"550\" height=\"90\">\n                      <rect x={50} y={50} width=\"15\" height=\"15\" style={{ fill: stateColor, strokeWidth: 1, stroke: stateColor }} />\n                      <rect x={50} y={22} width=\"15\" height=\"1\" style={{ fill: countyColor, strokeWidth: 1, stroke: countyColor }} />\n                      <text x={75} y={64} style={{ fontSize: 18 }}> Daily new cases </text>\n                      <text x={75} y={30} style={{ fontSize: 18 }}>7-D Rolling average</text>\n                    </svg>\n                    <VictoryChart theme={VictoryTheme.material}\n                      containerComponent={\n                        <VictoryVoronoiContainer\n                          responsive={false}\n                          flyoutStyle={{ fill: \"black\" }}\n\n                        />\n                      }\n                      width={550}\n                      height={450}\n                      padding={{ left: 40, right: 60, top: 10, bottom: 60 }}>\n                      <VictoryAxis\n                        style={{\n                          tickLabels: { fontSize: 20, padding: 5 }\n                        }}\n                        tickFormat={(t) => new Date(t * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric' })}\n                        tickValues={[\n                          // 1583035200, 1585713600, 1588305600, 1590984000, 1593576000\n                          dataTS['13001'][0].t,\n                          dataTS[\"13001\"][31].t,\n                          dataTS[\"13001\"][61].t,\n                          dataTS[\"13001\"][92].t,\n                          dataTS[\"13001\"][122].t,\n                          dataTS[\"13001\"][153].t,\n                          dataTS[\"13001\"][184].t,\n                          dataTS[\"13001\"][214].t,\n                        dataTS[\"13001\"][245].t,\n                          \n                          dataTS[\"13001\"][dataTS[\"13001\"].length - 1].t\n                        ]}\n                      />\n                      <VictoryAxis dependentAxis tickCount={5}\n                        style={{\n                          tickLabels: { fontSize: 17, paddingLeft: '0em' }\n                        }}\n                        tickFormat={(y) => (y < 1000 ? y : (y / 1000 + 'k'))}\n                      />\n\n                      <VictoryBar style={{ data: { fill: stateColor } }} barWidth={4} data={dataTS[stateFips + countyFips] ? dataTS[stateFips + countyFips] : dataTS[\"99999\"]}\n                        x='t' y='casesdaily'\n                      />\n                      <VictoryLine name=\"Line\" style={{ data: { stroke: countyColor } }} data={dataTS[stateFips + countyFips] ? dataTS[stateFips + countyFips] : dataTS[\"99999\"]}\n                        x='t' y='casesdailymean7'\n                        labels={({ datum }) => `${countyName}\\n` +\n                          `Date: ${new Date(datum.t * 1000).toLocaleDateString()}\\n` +\n                          `Daily new cases: ${Math.round(datum.casesdaily, 2)}\\n` +\n                          `7-d Rolling average of daily new cases: ${Math.round(datum.casesdailymean7, 2)}`\n                        }\n                        labelComponent={\n                          <VictoryTooltip\n                            orientation=\"top\"\n                            style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'white' }}\n                            constrainToVisibleArea\n                            labelComponent={<VictoryLabel dx={-130} textAnchor='start' />}\n                            flyoutStyle={{ fill: \"black\", fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\n                          />\n                        }\n                      />\n\n                    </VictoryChart>\n                  </Grid.Column>\n                  <Grid.Column width={8}>\n                    <Header as='h2' style={{ fontWeight: \"bold\", fontSize: \"27px\", paddingLeft: \".5em\" }}>\n                      <Header.Content>\n                        Daily deaths in {countyName}\n                        <Header.Subheader style={{ fontWeight: 300 }}>\n                        </Header.Subheader>\n                      </Header.Content>\n                    </Header>\n                    <svg width=\"550\" height=\"90\">\n                      <rect x={50} y={50} width=\"15\" height=\"15\" style={{ fill: stateColor, strokeWidth: 1, stroke: stateColor }} />\n                      <rect x={50} y={22} width=\"15\" height=\"1\" style={{ fill: countyColor, strokeWidth: 1, stroke: countyColor }} />\n                      <text x={75} y={64} style={{ fontSize: 18 }}> Daily new deaths </text>\n                      <text x={75} y={30} style={{ fontSize: 18 }}>7-D Rolling average</text>\n                    </svg>\n                    <VictoryChart theme={VictoryTheme.material}\n                      containerComponent={\n                        <VictoryVoronoiContainer\n                          responsive={false}\n                          flyoutStyle={{ fill: \"black\" }}\n                        />\n                      }\n                      width={550}\n                      height={450}\n                      padding={{ left: 50, right: 60, top: 10, bottom: 60 }}>\n\n                      <VictoryAxis\n                        style={{\n                          tickLabels: { fontSize: 20, padding: 5 }\n                        }}\n                        tickFormat={(t) => new Date(t * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric' })}\n                        tickValues={[\n                          dataTS['13001'][0].t,\n                          dataTS[\"13001\"][31].t,\n                          dataTS[\"13001\"][61].t,\n                          dataTS[\"13001\"][92].t,\n                          dataTS[\"13001\"][122].t,\n                          dataTS[\"13001\"][153].t,\n                          dataTS[\"13001\"][184].t,\n                          dataTS[\"13001\"][214].t,\n                        dataTS[\"13001\"][245].t,\n                          \n                          dataTS[\"13001\"][dataTS[\"13001\"].length - 1].t\n                        ]}\n                      />\n                      <VictoryAxis dependentAxis tickCount={5}\n                        style={{\n                          tickLabels: { fontSize: 20, padding: 5 }\n                        }}\n                        tickFormat={(y) => (y < 1000 ? (Math.round(y, 2) === 0.00 ? \" \" : y) : (y / 1000 + 'k'))}\n                      />\n\n                      <VictoryBar style={{ data: { fill: stateColor } }} barWidth={4} data={dataTS[stateFips + countyFips] ? dataTS[stateFips + countyFips] : dataTS[\"99999\"]}\n                        x='t' y='deathsdaily'\n                      />\n                      <VictoryLine name=\"Line\" style={{ data: { stroke: countyColor } }} data={dataTS[stateFips + countyFips] ? dataTS[stateFips + countyFips] : dataTS[\"99999\"]}\n                        x='t' y='deathsdailymean7'\n                        labels={({ datum }) =>\n                          `${countyName}\\n` +\n                          `Date: ${new Date(datum.t * 1000).toLocaleDateString()}\\n` +\n                          `Daily new deaths: ${Math.round(datum.deathsdaily, 2)}\\n` +\n                          `7-d Rolling average of daily new deaths: ${Math.round(datum.deathsdailymean7, 2)}`}\n                        labelComponent={\n                          <VictoryTooltip\n                            orientation=\"top\"\n                            style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'white' }}\n                            constrainToVisibleArea\n                            labelComponent={<VictoryLabel dx={-130} textAnchor='start' />}\n                            flyoutStyle={{ fill: \"black\", fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\n                          />\n                        }\n                      />\n\n                    </VictoryChart>\n                  </Grid.Column>\n                </Grid.Row>\n                <Grid.Row style={{ paddingTop: '2em', paddingLeft: '0em', paddingRight: '2em' }} >\n                  <Grid.Column width={8} style={{ paddingLeft: '1em', paddingRight: '3em' }}>\n                    <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\n                      As of {covidMetricLast.t === 'n/a' ? 'N/A' : (new Date(covidMetricLast.t * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}, this chart shows the daily number of new cases of confirmed COVID-19 in <b>{countyName}</b>. The daily number reflects the date the case was first reported to DPH.\n                  The vertical bars show the number of new daily cases while the line shows the 7-day moving average of new daily cases.\n                  </small>\n                  </Grid.Column>\n                  <Grid.Column width={8} style={{ paddingLeft: '3em', paddingRight: '3em' }}>\n                    <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\n                      As of {covidMetricLast.t === 'n/a' ? 'N/A' : (new Date(covidMetricLast.t * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}, this chart shows the daily number of new deaths of confirmed COVID-19 in <b>{countyName}</b>. The daily number reflects the date the death was first reported to DPH.\n                  The vertical bars show the number of new daily deaths while the line shows the 7-day moving average of new daily cases.\n                  </small>\n                  </Grid.Column>\n                </Grid.Row>\n                <Grid.Row style={{ paddingTop: '8em' }}>\n                  <Grid.Column width={9}>\n                    <Header as='h2' style={{ fontWeight: 400, paddingLeft: '1em' }}>\n                      <Header.Content >\n                        <strong>Confirmed COVID-19 cases {countyName} by zip code</strong>\n                        {/* <Header.Subheader style={{fontWeight: 300}}>.</Header.Subheader> */}\n                      </Header.Content>\n                    </Header>\n                    <svg width=\"120\" height=\"300\" style={{ paddingLeft: '3.5em' }}>\n                      {_.map(colorPalette, (color, i) => {\n                        return <rect key={i} y={20 * i} x={25} width=\"20\" height=\"20\" style={{ fill: colorPalette[(colorPalette.length - 1 - i).toString()], strokeWidth: 1, stroke: colorPalette[(colorPalette.length - 1 - i).toString()] }} />\n                      })}\n                      {/* <text y={15} x={47} style={{fontSize: '0.8em'}}>High</text>\n                  <text y={20 * (colorPalette.length)} x={47} style={{fontSize: '0.8em'}}>Low</text> */}\n                      {/* {_.map(legendSplit, (splitpoint, i) => {\n                        if (legendSplit[i] < 1) {\n                          return <text key={i} y={21 * (legendSplit.length - i)} x={47} style={{ fontSize: '0.8em' }}> {legendSplit[i].toFixed(1)}</text>\n                        }\n                        return <text key={i} y={21 * ((legendSplit.length - i))} x={47} style={{ fontSize: '0.8em' }}> {legendSplit[i].toFixed(0)}</text>\n                      })} */}\n                      <text y={20 * (colorPalette.length)} x={47} style={{ fontSize: '0.8em' }}> {legendMin} </text>\n                      <text y={8} x={47} style={{ fontSize: '0.8em' }}>{legendMax}</text>\n                    </svg>\n\n                    <ComposableMap projection=\"geoAlbersUsa\"\n                      style={{ paddingLeft: '2em' }}\n                      projectionConfig={{ scale: `${configsCounty.scale}` }}\n                      width={500}\n                      height={350}\n                      data-tip=\"\"\n                      offsetX={configsCounty.offsetX}\n                      offsetY={configsCounty.offsetY}>\n                      <Geographies geography={configsCounty.url}>\n                        {({ geographies }) => geographies.map(geo =>\n                          <Geography\n                            key={geo.rsmKey}\n                            geography={geo}\n                            style={{\n                              default: {\n                                stroke: \"#607D8B\",\n                                strokeWidth: 0.95,\n                                outline: \"none\",\n                              }\n                            }}\n                            onMouseEnter={(event) => {\n                              // console.log(event);\n                              // setCountyFips(geo.properties.COUNTYFP);\n                              setCountyName(fips2county[stateFips + geo.properties.COUNTYFP]);\n                              setZipCode(geo.properties.ZCTA5CE10);\n                              setZipCodeFinal(geo.properties.ZCTA5CE10);\n                              setTooltipContent(<div><font size=\"+2\"><b >{geo.properties.ZCTA5CE10}</b> </font> <br />\n                                {/* <b>Total Cases</b>: {dataZip[geo.properties.ZCTA5CE10]['casescum']} <br />\n                                <b>Total Deaths</b>: {dataZip[geo.properties.ZCTA5CE10]['deathscum']} <br /> */}\n                              </div>);\n                            }}\n                            onMouseLeave={(event) => {\n                              setTooltipContent(\"\")\n                            }}\n                            fill={zipCode === geo.properties.ZCTA5CE10 ? countyColor :\n                              ((colorScale && dataZip[geo.properties.ZCTA5CE10] && dataZip[geo.properties.ZCTA5CE10]['casescum']) ?\n                                colorScale[dataZip[geo.properties.ZCTA5CE10]['casescum']] : colorPalette[0])}\n                          />\n                        )}\n                      </Geographies>\n                    </ComposableMap>\n                  </Grid.Column>\n\n                </Grid.Row>\n\n\n                <Grid.Row style={{ paddingTop: '2em', paddingLeft: '0em', paddingRight: '2em' }} >\n\n                  <Grid.Column width={9} style={{ paddingLeft: '2em', paddingRight: '5em' }}>\n                    <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\n                      {varNameMap['casescum'].text}{dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' : (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))} . The darker shading indicates a larger number of {varNameMap['casescum'].name}.</small>\n                  </Grid.Column>\n\n                </Grid.Row>\n                <Grid.Row style={{ paddingTop: 0, paddingLeft: '1.5em' }}>\n                  <small style={{ fontWeight: 300, color: 'black' }}>\n                    Note: Data are provisional and subject to change. Zip codes may cross county boundaries. Zip codes being displayed include the total count of cases for that zip code.\n                    </small>\n                </Grid.Row>\n              </Grid>\n              <Divider horizontal style={{ fontWeight: 600, color: '#232423', fontSize: '16pt', paddingTop: '1em' }}>Characteristics of confirmed COVID-19 cases for {countyName}</Divider>\n              <Grid columns={2} style={{ width: \"1260px\" }} centered>\n                <Grid.Row >\n                  <Grid.Column>\n                    <svg width=\"400\" height=\"500\" >\n                      {/* <VictoryLabel style={{\n                        textAnchor: \"start\",\n                        verticalAnchor: \"end\", fill: \"#000000\", fontFamily: \"inherit\",\n                        fontSize: \"20px\", fontWeight: \"bold\"\n                      }} text=\"Proportion of cases with a comorbidity\n                  \" x={15} y={28} textAnchor=\"middle\" /> */}\n                      <VictoryPie\n                        colorScale={['#024174', '#337fb5']}\n                        standalone={false}\n                        style={{ labels: { fill: \"white\" } }}\n                        labelRadius={80}\n                        width={400} height={400}\n                        padAngle={2}\n                        data={[\n                          { x: 1, y: 100 - datades_cases[stateFips + countyFips]['cdc_underlying2Percent'], label: `${(100 - datades_cases[stateFips + countyFips]['cdc_underlying2Percent']).toFixed(2)}%` },\n                          { x: 2, y: datades_cases[stateFips + countyFips]['cdc_underlying2Percent'], label: `${datades_cases[stateFips + countyFips]['cdc_underlying2Percent'].toFixed(2)}%` },\n                        ]}\n                      />\n                      <VictoryLegend\n                        standalone={false}\n                        colorScale={['#024174', '#337fb5']}\n                        x={150} y={350}\n                        data={[{ name: \"No underlying conditions\", labels: { fontSize: 18 } },\n                        { name: \"Underlying health condition\", labels: { fontSize: 18 } }\n                        ]}\n                      />\n                    </svg>\n                  </Grid.Column>\n                  <Grid.Column style={{ paddingLeft: '0em', paddingRight: '1em', paddingTop: '4em' }}>\n                    <Grid.Row style={{ paddingLeft: '1em' }}>\n                      <Header as='h2' style={{ textAlign: 'left', color: 'black', fontSize: \"18pt\", paddingTop: '0em', paddingBottom: '0em' }}>\n                        <Header.Content>\n                          Proportion of cases with a comorbidity\n                                    </Header.Content>\n                      </Header>\n                    </Grid.Row>\n                    <Divider />\n                    <Grid.Row style={{ paddingLeft: '1em' }}>\n\n                      <small style={{ fontWeight: 300, fontSize: 20, color: 'black' }} align=\"justify\">\n                        The pie chart shows the proportion of confirmed COVID-19 cases in <b>{countyName}</b> who\n                  presented with an underlying medical condition. Underlying medical conditions\n                  increase the risk of experiencing severe disease which may lead to hospitalization\n                  and death. Of the {datades_cases[stateFips + countyFips]['cdc_underlying2_N'] ? datades_cases[stateFips + countyFips]['cdc_underlying2_N'] : \"N/A\"} confirmed cases with data available, {datades_cases[stateFips + countyFips]['cdc_underlying2Percent'] ? datades_cases[stateFips + countyFips]['cdc_underlying2Percent'].toFixed(2) : \"N/A\"}% had an underlying medical condition that increases risk of severe outcomes according to the CDC. These underlying medical conditions include: lung disease, diabetes, cardiovascular disease, renal disease, and/or an immunocompromised state. The chart excludes data from {datades_cases[stateFips + countyFips]['cdc_underlying2Pmiss'] ? datades_cases[stateFips + countyFips]['cdc_underlying2Pmiss'].toFixed(2) : \"N/A\"}% of confirmed COVID-19 cases whose medical history was unknown.\n                    </small>\n                    </Grid.Row>\n\n                  </Grid.Column>\n\n                </Grid.Row>\n              </Grid>\n              <Divider horizontal style={{ fontWeight: 600, color: '#232423', fontSize: '16pt', paddingTop: '1em', paddingBottom: \"0em\" }}>Percentage of Confirmed Cases by Demographic Group in {countyName}</Divider>\n              <Grid style={{ width: \"1260px\" }}>\n                {datades_cases[stateFips + countyFips]['NObs'] < 50 && datades_cases[stateFips + countyFips]['outcome'] === 'COVID Death' ?\n                  <Header as='h2' style={{ fontWeight: 400 }}>\n                    <Header.Content>\n                      <Header.Subheader style={{ fontWeight: 300, fontSize: '16pt', color: 'black' }}>\n                        Rates broken down by age, sex, and race are not shown for {countyName} because there are fewer than 50 confirmed COVID-19 cases with complete information.\n                </Header.Subheader>\n                    </Header.Content>\n\n                  </Header>\n                  :\n                  <Grid.Row columns={3} style={{ paddingTop: 0 }}>\n                    <Grid.Column>\n                      <BarChart\n                        cate={\"Cases\"}\n                        var_num={4}\n                        title=\"Age Group\"\n                        keyv={[\"< 20\", \"20-44\", \"45-64\", \"65+\"]}\n                        var={[\"019ageC_P\", \"2044ageC_P\", \"4564ageC_P\", \"65ageC_P\"]}\n                        var1={[\"019ageP\", \"2044ageP\", \"4564ageP\", \"65ageP\"]}\n                        width={400}\n                        stateFips={stateFips}\n                        countyFips={countyFips}\n                        data={data_cases} \n                        co = '1'/>\n\n                    </Grid.Column>\n                    <Grid.Column>\n                      <BarChart\n                        cate={\"Cases\"}\n                        var_num={2}\n                        title=\"Sex\"\n                        keyv={[\"Female\", \"Male\"]}\n                        var={[\"femaleC_P\", \"maleC_P\"]}\n                        var1={[\"femaleP\", \"maleP\"]}\n                        pad={80}\n                        width={400}\n                        stateFips={stateFips}\n                        countyFips={countyFips}\n                        data={data_cases} \n                        co = '1'/>\n                    </Grid.Column>\n                    <Grid.Column>\n                      <BarChart\n                        cate={\"Cases\"}\n                        var_num={4}\n                        title=\"Race-Ethnicity\"\n                        keyv={[\"Other\", \"Hispanic\", \"Black\", \"White\"]}\n                        var={[\"otherNHC_P\", \"hispanicC_P\", \"blackC_P\", \"whiteC_P\"]}\n                        var1={[\"otherNHP\", \"hispanicP\", \"blackP\", \"whiteP\"]}\n                        width={400}\n                        stateFips={stateFips}\n                        countyFips={countyFips}\n                        data={data_cases} \n                        co = '1'/>\n                    </Grid.Column>\n                  </Grid.Row>\n                }\n                {datades_cases[stateFips + countyFips]['NObs'] < 50 && datades_cases[stateFips + countyFips]['outcome'] === 'COVID Death' ? ' ' :\n                  <Grid.Row columns={3} style={{ padding: 0 }}>\n                    <Grid.Column style={{ paddingLeft: '4em', paddingRight: '0em' }}>\n                      <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\n                        This chart shows the percentage of cases and percentage of the population by age for <b>{countyName}</b>. The chart excludes data from {datades_cases[stateFips + countyFips]['age4catPmiss'].toFixed(2)}% of confirmed cases who were missing information on age.\n                    </small>\n                    </Grid.Column>\n                    <Grid.Column style={{ paddingLeft: '4em', paddingRight: '0em' }}>\n                      <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\n                        This chart shows the percentage of cases and percentage of the population by sex for <b>{countyName}</b>. The chart excludes data from {datades_cases[stateFips + countyFips]['femalePmiss'].toFixed(2)}% of confirmed cases who were missing information on sex.\n                    </small>\n                    </Grid.Column>\n                    <Grid.Column style={{ paddingLeft: '4em', paddingRight: '0em' }}>\n                      <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\n                        This chart shows the percentage of cases and percentage of the population by race and ethnicity for <b>{countyName}</b>. The chart excludes data from {datades_cases[stateFips + countyFips]['race_3Pmiss'].toFixed(2)}% of confirmed cases who were missing information on race/ethnicity.                    </small>\n                    </Grid.Column>\n                  </Grid.Row>}\n              </Grid>\n\n              <Divider horizontal style={{ fontWeight: 600, color: '#232423', fontSize: '16pt', paddingTop: '1em', paddingBottom: \"0em\" }}>Percentage of Deaths by Demographic Group in {countyName}</Divider>\n              <Grid style={{ width: \"1260px\" }}>\n                {!(datades_deaths[stateFips + countyFips]) ? <Header as='h2' style={{ fontWeight: 400, paddingTop: '0.5em' }}>\n                  <Header.Content>\n                    <Header.Subheader style={{ fontWeight: 300, fontSize: '16pt' }}>\n                      Rates broken down by age, sex, and race are not shown for {countyName} because there are fewer than 50 confirmed COVID-19 deaths with complete information.\n                    </Header.Subheader>\n                  </Header.Content>\n                </Header>\n                  :\n                  datades_deaths[stateFips + countyFips]['NObs'] < 50 && datades_deaths[stateFips + countyFips]['outcome'] === 'COVID Death' ?\n                    <Header as='h2' style={{ fontWeight: 400, paddingTop: '0.5em' }}>\n                      <Header.Content>\n                        <Header.Subheader style={{ fontWeight: 300, fontSize: '16pt' }}>\n                          Rates broken down by age, sex, and race are not shown for {countyName} because there are fewer than 50 confirmed COVID-19 deaths with complete information.\n                    </Header.Subheader>\n                      </Header.Content>\n                    </Header>\n                    :\n                    <Grid.Row columns={3} style={{ paddingTop: 0 }}>\n                      <Grid.Column>\n                        <BarChart\n                          cate={\"Deaths\"}\n                          var_num={4}\n                          title=\"Age Group\"\n                          keyv={[\"< 20\", \"20-44\", \"45-64\", \"65+\"]}\n                          var={[\"019ageC_P\", \"2044ageC_P\", \"4564ageC_P\", \"65ageC_P\"]}\n                          var1={[\"019ageP\", \"2044ageP\", \"4564ageP\", \"65ageP\"]}\n                          width={400}\n                          stateFips={stateFips}\n                          countyFips={countyFips}\n                          data={data_deaths} \n                          co = '3'/>\n                      </Grid.Column>\n                      <Grid.Column>\n                        <BarChart\n                          cate={\"Deaths\"}\n                          var_num={2}\n                          title=\"Sex\"\n                          keyv={[\"Female\", \"Male\"]}\n                          var={[\"femaleC_P\", \"maleC_P\"]}\n                          var1={[\"femaleP\", \"maleP\"]}\n                          width={400}\n                          pad={80}\n                          stateFips={stateFips}\n                          countyFips={countyFips}\n                          data={data_deaths} \n                          co = '3'/>\n                      </Grid.Column>\n                      <Grid.Column>\n                        <BarChart\n                          cate={\"Deaths\"}\n                          var_num={4}\n                          title=\"Race-Ethnicity\"\n                          keyv={[\"Other\", \"Hispanic\", \"Black\", \"White\"]}\n                          var={[\"otherNHC_P\", \"hispanicC_P\", \"blackC_P\", \"whiteC_P\"]}\n                          var1={[\"otherNHP\", \"hispanicP\", \"blackP\", \"whiteP\"]}\n                          width={400}\n                          stateFips={stateFips}\n                          countyFips={countyFips}\n                          data={data_deaths} \n                          co = '3'/>\n                      </Grid.Column>\n                    </Grid.Row>}\n                {!(datades_deaths[stateFips + countyFips]) ? ' ' :\n\n\n                  datades_deaths[stateFips + countyFips]['NObs'] < 50 && datades_deaths[stateFips + countyFips]['outcome'] === 'COVID Death' ? ' ' :\n                    <Grid.Row columns={3} style={{ padding: 0 }}>\n                      <Grid.Column style={{ paddingLeft: '4em', paddingRight: '0em' }}>\n                        <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\n                          This chart shows the percentage of deaths and percentage of the population by age group for <b>{countyName}</b>. The chart excludes data from {datades_deaths[stateFips + countyFips]['age4catPmiss'].toFixed(2)}% of confirmed deaths who were missing information on age.\n                    </small>\n                      </Grid.Column>\n                      <Grid.Column style={{ paddingLeft: '4em', paddingRight: '0em' }}>\n                        <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\n                          This chart shows the percentage of deaths and percentage of the population by sex for <b>{countyName}</b>. The chart excludes data from {datades_deaths[stateFips + countyFips]['femalePmiss'].toFixed(2)}% of confirmed deaths who were missing information on sex.\n                    </small>\n                      </Grid.Column>\n                      <Grid.Column style={{ paddingLeft: '4em', paddingRight: '0em' }}>\n                        <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\n                          This chart shows the percentage of deaths and percentage of the population by race and ethnicity for <b>{countyName}</b>. The chart excludes data from {datades_deaths[stateFips + countyFips]['race_3Pmiss'].toFixed(2)}% of confirmed deaths who were missing information on race/ethnicity.                    </small>\n                      </Grid.Column>\n                    </Grid.Row>}\n              </Grid>\n              <Divider horizontal style={{ fontWeight: 600, color: '#232423', fontSize: '16pt', paddingTop: '1em' }}>General characteristics of {countyName} residents</Divider>\n              <Header as='h2' style={{ fontWeight: 400 }}>\n                <Header.Content>\n                  <Header.Subheader style={{ fontWeight: 300, fontSize: '16pt', color: 'black' }}>\n                    Social, economic, health and environmental factors impact an individual’s risk of infection and COVID-19 severity.\n                    Counties with large groups of vulnerable people may be disproportionately impacted by COVID-19. The table below characterizes the overall population characteristics of residents of <b>{countyName}</b>, Georgia, and the United States.\n                    </Header.Subheader>\n                </Header.Content>\n              </Header>\n              <small style={{ fontWeight: 300, color: 'black' }}>\n                <div>Note: These are not characteristics of covid.</div>\n              </small>\n              <Table striped compact basic='very'>\n                <Table.Header>\n                  <Table.Row>\n                    <Table.HeaderCell>Characteristic</Table.HeaderCell>\n                    <Table.HeaderCell>{countyName}</Table.HeaderCell>\n                    <Table.HeaderCell>{stateName}</Table.HeaderCell>\n                    <Table.HeaderCell>United States</Table.HeaderCell>\n                  </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                  {_.map(data[stateFips + countyFips],\n                    (v, k) => {\n                      var rmList = [\"cases\", \"deaths\", \"dailycases\", \"dailydeaths\", \"mean7daycases\", \"mean7daydeaths\", \"covidmortality\"\n                        , \"caserate\", \"covidmortality7day\", \"caserate7day\", \"_013_Urbanization_Code\"];\n                      if (!rmList.includes(k)) {\n                        return (\n                          <Table.Row key={k}>\n                            <Table.Cell>{varMap[k] ? varMap[k].name : k}</Table.Cell>\n                            <Table.Cell>{isNaN(v) ? v : (Math.round(v * 100) / 100)}</Table.Cell>\n                            <Table.Cell>{isNaN(data[stateFips][k]) ? data[stateFips][k] : (Math.round(data[stateFips][k] * 100) / 100)}</Table.Cell>\n                            <Table.Cell>{isNaN(data['_nation'][k]) ? data['_nation'][k] : (Math.round(data['_nation'][k] * 100) / 100)}</Table.Cell>\n                          </Table.Row>\n                        )\n                      }\n                    })}\n                </Table.Body>\n              </Table>\n            </div>\n          }\n          {/* <Divider horizontal style={{ fontWeight: 300, color: '#b1b3b3', fontSize: '1.2em', paddingTop: '1em' }}></Divider> */}\n          <small>\n            <div style={{ paddingTop: '1em', paddingBottom: '1em' }}><a href=\"/data-sources\">Data source and interpretation</a></div>\n          </small>\n        </Container>\n        <ReactTooltip>{tooltipContent}</ReactTooltip>\n\n      </div>\n    );\n  } else {\n    return <Loader active inline='centered' />\n  }\n\n\n\n}","import React from 'react'\r\nimport { Route, Redirect } from 'react-router-dom'\r\nconst PrivateRoute = ({component: Component, ...props}) => {\r\n    return <Route {...props} render={(p) => {\r\n        const login = document.cookie.includes('login=true')\r\n        if (login){ \r\n            return <Component />\r\n        } else { \r\n            alert(\"Please log in, then you can access this web!\")\r\n            return <Redirect to={{\r\n                pathname: '/',\r\n                state: {\r\n                    from: p.location.pathname\r\n                }\r\n            }}/>\r\n        }\r\n    }}/>\r\n}\r\nexport default PrivateRoute","import React, { Component } from \"react\";\r\nimport { Form, Header } from \"semantic-ui-react\";\r\nimport \"./auth.css\";\r\n// import logo from \"../../data/logo.png\";\r\n\r\n  export default function Layout(props){\r\n    return (\r\n        <div className=\"auth-main\">\r\n          <div className=\"auth-content\">\r\n            <div className=\"auth-card\">\r\n            <img size='mini' src='https://dph.georgia.gov/themes/custom/ga_forest/orchard/assets/images/icons/logo/ga-logo--gold.svg' alt=\"Logo\" className=\"auth-logo\"/>\r\n              <Header as=\"h2\" color=\"black\" textAlign=\"center\">\r\n                {props.header}\r\n              </Header>\r\n              <Form.Group size=\"large\" className=\"auth-form\" autoComplete=\"off\">\r\n                {props.children}\r\n              </Form.Group>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n\r\n  }","\r\nimport React, { useState, useEffect, Component } from 'react';\r\n// import { Button, FormGroup, FormControl, FormLabel  } from \"react-bootstrap\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport \"./Login.css\";\r\nimport { Button, Form, Message } from \"semantic-ui-react\";\r\nimport Layout from \"./Layout\";\r\nimport fetchProfileData from \"./TokenGet\"\r\nimport { sha256 } from 'js-sha256';\r\n\r\n\r\nexport default function Login(props) {\r\n    const [isLogin, setIsLogin]= useState(document.cookie.includes('login=true'))\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const history = useHistory();\r\n    const [user, setUser] = useState(null);\r\n    const [tok, setTok] = useState(null);\r\n    const promise = fetchProfileData();\r\n\r\n\r\n    // console.log(document.cookie.includes('login=true'))\r\n\r\n    useEffect(() => {\r\n        fetch('/data/token.json')\r\n            .then(res => res.json())\r\n            .then(x => setTok(x));\r\n\r\n        promise.then(data => {\r\n            setUser(data);\r\n        });\r\n    }, []);\r\n\r\n    function arrayEquals(a, b) {\r\n        return Array.isArray(a) &&\r\n          Array.isArray(b) &&\r\n          a.length === b.length &&\r\n          a.every((val, index) => val === b[index]);\r\n      }\r\n\r\n    function validateForm() {\r\n        // return email.length > 0 && password.length > 0;\r\n        return password.length > 0;\r\n\r\n    }\r\n    const setCookie = (key, value, day) => {\r\n        let expires = 13600 * 1000\r\n        let date = new Date( + new Date() + expires)\r\n        document.cookie = `${key}=${value};expires=${date.toUTCString()}`\r\n    }\r\n\r\n    function handleSubmit(event) {\r\n        let login = !isLogin\r\n        event.preventDefault();\r\n        setIsLogin(login)\r\n        \r\n        // console.log(password.toLowerCase()])\r\n        // console.log(sha256(password))\r\n            if (sha256(password).localeCompare(tok.tokens)===0) {\r\n                // console.log(tok.tokens[password])\r\n                setCookie('login', true, 1)\r\n                history.push('/13')\r\n            }\r\n            else{\r\n                alert(\"Token is not right, please contact jzha524@emory.edu for web access\")\r\n                setCookie('login', '', -1)\r\n                history.push('/')\r\n            }\r\n        }\r\n\r\n\r\n        // if(password.toLowerCase() in tok.tokens){\r\n        //     // console.log(tok.tokens[password.toLowerCase()])\r\n        //     if (tok.tokens[password.toLowerCase()].localeCompare(email)===0) {\r\n        //         // console.log(tok.tokens[password])\r\n        //         setCookie('login', true, 1)\r\n        //         history.push('/13')\r\n        //     }\r\n        //     else{\r\n        //         alert(\"Name and email are not match\")\r\n        //         setCookie('login', '', -1)\r\n        //         history.push('/')\r\n        //     }\r\n        // }\r\n        // else{\r\n        //     alert(\"No such user, please contact the admin\")\r\n        //         setCookie('login', '', -1)\r\n        //         history.push('/')\r\n        // }\r\n    // }\r\n        \r\n\r\n    if (user === null) {\r\n        return <p>Loading profile...</p>;\r\n    }\r\n    else {\r\n\r\n        return (\r\n\r\n            <Layout header=\"Dashboard Log in\">\r\n                <Form.Input\r\n                    fluid\r\n                    icon=\"edit\"\r\n                    iconPosition=\"left\"\r\n                    type=\"password\"\r\n                    placeholder=\"Password\"\r\n                    className=\"auth-input-field\"\r\n                    onChange={e => setPassword(e.target.value)}\r\n                />\r\n                {/* <Form.Input\r\n                    fluid\r\n                    icon=\"envelope\"\r\n                    iconPosition=\"left\"\r\n                    placeholder=\"E-mail address\"\r\n                    className=\"auth-input-field\"\r\n                    onChange={e => setEmail(e.target.value)}\r\n                /> */}\r\n                <Button color=\"teal\" fluid size=\"huge\" onClick={handleSubmit} disabled={!validateForm()}>\r\n                    Login\r\n        </Button>\r\n        <p>Contact jzha524@emory.edu for web access</p>\r\n            </Layout>\r\n            \r\n        )\r\n    }\r\n}","// React\r\nimport React, { Suspense, useState, useEffect } from 'react'\r\n// Components & Hooks\r\n\r\nimport 'semantic-ui-css/semantic.min.css'\r\n\r\nexport default function fetchProfileData() {\r\n    return Promise.all([\r\n      fetchUser(),\r\n    ]).then((user) => {\r\n      return  user ;\r\n    });\r\n  }\r\n  \r\n  function fetchUser() {\r\n    // console.log(\"fetch user...\");\r\n    return new Promise(resolve => {\r\n      setTimeout(() => {\r\n        // console.log(\"fetched user\");\r\n        resolve(fetch('/data/token.json')\r\n        .then(res => {\r\n            res.json()}));\r\n      }, 1000);\r\n    });\r\n  }","// React\r\nimport React from 'react'\r\n// Components & Hooks\r\nimport StateMap from \"./StateMap\";\r\nimport CountyReport from \"./CountyReport\";\r\n// import AboutUs from \"./AboutUs\";\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\n\r\nimport PrivateRoute from \"./privateRoute\"\r\n\r\nimport Login from './login';\r\n\r\n\r\n\r\nApp.propTypes = {};\r\nexport default function App() {\r\n\r\n\r\n\r\n      return (\r\n\r\n        <Router>\r\n          <Switch>\r\n          <PrivateRoute path='/:stateFips/:countyFips' component = {CountyReport}/>\r\n          <PrivateRoute path='/:stateFips' component = {StateMap}/>\r\n          <Route exact path='/'>\r\n              <Login />\r\n            </Route>\r\n    \r\n          </Switch>\r\n        </Router>\r\n      );\r\n\r\n}\r\n\r\n","import 'react-app-polyfill/ie9';\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}