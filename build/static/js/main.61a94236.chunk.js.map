{"version":3,"sources":["components/AppBar.js","components/MapProvider.js","utils.js","components/useGeographies.js","components/Geographies.js","components/Geography.js","components/ComposableMap.js","components/Notes.js","components/StateMap.js","components/CountyReport.js","components/privateRoute.js","components/Layout.js","components/login.js","components/TokenGet.js","components/App.js","index.js"],"names":["AppBar","props","history","useHistory","Menu","borderless","inverted","fixed","style","backgroundImage","backgroundSize","Container","Item","as","header","Image","size","src","onClick","push","fontSize","fontWeight","color","lineHeight","active","menu","content","name","geoPath","d3Geo","projections","MapContext","createContext","MapProvider","width","height","offsetX","offsetY","projection","projectionConfig","restProps","center","cx","cy","rotate","rx","ry","rz","parallels","p1","p2","s","scale","projMemo","useMemo","scl","proj","translate","forEach","d","makeProjection","useCallback","value","path","Provider","getFeatures","geographies","parseGeographies","Array","isArray","feats","feature","objects","Object","keys","features","useGeographies","geography","useContext","useState","setGeographies","useEffect","url","window","fetch","then","res","ok","Error","statusText","json","catch","error","console","log","geos","map","i","rsmKey","svgPath","prepareFeatures","Geographies","children","className","length","memo","onMouseEnter","onMouseLeave","onMouseDown","onMouseUp","onFocus","onBlur","isPressed","setPressed","isFocused","setFocus","tabIndex","evt","ComposableMap","Notes","paddingTop","casesColor","mortalityColor","colorPalette","colorPalette1","colorPalette2","createRef","numberWithCommas","x","toString","pattern","test","replace","StickyExampleAdjacentContext","activeItem","sTate","setsTate","Rail","internal","position","Sticky","offset","compact","pointing","secondary","vertical","href","activeCharacter","e","SvgMap","_","key","y","fill","strokeWidth","stroke","legendSplit","splitpoint","toFixed","legendSplit1","legendMax","legendMin","ChartGraph","dataTS","varGraphPair","metric","stateFips","countyFips","countyname","data1","theme","VictoryTheme","material","containerComponent","responsive","flyoutStyle","padding","left","right","top","bottom","tickLabels","tickFormat","t","Date","toLocaleDateString","month","day","tickValues","Math","round","dependentAxis","tickCount","data","barWidth","alignment","data2","labels","datum","labelComponent","orientation","fontFamily","constrainToVisibleArea","dx","textAnchor","fillOpacity","takeRight","StateMap","config","setConfig","stateName","setStateName","setCountyFips","countyFipscvi","setCountyFipscvi","countyFipssi","setCountyFipssi","countyName","setCountyName","setCountyNamecvi","setCountyNamesi","characterRef","setData","dataUs","setDataUs","data_index","setIndexData","dateCur","setDateCur","colorCVI","setColorCVI","colorSI","setColorSI","casesdaily","casesdailymean14","setCovidMetric","covidMetric14","setCovidMetric14","colors","setDataTS","setTooltipContent","tooltipContentcvi","setTooltipContentcvi","tooltipContentsi","setTooltipContentsi","colorScale","setColorScale","data_cases","setDataCG","data_deaths","setDataDG","datades_cases","setDatadesCG","datades_deaths","setDatadesDG","setLegendMax","setLegendMax1","setLegendMin","setLegendMaxGraph","setLegendSplit","setLegendSplit1","setMetric","metricOptions1","text","dropdownopt","metricName","setMetricName","varNameMap","delayHandler","setDelayHandler","configMatched","configs","find","fips","k","temp_Data_metric","each","sort","a","b","countIqr","quantile","belowIqr","filter","upIqr","split","scaleQuantile","domain","range","split1","thr","thr1","quantiles","floor","csUs","max","min","slice","indexColor","rateIqr","IQR3","interV","dicto","m","cs","scaleMap","si","scaleMapsi","id","ref","marginTop","minWidth","Breadcrumb","Section","Divider","hidden","Grid","columns","Row","Column","Header","paddingRight","Content","Subheader","data-tip","data-for","paddingLeft","Dropdown","background","borderTop","borderLeft","borderRight","borderBottom","borderRadius","minHeight","paddingBottom","inline","search","options","onChange","geo","properties","COUNTYFP","default","outline","pressed","setTimeout","fips2county","clearTimeout","centered","align","todaydate","year","cat","textAlign","domainPadding","ylog","minDomain","gutter","symbol","type","parseFloat","scale1","offsetY1","ticks","axis","grid","label","axisLabel","horizontal","barRatio","ez","includes","offsetY2","Loader","BarChart","var_num","pad","title","cate","keyv","var","var1","CountyReport","useParams","configsCounty","zipCode","setZipCode","setZipCodeFinal","dataG","setDataG","dataZip","setDataZip","setDataMapOut","setLegendMaxD","setLegendMinD","setLegendSplitD","setColorScaleD","tooltipContent","casescum","deathscum","casescumR","deathscumR","deathsdailymean14","casesdailymean14R","deathsdailymean14R","covidMetric","covidMetricLast","setCovidMetricLast","covidMetricGa","setCovidMetricGa","varMap","setVarMap","configscounty","countyfips","Number","csD","link","Table","HeaderCell","colSpan","Popup","trigger","todaydat","basic","flowing","hoverable","List","toLocaleString","casescum14day","casescum14dayR","category14day","change14day","celled","singleLine","date","deathscum14day","deathscum14dayR","cfr","cfrcompare","column","casesdailymean7","deathsdaily","deathsdailymean7","event","ZCTA5CE10","verticalAnchor","standalone","labelRadius","padAngle","striped","Body","v","Cell","isNaN","PrivateRoute","Component","component","render","p","document","cookie","alert","to","pathname","state","from","location","Layout","alt","Form","Group","autoComplete","Login","isLogin","setIsLogin","password","setPassword","user","setUser","tok","setTok","promise","Promise","all","resolve","setCookie","toUTCString","Input","fluid","icon","iconPosition","placeholder","target","Button","login","preventDefault","sha256","localeCompare","tokens","disabled","App","exact","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.61a94236.chunk.js","sourcesContent":["import React from \"react\";\nimport ErrorBoundary from \"react-error-boundary\";\nimport { Container, Menu, Image, Divider } from 'semantic-ui-react';\n\nimport { useHistory } from 'react-router-dom';\n\n\nexport default function AppBar(props) {\n\n  const history = useHistory();\n\n  return (\n    <ErrorBoundary>\n      <Menu borderless inverted fixed='top'\n        style={{backgroundImage: 'url(\"/Emory_COVID_header_LightBlue.jpg\")',\n                backgroundSize: 'cover'}}>\n      {/* <Menu borderless inverted fixed='top'\n        style={{backgroundImage: 'url(\"https://www.htmlcsscolor.com/preview/128x128/103052.png\")',\n                backgroundSize: 'cover'}}> */}\n        <Container>\n          <Menu.Item as='a' header>\n                <Image size='mini' src='https://dph.georgia.gov/themes/custom/ga_forest/orchard/assets/images/icons/logo/ga-logo--gold.svg' />\n          </Menu.Item>\n          \n          <Menu.Item as='a' header onClick={() => history.push('/')}>\n            <span style={{fontSize: '17px',fontWeight: 400, color: '#fff', lineHeight: 1.3}}>\n           <strong>Georgia Department</strong>\n           <br></br>\n           <em>of</em>\n           <strong>&nbsp;Public Health</strong>\n           </span>\n          </Menu.Item>\n          <Menu.Item \n            active={props.menu==='countyReport'} \n            content='Home'\n            onClick={() => history.push('/13')}\n            name='countyReport'/>\n          {/* <Menu.Item \n            active={props.menu==='countyCompare'} \n            onClick={() => history.push('/compare-counties')}\n            name='countyCompare'>\n            Compare Counties\n          </Menu.Item> */}\n          {/* <Menu.Item \n            active={props.menu==='dataSources'} \n            onClick={() => history.push('/data-sources')}\n            name='dataSources'>\n            Data Sources &<br/>Interpretation\n          </Menu.Item>\n          <Menu.Item \n            active={props.menu==='aboutUs'} \n            content='About Us'\n            onClick={() => history.push('/about-team')}\n            name='aboutUs'/>             */}\n          {/* <Menu.Menu position='left'>\n            <Menu.Item as='a' header>\n              <Image size='mini' src='https://dph.georgia.gov/themes/custom/ga_forest/orchard/assets/images/icons/logo/ga-logo--gold.svg' />\n            </Menu.Item>\n          </Menu.Menu> */}\n        </Container>\n      </Menu>\n    </ErrorBoundary>\n  );\n}\n\n\n\n","\nimport React, {\n  createContext,\n  useMemo,\n  useCallback,\n} from \"react\"\nimport PropTypes from \"prop-types\"\nimport * as d3Geo from \"d3-geo\"\n\nconst { geoPath, ...projections } = d3Geo\n\nconst MapContext = createContext()\n\nconst makeProjection = ({\n  projectionConfig = {},\n  projection = \"geoEqualEarth\",\n  width = 800,\n  height = 600,\n  offsetX = 0,\n  offsetY = 0\n}) => {\n  const isFunc = typeof projection === \"function\"\n\n  if (isFunc) return projection\n\n  const scl = projectionConfig.scale || null;\n\n  let proj = projections[projection]().translate([width/2 + (offsetX)*scl/1000 ,\n                                              height/2 +(offsetY)*scl/1000]);\n\n  const supported = [\n    proj.center ? \"center\" : null,\n    proj.rotate ? \"rotate\" : null,\n    proj.scale ? \"scale\" : null,\n    proj.parallels ? \"parallels\" : null,\n  ]\n\n  supported.forEach(d => {\n    if (!d) return\n    proj = proj[d](projectionConfig[d] || proj[d]())\n  })\n\n  return proj\n}\n\nconst MapProvider = ({\n  width,\n  height,\n  offsetX,\n  offsetY,\n  projection,\n  projectionConfig,\n  ...restProps\n}) => {\n  const [cx, cy] = projectionConfig.center || []\n  const [rx, ry, rz] = projectionConfig.rotate || []\n  const [p1, p2] = projectionConfig.parallels || []\n  const s = projectionConfig.scale || null\n\n  const projMemo = useMemo(() => {\n    return makeProjection({\n      projectionConfig: {\n        center: (cx || cx === 0) || (cy || cy === 0) ? [cx, cy] : null,\n        rotate: (rx || rx === 0) || (ry || ry === 0) ? [rx, ry, rz] : null,\n        parallels: (p1 || p1 === 0) || (p2 || p2 === 0) ? [p1, p2] : null,\n        scale: s,\n      },\n      projection,\n      width,\n      height,\n      offsetX,\n      offsetY,\n    })\n  }, [ width, height, projection, cx, cy, rx, ry, rz, p1, p2, s, offsetX, offsetY ])\n\n  const proj = useCallback(projMemo, [projMemo])\n\n  const value = useMemo(() => {\n    return {\n      width,\n      height,\n      projection: proj,\n      path: geoPath().projection(proj),\n    }\n  }, [ width, height, proj ])\n\n  return (<MapContext.Provider value={value} {...restProps} />)\n}\n\nMapProvider.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  offsetX: PropTypes.number,\n  offsetY: PropTypes.number,\n  projection: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.func,\n  ]),\n  projectionConfig: PropTypes.object,\n}\n\nexport { MapProvider, MapContext }\n","\nimport { feature } from \"topojson-client\"\n\nexport function getCoords(w, h, t) {\n  const xOffset = (w * t.k - w) / 2\n  const yOffset = (h * t.k - h) / 2\n  return [w / 2 - (xOffset + t.x) / t.k, h / 2 - (yOffset + t.y) / t.k]\n}\n\nexport function fetchGeographies(url) {\n  return fetch(url)\n    .then(res => {\n      if (!res.ok) {\n        throw Error(res.statusText)\n      }\n      return res.json()\n    }).catch(error => {\n      console.log(\"There was a problem when fetching the data: \", error)\n    })\n}\n\nexport function getFeatures(geographies, parseGeographies) {\n  if (Array.isArray(geographies)) return parseGeographies ? parseGeographies(geographies) : geographies\n  const feats = feature(\n    geographies,\n    geographies.objects[Object.keys(geographies.objects)[0]]\n  ).features\n  return parseGeographies ? parseGeographies(feats) : feats\n}\n\nexport function prepareFeatures(geographies, path) {\n  return geographies ? geographies.map((d, i) => {\n    return {\n      ...d,\n      rsmKey: `geo-${i}`,\n      svgPath: path(d),\n    }\n  }) : []\n}\n\nexport function createConnectorPath(dx = 30, dy = 30, curve = 0.5) {\n  const curvature = Array.isArray(curve) ? curve : [curve, curve]\n  const curveX = dx / 2 * curvature[0]\n  const curveY = dy / 2 * curvature[1]\n  return `M${0},${0} Q${-dx / 2 - curveX},${-dy / 2 + curveY} ${-dx},${-dy}`\n}\n\nexport function isString(geo) { return typeof geo === \"string\" }\n","\nimport { useMemo, useState, useEffect, useContext } from \"react\"\nimport { MapContext } from \"./MapProvider\"\n\nimport { fetchGeographies, getFeatures, prepareFeatures, isString } from \"../utils\"\n\nexport default function useGeographies({ geography, parseGeographies }) {\n  const { path } = useContext(MapContext)\n  const [geographies, setGeographies] = useState()\n\n  useEffect(() => {\n    if (typeof window === `undefined`) return\n\n    if (isString(geography)) {\n      fetchGeographies(geography).then(geos => {\n        if (geos) setGeographies(getFeatures(geos, parseGeographies))\n      })\n    } else {\n      setGeographies(getFeatures(geography, parseGeographies))\n    }\n  }, [geography, parseGeographies])\n\n  const output = useMemo(() => {\n    return prepareFeatures(geographies, path)\n  }, [geographies, path])\n\n  return { geographies: output }\n}\n","\nimport React, { useContext } from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport { MapContext } from \"./MapProvider\"\nimport useGeographies from \"./useGeographies\"\n\nconst Geographies = ({\n  geography,\n  children,\n  parseGeographies,\n  className = \"\",\n  ...restProps\n}) => {\n  const { path, projection } = useContext(MapContext)\n  const { geographies } = useGeographies({ geography, parseGeographies })\n  // console.log(geographies)\n\n  return (\n    <g className={`rsm-geographies ${className}`} {...restProps}>\n      {\n        geographies && geographies.length > 0 &&\n        children({ geographies, path, projection })\n        \n      }\n    </g>\n  )\n}\n\nGeographies.propTypes = {\n  geography: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.object,\n    PropTypes.array,\n  ]),\n  children: PropTypes.func,\n  parseGeographies: PropTypes.func,\n  className: PropTypes.string,\n}\n\nexport default Geographies\n","\nimport React, { useState, memo } from \"react\"\nimport PropTypes from \"prop-types\"\n\nconst Geography = ({\n  geography,\n  onMouseEnter,\n  onMouseLeave,\n  onMouseDown,\n  onMouseUp,\n  onFocus,\n  onBlur,\n  style = {},\n  className = \"\",\n  ...restProps\n}) => {\n  const [isPressed, setPressed] = useState(false)\n  const [isFocused, setFocus] = useState(false)\n\n  function handleMouseEnter(evt) {\n    setFocus(true)\n    if (onMouseEnter) onMouseEnter(evt)\n    // console.log(onMouseEnter)\n  }\n\n  function handleMouseLeave(evt) {\n    setFocus(false)\n    if (isPressed) setPressed(false)\n    if (onMouseLeave) onMouseLeave(evt)\n  }\n\n  function handleFocus(evt) {\n    setFocus(true)\n    if (onFocus) onFocus(evt)\n  }\n\n  function handleBlur(evt) {\n    setFocus(false)\n    if (isPressed) setPressed(false)\n    if (onBlur) onBlur(evt)\n  }\n\n  function handleMouseDown(evt) {\n    setPressed(true)\n    if (onMouseDown) onMouseDown(evt)\n  }\n\n  function handleMouseUp(evt) {\n    setPressed(false)\n    if (onMouseUp) onMouseUp(evt)\n  }\n\n  return (\n    <path\n      tabIndex=\"0\"\n      className={`rsm-geography ${className}`}\n      d={geography.svgPath}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      onFocus={handleFocus}\n      onBlur={handleBlur}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n      style={style[isPressed || isFocused ? (isPressed ? \"pressed\" : \"hover\") : \"default\"]}\n      {...restProps}\n    />\n  )\n}\n\nGeography.propTypes = {\n  geography: PropTypes.object,\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  onMouseDown: PropTypes.func,\n  onMouseUp: PropTypes.func,\n  onFocus: PropTypes.func,\n  onBlur: PropTypes.func,\n  style: PropTypes.object,\n  className: PropTypes.string,\n}\n\nexport default memo(Geography)\n","\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport { MapProvider } from \"./MapProvider\"\n\nconst ComposableMap = ({\n  width = 800,\n  height = 600,\n  offsetX = 0,\n  offsetY = 0,\n  projection = \"geoEqualEarth\",\n  projectionConfig = {},\n  className = \"\",\n  ...restProps\n}) => {\n  return (\n    <MapProvider\n      width={width}\n      height={height}\n      offsetX={offsetX}\n      offsetY={offsetY}\n      projection={projection}\n      projectionConfig={projectionConfig}\n    >\n      <svg\n        width={width}\n        height={height}\n        className={`rsm-svg ${className}`}\n        {...restProps}\n      />\n    </MapProvider>\n  )\n}\n\nComposableMap.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  projection: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.func,\n  ]),\n  projectionConfig: PropTypes.object,\n  className: PropTypes.string,\n}\n\nexport default ComposableMap\n","import React from 'react'\nimport { Grid, List, Divider, Image } from 'semantic-ui-react'\n\nexport default function Notes(props){\n\n  return (\n    <div style={{paddingTop: '2em', fontWeight: 300}}>\n    {/* <Divider/>\n    <Grid>\n      <Grid.Row>\n        <Grid.Column style={{fontSize: '1em', lineHeight: '1.5em'}}>\n          Early data about COVID-19 suggests that communities are affected very differently due to social determinants of health like population density, poverty, residential segregation, underlying chronic health conditions, and availability of medical services. \n          In order to predict how the epidemic will continue to unfold and prepare for the future, it is critical to understand differences in underlying risk factors. \n          There is no one-size-fits all approach to combat the epidemic, but accurate and meaningful data is a key component of a robust public health response that is informed by contextual factors and prioritizes health equity.\n          <br/><br/>\n          The COVID-19 Health Equity Dashboard seeks to fill the gaps in county-level data about the virus and underlying social determinants of health. \n          Our goal is for this Dashboard to facilitate easy comparisons of counties with respect to COVID-19 outcomes and social determinants. \n          We hope this becomes a valuable resource for and critical component of tailored public health responses to COVID-19 across the wide range of environments that Americans inhabit.\n        </Grid.Column>\n      </Grid.Row>\n      <Divider hidden/>\n      <Grid.Row columns={2}>\n        <Grid.Column>          \n          <Image size='small' src='/logo.png' />\n          &copy; 2020 Emory University. All rights reserved.\n        </Grid.Column>\n        <Grid.Column>          \n          <small>\n            This dashboard is created using\n            <List as='ol'>\n              <List.Item as='li' value='-'><a href=\"https://www.react-simple-maps.io/\">React Simple Maps</a> by <a href=\"https://www.zcreativelabs.com/\">z creative labs</a></List.Item>\n              <List.Item as='li' value='-'><a href=\"https://formidable.com/open-source/victory/\">Victory</a> by <a href=\"https://formidable.com/\">Formidable</a></List.Item>\n              <List.Item as='li' value='-'><a href=\"https://github.com/Semantic-Org/Semantic-UI-React\">Semantic UI React</a> by <a href=\"https://github.com/levithomason\">@levithomason</a>and an amazing community of <a href=\"https://github.com/Semantic-Org/Semantic-UI-React/graphs/contributors\">contributors</a></List.Item> \n              <List.Item as='li' value='-'><a href=\"https://github.com/facebook/create-react-app\">Create React App</a> by <a href=\"https://about.fb.com/company-info/\">Facebook</a></List.Item> \n            </List>\n          </small>\n        </Grid.Column>\n      </Grid.Row>\n    </Grid> */}\n    </div>);\n}\n","import React, { useEffect, Component, useState, createRef, useRef } from 'react'\nimport { Container, Grid, Breadcrumb, Dropdown, Header, Loader, Divider, Rail, Sticky, Popup, Button, Menu } from 'semantic-ui-react'\nimport AppBar from './AppBar';\nimport Geographies from './Geographies';\nimport Geography from './Geography';\nimport ComposableMap from './ComposableMap';\nimport {\n    VictoryChart,\n    VictoryTooltip,\n    VictoryVoronoiContainer,\n    VictoryContainer,\n    VictoryGroup,\n    VictoryBar,\n    VictoryTheme,\n    VictoryAxis,\n    VictoryLegend,\n    VictoryLine,\n    VictoryLabel,\n    VictoryScatter,\n    VictoryPie\n} from 'victory';\nimport Slider from \"@material-ui/core/Slider\";\n\n\nimport { useParams, useHistory } from 'react-router-dom';\nimport Notes from './Notes';\nimport ReactTooltip from \"react-tooltip\";\nimport _ from 'lodash';\nimport { scaleQuantile, scaleLinear } from \"d3-scale\";\nimport { quantile, ascending } from 'd3';\nimport fips2county from './fips2county.json'\n// import configscounty from \"./county_config.json\";\n\nimport configs from \"./state_config.json\";\n\nconst casesColor = [\n    \"#72ABB1\",\n    \"#487f84\"\n];\nconst mortalityColor = [\n    \"#0270A1\",\n    \"#024174\"\n];\nconst colorPalette = [\n    \"#e1dce2\",\n    \"#d3b6cd\",\n    \"#bf88b5\",\n    \"#af5194\",\n    \"#99528c\",\n    \"#633c70\",\n];\nconst colorPalette1 = [\n    \"#67335E\",\n    \"#6B2A4D\",\n    \"#70213B\",\n    \"#74182A\",\n    '#7d0707'\n];\nconst colorPalette2 = [\n    \"#e1dce2\",\n    \"#d3b6cd\",\n    \"#bf88b5\",\n    \"#af5194\",\n    \"#99528c\",\n\n];\n\nconst colorOut = '#7d0707';\nconst contextRef = createRef()\n\nconst countyColor = '#f2a900';\nconst stateColor = '#bdbfc1';\nconst nationColor = '#d9d9d7';\nconst colorHighlight = '#f2a900';\nconst marks = [\n    {\n        value: 0,\n        label: 'Mar 1',\n    },\n    {\n        value: 10,\n        label: 'April 1',\n    },\n    {\n        value: 20,\n        label: 'May 1',\n    },\n    {\n        value: 30,\n        label: 'June 1',\n    },\n];\n\nfunction valuetext(value) {\n    return `${value}°C`;\n}\n\nfunction numberWithCommas(x) {\n    x = x.toString();\n    var pattern = /(-?\\d+)(\\d{3})/;\n    while (pattern.test(x))\n        x = x.replace(pattern, \"$1,$2\");\n    return x;\n}\n\nfunction StickyExampleAdjacentContext(props) {\n    const [sTate, setsTate] = useState({ activeItem: 'summary' })\n    const { activeItem } = sTate\n    return (\n\n        <div >\n            <Rail internal size='mini' position='left'>\n                <Sticky offset={150}>\n                    <Menu\n                        size='small'\n                        compact\n                        pointing secondary vertical>\n                        <Menu.Item as='a' href=\"#summary\" name='summary' active={props.activeCharacter == 'summary' || activeItem === 'summary'}\n                            onClick={(e, { name }) => { setsTate({ activeItem: name }) }} />\n                        <Menu.Item as='a' href=\"#re\" name='COVID-19 by Race/Ethnicity' active={activeItem === 'COVID-19 by Race/Ethnicity'}\n                            onClick={(e, { name }) => { setsTate({ activeItem: name }) }} />\n                        <Menu.Item as='a' href=\"#cvi\" name='Community Vulnerability Index' active={activeItem === 'Community Vulnerability Index'}\n                            onClick={(e, { name }) => { setsTate({ activeItem: name }) }} />\n                        <Menu.Item as='a' href=\"#si\" name='Residential Segregation Index' active={activeItem === 'Residential Segregation Index'}\n                            onClick={(e, { name }) => { setsTate({ activeItem: name }) }} />\n                        <Menu.Item as='a' href=\"#urbanrural\" name='Characteristics - Metropolitan Status' active={activeItem === 'Characteristics - Metropolitan Status'}\n                            onClick={(e, { name }) => { setsTate({ activeItem: name }) }} />\n                        <Menu.Item as='a' href=\"#poverty\" name='Characteristics - Poverty' active={activeItem === 'Characteristics - Poverty'}\n                            onClick={(e, { name }) => { setsTate({ activeItem: name }) }} />\n                        <Menu.Item as='a' href=\"#black\" name='Characteristics - African American' active={activeItem === 'Characteristics - African American'}\n                            onClick={(e, { name }) => { setsTate({ activeItem: name }) }} />\n                        <Menu.Item as='a' href=\"#hispanic\" name='Characteristics - Hispanic' active={activeItem === 'Characteristics - Hispanic'}\n                            onClick={(e, { name }) => { setsTate({ activeItem: name }) }} />\n                        <Menu.Item as='a' href=\"#diabetes\" name='Characteristics - Diabetes' active={activeItem === 'Characteristics - Diabetes'}\n                            onClick={(e, { name }) => { setsTate({ activeItem: name }) }} />\n                        <Menu.Item as='a' href=\"#age\" name='Characteristics - Age over 65' active={activeItem === 'Characteristics - Age over 65'}\n                            onClick={(e, { name }) => { setsTate({ activeItem: name }) }} />\n                        <Menu.Item as='a' href=\"#male\" name='Characteristics - Male Percentage' active={activeItem === 'Characteristics - Male Percentage'}\n                            onClick={(e, { name }) => { setsTate({ activeItem: name }) }} />\n                    </Menu>\n                </Sticky>\n            </Rail>\n        </div>\n    )\n\n}\n\nfunction SvgMap(props) {\n    // var lengthSplit1 = props.lengthSplit1;\n    if (props.name === 'casescum') {\n        return (\n            <svg width=\"500\" height=\"55\">\n                {_.map(colorPalette, (color, i) => {\n                    return <rect key={i} x={50 + 25 * i} y={20} width=\"25\" height=\"20\" style={{ fill: color, strokeWidth: 1, stroke: color }} />\n                })}\n                {_.map(colorPalette1, (color, i) => {\n                    return <rect key={i} x={200 + 25 * i} y={20} width=\"25\" height=\"20\" style={{ fill: color, strokeWidth: 1, stroke: color }} />\n                })}\n\n                {/* <rect x={180} y={20} width=\"25\" height=\"20\" style={{ fill: colorOut, strokeWidth: 1, stroke: colorOut }} /> */}\n                <text x={50} y={52} style={{ fontSize: '0.8em' }}>Low</text>\n                <text x={300} y={52} style={{ fontSize: '0.8em' }}>High</text>\n                {_.map(props.legendSplit, (splitpoint, i) => {\n                    if (props.legendSplit[i] < 1) {\n                        return <text key={i} x={57 + 25 * (i)} y={15} style={{ fontSize: '0.7em' }}> {props.legendSplit[i].toFixed(1)}</text>\n                    }\n                    if (props.legendSplit[i] >= 1000) {\n                        return <text key={i} x={70 + 25 * (i)} y={15} style={{ fontSize: '0.7em' }}> {(props.legendSplit[i] / 1000).toFixed(1) + \"K\"}</text>\n                    }\n                    return <text key={i} x={70 + 25 * (i)} y={15} style={{ fontSize: '0.7em' }}> {props.legendSplit[i].toFixed(0)}</text>\n                })}\n\n                {_.map(props.legendSplit1, (splitpoint, i) => {\n                    if (props.legendSplit1[i] >= 1000) {\n                        return <text key={i} x={220 + 25 * (i)} y={15} style={{ fontSize: '0.7em' }}> {(props.legendSplit1[i] / 1000).toFixed(1) + \"K\"}</text>\n                    }\n                    return <text key={i} x={220 + 25 * (i)} y={15} style={{ fontSize: '0.7em' }}> {props.legendSplit1[i].toFixed(0)}</text>\n                })}\n                <text x={325} y={15} style={{ fontSize: '0.7em' }}>{props.legendMax}</text>\n                <text x={50} y={15} style={{ fontSize: '0.7em' }}> {(props.legendMin / 100).toFixed(0)} </text>\n                <rect x={5} y={20} width=\"25\" height=\"20\" style={{ fill: \"#FFFFFF\", strokeWidth: 0.5, stroke: \"#000000\" }} />\n                <text x={8} y={52} style={{ fontSize: '0.7em' }}> N/A </text>\n            </svg>\n\n        )\n    }\n    else {\n        return (\n            <svg width=\"500\" height=\"55\">\n                {_.map(colorPalette, (color, i) => {\n                    return <rect key={i} x={55 + 25 * i} y={20} width=\"25\" height=\"20\" style={{ fill: color, strokeWidth: 1, stroke: color }} />\n                })}\n\n                <rect x={230} y={20} width=\"25\" height=\"20\" style={{ fill: colorOut, strokeWidth: 1, stroke: colorOut }} />\n                <text x={55} y={52} style={{ fontSize: '0.8em' }}>Low</text>\n                <text x={230} y={52} style={{ fontSize: '0.8em' }}>High</text>\n                {_.map(props.legendSplit, (splitpoint, i) => {\n                    if (props.legendSplit[i] < 1) {\n                        return <text key={i} x={62 + 25 * (i)} y={15} style={{ fontSize: '0.7em' }}> {props.legendSplit[i].toFixed(1)}</text>\n                    }\n                    if (props.legendSplit[i] >= 1000) {\n                        return <text key={i} x={72 + 25 * (i)} y={15} style={{ fontSize: '0.7em' }}> {(props.legendSplit[i] / 1000).toFixed(1) + \"K\"}</text>\n                    }\n                    return <text key={i} x={72 + 25 * (i)} y={15} style={{ fontSize: '0.7em' }}> {props.legendSplit[i].toFixed(0)}</text>\n                })}\n                {props.legendMin < 100 ? <text x={55} y={15} style={{ fontSize: '0.7em' }}> {(props.legendMin / 1).toFixed(0)} </text> :\n                    <text x={47} y={15} style={{ fontSize: '0.7em' }}> {(props.legendMin / 1).toFixed(0)} </text>\n                }\n\n\n\n                <text x={224} y={15} style={{ fontSize: '0.7em' }}>{props.legendSplit[colorPalette.length - 1] < 1 ? props.legendSplit[colorPalette.length - 1].toFixed(1)\n                    : props.legendSplit[colorPalette.length - 1] > 1000 ?\n                        (props.legendSplit[colorPalette.length - 1] / 1000).toFixed(1) + \"K\" : props.legendSplit[colorPalette.length - 1].toFixed(0)\n                }</text>\n                <text x={251} y={15} style={{ fontSize: '0.7em' }}>{props.legendMax}</text>\n                <rect x={5} y={20} width=\"25\" height=\"20\" style={{ fill: \"#FFFFFF\", strokeWidth: 0.5, stroke: \"#000000\" }} />\n                <text x={8} y={52} style={{ fontSize: '0.7em' }}> N/A </text>\n\n                {/* <text x={250} y={42} style={{fontSize: '0.8em'}}> Click on a county below </text>\n          <text x={250} y={52} style={{fontSize: '0.8em'}}> for a detailed report. </text> */}\n            </svg>\n\n        )\n    }\n}\n\n\nfunction ChartGraph(props) {\n    var varGraphPair = props.name;\n    var dataTS;\n    var metric = props.metric;\n    var stateFips = props.stateFips;\n    var countyFips = props.countyFips;\n    var countyname = props.countyname;\n\n    if (props.metric === \"casescum14dayR\") {\n        dataTS = props.data1;\n\n        return (\n            <VictoryChart theme={VictoryTheme.material}\n                containerComponent={\n                    <VictoryVoronoiContainer\n                        responsive={false}\n                        flyoutStyle={{ fill: \"white\" }}\n                    />\n                }\n                width={730}\n                height={500}\n                padding={{ left: 55, right: 70, top: 10, bottom: 50 }}>\n                <VictoryAxis\n                    style={{\n                        tickLabels: { fontSize: 25, padding: 5 }\n                    }}\n                    tickFormat={(t) => new Date(t * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric' })}\n\n                    tickValues={[\n                        dataTS[dataTS.length - Math.round(dataTS.length / 4) * 3 - 1].t,\n                        dataTS[dataTS.length - Math.round(dataTS.length / 4) * 2 - 1].t,\n                        dataTS[dataTS.length - Math.round(dataTS.length / 4) - 1].t,\n                        dataTS[dataTS.length - 1].t]}\n\n                />\n                <VictoryAxis dependentAxis tickCount={5}\n                    style={{\n                        tickLabels: { fontSize: 25, padding: 5 }\n                    }}\n                    tickFormat={(y) => (y < 1000 ? (Math.round(y, 2) === 0.00 ? \" \" : y) : (y / 1000 + 'k'))}\n                />\n                <VictoryBar style={{ data: { fill: stateColor } }} barWidth={8} alignment=\"start\" data={dataTS ? dataTS : props.data2[\"99999\"]}\n                    x='t' y={varGraphPair[metric]['name'][0]}\n\n                />\n                <VictoryLine name=\"Line1\" style={{ data: { stroke: countyColor, strokeWidth: ({ active }) => active ? 7 : 5 } }} data={dataTS ? dataTS : props.data2[\"99999\"]}\n                    x='t' y={varGraphPair[metric]['name'][1]}\n                    labels={({ datum }) => `${countyname}\\n` +\n                        `Date: ${new Date(datum.t * 1000).toLocaleDateString()}\\n` +\n                        `${varGraphPair[metric]['legend'][1]}: ${Math.round(datum[varGraphPair[metric]['name'][1]], 2)}\\n` +\n                        `${varGraphPair[metric]['legend'][0]}: ${Math.round(datum[varGraphPair[metric]['name'][0]], 2)}`\n                    }\n                    labelComponent={\n                        <VictoryTooltip\n                            orientation=\"top\"\n                            style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'white' }}\n                            constrainToVisibleArea\n                            labelComponent={<VictoryLabel dx={-100} textAnchor='start' />}\n                            flyoutStyle={{ fill: \"black\", fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\n                        />\n                    }\n                />\n                {varGraphPair[metric]['name'][1] === 'casesdailymean7' || varGraphPair[metric]['name'][1] === 'deathsdailymean7' ?\n                    <VictoryAxis dependentAxis tickCount={5}\n                        style={{\n                            tickLabels: { fontSize: 25, padding: 5 }\n                        }}\n                        tickFormat={(y) => (y < 1000 ? (Math.round(y, 2) === 0.00 ? \" \" : y) : (y / 1000 + 'k'))}\n                    /> :\n                    <VictoryLine name=\"Line11\" style={{ data: { stroke: '#007dba', strokeWidth: ({ active }) => active ? 5 : 3 } }} data={_.takeRight(props.data2[stateFips], 14) ? _.takeRight(props.data2[stateFips], 14) : props.data2[\"99999\"]}\n                        x='t' y={varGraphPair[metric]['name'][1]}\n                        labels={({ datum }) => [`Georgia\\n`,\n                            `Date: ${new Date(datum.t * 1000).toLocaleDateString()}\\n`,\n                            `${varGraphPair[metric]['legend'][1]}: ${Math.round(datum[varGraphPair[metric]['name'][1]], 2)}\\n`,\n                            `${varGraphPair[metric]['legend'][0]}: ${Math.round(datum[varGraphPair[metric]['name'][0]], 2)}`\n                        ]}\n                        labelComponent={\n                            <VictoryTooltip\n                                orientation=\"top\"\n                                style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'white' }}\n                                constrainToVisibleArea\n                                labelComponent={<VictoryLabel dx={-100} textAnchor='start' />}\n                                flyoutStyle={{ fill: \"black\", fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\n                            />\n                        }\n                    />}\n            </VictoryChart>)\n    }\n    else {\n        dataTS = props.data2;\n        return (\n            <VictoryChart theme={VictoryTheme.material}\n                containerComponent={\n                    <VictoryVoronoiContainer\n\n                        responsive={false}\n                        flyoutStyle={{ fill: \"black\" }}\n                    />\n                }\n                width={730}\n                height={500}\n                padding={{ left: 55, right: 70, top: 10, bottom: 50 }}>\n                <VictoryAxis\n                    style={{\n                        tickLabels: { fontSize: 25, padding: 5 }\n                    }}\n                    tickFormat={(t) => new Date(t * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric' })}\n                    tickValues={[\n                        // 1583035200, 1585713600, 1588305600, 1590984000, 1593576000\n                        dataTS['13001'][0].t,\n                        dataTS[\"13001\"][32].t,\n                        dataTS[\"13001\"][62].t,\n                        dataTS[\"13001\"][93].t,\n                        dataTS[\"13001\"][123].t,\n                        dataTS[\"13001\"][154].t,\n                        dataTS[\"13001\"][dataTS[\"13001\"].length - 1].t\n                    ]}\n\n\n                />\n                <VictoryAxis dependentAxis tickCount={6}\n                    style={{\n                        tickLabels: { fontSize: 25, padding: 5 }\n                    }}\n                    tickFormat={(y) => (y < 1000 ? (Math.round(y, 2) === 0.00 ? \" \" : y) : (y / 1000 + 'k'))}\n                />\n                <VictoryBar style={{ data: { fill: stateColor } }} barWidth={4} data={dataTS[stateFips + countyFips] ? dataTS[stateFips + countyFips] : dataTS[\"99999\"]}\n                    x='t' y={varGraphPair[metric]['name'][0]}\n\n                />\n                <VictoryLine name=\"Line1\" style={{ data: { stroke: countyColor, strokeWidth: ({ active }) => active ? 7 : 5 } }} data={dataTS[stateFips + countyFips] ? dataTS[stateFips + countyFips] : dataTS[\"99999\"]}\n                    x='t' y={varGraphPair[metric]['name'][1]}\n                    labels={({ datum }) => `${countyname}\\n` +\n                        `Date: ${new Date(datum.t * 1000).toLocaleDateString()}\\n` +\n                        `${varGraphPair[metric]['legend'][1]}: ${Math.round(datum[varGraphPair[metric]['name'][1]], 2)}\\n` +\n                        `${varGraphPair[metric]['legend'][0]}: ${Math.round(datum[varGraphPair[metric]['name'][0]], 2)}`\n                    }\n                    labelComponent={\n                        <VictoryTooltip\n                            orientation=\"top\"\n                            style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'white' }}\n                            constrainToVisibleArea\n                            labelComponent={<VictoryLabel dx={-75} textAnchor='start' />}\n                            flyoutStyle={{ fill: \"black\", fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\n                        />\n                    }\n                />\n                {varGraphPair[metric]['name'][1] === 'casesdailymean7' || varGraphPair[metric]['name'][1] === 'deathsdailymean7' ?\n                    <VictoryAxis dependentAxis tickCount={5}\n                        style={{\n                            tickLabels: { fontSize: 25, padding: 5 }\n                        }}\n                        tickFormat={(y) => (y < 1000 ? (Math.round(y, 2) === 0.00 ? \" \" : y) : (y / 1000 + 'k'))}\n                    /> :\n                    <VictoryLine name=\"Line11\" style={{ data: { stroke: '#007dba', strokeWidth: ({ active }) => active ? 5 : 3 } }} data={dataTS[stateFips] ? dataTS[stateFips] : dataTS[\"99999\"]}\n                        x='t' y={varGraphPair[metric]['name'][1]}\n                        labels={({ datum }) => [`Georgia\\n`,\n                            `Date: ${new Date(datum.t * 1000).toLocaleDateString()}    \\n`,\n                            `${varGraphPair[metric]['legend'][1]}: ${Math.round(datum[varGraphPair[metric]['name'][1]], 2)}\\n`,\n                            `${varGraphPair[metric]['legend'][0]}: ${Math.round(datum[varGraphPair[metric]['name'][0]], 2)}`\n                        ]}\n                        labelComponent={\n                            <VictoryTooltip\n                                // orientation=\"top\"\n                                style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'white' }}\n                                constrainToVisibleArea\n                                // flyoutComponent={<CustomFlyout/>}\n                                labelComponent={<VictoryLabel dx={-80} textAnchor='start' />}\n                                flyoutStyle={{ fill: \"black\", fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\n                            />\n                        }\n                    />}\n            </VictoryChart>)\n    }\n}\n\n\n\nexport default function StateMap(props) {\n\n    // let { stateFips } = useParams();\n    const hig = '80';\n    const stateFips = '13';\n    const [config, setConfig] = useState();\n    const [stateName, setStateName] = useState('');\n\n    const [countyFips, setCountyFips] = useState('121');\n    const [countyFipscvi, setCountyFipscvi] = useState('121');\n    const [countyFipssi, setCountyFipssi] = useState('121');\n    const [countyName, setCountyName] = useState('Fulton County');\n    const [countyNamecvi, setCountyNamecvi] = useState('Fulton County');\n    const [countyNamesi, setCountyNamesi] = useState('Fulton County');\n    const history = useHistory();\n    const [fips, setFips] = useState('13');\n    const [activeCharacter, setActiveCharacter] = useState('')\n    const activeClass = 'character-block--active';\n    const characterRef = createRef();\n    // const [dataFltrd, setDataFltrd] = useState();\n    // const [dataFltrdUs, setDataFltrdUs] = useState();\n\n    // const [dataStateFltrd, setDataStateFltrd] = useState();\n    // const [dataState, setDataState] = useState();\n\n    const [data, setData] = useState();\n    const [dataUs, setDataUs] = useState();\n    const [data_index, setIndexData] = useState();\n\n    const [dateCur, setDateCur] = useState();\n    const [colorCVI, setColorCVI] = useState();\n    const [colorSI, setColorSI] = useState();\n    // const [stateLabels, setStateLabels] = useState();\n    const [covidMetric, setCovidMetric] = useState({ casesdaily: 'N/A', casesdailymean14: 'N/A', t: 'n/a' });\n    const [covidMetric14, setCovidMetric14] = useState({ casesdaily: 'N/A', casesdailymean14: 'N/A', t: 'n/a' });\n    const colors = {\n        \"1\": '#024174',\n        '2': 'grey'\n    };\n    const [dataTS, setDataTS] = useState();\n    const [tooltipContent, setTooltipContent] = useState('');\n    const [tooltipContentcvi, setTooltipContentcvi] = useState('');\n    const [tooltipContentsi, setTooltipContentsi] = useState('');\n    const [colorScale, setColorScale] = useState();\n    const [data_cases, setDataCG] = useState();\n    const [data_deaths, setDataDG] = useState();\n    const [datades_cases, setDatadesCG] = useState();\n    const [datades_deaths, setDatadesDG] = useState();\n\n    const [legendMax, setLegendMax] = useState([]);\n    const [legendMax1, setLegendMax1] = useState([]);\n    const [legendMin, setLegendMin] = useState([]);\n    const [legendMax_graph, setLegendMaxGraph] = useState({});\n    const [legendSplit, setLegendSplit] = useState([]);\n    const [legendSplit1, setLegendSplit1] = useState([]);\n\n    const [metric, setMetric] = useState('casescumR');\n    const [metric_graph, setMetricGraph] = useState(['casesdaily', 'casesdailymean14']);\n\n    const metricOptions1 = [{ key: 'cacum', value: 'casescum', text: 'Total COVID-19 cases' },\n    { key: 'decum', value: 'deathscum', text: 'Total COVID-19 deaths' },\n    { key: 'cacumr', value: 'casescumR', text: 'COVID-19 cases per 100,000 population' },\n    { key: 'decumr', value: 'deathscumR', text: 'COVID-19 deaths per 100,000 population' },\n    { key: 'cacum14R', value: 'casescum14dayR', text: 'Last 14 days cases per 100,000 population' }];\n\n    const metricOptions2 = [{ key: 'cs', value: 'cs', text: 'Confirmed cases per 100,000 population' },\n    { key: 'hp', value: 'hp', text: 'Hospitalizations per 100,000 population' },\n    { key: 'ds', value: 'ds', text: 'Deaths per 100,000 population' }];\n    const dropdownopt = {\n        'casescum': 'Total COVID-19 cases', 'deathscum': 'Total COVID-19 deaths',\n        'casescumR': 'COVID-19 cases per 100,000 population', 'deathscumR': 'COVID-19 deaths per 100,000 population'\n    };\n\n    const varGraphPair = {\n        \"casescum\": { \"name\": ['casesdaily', 'casesdailymean7'], \"legend\": ['Daily cases', '7-d rolling average '] },\n        \"deathscum\": { \"name\": ['deathsdaily', 'deathsdailymean7'], \"legend\": ['Daily deaths', '7-d rolling average '] },\n        \"casescumR\": { \"name\": ['casesdailyR', 'casesdailymean7R'], \"legend\": ['Daily cases per 100,000', '7-d rolling average'] },\n        \"deathscumR\": { \"name\": ['deathsdailyR', 'deathsdailymean7R'], \"legend\": ['Daily deaths per 100,000', '7-d rolling average'] },\n        \"casescum14dayR\": { \"name\": ['casesdailyR', 'casesdailymean7R'], \"legend\": ['Last 14 days cases per 100,000', '7-d rolling average'] }\n    };\n    const [metricName, setMetricName] = useState('COVID-19 cases per 100,000 population');\n    const varNameMap = {\n        \"casescum\": { \"name\": 'cases', \"text\": \"The map shows the total number of confirmed COVID-19 cases in each county as of \", \"cat\": 'case' },\n        \"casescum14dayR\": { \"name\": 'cases per 100,000 residents', \"text\": \"The map shows the number of confirmed COVID-19 cases for past two weeks in each county as of \", \"cat\": 'case' },\n        \"deathscum\": { \"name\": 'deaths', \"text\": \"The map shows the total number of confirmed COVID-19 deaths in each county as of \", \"cat\": 'death' },\n        \"casescumR\": { \"name\": 'cases per 100,000 residents', \"text\": \"The map shows the total number of confirmed COVID-19 cases per 100,000 residents in each county as of \", \"cat\": 'case' },\n        \"deathscumR\": { \"name\": 'deaths per 100,000 residents', \"text\": \"The map shows the total number of confirmed COVID-19 deaths per 100,000 residents in each county as of \", \"cat\": 'death' }\n    };\n    const varMap = { \"cacum\": metricOptions2[0], \"decum\": metricOptions2[1], \"cacumr\": metricOptions2[2], \"decumr\": metricOptions1[1] };\n    const [delayHandler, setDelayHandler] = useState(null)\n\n    // useEffect(() => {\n    //     console.log(characterRef)\n    //     const handleIntersection = function(entries) {\n    //       entries.forEach((entry) => {\n    //         if (entry.target.id !== activeCharacter && entry.isIntersecting) {\n    //           setActiveCharacter(entry.target.id);\n    //         }\n    //       });\n    //     };\n    //     const observer = new IntersectionObserver(handleIntersection);\n    //     observer.observe(characterRef.current);\n    //     return () => observer.disconnect(); // Clenaup the observer if component unmount.\n    //   }, [activeCharacter, setActiveCharacter, characterRef]);\n\n\n    useEffect(() => {\n\n        const configMatched = configs.find(s => s.fips === stateFips);\n        // console.log(configMatched.fips);\n        if (!configMatched) {\n            history.push('/');\n        } else {\n\n            setConfig(configMatched);\n            // console.log(countyFips);\n            setStateName(configMatched.name);\n            fetch('/data/data_cases_ga.json').then(res => res.json())\n                .then(x => setDataCG(x)\n                );\n            fetch('/data/data_deaths_ga.json').then(res => res.json())\n                .then(x => setDataDG(x));\n            fetch('/data/data_describe_cases.json').then(res => res.json())\n                .then(x => setDatadesCG(x));\n            fetch('/data/data_describe_deaths.json').then(res => res.json())\n                .then(x => setDatadesDG(x));\n            fetch('/data/data.json').then(res => res.json())\n                .then(x => {\n                    setData(x);\n                    setDataUs(x);\n                    if (metric === 'casescum') {\n\n                        _.map(x, (d, k) => {\n                            d.fips = k\n                            return d\n                        });\n                        var temp_Data_metric = [];\n                        // retrieve metric data as list\n                        _.each(x, d => {\n                            if (d.fips.length === 5 && d.fips[0] === '1' && d.fips[1] === '3') {\n                                temp_Data_metric.push(d[metric]);\n                            }\n                        });\n\n                        temp_Data_metric.sort(function (a, b) {\n                            return a - b;\n                        });\n                        var countIqr = 3 * quantile(temp_Data_metric, 0.75) - 2 * quantile(temp_Data_metric, 0.25);\n                        // console.log(temp_Data_metric);\n                        //   var top10 = _.takeRight(temp_Data_metric,10)[0];\n\n                        //   var belowIqr = _.map(_.filter(temp_Data_metric,\n                        //     d => (d<top10\n                        //       )),\n                        //     d => d);\n                        // console.log(belowTop)\n                        var belowIqr = _.map(_.filter(temp_Data_metric,\n                            d => (d < countIqr\n                            )),\n                            d => d);\n\n                        var upIqr = _.map(_.filter(temp_Data_metric,\n                            d => (d >= countIqr\n                            )),\n                            d => d);\n\n                        var split = scaleQuantile()\n                            .domain(belowIqr).range(colorPalette);\n                        var split1 = scaleQuantile()\n                            .domain(upIqr).range(colorPalette1);\n                        // console.log(split.quantiles())\n                        // console.log(split1.quantiles())\n\n\n                        var thr = [];\n                        var thr1 = [];\n                        for (i = 0; i < split1.quantiles().length; i++) {\n                            thr1[i] = split1.quantiles()[i];\n                        }\n                        thr1.push(_.takeRight(temp_Data_metric)[0]);\n\n                        for (i = 0; i < split.quantiles().length; i++) {\n                            thr[i] = split.quantiles()[i];\n                        }\n                        thr.push(Math.round(countIqr / 100) * 100);\n\n                        // console.log(thr1);\n                        var i;\n                        for (i = 0; i < thr.length; i++) {\n                            if (thr[i] < 100) {\n                                thr[i] = Math.round(thr[i] / 10) * 10;\n                            }\n                            else {\n                                thr[i] = Math.round(thr[i] / 100) * 100;\n                            }\n                        }\n                        for (i = 0; i < thr1.length; i++) {\n                            if (thr1[i] < 100) {\n                                thr1[i] = Math.floor(thr1[i] / 10) * 10;\n                            }\n                            else {\n                                thr1[i] = Math.floor(thr1[i] / 100) * 100;\n                            }\n\n                        }\n                        // console.log(thr1)\n\n                        const csUs = {};\n                        var indexColor;\n                        _.map(belowIqr, d => {\n                            if (d >= 0 && d <= thr[0]) {\n                                csUs[d] = colorPalette[0];\n                            };\n                            if (d > thr[0] && d <= thr[1]) {\n                                csUs[d] = colorPalette[1];\n                            }\n                            if (d > thr[1] && d <= thr[2]) {\n                                csUs[d] = colorPalette[2];\n                            }\n                            if (d > thr[2] && d <= thr[3]) {\n                                csUs[d] = colorPalette[3];\n                            }\n                            if (d > thr[3] && d <= thr[4]) {\n                                csUs[d] = colorPalette[4];\n                            }\n                            if (d > thr[4] && d <= thr[5]) {\n                                csUs[d] = colorPalette[5];\n                            }\n                        });\n\n                        _.map(upIqr, d => {\n                            if (d > thr[5] && d <= thr1[0]) {\n                                csUs[d] = colorPalette1[0];\n                            }\n                            if (d > thr1[0] && d <= thr1[1]) {\n                                csUs[d] = colorPalette1[1];\n                            }\n                            if (d > thr1[1] && d <= thr1[2]) {\n                                csUs[d] = colorPalette1[2];\n                            }\n                            if (d > thr1[2] && d <= thr1[3]) {\n                                csUs[d] = colorPalette1[3];\n                            }\n                            if (d > thr1[3] && d <= thr1[4]) {\n                                csUs[d] = colorPalette1[4];\n                            }\n                        })\n                        let scaleMap = csUs;\n\n                        setColorScale(scaleMap);\n\n                        var max = _.takeRight(temp_Data_metric)[0];\n                        var min = temp_Data_metric[0];\n                        // console.log(max);\n                        if (max > 999) {\n                            max = (max / 1000).toFixed(0) + \"K\";\n                            // console.log(max);\n                            setLegendMax(max);\n                        } else {\n                            setLegendMax(max.toFixed(0));\n\n                        }\n                        setLegendMin(min.toFixed(0));\n\n                        setLegendSplit(thr);\n                        // console.log(thr1[4])\n                        setLegendSplit1(thr1.slice(0, 4));\n                        setLegendMax1(thr1[4]);\n\n                    }\n                    else {\n                        _.map(x, (d, k) => {\n                            d.fips = k\n                            return d\n                        });\n\n                        var temp_Data = {};\n                        var temp_Data_metric = [];\n                        // retrieve metric data as list\n                        _.each(x, d => {\n                            if (d.fips.length === 5 && d.fips[0] === '1' && d.fips[1] === '3') {\n                                temp_Data_metric.push(d[metric]);\n                            }\n                        });\n                        temp_Data[metric] = temp_Data_metric;\n\n                        temp_Data_metric.sort(function (a, b) {\n                            return a - b;\n                        });\n                        // console.log(temp_Data_metric);\n                        //   console.log(quantile(temp_Data_metric, 0.75));\n                        //   console.log(quantile(temp_Data_metric, 0.25));\n                        //   console.log(3*quantile(temp_Data_metric, 0.75)-2*quantile(temp_Data_metric, 0.25));\n                        // console.log(6*quantile(temp_Data_metric, 0.75)-5*quantile(temp_Data_metric, 0.25))\n                        var countIqr = 6 * quantile(temp_Data_metric, 0.75) - 5 * quantile(temp_Data_metric, 0.25);\n                        var rateIqr = 3 * quantile(temp_Data_metric, 0.75) - 2 * quantile(temp_Data_metric, 0.25);\n                        var IQR3 = _.map(_.filter(_.map(x, (d, k) => {\n                            d.fips = k\n                            return d\n                        }),\n                            d => (metric === 'casescumR' || metric === 'deathscumR' ? d[metric] > 0 && d[metric] < rateIqr &&\n                                d.fips.length === 5\n                                : d[metric] > 0 && d[metric] < countIqr &&\n                                d.fips.length === 5\n                            )),\n                            d => d[metric]);\n\n                        // console.log(IQR3);\n\n                        const csUs = {};\n                        var indexColor;\n                        _.map(IQR3, d => {\n                            if (metric === 'casescumR' || metric === 'deathscumR' || metric == 'casescum14dayR') { var interV = (rateIqr.toFixed(0)) / colorPalette.length }\n                            else { var interV = (countIqr.toFixed(0)) / colorPalette.length }\n\n                            if (metric === 'deathscum' || metric === 'deathscumR') {\n                                indexColor = Math.round(interV / 10) * 10;\n                            }\n                            else {\n                                indexColor = Math.round(interV / 100) * 100;\n                            }\n                            // console.log(indexColor);\n                            csUs[d] = colorPalette[Math.floor(d / indexColor)];\n                        })\n\n                        _.map(x, d => {\n                            if (d[metric] > indexColor * colorPalette.length) {\n                                csUs[d[metric]] = colorOut;\n                            }\n                            if (d[metric] < indexColor * colorPalette.length && d[metric] > 3 * quantile(temp_Data_metric, 0.75) - 2 * quantile(temp_Data_metric, 0.25).toFixed(0)) {\n                                csUs[d[metric]] = colorPalette[colorPalette.length - 1];\n                            }\n                        })\n                        let scaleMap = csUs;\n\n                        setColorScale(scaleMap);\n\n                        var max = _.takeRight(temp_Data_metric)[0];\n                        var min = temp_Data_metric[0];\n                        // console.log(max);\n                        if (max > 999) {\n                            max = (max / 1000).toFixed(0) + \"K\";\n                            // console.log(max);\n                            setLegendMax(max);\n                        } else {\n                            setLegendMax(max.toFixed(0));\n\n                        }\n                        setLegendMin(min.toFixed(0));\n                        var split = [];\n                        var i = 0;\n                        for (i = 0; i < colorPalette.length; i++) {\n                            split.push((i + 1) * indexColor);\n                        }\n\n                        setLegendSplit(split);\n                        // console.log(split);\n\n                    }\n                });\n\n            // fetch('/data/timeseries13' + '.json').then(res => res.json())\n            //   .then(x => setDataTS(x));\n            fetch('/data/timeseries13' + '.json').then(res => res.json())\n                .then(\n                    x => {\n                        setDataTS(x);\n                        // var max = 0\n                        var dicto = {}\n                        for (var key in x) {\n                            var max = 0\n                            _.each(x[key], m => {\n                                if (m[varGraphPair[metric]['name'][0]] > max) {\n                                    max = m[varGraphPair[metric]['name'][0]];\n                                }\n                            });\n                            dicto[key] = max;\n                            // console.log(varNameMap['cacum'].text);\n                        }\n                        // console.log(dicto);\n                        setLegendMaxGraph(dicto);\n                    });\n\n            fetch('/data/data.json').then(res => res.json())\n                .then(x => {\n                    setDateCur(x)\n\n                    const cs = scaleQuantile()\n                        .domain(_.map(_.filter(_.map(x, (d, k) => {\n                            d.fips = k\n                            return d\n                        }),\n                            d => (\n                                d['cvi'] >= 0)),\n                            d => d['cvi']))\n                        .range(colorPalette2);\n\n                    let scaleMap = {}\n                    _.each(x, d => {\n                        if (d[metric] >= 0) {\n                            scaleMap[d['cvi']] = cs(d['cvi'])\n                        }\n                    });\n\n                    setColorCVI(scaleMap);\n\n                    const si = scaleQuantile()\n                        .domain(_.map(_.filter(_.map(x, (d, k) => {\n                            d.fips = k\n                            return d\n                        }),\n                            d => (\n                                d['si'] >= 0)),\n                            d => d['si']))\n                        .range(colorPalette2);\n\n                    let scaleMapsi = {}\n                    _.each(x, d => {\n                        if (d[metric] >= 0) {\n                            scaleMapsi[d['si']] = si(d['si'])\n                        }\n                    });\n\n                    setColorSI(scaleMapsi);\n\n                });\n            fetch('/data/index_data.json').then(res => res.json())\n                .then(x => {\n                    setIndexData(x)\n                    // console.log(x)\n                });\n        }\n    }, [stateFips, metric]);\n\n\n\n    useEffect(() => {\n        if (dataTS && dataTS[stateFips + countyFips]) {\n            setCovidMetric(_.takeRight(dataTS[stateFips + countyFips])[0]);\n            setCovidMetric14(_.takeRight(dataTS[stateFips + countyFips], 14));\n\n        }\n    }, [dataTS, countyFips])\n\n    if (dataTS && dataUs) {\n\n        return (\n            <div\n                className={`character-block ${activeClass}`}\n                id=\"mycontent\"\n                ref={characterRef}>\n                <AppBar menu='countyReport' />\n                <Container style={{ marginTop: '6em', minWidth: '1260px' }}>\n                    {config &&\n                        <div>\n                            <Breadcrumb>\n                                {/* <Breadcrumb.Section link onClick={() => history.push('/')}></Breadcrumb.Section>\n            <Breadcrumb.Divider /> */}\n                                <Breadcrumb.Section active>{stateName}</Breadcrumb.Section>\n                                {/* <Breadcrumb.Divider /> */}\n                            </Breadcrumb>\n\n                            <Divider id='summary' hidden />\n\n                            <Grid columns={3}>\n\n                                <StickyExampleAdjacentContext activeCharacter />\n                                <Grid.Row>\n                                    <Grid.Column width={16}>\n                                        <Header as='h2' style={{ fontWeight: 400, fontSize: \"16pt\", paddingRight: 0 }}>\n                                            <Header.Content>\n                                                Containment, mitigation, and response to the COVID-19 pandemic require a coordinated and appropriately-resourced effort driven by granular data\n                                                that attend to the local context. The Georgia Health Equity dashboard is a tool to dynamically track the burden of cases and deaths across the\n                                                counties in Georgia. We pair data on COVID-19 cases and deaths collected by the Georgia Department of Public Health with county population characteristics\n                                                to document the differential impact of the epidemic across the state. These data are made available to the public in an effort to inform planning, policy\n                                                development, and decision making by county health officials and individual residents.\n                    <Header.Subheader style={{ fontWeight: 300 }}></Header.Subheader>\n                                            </Header.Content>\n                                        </Header>\n                                    </Grid.Column>\n                                </Grid.Row>\n\n\n                                <Grid.Column width={7} data-tip='ga' data-for='ga' style={{ paddingLeft: \"2\", paddingLeft: \"1\" }}>\n                                    <Header as='h2' style={{ fontWeight: 600 }}>\n                                        <Header.Content>\n                                            <Dropdown\n                                                style={{\n                                                    background: '#fff',\n                                                    fontSize: \"17pt\",\n                                                    fontWeight: 600,\n                                                    theme: '#000000',\n                                                    width: '520px',\n                                                    top: '0em',\n                                                    left: '0em',\n                                                    text: \"Select\",\n                                                    borderTop: 'none',\n                                                    borderLeft: '1px solid #FFFFFF',\n                                                    borderRight: 'none',\n                                                    borderBottom: '0.9px solid #bdbfc1',\n                                                    borderRadius: 0,\n                                                    minHeight: '1.0em',\n                                                    paddingBottom: '0.2em'\n                                                }}\n                                                text={metricName}\n                                                inline\n                                                search\n\n                                                pointing='top'\n                                                options={metricOptions1}\n                                                onChange={(e, { value }) => {\n                                                    setMetric(value);\n                                                    setMetricName(dropdownopt[value]);\n                                                }}\n                                            />\n\n                                        </Header.Content>\n                                    </Header>\n                                    <SvgMap name={metric}\n                                        legendSplit={legendSplit}\n                                        legendSplit1={legendSplit1}\n                                        legendMin={legendMin}\n                                        legendMax={legendMax}\n                                    />\n                                    <ComposableMap projection=\"geoAlbersUsa\"\n                                        projectionConfig={{ scale: `${config.scale}` }}\n                                        width={500}\n                                        height={550}\n                                        data-tip=\"\"\n                                        offsetX={config.offsetX}\n                                        offsetY={config.offsetY}>\n                                        <Geographies geography={config.url}>\n                                            {({ geographies }) => geographies.map(geo =>\n                                                <Geography\n                                                    key={geo.rsmKey}\n                                                    geography={geo}\n                                                    onClick={() => {\n                                                        history.push(\"/\" + stateFips + \"/\" + geo.properties.COUNTYFP);\n                                                        // console.log(geo.properties.COUNTYFP);\n                                                    }}\n                                                    style={{\n                                                        default: {\n                                                            //  fill: \"#ECEFF1\",\n                                                            stroke: \"#607D8B\",\n                                                            strokeWidth: 0.95,\n                                                            outline: \"none\",\n                                                        },\n                                                        pressed: {\n                                                            outline: \"none\",\n                                                        }\n                                                    }}\n                                                    onMouseEnter={() => {\n                                                        setDelayHandler(setTimeout(() => {\n                                                            setCountyFips(geo.properties.COUNTYFP);\n                                                            setCountyName(fips2county[stateFips + geo.properties.COUNTYFP]);\n                                                            // setTooltipContent('Click to see more county data');\n                                                        }, 500))\n                                                    }}\n                                                    onMouseLeave={() => {\n                                                        clearTimeout(delayHandler)\n                                                        setTooltipContent(\"\")\n                                                    }}\n                                                    fill={countyFips === geo.properties.COUNTYFP ? countyColor :\n                                                        ((colorScale && dataUs[stateFips + geo.properties.COUNTYFP] &&\n                                                            dataUs[stateFips + geo.properties.COUNTYFP][metric] && dataUs[stateFips + geo.properties.COUNTYFP][metric] > 0) ?\n                                                            colorScale[dataUs[stateFips + geo.properties.COUNTYFP][metric]] :\n                                                            (colorScale && dataUs[stateFips + geo.properties.COUNTYFP] && dataUs[stateFips + geo.properties.COUNTYFP][metric] === 0) ? '#e1dce2' : '#FFFFFF')}\n                                                />\n                                            )}\n                                        </Geographies>\n                                    </ComposableMap>\n\n                                    <Grid.Row style={{ paddingTop: 0, paddingLeft: '0em', paddingRight: '2em' }} centered>\n                                        <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\n                                            {varNameMap[metric].text}{dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' : (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))} . The darker shading indicates a larger number of {varNameMap[metric].name}.\n                    </small>\n                                    </Grid.Row>\n\n                                </Grid.Column>\n                                <Grid.Column width={9} style={{ paddingLeft: \"2\", paddingLeft: \"1\" }}>\n                                    <Header as='h2' style={{ fontWeight: 400, paddingLeft: \"2.5\" }}>\n                                        <Header.Content>\n                                            {/* {varGraphPair[metric]['legend'][0]} for <span style={{ color: countyColor }}>{countyName}</span> */}\n                                            {varGraphPair[metric]['legend'][0]} for <b>{countyName}</b>\n                                            <Header.Subheader style={{ fontWeight: 300 }}>\n                                            </Header.Subheader>\n                                        </Header.Content>\n                                    </Header>\n                                    <Grid>\n                                        <Grid.Column>\n                                            <Grid.Row style={{ paddingLeft: \"1.5\", paddingTop: \"1\", paddingBottom: 0 }} centered>\n\n                                                <svg width=\"630\" height='80'>\n\n                                                    <rect x={50} y={12} width=\"15\" height=\"2\" style={{ fill: countyColor, strokeWidth: 1, stroke: countyColor }} />\n                                                    <text x={75} y={20} style={{ fontSize: 16 }}>7-day rolling average in {countyName}</text>\n\n                                                    {varGraphPair[metric]['name'][1] === 'casesdailymean7' || varGraphPair[metric]['name'][1] === 'deathsdailymean7' ?\n                                                        <rect x={50} y={40} width=\"15\" height=\"15\" style={{ fill: \"stateColor\", strokeWidth: 1, stroke: stateColor }} /> :\n                                                        <rect x={50} y={35} width=\"15\" height=\"1\" style={{ fill: '#007dba', strokeWidth: 1, stroke: '#007dba' }} />}\n                                                    {varGraphPair[metric]['name'][1] === 'casesdailymean7' || varGraphPair[metric]['name'][1] === 'deathsdailymean7' ?\n                                                        <text x={75} y={52} style={{ fontSize: 16 }}> {varGraphPair[metric]['legend'][0]} </text> :\n                                                        <rect x={50} y={35} width=\"15\" height=\"1\" style={{ fill: '#007dba', strokeWidth: 1, stroke: '#007dba' }} />}\n                                                    {varGraphPair[metric]['name'][1] === 'casesdailymean7' || varGraphPair[metric]['name'][1] === 'deathsdailymean7' ?\n                                                        <text x={250} y={12} style={{ fontSize: 0 }}></text> :\n                                                        <text x={75} y={43} style={{ fontSize: 16 }}>7-day rolling average in Georgia</text>}\n                                                    {varGraphPair[metric]['name'][1] === 'casesdailymean7' || varGraphPair[metric]['name'][1] === 'deathsdailymean7' ?\n                                                        <rect x={0} y={0} width=\"0\" height=\"0\" style={{ fill: 'white', strokeWidth: 0, stroke: 'white' }} /> :\n                                                        <rect x={50} y={55} width=\"15\" height=\"15\" style={{ fill: stateColor, strokeWidth: 1, stroke: stateColor }} />}\n                                                    {varGraphPair[metric]['name'][1] === 'casesdailymean7' || varGraphPair[metric]['name'][1] === 'deathsdailymean7' ?\n                                                        <rect x={0} y={0} width=\"0\" height=\"0\" style={{ fill: 'white', strokeWidth: 0, stroke: 'white' }} /> :\n                                                        <text x={75} y={68} style={{ fontSize: 16 }}> {varGraphPair[metric]['legend'][0]} </text>}\n\n                                                </svg>\n\n                                                <ChartGraph\n                                                    name={varGraphPair}\n                                                    metric={metric}\n                                                    stateFips={stateFips}\n                                                    countyFips={countyFips}\n                                                    data1={covidMetric14}\n                                                    data2={dataTS}\n                                                    countyname={countyName}\n                                                />\n                                            </Grid.Row>\n                                            <Grid.Row style={{ paddingTop: '2em', paddingLeft: '2.9em', paddingRight: '2.9em' }} centered>\n                                                <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\n                                                    This chart shows the daily number of new confirmed COVID-19 {varNameMap[metric].name} in <b>{countyName}</b> as of {dataTS[stateFips + countyFips][0].todaydate === 'n/a' ? 'N/A' :\n                                                        (new Date(dataTS[stateFips + countyFips][0].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}. The daily number reflects the date the {varNameMap[metric].cat} was first reported to DPH.\n                        The vertical bars show the number of new daily {varNameMap[metric].name} while the line shows the 7-day moving average of new daily {varNameMap[metric].name}.\n                        </small>\n                                            </Grid.Row>\n                                        </Grid.Column>\n                                    </Grid>\n                                </Grid.Column>\n                            </Grid>\n\n                            {/* <center> <Divider id=\"her\" hidden style={{ paddingBottom: 50 }} /> </center>\n                            <Grid.Column width={8}>\n                                <Header as='h2' style={{ fontWeight: \"bold\", fontSize: \"27px\", paddingLeft: \".5em\" }}>\n                                    <Header.Content>\n                                        Daily cases in {countyName}\n                                        <Header.Subheader style={{ fontWeight: 300 }}>\n                                        </Header.Subheader>\n                                    </Header.Content>\n                                </Header>\n                                <svg width=\"550\" height=\"90\">\n                                    <rect x={50} y={50} width=\"15\" height=\"15\" style={{ fill: stateColor, strokeWidth: 1, stroke: stateColor }} />\n                                    <rect x={50} y={22} width=\"15\" height=\"1\" style={{ fill: countyColor, strokeWidth: 1, stroke: countyColor }} />\n                                    <text x={75} y={64} style={{ fontSize: 18 }}> Daily new cases </text>\n                                    <text x={75} y={30} style={{ fontSize: 18 }}>7-D Rolling average</text>\n                                </svg>\n                                <VictoryChart theme={VictoryTheme.material}\n                                    containerComponent={\n                                        <VictoryVoronoiContainer\n                                            responsive={false}\n                                            flyoutStyle={{ fill: \"black\" }}\n\n                                        />\n                                    }\n                                    width={550}\n                                    height={450}\n                                    padding={{ left: 40, right: 60, top: 10, bottom: 60 }}>\n                                    <VictoryAxis\n                                        style={{\n                                            tickLabels: { fontSize: 20, padding: 5 }\n                                        }}\n                                        tickFormat={(t) => new Date(t * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric' })}\n                                        tickValues={[\n                                            // 1583035200, 1585713600, 1588305600, 1590984000, 1593576000\n                                            dataTS['13001'][0].t,\n                                            dataTS[\"13001\"][32].t,\n                                            dataTS[\"13001\"][62].t,\n                                            dataTS[\"13001\"][93].t,\n                                            dataTS[\"13001\"][123].t,\n                                            dataTS[\"13001\"][154].t,\n                                            dataTS[\"13001\"][dataTS[\"13001\"].length - 1].t\n                                        ]}\n                                    />\n                                    <VictoryAxis dependentAxis tickCount={5}\n                                        style={{\n                                            tickLabels: { fontSize: 17, paddingLeft: '0em' }\n                                        }}\n                                        tickFormat={(y) => (y < 1000 ? y : (y / 1000 + 'k'))}\n                                    />\n\n                                    <VictoryBar style={{ data: { fill: stateColor } }} barWidth={4} data={dataTS[stateFips + countyFips] ? dataTS[stateFips + countyFips] : dataTS[\"99999\"]}\n                                        x='t' y='casesdaily'\n                                    />\n                                    <VictoryLine name=\"Line\" style={{ data: { stroke: countyColor } }} data={dataTS[stateFips + countyFips] ? dataTS[stateFips + countyFips] : dataTS[\"99999\"]}\n                                        x='t' y='casesdailymean7'\n                                        labels={({ datum }) => `${countyName}\\n` +\n                                            `Date: ${new Date(datum.t * 1000).toLocaleDateString()}\\n` +\n                                            `Daily new cases: ${Math.round(datum.casesdaily, 2)}\\n` +\n                                            `7-d Rolling average of daily new cases: ${Math.round(datum.casesdailymean7, 2)}`\n                                        }\n                                        labelComponent={\n                                            <VictoryTooltip\n                                                orientation=\"top\"\n                                                style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'white' }}\n                                                constrainToVisibleArea\n                                                labelComponent={<VictoryLabel dx={-130} textAnchor='start' />}\n                                                flyoutStyle={{ fill: \"black\", fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\n                                            />\n                                        }\n                                    />\n\n                                </VictoryChart>\n                            </Grid.Column> */}\n                            <center> <Divider id='re' hidden style={{ paddingBottom: 50 }} /> </center>\n                            <center> <Divider /> </center>\n                            <Header as='h2' style={{ textAlign: 'center', color: 'black', fontSize: \"18pt\", paddingTop: 30 }}>\n                                <Header.Content>\n                                    COVID-19 by Race/Ethnicity\n                                </Header.Content>\n                            </Header>\n                            <Grid id='re' style={{ paddingLeft: \"7em\", paddingRight: \"7em\" }}>\n                                <Grid.Row columns={2} style={{ paddingTop: 11 }}>\n                                    <Grid.Column style={{ paddingTop: '1em', paddingBottom: 18 }}>\n                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"18pt\", lineHeight: \"16pt\", paddingRight: '2em' }}>\n                                            <Header.Content>\n                                                Percentage of COVID-19 Cases and Population by Race in Georgia\n            \t\t                        </Header.Content>\n                                        </Header>\n                                        <VictoryChart\n                                            theme={VictoryTheme.material}\n                                            width={500}\n                                            height={300}\n                                            domainPadding={10}\n                                            scale={{ y: props.ylog ? 'log' : 'linear' }}\n                                            minDomain={{ y: props.ylog ? 1 : 0 }}\n                                            padding={{ left: 79, right: 40, top: 60, bottom: 50 }}\n                                            containerComponent={<VictoryContainer responsive={false} />}\n                                        >\n                                            {/* <VictoryLabel style={{\n                                                fontSize: 20, paddingBottom: '0.5em'\n                                            }} text={props.title} x={(560) / 2} y={20} textAnchor=\"middle\" /> */}\n                                            <VictoryAxis style={{\n                                                tickLabels: { fontSize: 18, padding: 2 }\n                                            }} />\n                                            <VictoryAxis dependentAxis\n                                                domain={[0, 1]}\n                                                style={{\n                                                    tickLabels: { fontSize: 18, padding: 2 }\n                                                }}\n                                                tickFormat={(y) => (y <= 1 ? y * 100 : (y / 1000 + 'k'))} />\n                                            <VictoryLegend x={80} y={40}\n                                                orientation=\"horizontal\"\n                                                gutter={1}\n                                                // style={{ border: { stroke: \"black\" } }}\n                                                data={[\n                                                    { name: 'Percentage of Cases', symbol: { fill: colors['1'], type: \"square\" } },\n                                                    { name: \"Percentage of Population\", symbol: { fill: colors['2'], type: \"square\" } },\n                                                ]}\n                                            />\n                                            <VictoryGroup offset={20}\n                                                colorScale={\"qualitative\"}\n                                            >\n\n                                                <VictoryBar\n                                                    alignment=\"start\"\n                                                    barWidth={20}\n                                                    // labels={({ datum }) => (Math.round(datum.value * 100) / 100)}\n                                                    labels={({ datum }) => `Percentage of Cases: ${numberWithCommas(parseFloat(datum.value).toFixed(2) * 100)}%`}\n                                                    data={[{ key: \"White\", 'value': data_cases['13'][\"whiteC_P\"] || 0, 'colors': '1' },\n                                                    { key: \"Black\", 'value': data_cases['13'][\"blackC_P\"] || 0, 'colors': '1' },\n                                                    { key: \"Hispanic\", 'value': data_cases['13'][\"hispanicC_P\"] || 0, 'colors': '1' },\n                                                    { key: \"Other\", 'value': data_cases['13'][\"otherNHC_P\"] || 0, 'colors': '1' }]}\n                                                    labelComponent={<VictoryTooltip\n                                                        orientation=\"top\"\n                                                        style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'black' }}\n                                                        constrainToVisibleArea\n                                                        labelComponent={<VictoryLabel dx={-60} textAnchor='start' />}\n                                                        flyoutStyle={{ fill: colors['1'], fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\n                                                    />}\n                                                    style={{\n                                                        data: {\n                                                            fill: ({ datum }) => colors[datum.colors],\n                                                            fillOpacity: 2\n                                                        }\n                                                    }}\n                                                    x=\"key\"\n                                                    y=\"value\"\n                                                />\n                                                <VictoryBar\n                                                    alignment=\"start\"\n                                                    barWidth={20}\n                                                    data={[{ key: \"White\", 'value': data_cases['13'][\"whiteP\"] || 0, 'colors': '2' },\n                                                    { key: \"Black\", 'value': data_cases['13'][\"blackP\"] || 0, 'colors': '2' },\n                                                    { key: \"Hispanic\", 'value': data_cases['13'][\"hispanicP\"] || 0, 'colors': '2' },\n                                                    { key: \"Other\", 'value': data_cases['13'][\"otherNHP\"] || 0, 'colors': '2' }]}\n                                                    labels={({ datum }) =>\n                                                        `Percentage of Population: ${numberWithCommas(parseFloat(datum.value).toFixed(2) * 100)}%`\n                                                    }\n                                                    labelComponent={<VictoryTooltip\n                                                        orientation=\"top\"\n                                                        style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'black' }}\n                                                        constrainToVisibleArea\n                                                        // labelComponent={<VictoryLabel dx={-50} textAnchor='start' />}\n                                                        flyoutStyle={{ fill: \"grey\", fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\n                                                    />}\n                                                    style={{\n                                                        data: {\n                                                            fill: ({ datum }) => colors[datum.colors],\n                                                            fillOpacity: 0.7\n                                                        }\n                                                    }}\n                                                    x=\"key\"\n                                                    y=\"value\"\n                                                />\n                                            </VictoryGroup>\n                                        </VictoryChart>\n\n                                    </Grid.Column>\n                                    <Grid.Column style={{ paddingTop: '1em', paddingBottom: 18 }}>\n                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"18pt\", lineHeight: \"16pt\", paddingRight: '2em' }}>\n                                            <Header.Content>\n                                                Percentage of COVID-19 Deaths and Population by Race in Georgia\n            \t\t                        </Header.Content>\n                                        </Header>\n                                        <VictoryChart\n                                            theme={VictoryTheme.material}\n                                            width={500}\n                                            height={300}\n                                            domainPadding={10}\n                                            scale={{ y: props.ylog ? 'log' : 'linear' }}\n                                            minDomain={{ y: props.ylog ? 1 : 0 }}\n                                            padding={{ left: 79, right: 40, top: 60, bottom: 50 }}\n                                            containerComponent={<VictoryContainer responsive={false} />}\n                                        >\n                                            {/* <VictoryLabel style={{\n                                                fontSize: 20, paddingBottom: '0.5em'\n                                            }} text={props.title} x={(560) / 2} y={20} textAnchor=\"middle\" /> */}\n                                            <VictoryAxis style={{\n                                                tickLabels: { fontSize: 18, padding: 2 }\n                                            }} />\n                                            <VictoryAxis dependentAxis\n                                                domain={[0, 1]}\n                                                style={{\n                                                    tickLabels: { fontSize: 18, padding: 2 }\n                                                }}\n                                                tickFormat={(y) => (y <= 1 ? y * 100 : (y / 1000 + 'k'))} />\n                                            <VictoryLegend x={80} y={40}\n                                                orientation=\"horizontal\"\n                                                gutter={1}\n                                                // style={{ border: { stroke: \"black\" } }}\n                                                data={[\n                                                    { name: 'Percentage of Deaths', symbol: { fill: colors['1'], type: \"square\" } },\n                                                    { name: \"Percentage of Population\", symbol: { fill: colors['2'], type: \"square\" } },\n                                                ]}\n                                            />\n                                            <VictoryGroup offset={20}\n                                                colorScale={\"qualitative\"}\n                                            >\n\n                                                <VictoryBar\n                                                    alignment=\"start\"\n                                                    barWidth={20}\n                                                    // labels={({ datum }) => (Math.round(datum.value * 100) / 100)}\n                                                    labels={({ datum }) => `Percentage of Deaths: ${numberWithCommas(parseFloat(datum.value).toFixed(2) * 100)}%`}\n                                                    data={[{ key: \"White\", 'value': data_deaths['13'][\"whiteC_P\"] || 0, 'colors': '1' },\n                                                    { key: \"Black\", 'value': data_deaths['13'][\"blackC_P\"] || 0, 'colors': '1' },\n                                                    { key: \"Hispanic\", 'value': data_deaths['13'][\"hispanicC_P\"] || 0, 'colors': '1' },\n                                                    { key: \"Other\", 'value': data_deaths['13'][\"otherNHC_P\"] || 0, 'colors': '1' }]}\n                                                    labelComponent={<VictoryTooltip\n                                                        orientation=\"top\"\n                                                        style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'black' }}\n                                                        constrainToVisibleArea\n                                                        labelComponent={<VictoryLabel dx={-60} textAnchor='start' />}\n                                                        flyoutStyle={{ fill: colors['1'], fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\n                                                    />}\n                                                    style={{\n                                                        data: {\n                                                            fill: ({ datum }) => colors[datum.colors],\n                                                            fillOpacity: 2\n                                                        }\n                                                    }}\n                                                    x=\"key\"\n                                                    y=\"value\"\n                                                />\n                                                <VictoryBar\n                                                    alignment=\"start\"\n                                                    barWidth={20}\n                                                    data={[{ key: \"White\", 'value': data_deaths['13'][\"whiteP\"] || 0, 'colors': '2' },\n                                                    { key: \"Black\", 'value': data_deaths['13'][\"blackP\"] || 0, 'colors': '2' },\n                                                    { key: \"Hispanic\", 'value': data_deaths['13'][\"hispanicP\"] || 0, 'colors': '2' },\n                                                    { key: \"Other\", 'value': data_deaths['13'][\"otherNHP\"] || 0, 'colors': '2' }]}\n                                                    labels={({ datum }) =>\n                                                        `Percentage of Population: ${numberWithCommas(parseFloat(datum.value).toFixed(2) * 100)}%`\n                                                    }\n                                                    labelComponent={<VictoryTooltip\n                                                        orientation=\"top\"\n                                                        style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'black' }}\n                                                        constrainToVisibleArea\n                                                        // labelComponent={<VictoryLabel dx={-50} textAnchor='start' />}\n                                                        flyoutStyle={{ fill: \"grey\", fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\n                                                    />}\n                                                    style={{\n                                                        data: {\n                                                            fill: ({ datum }) => colors[datum.colors],\n                                                            fillOpacity: 0.7\n                                                        }\n                                                    }}\n                                                    x=\"key\"\n                                                    y=\"value\"\n                                                />\n                                            </VictoryGroup>\n                                        </VictoryChart>\n\n                                        {/* <Header.Content style={{ fontWeight: 300, paddingBottom: 10, fontSize: \"14pt\", lineHeight: \"18pt\" }}>\n                                            <center>\n\n                                                <br />\n                                                <b>Average Daily COVID-19 Cases per 100,000</b>\n                                            </center>\n                                        </Header.Content> */}\n                                    </Grid.Column>\n                                </Grid.Row>\n                            </Grid>\n                            <Grid>\n                                <Grid.Row columns={2} style={{ paddingBottom: 7 }}>\n                                    <Grid.Column>\n                                        <Header as='h2' style={{ fontSize: \"14pt\", lineHeight: \"16pt\", width: 450, paddingLeft: 132 }}>\n                                            <Header.Content style={{ fontSize: \"14pt\" }}>\n                                                <Header.Subheader style={{ color: '#000000', lineHeight: \"16pt\", width: 450, fontSize: \"14pt\", textAlign: 'justify' }}>\n                                                    This chart shows the percentage of cases and percentage of the population by race and ethnicity for <b>Georgia</b>. The chart excludes data from {datades_cases['13']['age4catPmiss'].toFixed(2)}% of confirmed cases who were missing information on race/ethnicity. <b>Data Updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' :\n                                                        (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}</b>\n\n                                                </Header.Subheader>\n                                            </Header.Content>\n                                        </Header>\n                                    </Grid.Column>\n                                    <Grid.Column>\n                                        <Header as='h2' style={{ fontWeight: 400, width: 450, paddingLeft: 33 }}>\n                                            <Header.Content style={{ fontSize: \"14pt\" }}>\n                                                <Header.Subheader style={{ color: '#000000', lineHeight: \"16pt\", width: 450, fontSize: \"14pt\", textAlign: 'justify' }}>\n                                                    This chart shows the percentage of deaths and percentage of the population by race and ethnicity for <b>Georgia</b>. The chart excludes data from {datades_deaths['13']['race_3Pmiss'].toFixed(2)}% of confirmed deaths who were missing information on race/ethnicity. <b>Data Updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' :\n                                                        (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}</b>\n                                                </Header.Subheader>\n                                            </Header.Content>\n                                        </Header>\n                                    </Grid.Column>\n                                </Grid.Row>\n                            </Grid>\n\n\n\n\n\n                            <center> <Divider id=\"cvi\" hidden style={{ paddingBottom: 50 }} /> </center>\n                            {/* cvi */}\n                            <center> <Divider /> </center>\n                            <Header as='h2' style={{ textAlign: 'center', color: 'black', fontSize: \"18pt\", paddingTop: 30 }}>\n\n                                <Header.Content>\n                                    COVID-19 by Community Vulnerability Index\n                                <Header.Subheader style={{ color: '#000000', textAlign: 'left', fontSize: \"16pt\", paddingTop: 16, paddingBottom: 28, paddingLeft: 0, paddingRight: 0 }}>\n\n                                        Some communities are limited in their ability to prevent, manage, and mitigate the spread of a pandemic disease, and its economic and social impacts,\n                                        rendering them more vulnerable to COVID-19 than others. The COVID-19 Community vulnerability index (CCVI) incorporates 34 county characteristics that make a\n                                        community vulnerable to the COVID-19 pandemic. These characteristics include sociodemographic factors, risk factors specific to COVID-19, and indicators of the\n                                        capacity of public health systems.\n\n                <br />\n                                        <br />\n\n                                    </Header.Subheader>\n                                </Header.Content>\n                            </Header>\n                            <Grid columns={16}>\n                                <Grid.Column width={7} style={{ paddingLeft: \"2\", paddingLeft: \"1\" }}>\n                                    <Grid.Row style={{ paddingTop: \"0\" }}>\n                                        <Header as='h2' style={{ fontWeight: 600, fontSize: \"16pt\", lineHeight: \"16pt\" }}>\n                                            <Header.Content>\n                                                Georgia Community Vulnerability Index Map\n                                        </Header.Content>\n                                        </Header>\n                                    </Grid.Row>\n                                    <Grid.Row data-tip='cvi' data-for='cvi' style={{ paddingTop: \"0\", paddingBottom: '1em' }}>\n                                        <svg width=\"320\" height=\"80\">\n                                            {_.map(colorPalette2, (color, i) => {\n                                                return <rect key={i} x={110 + 20 * i} y={40} width=\"20\" height=\"20\" style={{ fill: color, strokeWidth: 1, stroke: color }} />\n                                            })}\n                                            <text x={20} y={50} style={{ fontSize: '0.8em' }}>Least vulnerable</text>\n                                            <text x={20} y={59} style={{ fontSize: '0.8em' }}>counties</text>\n                                            <text x={140 + 20 * (colorPalette2.length - 1)} y={50} style={{ fontSize: '0.8em' }}>Highest vulnerable</text>\n                                            <text x={140 + 20 * (colorPalette2.length - 1)} y={59} style={{ fontSize: '0.8em' }}>counties</text>\n\n                                        </svg>\n                                        <ComposableMap projection=\"geoAlbersUsa\"\n                                            projectionConfig={{ scale: `${config.scale1}` }}\n                                            width={600}\n                                            height={600}\n                                            data-tip=\"\"\n                                            offsetX={config.offsetX}\n                                            offsetY={config.offsetY1}>\n                                            <Geographies geography={config.url}>\n                                                {({ geographies }) => geographies.map(geo =>\n                                                    <Geography\n                                                        key={geo.rsmKey}\n                                                        geography={geo}\n\n                                                        style={{\n                                                            default: {\n                                                                //  fill: \"#ECEFF1\",\n                                                                stroke: \"#607D8B\",\n                                                                strokeWidth: 0.95,\n                                                                outline: \"none\",\n                                                            },\n                                                            pressed: {\n                                                                outline: \"none\",\n                                                            }\n                                                        }}\n                                                        onMouseEnter={() => {\n\n                                                            setCountyFipscvi(geo.properties.COUNTYFP);\n                                                            setCountyNamecvi(fips2county[stateFips + geo.properties.COUNTYFP]);\n                                                            setTooltipContentcvi(fips2county[stateFips + geo.properties.COUNTYFP] + \"'s CCVI: \" + dataUs[stateFips + geo.properties.COUNTYFP]['cvi'].toFixed(2));\n\n                                                        }}\n                                                        onMouseLeave={() => {\n                                                            setTooltipContent(\"\")\n                                                        }}\n                                                        fill={countyFipscvi === geo.properties.COUNTYFP ? countyColor :\n                                                            ((colorCVI && dataUs[stateFips + geo.properties.COUNTYFP] &&\n                                                                dataUs[stateFips + geo.properties.COUNTYFP]['cvi'] && dataUs[stateFips + geo.properties.COUNTYFP]['cvi'] > 0) ?\n                                                                colorCVI[dataUs[stateFips + geo.properties.COUNTYFP]['cvi']] :\n                                                                (colorCVI && dataUs[stateFips + geo.properties.COUNTYFP] && dataUs[stateFips + geo.properties.COUNTYFP]['cvi'] === 0) ? '#e1dce2' : '#FFFFFF')}\n                                                    />\n                                                )}\n                                            </Geographies>\n                                        </ComposableMap>\n                                    </Grid.Row>\n                                    <Grid.Row style={{ paddingTop: 0, paddingLeft: '0em', paddingRight: '2em' }} centered>\n                                        <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\n                                            This map shows each Georgia county according to its Community Vulnerability ranking.\n                                            County rankings are based on CCVI quintile, which ranks each county in one of five\n                                            groups depending on CCVI score.\n                                            </small>\n                                    </Grid.Row>\n                                </Grid.Column>\n                                <Grid.Column width={9} style={{ paddingLeft: \"2\", paddingLeft: \"1\" }}>\n                                    <Grid.Row columns={1}>\n                                        <Grid.Column style={{ paddingTop: 0, paddingBottom: 3 }}>\n                                            <Header as='h2' style={{ textAlign: 'center', fontSize: \"16pt\", lineHeight: \"16pt\" }}>\n                                                <Header.Content>\n                                                    COVID-19 Case Rate by Community Vulnerability Index\n                                                </Header.Content>\n                                            </Header>\n                                            <VictoryChart\n                                                theme={VictoryTheme.material}\n                                                width={730}\n                                                height={270}\n                                                domainPadding={20}\n                                                minDomain={{ y: props.ylog ? 1 : 0 }}\n                                                padding={{ left: 200, right: 30, top: 10, bottom: 35 }}\n                                                style={{ fontSize: \"14pt\" }}\n                                                containerComponent={<VictoryContainer responsive={false} />}\n                                            >\n                                                <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\n                                                <VictoryAxis dependentAxis\n                                                    label='COVID-19 Cases per 100,000 Residents'\n                                                    style={{\n                                                        ticks: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, axisLabel: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' },\n                                                        labels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' }, tickLabels: { fontSize: \"0px\", fill: '#000000', padding: 10, fontFamily: 'lato' }\n                                                    }} />\n                                                <VictoryBar\n                                                    horizontal\n                                                    barRatio={0.75}\n                                                    labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(0))}\n                                                    data={[\n                                                        { key: \"Least vulnerable\\n counties\", 'value': (data_index['cvi_index'][\"low20\"]['casesdailymean7R'] / data_index['cvi_index'][\"low20\"]['casesdailymean7R']) * data_index['cvi_index'][\"low20\"]['casesdailymean7R'] || 0, 'ez': data_index['cvi_index'][\"low20\"]['county_list'] },\n                                                        { key: \"Q2\", 'value': (data_index['cvi_index'][\"Q2\"]['casesdailymean7R'] / data_index['cvi_index'][\"Q2\"]['casesdailymean7R']) * data_index['cvi_index'][\"Q2\"]['casesdailymean7R'] || 0, 'ez': data_index['cvi_index'][\"Q2\"]['county_list'] },\n                                                        { key: \"Q3\", 'value': (data_index['cvi_index'][\"Q3\"]['casesdailymean7R'] / data_index['cvi_index'][\"Q3\"]['casesdailymean7R']) * data_index['cvi_index'][\"Q3\"]['casesdailymean7R'] || 0, 'ez': data_index['cvi_index'][\"Q3\"]['county_list'] },\n                                                        { key: \"Q4\", 'value': (data_index['cvi_index'][\"Q4\"]['casesdailymean7R'] / data_index['cvi_index'][\"Q4\"]['casesdailymean7R']) * data_index['cvi_index'][\"Q4\"]['casesdailymean7R'] || 0, 'ez': data_index['cvi_index'][\"Q4\"]['county_list'] },\n                                                        { key: \"Most vulnerable\\n counties\", 'value': (data_index['cvi_index'][\"high20\"]['casesdailymean7R'] / data_index['cvi_index'][\"high20\"]['casesdailymean7R']) * data_index['cvi_index'][\"high20\"]['casesdailymean7R'] || 0, 'ez': data_index['cvi_index'][\"high20\"]['county_list'] }\n                                                    ]}\n                                                    labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"20px\", fill: \"#000000\" }} />}\n                                                    style={{\n                                                        data: {\n                                                            fill: ({ datum }) => datum.ez.includes(countyFipscvi) ? countyColor : casesColor[1]\n                                                        }\n                                                    }}\n                                                    // style={{\n                                                    //     data: {\n                                                    //         fill: casesColor[1]\n                                                    //     }\n                                                    // }}\n                                                    x=\"key\"\n                                                    y=\"value\"\n                                                />\n                                            </VictoryChart>\n                                        </Grid.Column>\n                                    </Grid.Row>\n                                    <Grid.Row style={{ paddingTop: '0.1em', paddingLeft: '2.9em', paddingRight: '0.1em' }} centered>\n                                        <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\n                                            This chart shows the number of COVID-19 cases per 100,000 residents as of {dataTS[stateFips + countyFips][0].todaydate === 'n/a' ? 'N/A' :\n                                                (new Date(dataTS[stateFips + countyFips][0].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))} by CCVI ranking.\n                                                    Counties in the highest 20% are the most vulnerable. The y-axis displays CCVI rankings based on quintiles (groups of 20%). The x-axis displays the average number\n                                                    of COVID-19 cases per 100,000 that occurred in each group of counties ranked by CCVI.\n                        </small>\n                                    </Grid.Row>\n                                    <Grid.Row columns={1}>\n                                        <Grid.Column style={{ paddingTop: 15, paddingBottom: 3 }}>\n                                            <Header as='h2' style={{ textAlign: 'center', fontSize: \"16pt\", lineHeight: \"16pt\", paddingLeft: \"1em\" }}>\n                                                <Header.Content>\n                                                    COVID-19 Death Rate by Community Vulnerability Index\n                                            </Header.Content>\n                                            </Header>\n                                            <VictoryChart\n                                                theme={VictoryTheme.material}\n                                                width={730}\n                                                height={270}\n                                                domainPadding={20}\n                                                minDomain={{ y: props.ylog ? 1 : 0 }}\n                                                padding={{ left: 200, right: 30, top: 10, bottom: 35 }}\n                                                style={{ fontSize: \"14pt\" }}\n                                                containerComponent={<VictoryContainer responsive={false} />}\n                                            >\n                                                <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\n                                                <VictoryAxis dependentAxis\n                                                    label='COVID-19 Deaths per 100,000 Residents'\n                                                    style={{\n                                                        ticks: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, axisLabel: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' },\n                                                        labels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' }, tickLabels: { fontSize: \"0px\", fill: '#000000', padding: 10, fontFamily: 'lato' }\n                                                    }} />\n                                                <VictoryBar\n                                                    horizontal\n                                                    barRatio={0.75}\n                                                    labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(2))}\n                                                    data={[\n                                                        { key: \"Least vulnerable\\n counties\", 'value': data_index['cvi_index'][\"low20\"]['deathsdailymean7R'] || 0, 'ez': data_index['cvi_index'][\"low20\"]['county_list'] },\n                                                        { key: \"Q2\", 'value': data_index['cvi_index'][\"Q2\"]['deathsdailymean7R'] || 0, 'ez': data_index['cvi_index'][\"Q2\"]['county_list'] },\n                                                        { key: \"Q3\", 'value': data_index['cvi_index'][\"Q3\"]['deathsdailymean7R'] || 0, 'ez': data_index['cvi_index'][\"Q3\"]['county_list'] },\n                                                        { key: \"Q4\", 'value': data_index['cvi_index'][\"Q4\"]['deathsdailymean7R'] || 0, 'ez': data_index['cvi_index'][\"Q4\"]['county_list'] },\n                                                        { key: \"Most vulnerable\\n counties\", 'value': data_index['cvi_index'][\"high20\"]['deathsdailymean7R'] || 0, 'ez': data_index['cvi_index'][\"high20\"]['county_list'] }\n                                                    ]}\n                                                    labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"20px\", fill: \"#000000\" }} />}\n                                                    style={{\n                                                        data: {\n                                                            fill: ({ datum }) => datum.ez.includes(countyFipscvi) ? countyColor : mortalityColor[1]\n                                                        }\n                                                    }}\n                                                    x=\"key\"\n                                                    y=\"value\"\n                                                />\n                                            </VictoryChart>\n\n                                        </Grid.Column>\n                                    </Grid.Row>\n                                    <Grid.Row style={{ paddingTop: '0.1em', paddingLeft: '2.9em', paddingRight: '0.1em' }} centered>\n                                        <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\n                                            This chart shows the number of COVID-19 deaths per 100,000 residents as of {dataTS[stateFips + countyFips][0].todaydate === 'n/a' ? 'N/A' :\n                                                (new Date(dataTS[stateFips + countyFips][0].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))} by CCVI ranking.\n                                                    The y-axis displays CCVI rankings based on quintiles (groups of 20%). The x-axis displays the average number of COVID-19 deaths per 100,000 that occurred in each\n                                                    group of counties ranked by CCVI.\n                        </small>\n                                    </Grid.Row>\n                                </Grid.Column>\n                            </Grid>\n\n                            {/* SI */}\n                            <center> <Divider id='si' hidden style={{ paddingBottom: 50 }} /> </center>\n                            <center> <Divider /> </center>\n                            <Header as='h2' style={{ textAlign: 'center', color: 'black', fontSize: \"18pt\", paddingTop: 30 }}>\n                                <Header.Content>\n                                    COVID-19 by Residential Segregation Index\n                                <Header.Subheader style={{ color: '#000000', textAlign: 'left', fontSize: \"16pt\", paddingTop: 16, paddingBottom: 28, paddingLeft: 0, paddingRight: 0 }}>\n\n                                        Residential segregation is a key factor responsible for the disproportionate impact of COVID-19 on different communities in the US.\n                                        It allows for social conditions that facilitate transmission and vulnerability to the effects of pandemic to be concentrated in\n                                        geographically defined areas. This results in the entire neighborhood being more exposed to the virus than others and more\n                                        vulnerable to its effects and limited quality of care. In the figures below, we show the severity of COVID-19 across\n                                        Georgia counties with different levels of residential segregation index.\n\n                <br />\n                                        <br />\n\n                                    </Header.Subheader>\n                                </Header.Content>\n                            </Header>\n\n                            <Grid columns={16}>\n                                <Grid.Column width={7} style={{ paddingLeft: \"2\", paddingLeft: \"1\" }}>\n\n                                    <Grid.Row data-tip='si' data-for='si' style={{ paddingLeft: \"2\", paddingLeft: \"1\", paddingBottom: '1.5em' }}>\n                                        <Header as='h2' style={{ fontWeight: 600, fontSize: \"16pt\", lineHeight: \"16pt\" }}>\n                                            <Header.Content>\n                                                Georgia Residential Segregation Index Map\n                                        </Header.Content>\n                                        </Header>\n                                        <svg width=\"500\" height=\"80\">\n                                            {_.map(colorPalette2, (color, i) => {\n                                                return <rect key={i} x={110 + 20 * i} y={40} width=\"20\" height=\"20\" style={{ fill: color, strokeWidth: 1, stroke: color }} />\n                                            })}\n                                            <text x={20} y={50} style={{ fontSize: '0.8em' }}>Least vulnerable</text>\n                                            <text x={20} y={59} style={{ fontSize: '0.8em' }}>counties</text>\n                                            <text x={140 + 20 * (colorPalette2.length - 1)} y={50} style={{ fontSize: '0.8em' }}>Highest vulnerable</text>\n                                            <text x={140 + 20 * (colorPalette2.length - 1)} y={59} style={{ fontSize: '0.8em' }}>counties</text>\n                                            <rect x={140 + 20 * (colorPalette2.length - 1) + 100} y={40} width=\"25\" height=\"20\" style={{ fill: \"#FFFFFF\", strokeWidth: 0.5, stroke: \"#000000\" }} />\n                                            <text x={140 + 20 * (colorPalette2.length - 1) + 130} y={52} style={{ fontSize: '0.7em' }}> N/A </text>\n\n                                        </svg>\n                                        <ComposableMap projection=\"geoAlbersUsa\"\n                                            projectionConfig={{ scale: `${config.scale1}` }}\n                                            width={600}\n                                            height={600}\n                                            data-tip=\"\"\n                                            offsetX={config.offsetX}\n                                            offsetY={config.offsetY2}>\n                                            <Geographies geography={config.url}>\n                                                {({ geographies }) => geographies.map(geo =>\n                                                    <Geography\n                                                        key={geo.rsmKey}\n                                                        geography={geo}\n\n                                                        style={{\n                                                            default: {\n                                                                //  fill: \"#ECEFF1\",\n                                                                stroke: \"#607D8B\",\n                                                                strokeWidth: 0.95,\n                                                                outline: \"none\",\n                                                            },\n                                                            pressed: {\n                                                                outline: \"none\",\n                                                            }\n                                                        }}\n                                                        onMouseEnter={() => {\n\n                                                            setCountyFipssi(geo.properties.COUNTYFP);\n                                                            setCountyNamesi(fips2county[stateFips + geo.properties.COUNTYFP]);\n                                                            setTooltipContentsi(fips2county[stateFips + geo.properties.COUNTYFP] + \"'s SI: \" + dataUs[stateFips + geo.properties.COUNTYFP]['si'].toFixed(0));\n\n                                                        }}\n                                                        onMouseLeave={() => {\n                                                            setTooltipContent(\"\")\n                                                        }}\n                                                        fill={countyFipssi === geo.properties.COUNTYFP ? countyColor :\n                                                            ((colorSI && dataUs[stateFips + geo.properties.COUNTYFP] &&\n                                                                dataUs[stateFips + geo.properties.COUNTYFP]['si'] && dataUs[stateFips + geo.properties.COUNTYFP]['si'] > 0) ?\n                                                                colorSI[dataUs[stateFips + geo.properties.COUNTYFP]['si']] :\n                                                                (colorScale && dataUs[stateFips + geo.properties.COUNTYFP] && dataUs[stateFips + geo.properties.COUNTYFP][metric] === 0) ? '#e1dce2' : '#FFFFFF')}\n                                                    />\n                                                )}\n                                            </Geographies>\n                                        </ComposableMap>\n                                    </Grid.Row>\n                                    <Grid.Row style={{ paddingTop: 0, paddingLeft: '0em', paddingRight: '2em' }} centered>\n                                        <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\n                                            This map shows each Georgia county according to its residential segregation ranking.\n                                            County rankings are based on residential segregation quintile, which ranks each county\n                                            in one of five groups depending on residential segregation score.\n                                            </small>\n                                    </Grid.Row>\n                                </Grid.Column>\n                                <Grid.Column width={9} style={{ paddingLeft: \"2\", paddingLeft: \"1\" }}>\n                                    <Grid.Row columns={1}>\n                                        <Grid.Column style={{ paddingTop: 0, paddingBottom: 3 }}>\n                                            <Header as='h2' style={{ textAlign: 'center', fontSize: \"16pt\", lineHeight: \"16pt\" }}>\n                                                <Header.Content>\n                                                    COVID-19 Case Rate by Residential Segregation Index\n                                                    </Header.Content>\n                                            </Header>\n                                            <VictoryChart\n                                                theme={VictoryTheme.material}\n                                                width={730}\n                                                height={270}\n                                                domainPadding={20}\n                                                minDomain={{ y: props.ylog ? 1 : 0 }}\n                                                padding={{ left: 220, right: 30, top: 10, bottom: 35 }}\n                                                style={{ fontSize: \"14pt\" }}\n                                                containerComponent={<VictoryContainer responsive={false} />}\n                                            >\n                                                <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\n                                                <VictoryAxis dependentAxis\n                                                    label='COVID-19 Cases per 100,000 Residents'\n                                                    style={{\n                                                        ticks: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, axisLabel: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' },\n                                                        labels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' }, tickLabels: { fontSize: \"0px\", fill: '#000000', padding: 10, fontFamily: 'lato' }\n                                                    }} />\n                                                <VictoryBar\n                                                    horizontal\n                                                    barRatio={0.75}\n                                                    labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(0))}\n                                                    data={[\n                                                        {\n                                                            key: \"Counties with lowest\\n residential segregation\", 'value':\n                                                                data_index['s_index'][\"low20\"]['casesdailymean7R'] || 0, 'ez': data_index['s_index'][\"low20\"]['county_list']\n                                                        },\n                                                        { key: \"Q2\", 'value': data_index['s_index'][\"Q2\"]['casesdailymean7R'] || 0, 'ez': data_index['s_index'][\"Q2\"]['county_list'] },\n                                                        {\n                                                            key: \"Q3\", 'value': data_index['s_index'][\"Q3\"]['casesdailymean7R']\n                                                                || 0, 'ez': data_index['s_index'][\"Q3\"]['county_list']\n                                                        },\n                                                        { key: \"Q4\", 'value': data_index['s_index'][\"Q4\"]['casesdailymean7R'] || 0, 'ez': data_index['s_index'][\"Q4\"]['county_list'] },\n                                                        {\n                                                            key: \"Counties with highest\\n residential segregation\",\n                                                            'value': data_index['s_index'][\"high20\"]['casesdailymean7R'] || 0, 'ez': data_index['s_index'][\"high20\"]['county_list']\n                                                        }\n                                                    ]}\n                                                    labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"20px\", fill: \"#000000\" }} />}\n                                                    style={{\n                                                        data: {\n                                                            fill: ({ datum }) => datum.ez.includes(countyFipssi) ? countyColor : casesColor[1]\n                                                        }\n                                                    }}\n                                                    x=\"key\"\n                                                    y=\"value\"\n                                                />\n                                            </VictoryChart>\n                                        </Grid.Column>\n                                    </Grid.Row>\n                                    <Grid.Row style={{ paddingTop: '0.1em', paddingLeft: '2.9em', paddingRight: '0.1em' }} centered>\n                                        <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\n                                            This chart shows the number of COVID-19 cases per 100,000 residents as of {dataTS[stateFips + countyFips][0].todaydate === 'n/a' ? 'N/A' :\n                                                (new Date(dataTS[stateFips + countyFips][0].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))} by residential segregation index.\n                                                    The y-axis displays residential segregation rankings based on quintiles (groups of 20%). The x-axis displays the average number of COVID-19 cases per 100,000 that occurred in each\n                                                    group of counties ranked by residential segregation.\n                        </small>\n                                    </Grid.Row>\n                                    <Grid.Row columns={1}>\n                                        <Grid.Column style={{ paddingTop: 15, paddingBottom: 3 }}>\n                                            <Header as='h2' style={{ textAlign: 'center', fontSize: \"16pt\", lineHeight: \"16pt\", paddingLeft: \"1em\" }}>\n                                                <Header.Content>\n                                                    COVID-19 Death Rate by Residential Segregation Index\n                                                    </Header.Content>\n                                            </Header>\n                                            <VictoryChart\n                                                theme={VictoryTheme.material}\n                                                width={730}\n                                                height={270}\n                                                domainPadding={20}\n                                                minDomain={{ y: props.ylog ? 1 : 0 }}\n                                                padding={{ left: 220, right: 30, top: 10, bottom: 35 }}\n                                                style={{ fontSize: \"14pt\" }}\n                                                containerComponent={<VictoryContainer responsive={false} />}\n                                            >\n                                                <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\n                                                <VictoryAxis dependentAxis\n                                                    label='COVID-19 Deaths per 100,000 Residents'\n                                                    style={{\n                                                        ticks: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, axisLabel: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' },\n                                                        labels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' }, tickLabels: { fontSize: \"0px\", fill: '#000000', padding: 10, fontFamily: 'lato' }\n                                                    }} />\n                                                <VictoryBar\n                                                    horizontal\n                                                    barRatio={0.75}\n                                                    labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(2))}\n                                                    data={[\n                                                        {\n                                                            key: \"Counties with lowest\\n residential segregation\", 'value':\n                                                                (data_index['s_index'][\"low20\"]['deathsdailymean7R'] / data_index['s_index'][\"Q2\"]['deathsdailymean7R'])\n                                                                * data_index['s_index'][\"Q2\"]['deathsdailymean7R'] || 0, 'ez': data_index['s_index'][\"low20\"]['county_list']\n                                                        },\n                                                        {\n                                                            key: \"Q2\", 'value': (data_index['s_index'][\"Q2\"]['deathsdailymean7R']\n                                                                / data_index['s_index'][\"Q2\"]['deathsdailymean7R']) *\n                                                                data_index['s_index'][\"Q2\"]['deathsdailymean7R'] || 0, 'ez': data_index['s_index'][\"Q2\"]['county_list']\n                                                        },\n                                                        {\n                                                            key: \"Q3\", 'value': (data_index['s_index'][\"Q3\"]['deathsdailymean7R']\n                                                                / data_index['s_index'][\"Q2\"]['deathsdailymean7R'])\n                                                                * data_index['s_index'][\"Q2\"]['deathsdailymean7R'] || 0, 'ez': data_index['s_index'][\"Q3\"]['county_list']\n                                                        },\n                                                        {\n                                                            key: \"Q4\", 'value': (data_index['s_index'][\"Q4\"]['deathsdailymean7R']\n                                                                / data_index['s_index'][\"Q2\"]['deathsdailymean7R'])\n                                                                * data_index['s_index'][\"Q2\"]['deathsdailymean7R'] || 0, 'ez': data_index['s_index'][\"Q4\"]['county_list']\n                                                        },\n                                                        {\n                                                            key: \"Counties with highest\\n residential segregation\", 'value': (data_index['s_index'][\"high20\"]['deathsdailymean7R']\n                                                                / data_index['s_index'][\"Q2\"]['deathsdailymean7R'])\n                                                                * data_index['s_index'][\"Q2\"]['deathsdailymean7R'] || 0, 'ez': data_index['s_index'][\"high20\"]['county_list']\n                                                        }\n                                                    ]}\n                                                    labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"20px\", fill: \"#000000\" }} />}\n                                                    style={{\n                                                        data: {\n                                                            fill: ({ datum }) => datum.ez.includes(countyFipssi) ? countyColor : mortalityColor[1]\n                                                        }\n                                                    }}\n                                                    x=\"key\"\n                                                    y=\"value\"\n                                                />\n                                            </VictoryChart>\n\n                                        </Grid.Column>\n                                    </Grid.Row>\n                                    <Grid.Row style={{ paddingTop: '0.1em', paddingLeft: '2.9em', paddingRight: '0.1em' }} centered>\n                                        <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\n                                            This chart shows the number of COVID-19 deaths per 100,000 residents as of {dataTS[stateFips + countyFips][0].todaydate === 'n/a' ? 'N/A' :\n                                                (new Date(dataTS[stateFips + countyFips][0].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))} by residential segregation index.\n                                                    The y-axis displays residential segregation rankings based on quintiles (groups of 20%). The x-axis displays the average number of COVID-19 deaths per 100,000 that occurred in each\n                                                    group of counties ranked by residential segregation.\n                        </small>\n                                    </Grid.Row>\n\n                                </Grid.Column>\n                            </Grid>\n\n\n\n\n\n                            {/* Charactor */}\n                            <center> <Divider id=\"urbanrural\" hidden style={{ paddingBottom: 50 }} /> </center>\n                            <center> <Divider /> </center>\n                            <Header as='h2' style={{ textAlign: 'center', color: 'black', fontSize: \"18pt\", paddingTop: 30 }}>\n                                <Header.Content style={{ fontSize: \"18pt\", color: 'black' }}>\n                                    COVID-19 by County Characteristics\n              <Header.Subheader style={{ color: '#000000', textAlign: 'left', fontSize: \"16pt\", paddingTop: 16, paddingBottom: 28, paddingLeft: 0, paddingRight: 0 }}>\n                                        {/* <center> <b style={{ fontSize: \"18pt\" }}>COVID-19 cases per 100,000 across the population characteristics of all the counties in the United States </b> </center> */}\n\n                                        COVID-19 affects communities very differently. Underlying medical conditions;\n                                        racial, gender, and age demographics; income levels; and population density are\n                                        all contributing factors that determine the rate of COVID-19 in different counties.\n                                        Some of the many county characteristics that may have a large impact on disparate rates\n                                        of infection are displayed below, with counties divided into quintiles based on each characteristic,\n                                        unless otherwise noted.\n              </Header.Subheader>\n                                </Header.Content>\n                            </Header>\n                            {/* urbanrural */}\n                            <Grid id='urbanrural' style={{ paddingLeft: \"7em\", paddingRight: \"7em\" }}>\n                                <Grid.Row columns={2} style={{ paddingTop: 11 }}>\n                                    <Grid.Column style={{ paddingTop: '1em', paddingBottom: 18 }}>\n                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"18pt\", lineHeight: \"16pt\" }}>\n                                            <Header.Content>\n                                                COVID-19 Case Rate by Urban-Rural Classification\n            \t\t                        </Header.Content>\n                                        </Header>\n                                        <VictoryChart\n                                            theme={VictoryTheme.material}\n                                            width={500}\n                                            height={220}\n                                            domainPadding={20}\n                                            minDomain={{ y: props.ylog ? 1 : 0 }}\n                                            padding={{ left: 250, right: 30, top: 30, bottom: 35 }}\n                                            style={{ fontSize: \"13pt\" }}\n                                            containerComponent={<VictoryContainer responsive={false} />}\n                                        >\n                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\n                                            <VictoryAxis dependentAxis\n                                                label={\"COVID-19 Cases per\\n 100,000 Residents\"}\n                                                style={{\n                                                    ticks: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, axisLabel: { fontSize: \"14px\", fill: '#000000', fontFamily: 'lato' },\n                                                    labels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' }, tickLabels: { fontSize: \"0px\", fill: '#000000', padding: 10, fontFamily: 'lato' }\n                                                }} /><VictoryBar\n                                                horizontal\n                                                barRatio={0.7}\n                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(0))}\n                                                data={[\n                                                    { key: \"Inner city\", 'value': data_index['urbanrural'][\"LargeCentralMetro\"]['casesdailymean7R'] || 0 },\n                                                    { key: \"Large suburbs\", 'value': data_index['urbanrural'][\"LargeFringeMetro\"]['casesdailymean7R'] || 0 },\n                                                    { key: \"Small suburbs\", 'value': data_index['urbanrural'][\"MediumMetro\"]['casesdailymean7R'] || 0 },\n                                                    { key: \"Small cities\", 'value': data_index['urbanrural'][\"SmallMetro\"]['casesdailymean7R'] || 0 },\n                                                    { key: \"Smallest cities\", 'value': data_index['urbanrural'][\"Micropolitan(Nonmetro)\"]['casesdailymean7R'] || 0 },\n                                                    { key: \"Rural counties\", 'value': data_index['urbanrural'][\"NonCore(Nonmetro)\"]['casesdailymean7R'] || 0 }\n                                                ]}\n                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"20px\", fill: \"#000000\" }} />}\n                                                style={{\n                                                    data: {\n                                                        fill: casesColor[1]\n                                                    }\n                                                }}\n                                                x=\"key\"\n                                                y=\"value\"\n                                            />\n                                        </VictoryChart>\n\n                                        <Header.Content style={{ fontWeight: 300, paddingBottom: 10, fontSize: \"14pt\", lineHeight: \"18pt\" }}>\n                                            <center>\n\n                                                <br />\n                                                <b>Average Daily COVID-19 Cases per 100,000</b>\n                                            </center>\n                                        </Header.Content>\n                                    </Grid.Column>\n                                    <Grid.Column style={{ paddingTop: '1em', paddingBottom: 18 }}>\n                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"18pt\", lineHeight: \"18pt\" }}>\n                                            <Header.Content>\n                                                COVID-19 Death Rate by Urban-Rural Classification\n                </Header.Content>\n                                        </Header>\n\n                                        <VictoryChart\n                                            theme={VictoryTheme.material}\n                                            width={500}\n                                            height={220}\n                                            domainPadding={20}\n                                            minDomain={{ y: props.ylog ? 1 : 0 }}\n                                            padding={{ left: 250, right: 30, top: 30, bottom: 35 }}\n                                            style={{ fontSize: \"13pt\" }}\n                                            containerComponent={<VictoryContainer responsive={false} />}\n                                        >\n                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\n                                            <VictoryAxis dependentAxis\n                                                label={\"COVID-19 Deaths per\\n 100,000 Residents\"}\n                                                style={{\n                                                    ticks: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, axisLabel: { fontSize: \"14px\", fill: '#000000', fontFamily: 'lato' },\n                                                    labels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' }, tickLabels: { fontSize: \"0px\", fill: '#000000', padding: 10, fontFamily: 'lato' }\n                                                }} />\n                                            <VictoryBar\n                                                horizontal\n                                                barRatio={0.7}\n                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(3))}\n                                                data={[\n                                                    { key: \"Inner city\", 'value': data_index['urbanrural'][\"LargeCentralMetro\"]['deathsdailymean7R'] || 0 },\n                                                    { key: \"Large suburbs\", 'value': data_index['urbanrural'][\"LargeFringeMetro\"]['deathsdailymean7R'] || 0 },\n                                                    { key: \"Small suburbs\", 'value': data_index['urbanrural'][\"MediumMetro\"]['deathsdailymean7R'] || 0 },\n                                                    { key: \"Small cities\", 'value': data_index['urbanrural'][\"SmallMetro\"]['deathsdailymean7R'] || 0 },\n                                                    { key: \"Rural areas near cities\", 'value': data_index['urbanrural'][\"Micropolitan(Nonmetro)\"]['deathsdailymean7R'] || 0 },\n                                                    { key: \"Remote rural areas\", 'value': data_index['urbanrural'][\"NonCore(Nonmetro)\"]['deathsdailymean7R'] || 0 }\n                                                ]}\n                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"18px\", fill: \"#000000\" }} />}\n                                                style={{\n                                                    data: {\n                                                        fill: mortalityColor[1]\n                                                    }\n                                                }}\n                                                x=\"key\"\n                                                y=\"value\"\n                                            />\n                                        </VictoryChart>\n\n\n                                        <Header.Content style={{ fontWeight: 300, paddingBottom: 10, fontSize: \"14pt\", lineHeight: \"18pt\" }}>\n                                            <center>\n\n                                                <br />\n                                                <b>Average Daily COVID-19 Deaths per 100,000</b>\n                                            </center>\n                                        </Header.Content>\n\n                                    </Grid.Column>\n                                </Grid.Row>\n                            </Grid>\n                            <Grid>\n                                <Grid.Row columns={2} style={{ paddingBottom: 7 }}>\n                                    <Grid.Column>\n                                        <Header as='h2' style={{ fontSize: \"14pt\", lineHeight: \"16pt\", width: 450, paddingLeft: 132 }}>\n                                            <Header.Content style={{ fontSize: \"14pt\" }}>\n                                                <Header.Subheader style={{ color: '#000000', lineHeight: \"16pt\", width: 450, fontSize: \"14pt\", textAlign: 'justify' }}>\n                                                    This chart shows the number of COVID-19 cases per 100,000 residents (x-axis) by metropolitan status (y-axis).\n                                                Inner city counties have {'>'} 1 million population or contain the entire or large part of the population of the largest principle city.\n                                                Large suburban counties have a population {'>'} 1 million, but do not qualify as inner city. Small suburban counties have a population of 250,000-999,999.\n                                                Small cities have populations {'<'} 250,000 and are near large cities. Smallest city counties have an urbanized area with population between 10,000-49,999.\n                                                Remote rural counties have populations less than 10,000 individuals. This urban-rural classification comes from the National Center for Health Statistics. <b>Data Updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' :\n                                                        (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}</b>\n\n                                                </Header.Subheader>\n                                            </Header.Content>\n                                        </Header>\n                                    </Grid.Column>\n                                    <Grid.Column>\n                                        <Header as='h2' style={{ fontWeight: 400, width: 450, paddingLeft: 33 }}>\n                                            <Header.Content style={{ fontSize: \"14pt\" }}>\n                                                <Header.Subheader style={{ color: '#000000', lineHeight: \"16pt\", width: 450, fontSize: \"14pt\", textAlign: 'justify' }}>\n                                                    This chart shows the number of COVID-19 deaths per 100,000 residents (x-axis) by metropolitan status (y-axis).\n                                                Inner city counties have {'>'} 1 million population or contain the entire or large part of the population of the largest principle city.\n                                                Large suburban counties have a population {'>'} 1 million, but do not qualify as inner city. Small suburban counties have a population of 250,000-999,999.\n                                                Small cities have populations {'<'} 250,000 and are near large cities. Smallest city counties have an urbanized area with population between 10,000-49,999.\n                                                Remote rural counties have populations less than 10,000 individuals. This urban-rural classification comes from the National Center for Health Statistics. <b>Data Updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' :\n                                                        (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}</b>\n                                                </Header.Subheader>\n                                            </Header.Content>\n                                        </Header>\n                                    </Grid.Column>\n                                </Grid.Row>\n                            </Grid>\n                            <center> <Divider id=\"poverty\" hidden style={{ paddingBottom: 50 }} /> </center>\n                            {/* poverty */}\n                            <Grid style={{ paddingLeft: \"7em\", paddingRight: \"7em\" }}>\n                                <Grid.Row columns={2} style={{ paddingTop: '2em' }}>\n                                    <Grid.Column style={{ paddingTop: 10, paddingBottom: 18 }}>\n                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"18pt\", lineHeight: \"16pt\" }}>\n                                            <Header.Content>\n                                                COVID-19 Case Rate by Percentage of <br />Population in Poverty\n</Header.Content>\n                                        </Header>\n                                        <VictoryChart\n                                            theme={VictoryTheme.material}\n                                            width={500}\n                                            height={220}\n                                            domainPadding={20}\n                                            minDomain={{ y: props.ylog ? 1 : 0 }}\n                                            padding={{ left: 310, right: 30, top: 30, bottom: 35 }}\n                                            style={{ fontSize: \"14pt\" }}\n                                            containerComponent={<VictoryContainer responsive={false} />}\n                                        >\n                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\n                                            <VictoryAxis dependentAxis\n                                                label={\"COVID-19 Cases per\\n 100,000 Residents\"}\n                                                style={{\n                                                    ticks: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, axisLabel: { fontSize: \"14px\", fill: '#000000', fontFamily: 'lato' },\n                                                    labels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' }, tickLabels: { fontSize: \"0px\", fill: '#000000', padding: 10, fontFamily: 'lato' }\n                                                }} />\n                                            <VictoryBar\n                                                horizontal\n                                                barRatio={0.7}\n                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(0))}\n                                                data={[\n                                                    { key: \"Counties with lowest percentage\\n population in poverty\", 'value': data_index['poverty'][\"low20\"]['casesdailymean7R'] || 0 },\n                                                    { key: \"Q2\", 'value': data_index['poverty'][\"Q2\"]['casesdailymean7R'] || 0 },\n                                                    { key: \"Q3\", 'value': data_index['poverty'][\"Q3\"]['casesdailymean7R'] || 0 },\n                                                    { key: \"Q4\", 'value': data_index['poverty'][\"Q4\"]['casesdailymean7R'] || 0 },\n                                                    { key: \"Counties with highest percentage\\n  population in poverty\", 'value': data_index['poverty'][\"high20\"]['casesdailymean7R'] || 0 }\n                                                ]}\n                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"20px\", fill: \"#000000\" }} />}\n                                                style={{\n                                                    data: {\n                                                        fill: \"#487f84\"\n                                                    }\n                                                }}\n                                                x=\"key\"\n                                                y=\"value\"\n                                            />\n                                        </VictoryChart>\n\n                                        <Header.Content style={{ fontWeight: 300, paddingBottom: 10, fontSize: \"14pt\", lineHeight: \"18pt\" }}>\n                                            <center>\n                                                <br />\n                                                <b>Average Daily COVID-19 Cases per 100,000</b>\n                                            </center>\n                                        </Header.Content>\n\n                                    </Grid.Column>\n                                    <Grid.Column style={{ paddingTop: 10, paddingBottom: 18 }}>\n                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"18pt\", lineHeight: \"18pt\" }}>\n                                            <Header.Content>\n                                                COVID-19 Death Rate by Percentage of <br />Population in Poverty\n</Header.Content>\n                                        </Header>\n                                        <VictoryChart\n                                            theme={VictoryTheme.material}\n                                            width={500}\n                                            height={220}\n                                            domainPadding={20}\n                                            minDomain={{ y: props.ylog ? 1 : 0 }}\n                                            padding={{ left: 310, right: 30, top: 30, bottom: 35 }}\n                                            style={{ fontSize: \"14pt\" }}\n                                            containerComponent={<VictoryContainer responsive={false} />}\n                                        >\n                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\n                                            <VictoryAxis dependentAxis\n                                                label={\"COVID-19 Deaths per\\n 100,000 Residents\"}\n                                                style={{\n                                                    ticks: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, axisLabel: { fontSize: \"14px\", fill: '#000000', fontFamily: 'lato' },\n                                                    labels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' }, tickLabels: { fontSize: \"0px\", fill: '#000000', padding: 10, fontFamily: 'lato' }\n                                                }} />\n                                            <VictoryBar\n                                                horizontal\n                                                barRatio={0.7}\n                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(2))}\n                                                data={[\n                                                    { key: \"Counties with lowest percentage\\n population in poverty\", 'value': data_index['poverty'][\"low20\"]['deathsdailymean7R'] || 0 },\n                                                    { key: \"Q2\", 'value': data_index['poverty'][\"Q2\"]['deathsdailymean7R'] || 0 },\n                                                    { key: \"Q3\", 'value': data_index['poverty'][\"Q3\"]['deathsdailymean7R'] || 0 },\n                                                    { key: \"Q4\", 'value': data_index['poverty'][\"Q4\"]['deathsdailymean7R'] || 0 },\n                                                    { key: \"Counties with highest percentage\\n population in poverty\", 'value': data_index['poverty'][\"high20\"]['deathsdailymean7R'] || 0 }\n                                                ]}\n                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"20px\", fill: \"#000000\" }} />}\n                                                style={{\n                                                    data: {\n                                                        fill: mortalityColor[1]\n                                                    }\n                                                }}\n                                                x=\"key\"\n                                                y=\"value\"\n                                            />\n                                        </VictoryChart>\n\n                                        <Header.Content style={{ fontWeight: 300, paddingBottom: 10, fontSize: \"14pt\", lineHeight: \"18pt\" }}>\n                                            <center>\n                                                <br />\n                                                <b>Average Daily COVID-19 Deaths per 100,000</b>\n                                            </center>\n                                        </Header.Content>\n\n                                    </Grid.Column>\n                                </Grid.Row>\n                            </Grid>\n                            <Grid>\n                                <Grid.Row columns={2} style={{ paddingBottom: 7 }}>\n                                    <Grid.Column>\n                                        <Header as='h2' style={{ fontWeight: 400, width: 450, paddingLeft: 132 }}>\n                                            <Header.Content>\n                                                <Header.Subheader style={{ color: '#000000', width: 450, fontSize: \"14pt\", textAlign: 'justify', lineHeight: \"16pt\" }}>\n                                                    This chart shows the number of COVID-19 cases per 100,000 residents by county ranking on percentage of population in poverty.\n                                                    The y-axis displays percentage population in poverty rankings for counties based on quintiles (groups of 20%). The x-axis displays\n                                                the average number of COVID-19 cases per 100,000 that occurred in each group of counties ranked by percentage population in poverty. <b>Data Updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' :\n                                                        (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}</b>\n                                                </Header.Subheader>\n                                            </Header.Content>\n                                        </Header>\n                                    </Grid.Column>\n                                    <Grid.Column>\n                                        <Header as='h2' style={{ fontWeight: 400, width: 450, paddingLeft: 33 }}>\n                                            <Header.Content>\n                                                <Header.Subheader style={{ color: '#000000', width: 450, fontSize: \"14pt\", textAlign: 'justify', lineHeight: \"16pt\" }}>\n                                                    This chart shows the number of COVID-19 deaths per 100,000 residents by county ranking on percentage of population in poverty.\n                                                    The y-axis displays percentage population in poverty rankings for counties based on quintiles (groups of 20%). The x-axis displays\n                                                the average number of COVID-19 deaths per 100,000 that occurred in each group of counties ranked by percentage population in poverty. <b>Data Updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' :\n                                                        (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}</b>\n                                                </Header.Subheader>\n                                            </Header.Content>\n                                        </Header>\n                                    </Grid.Column>\n                                </Grid.Row>\n                            </Grid>\n                            <center> <Divider id=\"black\" hidden style={{ paddingBottom: 50 }} /> </center>\n                            {/* black */}\n                            <Grid id='black' style={{ paddingLeft: \"7em\", paddingRight: \"7em\" }}>\n                                <Grid.Row columns={2} style={{ paddingTop: '2em' }}>\n                                    <Grid.Column style={{ paddingTop: 10, paddingBottom: 18 }}>\n                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"18pt\", lineHeight: \"16pt\" }}>\n                                            <Header.Content>\n                                                COVID-19 Case Rate by Percentage of <br />African American Population\n            \t\t</Header.Content>\n                                        </Header>\n\n                                        <VictoryChart\n                                            theme={VictoryTheme.material}\n                                            width={500}\n                                            height={220}\n                                            domainPadding={20}\n                                            minDomain={{ y: props.ylog ? 1 : 0 }}\n                                            padding={{ left: 310, right: 30, top: 30, bottom: 35 }}\n                                            style={{ fontSize: \"14pt\" }}\n                                            containerComponent={<VictoryContainer responsive={false} />}\n                                        >\n                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\n                                            <VictoryAxis dependentAxis\n                                                label={\"COVID-19 Cases per\\n 100,000 Residents\"}\n                                                style={{\n                                                    ticks: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, axisLabel: { fontSize: \"14px\", fill: '#000000', fontFamily: 'lato' },\n                                                    labels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' }, tickLabels: { fontSize: \"0px\", fill: '#000000', padding: 10, fontFamily: 'lato' }\n                                                }} />\n                                            <VictoryBar\n                                                horizontal\n                                                barRatio={0.7}\n                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(0))}\n                                                data={[\n                                                    { key: \"Counties with lowest percentage\\n African American\", 'value': data_index['black'][\"low20\"]['casesdailymean7R'] || 0 },\n                                                    { key: \"Q2\", 'value': data_index['black'][\"Q2\"]['casesdailymean7R'] || 0 },\n                                                    { key: \"Q3\", 'value': data_index['black'][\"Q3\"]['casesdailymean7R'] || 0 },\n                                                    { key: \"Q4\", 'value': data_index['black'][\"Q4\"]['casesdailymean7R'] || 0 },\n                                                    { key: \"Counties with highest percentage\\n African American\", 'value': data_index['black'][\"high20\"]['casesdailymean7R'] || 0 }\n                                                ]}\n                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"20px\", fill: \"#000000\" }} />}\n                                                style={{\n                                                    data: {\n                                                        fill: \"#487f84\"\n                                                    }\n                                                }}\n                                                x=\"key\"\n                                                y=\"value\"\n                                            />\n                                        </VictoryChart>\n\n                                        <Header.Content style={{ fontWeight: 300, paddingBottom: 10, fontSize: \"14pt\", lineHeight: \"18pt\" }}>\n                                            <center>\n                                                <br />\n                                                <b>Average Daily COVID-19 Cases per 100,000</b>\n                                            </center>\n                                        </Header.Content>\n\n                                    </Grid.Column>\n                                    <Grid.Column style={{ paddingTop: 10, paddingBottom: 18 }}>\n                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"18pt\", lineHeight: \"18pt\" }}>\n                                            <Header.Content>\n                                                COVID-19 Death Rate by Percentage of <br />African American Population\n                </Header.Content>\n                                        </Header>\n\n                                        <VictoryChart\n                                            theme={VictoryTheme.material}\n                                            width={500}\n                                            height={220}\n                                            domainPadding={20}\n                                            minDomain={{ y: props.ylog ? 1 : 0 }}\n                                            padding={{ left: 310, right: 30, top: 30, bottom: 35 }}\n                                            style={{ fontSize: \"14pt\" }}\n                                            containerComponent={<VictoryContainer responsive={false} />}\n                                        >\n                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\n                                            <VictoryAxis dependentAxis\n                                                label={\"COVID-19 Deaths per\\n 100,000 Residents\"}\n                                                style={{\n                                                    ticks: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, axisLabel: { fontSize: \"14px\", fill: '#000000', fontFamily: 'lato' },\n                                                    labels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' }, tickLabels: { fontSize: \"0px\", fill: '#000000', padding: 10, fontFamily: 'lato' }\n                                                }} />\n                                            <VictoryBar\n                                                horizontal\n                                                barRatio={0.7}\n                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(2))}\n                                                data={[\n                                                    { key: \" Counties with lowest\\n percentage African American\", 'value': data_index['black'][\"low20\"]['deathsdailymean7R'] || 0 },\n                                                    { key: \"Q2\", 'value': data_index['black'][\"Q2\"]['deathsdailymean7R'] || 0 },\n                                                    { key: \"Q3\", 'value': data_index['black'][\"Q3\"]['deathsdailymean7R'] || 0 },\n                                                    { key: \"Q4\", 'value': data_index['black'][\"Q4\"]['deathsdailymean7R'] || 0 },\n                                                    { key: \"Counties with highest\\n percentage African American\", 'value': data_index['black'][\"high20\"]['deathsdailymean7R'] || 0 }\n                                                ]}\n                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"20px\", fill: \"#000000\" }} />}\n                                                style={{\n                                                    data: {\n                                                        fill: mortalityColor[1]\n                                                    }\n                                                }}\n                                                x=\"key\"\n                                                y=\"value\"\n                                            />\n                                        </VictoryChart>\n\n\n                                        <Header.Content style={{ fontWeight: 300, paddingBottom: 10, fontSize: \"14pt\", lineHeight: \"18pt\" }}>\n                                            <center>\n                                                <br />\n                                                <b>Average Daily COVID-19 Deaths per 100,000</b>\n                                            </center>\n                                        </Header.Content>\n\n                                    </Grid.Column>\n                                </Grid.Row>\n                            </Grid>\n                            <Grid>\n                                <Grid.Row columns={2} style={{ paddingBottom: 7 }}>\n                                    <Grid.Column>\n                                        <Header as='h2' style={{ fontWeight: 400, width: 450, paddingLeft: 132 }}>\n                                            <Header.Content>\n                                                <Header.Subheader style={{ color: '#000000', width: 450, fontSize: \"14pt\", textAlign: 'justify', lineHeight: \"16pt\" }}>\n                                                    This chart shows the number of COVID-19 cases per 100,000 residents by percentage African American population ranking.\n                                                    The y-axis displays percentage African American population rankings based on quintiles (groups of 20%). The x-axis displays\n                                                the average number of COVID-19 cases per 100,000 that occurred in each group of counties ranked by percentage African American. <b>Data Updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' :\n                                                        (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}</b>\n                                                </Header.Subheader>\n                                            </Header.Content>\n                                        </Header>\n                                    </Grid.Column>\n                                    <Grid.Column>\n                                        <Header as='h2' style={{ fontWeight: 400, width: 450, paddingLeft: 33 }}>\n                                            <Header.Content>\n                                                <Header.Subheader style={{ color: '#000000', width: 450, fontSize: \"14pt\", textAlign: 'justify', lineHeight: \"16pt\" }}>\n                                                    This chart shows the number of COVID-19 deaths per 100,000 residents by percentage African American population ranking.\n                                                    The y-axis displays percentage African American population rankings based on quintiles (groups of 20%). The x-axis displays\n                                                the average number of COVID-19 deaths per 100,000 that occurred in each group of counties ranked by percentage African American. <b>Data Updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' :\n                                                        (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}</b>\n                                                </Header.Subheader>\n                                            </Header.Content>\n                                        </Header>\n                                    </Grid.Column>\n                                </Grid.Row>\n                            </Grid>\n                            <center> <Divider id=\"hispanic\" hidden style={{ paddingBottom: 50 }} /> </center>\n                            {/* Hispanic */}\n                            <Grid id='hispanic' style={{ paddingLeft: \"7em\", paddingRight: \"7em\" }}>\n                                <Grid.Row columns={2} style={{ paddingTop: '2em' }}>\n                                    <Grid.Column style={{ paddingTop: 10, paddingBottom: 18 }}>\n                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"18pt\", lineHeight: \"18pt\" }}>\n                                            <Header.Content>\n                                                COVID-19 Case Rate by Percentage of <br /> Hispanic Population\n            \t\t</Header.Content>\n                                        </Header>\n\n                                        <VictoryChart\n                                            theme={VictoryTheme.material}\n                                            width={500}\n                                            height={220}\n                                            domainPadding={20}\n                                            minDomain={{ y: props.ylog ? 1 : 0 }}\n                                            padding={{ left: 250, right: 30, top: 30, bottom: 35 }}\n                                            style={{ fontSize: \"14pt\" }}\n                                            containerComponent={<VictoryContainer responsive={false} />}\n                                        >\n                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\n                                            <VictoryAxis dependentAxis\n                                                label={\"COVID-19 Cases per\\n 100,000 Residents\"}\n                                                style={{\n                                                    ticks: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, axisLabel: { fontSize: \"14px\", fill: '#000000', fontFamily: 'lato' },\n                                                    labels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' }, tickLabels: { fontSize: \"0px\", fill: '#000000', padding: 10, fontFamily: 'lato' }\n                                                }} />\n                                            <VictoryBar\n                                                horizontal\n                                                barRatio={0.7}\n                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(0))}\n                                                data={[\n                                                    { key: \"Counties with lowest\\n percentage Hispanic\", 'value': data_index['hispanic'][\"low20\"]['casesdailymean7R'] || 0 },\n                                                    { key: \"Q2\", 'value': data_index['hispanic'][\"Q2\"]['casesdailymean7R'] || 0 },\n                                                    { key: \"Q3\", 'value': data_index['hispanic'][\"Q3\"]['casesdailymean7R'] || 0 },\n                                                    { key: \"Q4\", 'value': data_index['hispanic'][\"Q4\"]['casesdailymean7R'] || 0 },\n                                                    { key: \"Counties with highest\\n percentage Hispanic\", 'value': data_index['hispanic'][\"high20\"]['casesdailymean7R'] || 0 }\n                                                ]}\n                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"20px\", fill: \"#000000\" }} />}\n                                                style={{\n                                                    data: {\n                                                        fill: \"#487f84\"\n                                                    }\n                                                }}\n                                                x=\"key\"\n                                                y=\"value\"\n                                            />\n                                        </VictoryChart>\n\n                                        <Header.Content style={{ fontWeight: 300, paddingBottom: 10, fontSize: \"14pt\", lineHeight: \"18pt\" }}>\n                                            <center>\n                                                <br />\n                                                <b>Average Daily COVID-19 Cases per 100,000</b>\n                                            </center>\n                                        </Header.Content>\n\n                                    </Grid.Column>\n                                    <Grid.Column style={{ paddingTop: 10, paddingBottom: 18 }}>\n                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"18pt\", lineHeight: \"18pt\" }}>\n                                            <Header.Content>\n                                                COVID-19 Death Rate by Percentage of <br /> Hispanic Population\n                </Header.Content>\n                                        </Header>\n\n                                        <VictoryChart\n                                            theme={VictoryTheme.material}\n                                            width={500}\n                                            height={220}\n                                            domainPadding={20}\n                                            minDomain={{ y: props.ylog ? 1 : 0 }}\n                                            padding={{ left: 250, right: 30, top: 30, bottom: 35 }}\n                                            style={{ fontSize: \"14pt\" }}\n                                            containerComponent={<VictoryContainer responsive={false} />}\n                                        >\n                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\n                                            <VictoryAxis dependentAxis\n                                                label={\"COVID-19 Deaths per\\n 100,000 Residents\"}\n                                                style={{\n                                                    ticks: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, axisLabel: { fontSize: \"14px\", fill: '#000000', fontFamily: 'lato' },\n                                                    labels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' }, tickLabels: { fontSize: \"0px\", fill: '#000000', padding: 10, fontFamily: 'lato' }\n                                                }} />\n                                            <VictoryBar\n                                                horizontal\n                                                barRatio={0.7}\n                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(3))}\n                                                data={[\n                                                    { key: \"Counties with lowest\\n percentage Hispanic\", 'value': data_index['hispanic'][\"low20\"]['deathsdailymean7R'] || 0 },\n                                                    { key: \"Q2\", 'value': data_index['hispanic'][\"Q2\"]['deathsdailymean7R'] || 0 },\n                                                    { key: \"Q3\", 'value': data_index['hispanic'][\"Q3\"]['deathsdailymean7R'] || 0 },\n                                                    { key: \"Q4\", 'value': data_index['hispanic'][\"Q4\"]['deathsdailymean7R'] || 0 },\n                                                    { key: \"Counties with highest\\n percentage Hispanic\", 'value': data_index['hispanic'][\"high20\"]['deathsdailymean7R'] || 0 }\n                                                ]}\n                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"18px\", fill: \"#000000\" }} />}\n                                                style={{\n                                                    data: {\n                                                        fill: mortalityColor[1]\n                                                    }\n                                                }}\n                                                x=\"key\"\n                                                y=\"value\"\n                                            />\n                                        </VictoryChart>\n\n                                        <Header.Content style={{ fontWeight: 300, paddingBottom: 10, fontSize: \"14pt\", lineHeight: \"18pt\" }}>\n                                            <center>\n                                                <br />\n                                                <b>Average Daily COVID-19 Deaths per 100,000</b>\n                                            </center>\n                                        </Header.Content>\n\n                                    </Grid.Column>\n                                </Grid.Row>\n                            </Grid>\n                            <Grid>\n                                <Grid.Row columns={2} style={{ paddingBottom: 7 }}>\n                                    <Grid.Column>\n                                        <Header as='h2' style={{ fontWeight: 400, width: 450, paddingLeft: 132 }}>\n                                            <Header.Content>\n                                                <Header.Subheader style={{ color: '#000000', width: 450, fontSize: \"14pt\", textAlign: 'justify', lineHeight: \"16pt\" }}>\n                                                    This chart shows the number of COVID-19 cases per 100,000 residents by percentage Hispanic population ranking. The y-axis displays percentage\n                                                    Hispanic population rankings based on quintiles (groups of 20%). The x-axis displays the average number of COVID-19 cases per 100,000 that occurred\n                                                in each group of counties ranked by percentage Hispanic. <b>Data Updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' :\n                                                        (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}</b>\n                                                </Header.Subheader>\n                                            </Header.Content>\n                                        </Header>\n                                    </Grid.Column>\n                                    <Grid.Column>\n                                        <Header as='h2' style={{ fontWeight: 400, width: 450, paddingLeft: 33 }}>\n                                            <Header.Content>\n                                                <Header.Subheader style={{ color: '#000000', width: 450, fontSize: \"14pt\", textAlign: 'justify', lineHeight: \"16pt\" }}>\n                                                    This chart shows the number of COVID-19 deaths per 100,000 residents by percentage Hispanic population ranking. The y-axis\n                                                    displays percentage Hispanic population rankings based on quintiles (groups of 20%). The x-axis displays the average number\n                                                of COVID-19 deaths per 100,000 that occurred in each group of counties ranked by percentage Hispanic. <b>Data Updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' : (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}</b>\n                                                </Header.Subheader>\n                                            </Header.Content>\n                                        </Header>\n                                    </Grid.Column>\n                                </Grid.Row>\n                            </Grid>\n                            <center> <Divider id=\"diabetes\" hidden style={{ paddingBottom: 50 }} /> </center>\n\n                            {/* diabetes */}\n                            <Grid id='diabetes' style={{ paddingLeft: \"7em\", paddingRight: \"7em\" }}>\n                                <Grid.Row columns={2} style={{ paddingTop: '2em' }}>\n                                    <Grid.Column style={{ paddingTop: 10, paddingBottom: 18 }}>\n                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"18pt\", lineHeight: \"18pt\" }}>\n                                            <Header.Content>\n                                                COVID-19 Case Rate by Percentage of <br />Population with Diabetes\n</Header.Content>\n                                        </Header>\n                                        <VictoryChart\n                                            theme={VictoryTheme.material}\n                                            width={500}\n                                            height={220}\n                                            domainPadding={20}\n                                            minDomain={{ y: props.ylog ? 1 : 0 }}\n                                            padding={{ left: 310, right: 30, top: 30, bottom: 35 }}\n                                            style={{ fontSize: \"14pt\" }}\n                                            containerComponent={<VictoryContainer responsive={false} />}\n                                        >\n                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\n                                            <VictoryAxis dependentAxis\n                                                label={\"COVID-19 Cases per\\n 100,000 Residents\"}\n                                                style={{\n                                                    ticks: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, axisLabel: { fontSize: \"14px\", fill: '#000000', fontFamily: 'lato' },\n                                                    labels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' }, tickLabels: { fontSize: \"0px\", fill: '#000000', padding: 10, fontFamily: 'lato' }\n                                                }} />\n                                            <VictoryBar\n                                                horizontal\n                                                barRatio={0.7}\n                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(0))}\n                                                data={[\n                                                    { key: \"Counties with lowest percentage\\n population with diabetes\", 'value': data_index['diabetes'][\"low20\"]['casesdailymean7R'] || 0 },\n                                                    { key: \"Q2\", 'value': data_index['diabetes'][\"Q2\"]['casesdailymean7R'] || 0 },\n                                                    { key: \"Q3\", 'value': data_index['diabetes'][\"Q3\"]['casesdailymean7R'] || 0 },\n                                                    { key: \"Q4\", 'value': data_index['diabetes'][\"Q4\"]['casesdailymean7R'] || 0 },\n                                                    { key: \"Counties with highest percentage\\n population with diabetes\", 'value': data_index['diabetes'][\"high20\"]['casesdailymean7R'] || 0 }\n                                                ]}\n                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"20px\", fill: \"#000000\" }} />}\n                                                style={{\n                                                    data: {\n                                                        fill: \"#487f84\"\n                                                    }\n                                                }}\n                                                x=\"key\"\n                                                y=\"value\"\n                                            />\n                                        </VictoryChart>\n\n                                        <Header.Content style={{ fontWeight: 300, paddingBottom: 10, fontSize: \"14pt\", lineHeight: \"18pt\" }}>\n                                            <center>\n                                                <br />\n                                                <b>Average Daily COVID-19 Cases per 100,000</b>\n                                            </center>\n                                        </Header.Content>\n\n                                    </Grid.Column>\n                                    <Grid.Column style={{ paddingTop: 10, paddingBottom: 18 }}>\n                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"18pt\", lineHeight: \"18pt\" }}>\n                                            <Header.Content>\n                                                COVID-19 Death Rate by Percentage of <br />Population with Diabetes\n</Header.Content>\n                                        </Header>\n                                        <VictoryChart\n                                            theme={VictoryTheme.material}\n                                            width={500}\n                                            height={220}\n                                            domainPadding={20}\n                                            minDomain={{ y: props.ylog ? 1 : 0 }}\n                                            padding={{ left: 310, right: 30, top: 30, bottom: 35 }}\n                                            style={{ fontSize: \"14pt\" }}\n                                            containerComponent={<VictoryContainer responsive={false} />}\n                                        >\n                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\n                                            <VictoryAxis dependentAxis\n                                                label={\"COVID-19 Deaths per\\n 100,000 Residents\"}\n                                                style={{\n                                                    ticks: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, axisLabel: { fontSize: \"14px\", fill: '#000000', fontFamily: 'lato' },\n                                                    labels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' }, tickLabels: { fontSize: \"0px\", fill: '#000000', padding: 10, fontFamily: 'lato' }\n                                                }} />\n                                            <VictoryBar\n                                                horizontal\n                                                barRatio={0.7}\n                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(2))}\n                                                data={[\n                                                    { key: \"Counties with lowest percentage\\n population with diabetes\", 'value': data_index['diabetes'][\"low20\"]['deathsdailymean7R'] || 0 },\n                                                    { key: \"Q2\", 'value': data_index['diabetes'][\"Q2\"]['deathsdailymean7R'] || 0 },\n                                                    { key: \"Q3\", 'value': data_index['diabetes'][\"Q3\"]['deathsdailymean7R'] || 0 },\n                                                    { key: \"Q4\", 'value': data_index['diabetes'][\"Q4\"]['deathsdailymean7R'] || 0 },\n                                                    { key: \"Counties with highest percentage\\n population with diabetes\", 'value': data_index['diabetes'][\"high20\"]['deathsdailymean7R'] || 0 }\n                                                ]}\n                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"20px\", fill: \"#000000\" }} />}\n                                                style={{\n                                                    data: {\n                                                        fill: mortalityColor[1]\n                                                    }\n                                                }}\n                                                x=\"key\"\n                                                y=\"value\"\n                                            />\n                                        </VictoryChart>\n\n                                        <Header.Content style={{ fontWeight: 300, paddingBottom: 10, fontSize: \"14pt\", lineHeight: \"18pt\" }}>\n                                            <center>\n                                                <br />\n                                                <b>Average Daily COVID-19 Deaths per 100,000</b>\n                                            </center>\n                                        </Header.Content>\n\n                                    </Grid.Column>\n                                </Grid.Row>\n                            </Grid>\n                            <Grid>\n                                <Grid.Row columns={2} style={{ paddingBottom: 7 }}>\n                                    <Grid.Column>\n                                        <Header as='h2' style={{ fontWeight: 400, width: 450, paddingLeft: 132 }}>\n                                            <Header.Content>\n                                                <Header.Subheader style={{ color: '#000000', width: 450, fontSize: \"14pt\", textAlign: 'justify', lineHeight: \"16pt\" }}>\n                                                    This chart shows the number of COVID-19 cases per 100,000 residents by county ranking on percentage of population with diabetes.\n                                                    The y-axis displays percentage population with diabetes rankings for counties based on quintiles (groups of 20%). The x-axis displays\n                                                the average number of COVID-19 cases per 100,000 that occurred in each group of counties ranked by percentage population with diabetes. <b>Data Updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' :\n                                                        (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}</b>\n                                                </Header.Subheader>\n                                            </Header.Content>\n                                        </Header>\n                                    </Grid.Column>\n                                    <Grid.Column>\n                                        <Header as='h2' style={{ fontWeight: 400, width: 450, paddingLeft: 33 }}>\n                                            <Header.Content>\n                                                <Header.Subheader style={{ color: '#000000', width: 450, fontSize: \"14pt\", textAlign: 'justify', lineHeight: \"16pt\" }}>\n                                                    This chart shows the number of COVID-19 deaths per 100,000 residents by county ranking on percentage of population with diabetes.\n                                                    The y-axis displays percentage population with diabetes rankings for counties based on quintiles (groups of 20%). The x-axis displays\n                                                the average number of COVID-19 deaths per 100,000 that occurred in each group of counties ranked by percentage population with diabetes. <b>Data Updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' :\n                                                        (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}</b>\n                                                </Header.Subheader>\n                                            </Header.Content>\n                                        </Header>\n                                    </Grid.Column>\n                                </Grid.Row>\n                            </Grid>\n                            <center> <Divider id=\"age\" hidden style={{ paddingBottom: 50 }} /> </center>\n                            {/* age */}\n                            <Grid id='age' style={{ paddingLeft: \"7em\", paddingRight: \"7em\" }}>\n                                <Grid.Row columns={2} style={{ paddingTop: 11 }}>\n                                    <Grid.Column style={{ paddingTop: '1em', paddingBottom: 18 }}>\n                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"18pt\", lineHeight: \"16pt\" }}>\n                                            <Header.Content>\n                                                COVID-19 Case Rate by Percentage of <br />Population over the Age 65 Years\n            \t\t</Header.Content>\n                                        </Header>\n\n                                        <VictoryChart\n                                            theme={VictoryTheme.material}\n                                            width={500}\n                                            height={220}\n                                            domainPadding={20}\n                                            minDomain={{ y: props.ylog ? 1 : 0 }}\n                                            padding={{ left: 250, right: 30, top: 30, bottom: 35 }}\n                                            style={{ fontSize: \"14pt\" }}\n                                            containerComponent={<VictoryContainer responsive={false} />}\n                                        >\n                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\n                                            <VictoryAxis dependentAxis\n                                                label={\"COVID-19 Cases per\\n 100,000 Residents\"}\n                                                style={{\n                                                    ticks: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, axisLabel: { fontSize: \"14px\", fill: '#000000', fontFamily: 'lato' },\n                                                    labels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' }, tickLabels: { fontSize: \"0px\", fill: '#000000', padding: 10, fontFamily: 'lato' }\n                                                }} />\n                                            <VictoryBar\n                                                horizontal\n                                                barRatio={0.7}\n                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(0))}\n                                                data={[\n                                                    { key: \"Counties with lowest\\n percentage over 65\", 'value': data_index['age65over'][\"low20\"]['casesdailymean7R'] || 0 },\n                                                    { key: \"Q2\", 'value': data_index['age65over'][\"Q2\"]['casesdailymean7R'] || 0 },\n                                                    { key: \"Q3\", 'value': data_index['age65over'][\"Q3\"]['casesdailymean7R'] || 0 },\n                                                    { key: \"Q4\", 'value': data_index['age65over'][\"Q4\"]['casesdailymean7R'] || 0 },\n                                                    { key: \"Counties with highest\\n percentage over 65\", 'value': data_index['age65over'][\"high20\"]['casesdailymean7R'] || 0 }\n                                                ]}\n                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"20px\", fill: \"#000000\" }} />}\n                                                style={{\n                                                    data: {\n                                                        fill: casesColor[1]\n                                                    }\n                                                }}\n                                                x=\"key\"\n                                                y=\"value\"\n                                            />\n                                        </VictoryChart>\n\n                                        <Header.Content style={{ fontWeight: 300, paddingBottom: 10, fontSize: \"14pt\", lineHeight: \"18pt\" }}>\n                                            <center>\n                                                <br />\n                                                <b>Average Daily COVID-19 Cases per 100,000</b>\n                                            </center>\n                                        </Header.Content>\n                                    </Grid.Column>\n                                    <Grid.Column style={{ paddingTop: '1em', paddingBottom: 18 }}>\n                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"18pt\", lineHeight: \"18pt\" }}>\n                                            <Header.Content>\n                                                COVID-19 Death Rate by Percentage of <br />Population over the Age 65 Years\n                </Header.Content>\n                                        </Header>\n\n                                        <VictoryChart\n                                            theme={VictoryTheme.material}\n                                            width={500}\n                                            height={220}\n                                            domainPadding={20}\n                                            minDomain={{ y: props.ylog ? 1 : 0 }}\n                                            padding={{ left: 250, right: 30, top: 30, bottom: 35 }}\n                                            style={{ fontSize: \"14pt\" }}\n                                            containerComponent={<VictoryContainer responsive={false} />}\n                                        >\n                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\n                                            <VictoryAxis dependentAxis\n                                                label={\"COVID-19 Deaths per\\n 100,000 Residents\"}\n                                                style={{\n                                                    ticks: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, axisLabel: { fontSize: \"14px\", fill: '#000000', fontFamily: 'lato' },\n                                                    labels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' }, tickLabels: { fontSize: \"0px\", fill: '#000000', padding: 10, fontFamily: 'lato' }\n                                                }} />\n                                            <VictoryBar\n                                                horizontal\n                                                barRatio={0.7}\n                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(2))}\n                                                data={[\n                                                    { key: \"Counties with lowest\\n percentage over 65\", 'value': data_index['age65over'][\"low20\"]['deathsdailymean7R'] || 0 },\n                                                    { key: \"Q2\", 'value': data_index['age65over'][\"Q2\"]['deathsdailymean7R'] || 0 },\n                                                    { key: \"Q3\", 'value': data_index['age65over'][\"Q3\"]['deathsdailymean7R'] || 0 },\n                                                    { key: \"Q4\", 'value': data_index['age65over'][\"Q4\"]['deathsdailymean7R'] || 0 },\n                                                    { key: \"Counties with highest\\n percentage over 65\", 'value': data_index['age65over'][\"high20\"]['deathsdailymean7R'] || 0 }\n                                                ]}\n                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"20px\", fill: \"#000000\" }} />}\n                                                style={{\n                                                    data: {\n                                                        fill: mortalityColor[1]\n                                                    }\n                                                }}\n                                                x=\"key\"\n                                                y=\"value\"\n                                            />\n                                        </VictoryChart>\n\n                                        <Header.Content style={{ fontWeight: 300, paddingBottom: 10, fontSize: \"14pt\", lineHeight: \"18pt\" }}>\n                                            <center>\n                                                <br />\n                                                <b>Average Daily COVID-19 Deaths per 100,000</b>\n                                            </center>\n                                        </Header.Content>\n\n                                    </Grid.Column>\n                                </Grid.Row>\n                            </Grid>\n                            <Grid>\n                                <Grid.Row columns={2} style={{ paddingBottom: 7 }}>\n                                    <Grid.Column>\n                                        <Header as='h2' style={{ fontSize: \"14pt\", lineHeight: \"16pt\", width: 450, paddingLeft: 132 }}>\n                                            <Header.Content style={{ fontSize: \"14pt\" }}>\n                                                <Header.Subheader style={{ color: '#000000', lineHeight: \"16pt\", width: 450, fontSize: \"14pt\", textAlign: 'justify' }}>\n                                                    This chart shows the number of COVID-19 cases per 100,000 residents by county ranking on percentage of population over 65 years.\n                                                    The y-axis displays percentage population over 65 rankings for counties based on quintiles (groups of 20%). The x-axis displays the\n                                                average number of COVID-19 cases per 100,000 that occurred in each group of counties ranked by percentage population over 65 years. <b>Data Updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' :\n                                                        (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}</b>\n                                                </Header.Subheader>\n                                            </Header.Content>\n                                        </Header>\n                                    </Grid.Column>\n                                    <Grid.Column>\n                                        <Header as='h2' style={{ fontWeight: 400, width: 450, paddingLeft: 33 }}>\n                                            <Header.Content style={{ fontSize: \"14pt\" }}>\n                                                <Header.Subheader style={{ color: '#000000', lineHeight: \"16pt\", width: 450, fontSize: \"14pt\", textAlign: 'justify' }}>\n                                                    This chart shows the number of COVID-19 deaths per 100,000 residents by county ranking on percentage of population over 65 years.\n                                                    The y-axis displays percentage population over 65 rankings for counties based on quintiles (groups of 20%). The x-axis displays the\n                                                average number of COVID-19 deaths per 100,000 that occurred in each group of counties ranked by percentage population over 65 years. <b>Data Updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' :\n                                                        (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}</b>\n                                                </Header.Subheader>\n                                            </Header.Content>\n                                        </Header>\n                                    </Grid.Column>\n                                </Grid.Row>\n                            </Grid>\n\n                            <center> <Divider id='male' hidden style={{ paddingBottom: 50 }} /> </center>\n                            {/* Male */}\n                            <Grid style={{ paddingLeft: \"7em\", paddingRight: \"7em\" }}>\n                                <Grid.Row columns={2} style={{ paddingTop: 11 }}>\n                                    <Grid.Column style={{ paddingTop: '1em', paddingBottom: 18 }}>\n                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"18pt\", lineHeight: \"16pt\" }}>\n                                            <Header.Content>\n                                                COVID-19 Case Rate by Percentage of <br /> Male Population\n            \t\t                        </Header.Content>\n                                        </Header>\n\n                                        <VictoryChart\n                                            theme={VictoryTheme.material}\n                                            width={500}\n                                            height={220}\n                                            domainPadding={20}\n                                            minDomain={{ y: props.ylog ? 1 : 0 }}\n                                            padding={{ left: 310, right: 30, top: 30, bottom: 35 }}\n                                            style={{ fontSize: \"14pt\" }}\n                                            containerComponent={<VictoryContainer responsive={false} />}\n                                        >\n                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\n                                            <VictoryAxis dependentAxis\n                                                label={\"COVID-19 Cases per\\n 100,000 Residents\"}\n                                                style={{\n                                                    ticks: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, axisLabel: { fontSize: \"14px\", fill: '#000000', fontFamily: 'lato' },\n                                                    labels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' }, tickLabels: { fontSize: \"0px\", fill: '#000000', padding: 10, fontFamily: 'lato' }\n                                                }} />\n                                            <VictoryBar\n                                                horizontal\n                                                barRatio={0.7}\n                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(0))}\n                                                data={[\n                                                    { key: \"Counties with lowest\\n percentage male population\", 'value': data_index['male'][\"low20\"]['casesdailymean7R'] || 0 },\n                                                    { key: \"Q2\", 'value': data_index['male'][\"Q2\"]['casesdailymean7R'] || 0 },\n                                                    { key: \"Q3\", 'value': data_index['male'][\"Q3\"]['casesdailymean7R'] || 0 },\n                                                    { key: \"Q4\", 'value': data_index['male'][\"Q4\"]['casesdailymean7R'] || 0 },\n                                                    { key: \"Counties with highest\\n percentage male population\", 'value': data_index['male'][\"high20\"]['casesdailymean7R'] || 0 }\n                                                ]}\n                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"20px\", fill: \"#000000\" }} />}\n                                                style={{\n                                                    data: {\n                                                        fill: \"#487f84\"\n                                                    }\n                                                }}\n                                                x=\"key\"\n                                                y=\"value\"\n                                            />\n                                        </VictoryChart>\n\n                                        <Header.Content style={{ fontWeight: 300, paddingBottom: 10, fontSize: \"14pt\", lineHeight: \"18pt\" }}>\n                                            <center>\n                                                <br />\n                                                <b>Average Daily COVID-19 Cases per 100,000</b>\n                                            </center>\n                                        </Header.Content>\n\n                                    </Grid.Column>\n                                    <Grid.Column style={{ paddingTop: '1em', paddingBottom: 18 }}>\n                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"18pt\", lineHeight: \"16pt\" }}>\n                                            <Header.Content>\n                                                COVID-19 Death Rate by Percentage of <br /> Male Population\n                </Header.Content>\n                                        </Header>\n                                        <VictoryChart\n                                            theme={VictoryTheme.material}\n                                            width={500}\n                                            height={220}\n                                            domainPadding={20}\n                                            minDomain={{ y: props.ylog ? 1 : 0 }}\n                                            padding={{ left: 310, right: 30, top: 30, bottom: 35 }}\n                                            style={{ fontSize: \"14pt\" }}\n                                            containerComponent={<VictoryContainer responsive={false} />}\n                                        >\n                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\n                                            <VictoryAxis dependentAxis\n                                                label={\"COVID-19 Deaths per\\n 100,000 Residents\"}\n                                                style={{\n                                                    ticks: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, axisLabel: { fontSize: \"14px\", fill: '#000000', fontFamily: 'lato' },\n                                                    labels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' }, tickLabels: { fontSize: \"0px\", fill: '#000000', padding: 10, fontFamily: 'lato' }\n                                                }} />\n                                            <VictoryBar\n                                                horizontal\n                                                barRatio={0.7}\n                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(2))}\n                                                data={[\n                                                    { key: \"Counties with lowest\\n percentage male population\", 'value': data_index['male'][\"low20\"]['deathsdailymean7R'] || 0 },\n                                                    { key: \"Q2\", 'value': data_index['male'][\"Q2\"]['deathsdailymean7R'] || 0 },\n                                                    { key: \"Q3\", 'value': data_index['male'][\"Q3\"]['deathsdailymean7R'] || 0 },\n                                                    { key: \"Q4\", 'value': data_index['male'][\"Q4\"]['deathsdailymean7R'] || 0 },\n                                                    { key: \"Counties with highest\\n percentage male population \", 'value': data_index['male'][\"high20\"]['deathsdailymean7R'] || 0 }\n                                                ]}\n                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"20px\", fill: \"#000000\" }} />}\n                                                style={{\n                                                    data: {\n                                                        fill: mortalityColor[1]\n                                                    }\n                                                }}\n                                                x=\"key\"\n                                                y=\"value\"\n                                            />\n                                        </VictoryChart>\n                                        <Header.Content style={{ fontWeight: 300, paddingBottom: 10, fontSize: \"14pt\", lineHeight: \"18pt\" }}>\n                                            <center>\n                                                <br />\n                                                <b>Average Daily COVID-19 Deaths per 100,000</b>\n                                            </center>\n                                        </Header.Content>\n                                    </Grid.Column>\n                                </Grid.Row>\n                            </Grid>\n                            <Grid>\n                                <Grid.Row columns={2} style={{ paddingBottom: 7 }}>\n                                    <Grid.Column>\n                                        <Header as='h2' style={{ fontSize: \"14pt\", lineHeight: \"16pt\", width: 450, paddingLeft: 132 }}>\n                                            <Header.Content style={{ fontSize: \"14pt\" }}>\n                                                <Header.Subheader style={{ color: '#000000', lineHeight: \"16pt\", width: 450, fontSize: \"14pt\", textAlign: 'justify' }}>\n                                                    This chart shows the number of COVID-19 cases per 100,000 residents by percentage male population ranking. The y-axis displays\n                                                    percentage male rankings for counties based on quintiles (groups of 20%). The x-axis displays the average number of COVID-19 cases\n                                                per 100,000 that occurred in each group of counties ranked by percentage male. <b>Data Updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' :\n                                                        (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}</b>\n                                                </Header.Subheader>\n                                            </Header.Content>\n                                        </Header>\n                                    </Grid.Column>\n                                    <Grid.Column>\n                                        <Header as='h2' style={{ fontWeight: 400, width: 450, paddingLeft: 33 }}>\n                                            <Header.Content style={{ fontSize: \"14pt\" }}>\n                                                <Header.Subheader style={{ color: '#000000', lineHeight: \"16pt\", width: 450, fontSize: \"14pt\", textAlign: 'justify' }}>\n                                                    This chart shows the number of COVID-19 deaths per 100,000 residents by percentage male population ranking. The y-axis displays\n                                                    percentage male rankings for counties based on quintiles (groups of 20%). The x-axis displays the average number of COVID-19 deaths\n                                                per 100,000 that occurred in each group of counties ranked by percentage male. <b>Data Updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' :\n                                                        (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}</b>\n                                                </Header.Subheader>\n                                            </Header.Content>\n                                        </Header>\n                                    </Grid.Column>\n                                </Grid.Row>\n                            </Grid>\n                        </div>\n                    }\n                    <Notes />\n                </Container>\n                <ReactTooltip id='cvi'>{tooltipContentcvi}</ReactTooltip>\n                <ReactTooltip id='si'>{tooltipContentsi}</ReactTooltip>\n                <ReactTooltip id='ga'> <font size=\"+2\"><b >{countyName}</b> </font> <br />\n                    <b>Total Cases</b>: {data[stateFips + countyFips]['casescum'] >= 0 ? data[stateFips + countyFips]['casescum'].toFixed(0) : \"N/A\"} <br />\n                    <b>Total Deaths</b>: {data[stateFips + countyFips]['deathscum'] >= 0 ? data[stateFips + countyFips]['deathscum'].toFixed(0) : \"N/A\"} <br />\n                    <b>Total case per 100k</b>: {data[stateFips + countyFips]['casescumR'] >= 0 ? data[stateFips + countyFips]['casescumR'].toFixed(0) : \"N/A\"} <br />\n                    <b>Total Deaths per 100k</b>: {data[stateFips + countyFips]['deathscumR'] >= 0 ? data[stateFips + countyFips]['deathscumR'].toFixed(0) : 'N/A'} <br />\n                    <b>Last 14-day Cases per 100k</b>: {data[stateFips + countyFips]['casescum14dayR'] >= 0 ? data[stateFips + countyFips]['casescum14dayR'].toFixed(0) : \"N/A\"} <br />\n                    <b>Click to see county-level data.</b> </ReactTooltip>\n            </div>\n        );\n    }\n    else {\n        return <Loader active inline='centered' />\n    }\n}","import React, { useEffect, useState } from 'react'\nimport { Container, Grid, Breadcrumb, Header, Loader, List, Table, Divider, Popup } from 'semantic-ui-react'\nimport AppBar from './AppBar';\nimport Geographies from './Geographies';\nimport Geography from './Geography';\nimport ComposableMap from './ComposableMap';\nimport {\n  VictoryChart,\n  VictoryTooltip,\n  VictoryVoronoiContainer,\n  VictoryContainer,\n  VictoryGroup,\n  VictoryBar,\n  VictoryTheme,\n  VictoryAxis,\n  VictoryLegend,\n  VictoryLine,\n  VictoryLabel,\n  VictoryScatter,\n  VictoryPie\n} from 'victory';\n\nimport { useParams, useHistory } from 'react-router-dom';\nimport Notes from './Notes';\nimport ReactTooltip from \"react-tooltip\";\nimport fips2county from './fips2county.json'\nimport configs from \"./state_config.json\";\nimport configscounty from \"./county_config.json\";\nimport _ from 'lodash';\nimport * as d3 from 'd3-geo'\nimport Chart from \"react-google-charts\";\nimport { scaleQuantile, scaleQuantize } from \"d3-scale\";\n\nconst countyColor = '#f2a900';\nconst stateColor = '#bdbfc1';\nconst nationColor = '#d9d9d7';\nconst colorPalette = [\n  \"#e1dce2\",\n  \"#d3b6cd\",\n  \"#bf88b5\",\n  \"#af5194\",\n  \"#99528c\",\n  \"#633c70\",\n];\n\n\nfunction ScatterChart(props) {\n\n  return (\n    <VictoryChart\n      width={400}\n      height={300}\n      scale={{ x: props.xlog ? 'log' : 'linear', y: props.ylog ? 'log' : 'linear' }}\n      minDomain={{ y: props.ylog ? 1 : 0 }}\n      padding={{ left: 80, right: 10, top: 50, bottom: 50 }}>\n      {props.showLegend && <VictoryLegend\n        x={10} y={10}\n        orientation=\"horizontal\"\n        colorScale={[stateColor, countyColor]}\n        data={[\n          { name: ('Other counties in ' + props.stateName) }, { name: props.countyName }\n        ]}\n      />}\n      <VictoryScatter\n        data={_.filter(_.map(props.data, (d, k) => { d.fips = k; return d; }), (d) => (\n          d.fips.length === 5 &&\n          d.fips.substring(0, 2) === props.stateFips &&\n          d[props.x] && d[props.y]))}\n        sortKey={(d) => d.fips === (props.stateFips + props.countyFips)}\n        style={{\n          data: {\n            fill: ({ datum }) => datum.fips === (props.stateFips + props.countyFips) ? countyColor : stateColor,\n            fillOpacity: ({ datum }) => datum.fips === (props.stateFips + props.countyFips) ? 1.0 : 0.7\n          }\n        }}\n        size={4}\n        x={props.x}\n        y={props.y}\n      />\n      <VictoryAxis label={props.varMap[props.x] ? props.varMap[props.x].name : props.x}\n        tickCount={4}\n        tickFormat={(y) => (props.rescaleX ? (Math.round(y / 1000) + 'k') : (Math.round(y * 100) / 100))} />\n      <VictoryAxis dependentAxis label={props.varMap[props.y] ? props.varMap[props.y].name : props.y}\n        style={{ axisLabel: { padding: 40 } }}\n        tickCount={5}\n        tickFormat={(y) => (Math.round(y * 100) / 100)} />\n    </VictoryChart>);\n\n}\n\nfunction numberWithCommas(x) {\n  x = x.toString();\n  var pattern = /(-?\\d+)(\\d{3})/;\n  while (pattern.test(x))\n    x = x.replace(pattern, \"$1,$2\");\n  return x;\n}\n\nfunction BarChart(props) {\n  const colors = {\n    \"1\": '#024174',\n    '2': 'grey'\n  };\n  if (props.var_num === 4) {\n    return (\n      <VictoryChart\n        theme={VictoryTheme.material}\n        width={props.width || 650}\n        height={300}\n        domainPadding={props.pad || 10}\n        scale={{ y: props.ylog ? 'log' : 'linear' }}\n        minDomain={{ y: props.ylog ? 1 : 0 }}\n        padding={{ left: 79, right: 40, top: 60, bottom: 50 }}\n        containerComponent={<VictoryContainer responsive={false} />}\n      >\n        <VictoryLabel style={{\n          fontSize: 20, paddingBottom: '0.5em'\n        }} text={props.title} x={(props.width || 560) / 2} y={20} textAnchor=\"middle\" />\n        <VictoryAxis style={{\n          tickLabels: { fontSize: 18, padding: 2 }\n        }} />\n        <VictoryAxis dependentAxis \n        domain={[0, 1]}\n        style={{\n          tickLabels: { fontSize: 18, padding: 2 }\n        }}\n          tickFormat={(y) => (y <= 1 ? y*100 : (y / 1000 + 'k'))} />\n          <VictoryLegend x={80} y={40}\n          orientation=\"horizontal\"\n          gutter={1}\n          // style={{ border: { stroke: \"black\" } }}\n          data={[\n            { name:  `Percentage of ${props.cate}`, symbol: { fill: colors['1'], type: \"square\" } },\n            { name: \"Percentage of Population\", symbol: { fill: colors['2'], type: \"square\" }},\n          ]}\n        />\n        <VictoryGroup offset={20}\n          colorScale={\"qualitative\"}\n        >\n          \n          <VictoryBar\n            alignment=\"start\"\n            barWidth={20}\n            // labels={({ datum }) => (Math.round(datum.value * 100) / 100)}\n            labels={({ datum }) => `${props.cate} Percent: ${numberWithCommas(parseFloat(datum.value).toFixed(2)*100)}%`}\n            data={[{ key: props.keyv[0], 'value': props.data[props.stateFips + props.countyFips][props.var[0]] || 0, 'colors': '1' },\n            { key: props.keyv[1], 'value': props.data[props.stateFips + props.countyFips][props.var[1]] || 0, 'colors': '1' },\n            { key: props.keyv[2], 'value': props.data[props.stateFips + props.countyFips][props.var[2]] || 0, 'colors': '1' },\n            { key: props.keyv[3], 'value': props.data[props.stateFips + props.countyFips][props.var[3]] || 0, 'colors': '1' }]}\n            labelComponent={<VictoryTooltip\n              orientation=\"top\"\n              style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'black' }}\n              constrainToVisibleArea\n              labelComponent={<VictoryLabel dx={-60} textAnchor='start' />}\n              flyoutStyle={{ fill: colors['1'], fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\n            />}\n            style={{\n              data: {\n                fill: ({ datum }) => colors[datum.colors],\n                fillOpacity: 2\n              }\n            }}\n            x=\"key\"\n            y=\"value\"\n          />\n          <VictoryBar\n            alignment=\"start\"\n            barWidth={20}\n            data={[{ key: props.keyv[0], 'value': props.data[props.stateFips + props.countyFips][props.var1[0]] || 0, 'colors': '2' },\n            { key: props.keyv[1], 'value': props.data[props.stateFips + props.countyFips][props.var1[1]] || 0, 'colors': '2' },\n            { key: props.keyv[2], 'value': props.data[props.stateFips + props.countyFips][props.var1[2]] || 0, 'colors': '2' },\n            { key: props.keyv[3], 'value': props.data[props.stateFips + props.countyFips][props.var1[3]] || 0, 'colors': '2' }]}\n            labels={({ datum }) =>\n              `Population Percent: ${numberWithCommas(parseFloat(datum.value).toFixed(2)*100)}%`\n            }\n            labelComponent={<VictoryTooltip\n              orientation=\"top\"\n              style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'black' }}\n              constrainToVisibleArea\n              // labelComponent={<VictoryLabel dx={-50} textAnchor='start' />}\n              flyoutStyle={{ fill: \"grey\", fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\n            />}\n            style={{\n              data: {\n                fill: ({ datum }) => colors[datum.colors],\n                fillOpacity: 0.7\n              }\n            }}\n            x=\"key\"\n            y=\"value\"\n          />\n        </VictoryGroup>\n      </VictoryChart>);\n  }\n  else {\n    return (\n      <VictoryChart\n        theme={VictoryTheme.material}\n        width={props.width || 650}\n        height={300}\n        domainPadding={props.pad || 100}\n        scale={{ y: props.ylog ? 'log' : 'linear' }}\n        minDomain={{ y: props.ylog ? 1 : 0 }}\n        padding={{ left: 79, right: 40, top: 60, bottom: 50 }}\n        containerComponent={<VictoryContainer responsive={false} />}\n      >\n        <VictoryLabel style={{\n          fontSize: 20, paddingBottom: '5em'\n        }} text={props.title} x={(props.width || 560) / 2} y={20} textAnchor=\"middle\" />\n        <VictoryAxis style={{\n          tickLabels: { fontSize: 18, padding: 2 }\n        }} />\n        <VictoryAxis dependentAxis \n        domain={[0, 1]}\n        style={{\n          tickLabels: { fontSize: 18, padding: 2 }\n        }}\n          tickFormat={(y) => (y <= 1 ? y*100  : (y / 1000 + 'k'))} />\n        <VictoryLegend x={80} y={40}\n          orientation=\"horizontal\"\n          gutter={1}\n          // style={{ border: { stroke: \"black\" } }}\n          data={[\n            { name:  `Percentage of ${props.cate}`, symbol: { fill: colors['1'], type: \"square\" } },\n            { name: \"Percentage of Population\", symbol: { fill: colors['2'], type: \"square\" }},\n          ]}\n        />\n        <VictoryGroup offset={20}\n          colorScale={\"qualitative\"}\n        >\n          <VictoryBar\n\n            barWidth={20}\n            // labels={({ datum }) => (Math.round(datum.value * 100) / 100)}\n            labels={({ datum }) => `${props.cate} Percent: ${numberWithCommas(parseFloat(datum.value).toFixed(2)*100)}%`}\n            data={[{ key: props.keyv[0], 'value': props.data[props.stateFips + props.countyFips][props.var[0]] || 0, 'colors': '1' },\n            { key: props.keyv[1], 'value': props.data[props.stateFips + props.countyFips][props.var[1]] || 0, 'colors': '1' }]}\n            labelComponent={<VictoryTooltip\n              orientation=\"top\"\n              style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'black' }}\n              constrainToVisibleArea\n              labelComponent={<VictoryLabel dx={-60} textAnchor='start' />}\n              flyoutStyle={{ fill: colors['1'], fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\n            />}\n            style={{\n              data: {\n                fill: ({ datum }) => colors[datum.colors],\n                fillOpacity: 2\n              }\n            }}\n            x=\"key\"\n            y=\"value\"\n          />\n          <VictoryBar\n\n            barWidth={20}\n            data={[{ key: props.keyv[0], 'value': props.data[props.stateFips + props.countyFips][props.var1[0]] || 0, 'colors': '2' },\n            { key: props.keyv[1], 'value': props.data[props.stateFips + props.countyFips][props.var1[1]] || 0, 'colors': '2' }]}\n\n            labels={({ datum }) =>\n              `Population Percent: ${numberWithCommas(parseFloat(datum.value).toFixed(2)*100)}%`\n            }\n            labelComponent={<VictoryTooltip\n              orientation=\"top\"\n              style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'black' }}\n              constrainToVisibleArea\n              labelComponent={<VictoryLabel dx={-70} textAnchor='start' />}\n              flyoutStyle={{ fill: \"grey\", fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\n            />}\n            style={{\n              data: {\n                fill: ({ datum }) => colors[datum.colors],\n                fillOpacity: 0.7\n              }\n            }}\n            x=\"key\"\n            y=\"value\"\n          />\n        </VictoryGroup>\n      </VictoryChart>);\n  }\n  // console.log(props.data)\n\n}\n\nexport default function CountyReport() {\n\n  let { stateFips, countyFips } = useParams();\n  const allZero = arr => arr.every(v => Math.round(v, 2) === 0.00)\n  // const [countyFips, setCountyFips] = useState('121');\n  const [configsCounty, setConfig] = useState();\n  const [stateName, setStateName] = useState('Georgia');\n  const [countyName, setCountyName] = useState('');\n  const [dateCur, setDateCur] = useState();\n  const [zipCode, setZipCode] = useState('30328');\n  const [zipCodeH, setZipCodeH] = useState('30328');\n  const [zipCodeD, setZipCodeD] = useState('30328');\n  const [zipCodeFinal, setZipCodeFinal] = useState('30328');\n  const history = useHistory();\n  const [data, setData] = useState();\n  const [data_cases, setDataCG] = useState();\n  const [data_deaths, setDataDG] = useState();\n  const [datades_cases, setDatadesCG] = useState();\n  const [datades_deaths, setDatadesDG] = useState();\n  const [dataG, setDataG] = useState();\n  const [dataZip, setDataZip] = useState();\n  const [dataTS, setDataTS] = useState();\n  const [mapOut, setDataMapOut] = useState();\n\n  const [legendMax, setLegendMax] = useState([]);\n  const [legendMaxD, setLegendMaxD] = useState([]);\n\n  const [legendMax_graph, setLegendMaxGraph] = useState(0);\n\n  const [legendMin, setLegendMin] = useState([]);\n  const [legendMinD, setLegendMinD] = useState([]);\n\n  const [legendSplit, setLegendSplit] = useState([]);\n  const [legendSplitD, setLegendSplitD] = useState([]);\n  const [colorScale, setColorScale] = useState();\n  const [colorScaleD, setColorScaleD] = useState();\n\n\n  // const [metric, setMetric] = useState('mean7daycases');\n  const [tooltipContent, setTooltipContent] = useState('');\n  const [covidMetric, setCovidMetric] = useState({\n    casescum: 'N/A', deathscum: 'N/A', casescumR: 'N/A', deathscumR: 'N/A',\n    casesdailymean14: 'N/A', deathsdailymean14: 'N/A', casesdailymean14R: 'N/A', deathsdailymean14R: 'N/A', \"cfr\": 'N/A', \"cfrcompare\": '', t: 'n/a'\n  });\n  const [covidMetricLast, setCovidMetricLast] = useState({\n    casescum: 'N/A', deathscum: 'N/A', casescumR: 'N/A', deathscumR: 'N/A',\n    casesdailymean14: 'N/A', deathsdailymean14: 'N/A', casesdailymean14R: 'N/A', deathsdailymean14R: 'N/A', \"cfr\": 'N/A', \"cfrcompare\": '', t: 'n/a'\n  });\n  const [covidMetricGa, setCovidMetricGa] = useState({\n    casescum: 'N/A', deathscum: 'N/A', casescumR: 'N/A', deathscumR: 'N/A',\n    casesdailymean14: 'N/A', deathsdailymean14: 'N/A', casesdailymean14R: 'N/A', deathsdailymean14R: 'N/A', \"cfr\": 'N/A', \"cfrcompare\": '', t: 'n/a'\n  });\n  const [covidMetric14, setCovidMetric14] = useState({\n    casescum: 'N/A', deathscum: 'N/A', casescumR: 'N/A', deathscumR: 'N/A',\n    casesdailymean14: 'N/A', deathsdailymean14: 'N/A', casesdailymean14R: 'N/A', deathsdailymean14R: 'N/A', \"cfr\": 'N/A', \"cfrcompare\": '', t: 'n/a'\n  });\n  const [varMap, setVarMap] = useState({});\n  // const [countyFips, setCountyFips] = useState('');\n\n\n  const varNameMap = {\n    \"casescum\": { \"name\": 'cases', \"text\": \"The map shows the total number of confirmed COVID-19 cases in each zip code as of \" },\n    \"deathscum\": { \"name\": 'deaths', \"text\": \"The map shows the total number of confirmed COVID-19 deaths in each zip code as of \" },\n    \"casescumR\": { \"name\": 'cases per 100,000 residents', \"text\": \"The map shows the total number of confirmed COVID-19 cases per 100,000 residents in each zip code as of \" },\n    \"deathscumR\": { \"name\": 'deaths per 100,000 residents', \"text\": \"The map shows the total number of confirmed COVID-19 deaths per 100,000 residents in each zip code as of \" }\n  };\n\n  const [delayHandler, setDelayHandler] = useState(null)\n\n  useEffect(() => {\n\n    const configMatched = configscounty.find(s => s.countyfips === countyFips);\n\n    // let projection = d3.geoAlbersUsa();\n    // // let gps = [-85.504701, 34.855196]\n    // let gps = [-0.6, 38.7]\n    // console.log(projection.center)\n    // console.log(countyfips);\n\n    // console.log(configMatched);\n    if (!configMatched || !fips2county[stateFips + countyFips]) {\n      history.push('/');\n    } else {\n      setConfig(configMatched);\n      // setStateName(configMatched.name);\n      setCountyName(fips2county[stateFips + countyFips]);\n\n      fetch('/data/rawdata/variable_mapping.json').then(res => res.json())\n        .then(x => setVarMap(x));\n\n      fetch('/data/data_us.json').then(res => res.json())\n        .then(x => setData(x));\n      fetch('/data/data.json').then(res => res.json())\n        .then(x => setDateCur(x));\n      fetch('/data/data_cases_ga.json').then(res => res.json())\n        .then(x => setDataCG(x)\n        );\n      fetch('/data/data_deaths_ga.json').then(res => res.json())\n        .then(x => setDataDG(x));\n      fetch('/data/data_describe_cases.json').then(res => res.json())\n        .then(x => setDatadesCG(x));\n      fetch('/data/data_describe_deaths.json').then(res => res.json())\n        .then(x => setDatadesDG(x));\n      fetch('/data/data.json').then(res => res.json())\n        .then(x => setDataG(x));\n\n      fetch('/data/zipcode.json').then(res => res.json())\n        .then(x => setDataZip(x));\n\n      fetch('/data/timeseries13' + '.json').then(res => res.json())\n        .then(x => setDataTS(x));\n\n      fetch('/data/mapout' + '.json').then(res => res.json())\n        .then(x => setDataMapOut(x));\n\n      fetch('/data/timeseries13' + '.json').then(res => res.json())\n        .then(\n          x => {\n            // setDataTS(x);\n            var max = 0\n            var length = 0\n            _.each(x[stateFips + countyFips], d => {\n              length = length + 1\n              // console.log(d);\n              if (d['cases'] > max) {\n                max = d['cases'];\n              }\n\n            });\n            setLegendMaxGraph(max.toFixed(0));\n            // console.log(max.toFixed(0));\n          });\n\n      fetch('/data/zipcode.json').then(res => res.json())\n        .then(x => {\n          // setDataZip(x);\n\n          const cs = scaleQuantile()\n            .domain(_.map(_.filter(_.map(x, (d, k) => {\n              d.fips = k\n              return d\n            }),\n              d => (\n                (d.casescum >= 0 &&\n                  d.fips.length === 5 && Number(d.fips) >= 30001 && Number(d.fips) <= 31999) || (d.casescum >= 0 &&\n                    d.fips.length === 5 && Number(d.fips) >= 39800 && Number(d.fips) <= 39999))),\n              d => d['casescum']))\n            .range(colorPalette);\n\n          let scaleMap = {}\n          _.each(_.filter(_.map(x, (d, k) => {\n            d.fips = k\n            return d\n          }),\n            d => (\n              (d.casescum >= 0 &&\n                d.fips.length === 5 && Number(d.fips) >= 30001 && Number(d.fips) <= 31999) || (d.casescum >= 0 &&\n                  d.fips.length === 5 && Number(d.fips) >= 39800 && Number(d.fips) <= 39999)))\n            , d => {\n              scaleMap[d['casescum']] = cs(d['casescum'])\n            });\n          setColorScale(scaleMap);\n\n          var max = 0\n          var min = 100\n          var length = 0\n          _.each(x, d => {\n            // console.log(d.fips[0]);\n            if ((d['casescum'] > max && d.fips.length === 5 && Number(d.fips) >= 30001 && Number(d.fips) <= 31999) ||\n              (d['casescum'] > max && d.fips.length === 5 && Number(d.fips) >= 39800 && Number(d.fips) <= 39999)\n            ) {\n              max = d['casescum'];\n              // console.log(d.fips)\n            } else if ((d.fips.length === 5 && d['casescum'] < min && d['casescum'] >= 0 && Number(d.fips) >= 30001 && Number(d.fips) <= 31999) ||\n              (d.fips.length === 5 && d['casescum'] < min && d['casescum'] >= 0 && Number(d.fips) >= 39800 && Number(d.fips) <= 39999)\n            ) {\n              min = d['casescum']\n              // console.log(d.fips)\n            }\n\n          });\n          if (max > 999) {\n            max = (max / 1000).toFixed(0) + \"K\";\n            setLegendMax(max);\n          } else {\n            setLegendMax(max.toFixed(0));\n\n          }\n          setLegendMin(min.toFixed(0));\n\n          var split = scaleQuantile()\n            .domain(_.map(_.filter(_.map(x, (d, k) => {\n              d.fips = k\n              return d\n            }),\n              d => (\n                (d.casescum >= 0 &&\n                  d.fips.length === 5 && Number(d.fips) >= 30001 && Number(d.fips) <= 31999) || (d.casescum >= 0 &&\n                    d.fips.length === 5 && Number(d.fips) >= 39800 && Number(d.fips) <= 39999))),\n              d => d['casescum']))\n            .range(colorPalette);\n\n          setLegendSplit(split.quantiles());\n          // console.log(split.quantiles());\n        });\n\n\n    }\n  }, [countyFips]);\n\n  useEffect(() => {\n    fetch('/data/zipcode.json').then(res => res.json())\n      .then(x => {\n        const csD = scaleQuantile()\n          .domain(_.map(_.filter(_.map(x, (d, k) => {\n            d.fips = k\n            return d\n          }),\n            d => (\n              (d.deathscum >= 0 &&\n                d.fips.length === 5 && Number(d.fips) >= 30001 && Number(d.fips) <= 31999) || (d.deathscum >= 0 &&\n                  d.fips.length === 5 && Number(d.fips) >= 39800 && Number(d.fips) <= 39999))),\n            d => d['deathscum']))\n          .range(colorPalette);\n\n        let scaleMap = {}\n        _.each(_.filter(_.map(x, (d, k) => {\n          d.fips = k\n          return d\n        }),\n          d => (\n            (d.deathscum >= 0 &&\n              d.fips.length === 5 && Number(d.fips) >= 30001 && Number(d.fips) <= 31999) || (d.deathscum >= 0 &&\n                d.fips.length === 5 && Number(d.fips) >= 39800 && Number(d.fips) <= 39999)))\n          , d => {\n            scaleMap[d['deathscum']] = csD(d['deathscum'])\n          });\n        setColorScaleD(scaleMap);\n\n        var max = 0\n        var min = 100\n        _.each(x, d => {\n          // console.log(d.fips[0]);\n          if ((d['deathscum'] > max && d.fips.length === 5 && Number(d.fips) >= 30001 && Number(d.fips) <= 31999) ||\n            (d['deathscum'] > max && d.fips.length === 5 && Number(d.fips) >= 39800 && Number(d.fips) <= 39999)\n          ) {\n            max = d['deathscum'];\n            // console.log(max)\n          } else if ((d.fips.length === 5 && d['deathscum'] < min && d['deathscum'] >= 0 && Number(d.fips) >= 30001 && Number(d.fips) <= 31999) ||\n            (d.fips.length === 5 && d['deathscum'] < min && d['deathscum'] >= 0 && Number(d.fips) >= 39800 && Number(d.fips) <= 39999)\n          ) {\n            min = d['deathscum']\n            // console.log(d.fips)\n          }\n\n\n        });\n        if (max > 999) {\n          max = (max / 1000).toFixed(0) + \"K\";\n          setLegendMaxD(max);\n        } else {\n          setLegendMaxD(max.toFixed(0));\n\n        }\n        setLegendMinD(min.toFixed(0));\n\n        var split = scaleQuantile()\n          .domain(_.map(_.filter(_.map(x, (d, k) => {\n            d.fips = k\n            return d\n          }),\n            d => (\n              (d.deathscum >= 0 &&\n                d.fips.length === 5 && Number(d.fips) >= 30001 && Number(d.fips) <= 31999) || (d.deathscum >= 0 &&\n                  d.fips.length === 5 && Number(d.fips) >= 39800 && Number(d.fips) <= 39999))),\n            d => d['deathscum']))\n          .range(colorPalette);\n\n        setLegendSplitD(split.quantiles());\n        // console.log(split.thresholds().reverse());\n      });\n  }, [])\n\n  useEffect(() => {\n    if (dataTS && dataTS[stateFips + countyFips]) {\n      setCovidMetric(dataG[stateFips + countyFips]);\n      setCovidMetricGa(dataG[stateFips]);\n      // setCovidMetric(dataG[stateFips + countyFips]);\n      setCovidMetric14(_.takeRight(dataTS[stateFips + countyFips], 14)[0]);\n      setCovidMetricLast(_.takeRight(dataTS[stateFips + countyFips])[0]);\n    }\n  }, [dataTS])\n\n  if (data && dataTS && varMap) {\n\n    return (\n      <div>\n        <AppBar menu='countyReport' />\n        <Container style={{ marginTop: '8em', minWidth: '1260px', paddingRight: 0 }}>\n          {configsCounty &&\n            <div>\n              <Breadcrumb>\n                {/* <Breadcrumb.Section link onClick={() => history.push('/')}>United States</Breadcrumb.Section>\n            <Breadcrumb.Divider /> */}\n                <Breadcrumb.Section link onClick={() => history.push('/' + stateFips)}>{stateName}</Breadcrumb.Section>\n                <Breadcrumb.Divider />\n                <Breadcrumb.Section active>{countyName}</Breadcrumb.Section>\n                <Breadcrumb.Divider />\n              </Breadcrumb>\n              <Header as='h1' style={{ fontWeight: 300 }}>\n                <Header.Content>\n                  {/* Covid-19 Health Equity Report for <span style={{color: countyColor}}>{countyName}</span> */}\n                  {/* <span style={{ color: countyColor }}>{countyName}</span> */}\n                  <b>{countyName}</b>\n                  {/* <Header.Subheader style={{fontWeight: 300}}>\n              See how health determinants impact COVID-19 outcomes. \n              </Header.Subheader> */}\n                </Header.Content>\n              </Header>\n              <Divider horizontal style={{ fontWeight: 600, color: '#232423', fontSize: '16pt', paddingTop: '1em' }}>SUMMARY OF COVID-19 IN <b>{countyName}</b>, GEORGIA</Divider>\n\n              <Grid style={{ paddingTop: '2em', width: \"1260px\" }} centered>\n                <Header as='h2' style={{ fontWeight: 300, textAlign: 'center' }} >\n                  <Header.Content>\n                    COVID-19 <b>cases</b> in {countyName}\n                  </Header.Content>\n                </Header>\n                <Grid.Row style={{ paddingTop: '1em' }}>\n                  <Grid.Column width={16} style={{ paddingLeft: '0', paddingRight: '0' }}>\n                    <Table fixed>\n                      <Table.Header>\n                        <Table.Row textAlign='center'>\n                          <Table.HeaderCell colSpan='1' style={{ width: 150 }}> </Table.HeaderCell>\n                          <Popup\n                            trigger={\n                              <Table.HeaderCell style={{ width: 200 }}> ALL CASES TO DATE</Table.HeaderCell>}\n                            content={\"All confirmed cases reported to DPH as of \" + new Date(dateCur[stateFips + countyFips].todaydat * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' })}\n                            basic />\n                          <Popup\n                            trigger={\n                              <Table.HeaderCell style={{ width: 200 }}> CASES IN PAST 14 DAYS</Table.HeaderCell>}\n                            content={\"All confirmed cases reported to DPH during the 14 days preceding the report publication date.\"}\n                            basic />\n                          <Popup\n                            trigger={\n                              <Table.HeaderCell style={{ width: 200 }}> CASES PER 100K (PAST 14 DAYS)</Table.HeaderCell>}\n                            content={\"14-day case count/100K residents based on 2020 population projects derived from census data.\"}\n                            basic />\n                          <Popup\n                            trigger={\n                              <Table.HeaderCell style={{ width: 200 }}> 14-DAY RATE CATEGORY</Table.HeaderCell>} flowing hoverable>\n                            Based on the 14-day case rate\n                          <List as='ul'>\n                              <List.Item as='li'>High: {'>'} 100 cases/100K</List.Item>\n                              <List.Item as='li'>Moderately high: {\">\"} 50-100 cases/100K</List.Item>\n                              <List.Item as='li'>Moderately: {\">\"} 10-50 cases/100K</List.Item>\n                              <List.Item as='li'>Low: {\">\"} 0-10 cases/100K</List.Item>\n                              <List.Item as='li'>Less than 5 cases reported, rate not calculated</List.Item>\n                            </List>\n                          </Popup>\n\n                          <Popup\n                            trigger={\n                              <Table.HeaderCell style={{ width: 200 }}> CHANGE IN LAST 2 WEEKS</Table.HeaderCell>} flowing hoverable>\n                            Change in case count during the previous 14 days, comparing<br></br> the second 7-day period to the first 7-day period.\n                          <List as='ul'>\n                              <List.Item as='li'>Increasing: 5% or greater change</List.Item>\n                              <List.Item as='li'>Decreasing: -5% or less change</List.Item>\n                              <List.Item as='li'>Less than 5% change</List.Item>\n                            </List>\n                          </Popup>\n                        </Table.Row>\n\n                        <Table.Row textAlign='center'>\n                          <Table.HeaderCell style={{ fontSize: '18px' }}> {countyName} </Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px' }}>{covidMetric.casescum === null || covidMetric.casescum < 0 ? '0' : covidMetric.casescum.toLocaleString()}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px' }}>{covidMetric.casescum14day === null || covidMetric.casescum14day < 0 ? '0' : numberWithCommas(parseFloat(covidMetric.casescum14day).toFixed(0)).toLocaleString()}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px' }}>{covidMetric.casescum14dayR === null || covidMetric.casescum14dayR < 0 ? '0' : numberWithCommas(parseFloat(covidMetric.casescum14dayR).toFixed(2)).toLocaleString()}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '18px' }}>{covidMetric.category14day === null || covidMetric.category14day < 0 ? '0' : covidMetric.category14day}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '18px' }}>{covidMetric.change14day === null ? '0' : covidMetric.change14day}</Table.HeaderCell>\n                        </Table.Row>\n                        <Table.Row textAlign='center'>\n                          <Table.HeaderCell style={{ fontSize: '18px' }}>Georgia</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px' }}>{covidMetricGa.casescum === null || covidMetricGa.casescum < 0 ? '0' : covidMetricGa.casescum.toLocaleString()}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px' }}>{covidMetricGa.casescum14day === null || covidMetricGa.casescum14day < 0 ? '0' : numberWithCommas(parseFloat(covidMetricGa.casescum14day).toFixed(0)).toLocaleString()}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px' }}>{covidMetricGa.casescum14dayR === null || covidMetricGa.casescum14dayR < 0 ? '0' : numberWithCommas(parseFloat(covidMetricGa.casescum14dayR).toFixed(2)).toLocaleString()}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '18px' }}>{covidMetricGa.category14day === null || covidMetricGa.category14day < 0 ? '0' : covidMetricGa.category14day}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '18px' }}>{covidMetricGa.change14day === null || covidMetricGa.change14day < 0 ? '0' : covidMetricGa.change14day}</Table.HeaderCell>\n                        </Table.Row>\n                      </Table.Header>\n                    </Table>\n                  </Grid.Column>\n\n                </Grid.Row>\n\n                <Header as='h2' style={{ fontWeight: 300, textAlign: 'center' }} >\n                  <Header.Content>\n                    COVID-19 <b>deaths</b> in {countyName}\n                  </Header.Content>\n                </Header>\n                <Grid.Row style={{ paddingTop: '1em' }}>\n                  <Grid.Column width={16} style={{ paddingLeft: '0', paddingRight: '0' }}>\n\n                    <Table celled fixed singleLine>\n                      <Table.Header>\n                        <Table.Row textAlign='center'\n\n                        >\n                          <Table.HeaderCell colSpan='1' style={{ width: 150 }}> </Table.HeaderCell>\n                          <Popup\n                            trigger={\n                              <Table.HeaderCell style={{ width: 200 }}> ALL DEATHS TO DATE</Table.HeaderCell>}\n                            content={\"All confirmed deaths reported to DPH as of \" + new Date(dateCur.date * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' })}\n                            basic />\n                          <Popup\n                            trigger={\n                              <Table.HeaderCell style={{ width: 230 }}> DEATHS IN PAST 14 DAYS</Table.HeaderCell>}\n                            content={\"All confirmed deaths reported to DPH during the 14 days preceding the report publication date.\"}\n                            basic />\n                          <Popup\n                            trigger={\n                              <Table.HeaderCell style={{ width: 200 }}> DEATHS PER 100K (PAST 14 DAYS)</Table.HeaderCell>}\n                            content={\"14-day deaths count/100K residents based on 2020 population projects derived from census data.\"}\n                            basic />\n                          <Popup\n                            trigger={\n                              <Table.HeaderCell style={{ width: 200 }}> CASE FATALITY RATIO (%)</Table.HeaderCell>}\n                            content={\"The case fatality ratio is the percent of all confirmed cases who have been reported as having died. While this is used as a measure of disease severity, the ratio may also be affected by the level of testing and quality of follow-up data on cases.\"}\n                            basic />\n                        </Table.Row>\n\n                        <Table.Row textAlign='center'>\n                          <Table.HeaderCell style={{ fontSize: '18px' }}> {countyName} </Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px' }}>{covidMetric.deathscum === null || covidMetric.deathscum < 0 ? '0' : covidMetric.deathscum.toLocaleString()}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px' }}>{covidMetric.deathscum14day === null || covidMetric.deathscum14day < 0 ? '0' : numberWithCommas(parseFloat(covidMetric.deathscum14day).toFixed(0)).toLocaleString()}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px' }}>{covidMetric.deathscum14dayR === null || covidMetric.deathscum14dayR < 0 ? '0' : numberWithCommas(parseFloat(covidMetric.deathscum14dayR).toFixed(2)).toLocaleString()}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px' }}>{covidMetric.cfr === null || covidMetric.cfr < 0 ? '0' : numberWithCommas(parseFloat(covidMetric.cfr).toFixed(2)).toLocaleString() + '%'}</Table.HeaderCell>\n                        </Table.Row>\n                        <Table.Row textAlign='center'>\n                          <Table.HeaderCell style={{ fontSize: '18px' }}>Georgia</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px' }}>{covidMetricGa.deathscum === null || covidMetricGa.deathscum < 0 ? '0' : covidMetricGa.deathscum.toLocaleString()}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px' }}>{covidMetricGa.deathscum14day === null || covidMetricGa.deathscum14day < 0 ? '0' : numberWithCommas(parseFloat(covidMetricGa.deathscum14day).toFixed(0)).toLocaleString()}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px' }}>{covidMetricGa.deathscum14dayR === null || covidMetricGa.deathscum14dayR < 0 ? '0' : numberWithCommas(parseFloat(covidMetricGa.deathscum14dayR).toFixed(2)).toLocaleString()}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px' }}>{covidMetricGa.cfr === null || covidMetricGa.cfr < 0 ? '0' : numberWithCommas(parseFloat(covidMetricGa.cfr).toFixed(2)).toLocaleString() + '%'}</Table.HeaderCell>\n                        </Table.Row>\n                      </Table.Header>\n                    </Table>\n                  </Grid.Column>\n\n                </Grid.Row>\n\n                <Grid.Row style={{ paddingTop: 0 }}>\n                  <Grid.Column style={{ paddingLeft: '0.01', paddingRight: '0' }}>\n                    <small style={{ fontWeight: 300, fontSize: 16, color: 'black' }} align=\"justify\">\n                      As of {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' : (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}, there were a total of {covidMetric.casescum.toLocaleString()} confirmed cases of COVID-19 and {covidMetric.deathscum.toLocaleString()} deaths due to COVID-19 reported to DPH for {countyName}. In {countyName}, this translates to {numberWithCommas(parseFloat(covidMetric.casescumR).toFixed(0)).toLocaleString()} case(s) per 100,000 residents and {numberWithCommas(parseFloat(covidMetric.deathscumR).toFixed(0)).toLocaleString()} death(s) per 100,000 residents.\n                        On a day-to-day basis, {numberWithCommas(parseFloat(covidMetric.casescum14dayR).toFixed(0)).toLocaleString()} new cases and {numberWithCommas(parseFloat(covidMetric.deathscum14dayR).toFixed(0)).toLocaleString()} new deaths are reported to DPH on average (based on a 14-day rolling average). This means that there are {covidMetric.casescum14dayR === null || covidMetric.casescum14dayR < 0 ? '0' : numberWithCommas(parseFloat(covidMetric.casescum14dayR).toFixed(0)).toLocaleString()} new cases and {covidMetric.deathscum14dayR === null || covidMetric.deathscum14dayR < 0 ? '0' : numberWithCommas(parseFloat(covidMetric.deathscum14dayR).toFixed(0)).toLocaleString()} new deaths per 100,000 residents in {countyName}. The case-fatality ratio measures\n                          the proportion of confirmed COVID-19 cases that ultimately die due to the disease. This is used by epidemiologists to gauge the severity of disease in a particular locale.  In {countyName}, the case-fatality ratio was {covidMetric.cfr === null || covidMetric.cfr < 0 ? '0' : numberWithCommas(parseFloat(covidMetric.cfr).toFixed(2)).toLocaleString() + '%'}, which is {covidMetric.cfrcompare === null || covidMetric.cfrcompare < 0 ? '0' : covidMetric.cfrcompare} than the national average of 4%. All of these data must be interpreted in light of constraints on testing, PUI follow-up quality, and reporting lags in the county.\n                  </small>\n                  </Grid.Column>\n                </Grid.Row>\n              </Grid>\n\n              <Divider horizontal style={{ fontWeight: 300, color: '#b1b3b3', fontSize: '1.2em', paddingTop: '1em' }}></Divider>\n              <Grid column={2} style={{ paddingTop: '2em', paddingBottom: '2em', width: \"1260px\" }}>\n                <Grid.Row style={{ paddingTop: '2em' }}>\n\n                  <Grid.Column width={8}>\n                    <Header as='h2' style={{ fontWeight: \"bold\", fontSize: \"27px\", paddingLeft: \".5em\" }}>\n                      <Header.Content>\n                        Daily cases in {countyName}\n                        <Header.Subheader style={{ fontWeight: 300 }}>\n                        </Header.Subheader>\n                      </Header.Content>\n                    </Header>\n                    <svg width=\"550\" height=\"90\">\n                      <rect x={50} y={50} width=\"15\" height=\"15\" style={{ fill: stateColor, strokeWidth: 1, stroke: stateColor }} />\n                      <rect x={50} y={22} width=\"15\" height=\"1\" style={{ fill: countyColor, strokeWidth: 1, stroke: countyColor }} />\n                      <text x={75} y={64} style={{ fontSize: 18 }}> Daily new cases </text>\n                      <text x={75} y={30} style={{ fontSize: 18 }}>7-D Rolling average</text>\n                    </svg>\n                    <VictoryChart theme={VictoryTheme.material}\n                      containerComponent={\n                        <VictoryVoronoiContainer\n                          responsive={false}\n                          flyoutStyle={{ fill: \"black\" }}\n\n                        />\n                      }\n                      width={550}\n                      height={450}\n                      padding={{ left: 40, right: 60, top: 10, bottom: 60 }}>\n                      <VictoryAxis\n                        style={{\n                          tickLabels: { fontSize: 20, padding: 5 }\n                        }}\n                        tickFormat={(t) => new Date(t * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric' })}\n                        tickValues={[\n                          // 1583035200, 1585713600, 1588305600, 1590984000, 1593576000\n                          dataTS['13001'][0].t,\n                          dataTS[\"13001\"][32].t,\n                          dataTS[\"13001\"][62].t,\n                          dataTS[\"13001\"][93].t,\n                          dataTS[\"13001\"][123].t,\n                          dataTS[\"13001\"][154].t,\n                          dataTS[\"13001\"][dataTS[\"13001\"].length - 1].t\n                        ]}\n                      />\n                      <VictoryAxis dependentAxis tickCount={5}\n                        style={{\n                          tickLabels: { fontSize: 17, paddingLeft: '0em' }\n                        }}\n                        tickFormat={(y) => (y < 1000 ? y : (y / 1000 + 'k'))}\n                      />\n\n                      <VictoryBar style={{ data: { fill: stateColor } }} barWidth={4} data={dataTS[stateFips + countyFips] ? dataTS[stateFips + countyFips] : dataTS[\"99999\"]}\n                        x='t' y='casesdaily'\n                      />\n                      <VictoryLine name=\"Line\" style={{ data: { stroke: countyColor } }} data={dataTS[stateFips + countyFips] ? dataTS[stateFips + countyFips] : dataTS[\"99999\"]}\n                        x='t' y='casesdailymean7'\n                        labels={({ datum }) => `${countyName}\\n` +\n                          `Date: ${new Date(datum.t * 1000).toLocaleDateString()}\\n` +\n                          `Daily new cases: ${Math.round(datum.casesdaily, 2)}\\n` +\n                          `7-d Rolling average of daily new cases: ${Math.round(datum.casesdailymean7, 2)}`\n                        }\n                        labelComponent={\n                          <VictoryTooltip\n                            orientation=\"top\"\n                            style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'white' }}\n                            constrainToVisibleArea\n                            labelComponent={<VictoryLabel dx={-130} textAnchor='start' />}\n                            flyoutStyle={{ fill: \"black\", fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\n                          />\n                        }\n                      />\n\n                    </VictoryChart>\n                  </Grid.Column>\n                  <Grid.Column width={8}>\n                    <Header as='h2' style={{ fontWeight: \"bold\", fontSize: \"27px\", paddingLeft: \".5em\" }}>\n                      <Header.Content>\n                        Daily deaths in {countyName}\n                        <Header.Subheader style={{ fontWeight: 300 }}>\n                        </Header.Subheader>\n                      </Header.Content>\n                    </Header>\n                    <svg width=\"550\" height=\"90\">\n                      <rect x={50} y={50} width=\"15\" height=\"15\" style={{ fill: stateColor, strokeWidth: 1, stroke: stateColor }} />\n                      <rect x={50} y={22} width=\"15\" height=\"1\" style={{ fill: countyColor, strokeWidth: 1, stroke: countyColor }} />\n                      <text x={75} y={64} style={{ fontSize: 18 }}> Daily new deaths </text>\n                      <text x={75} y={30} style={{ fontSize: 18 }}>7-D Rolling average</text>\n                    </svg>\n                    <VictoryChart theme={VictoryTheme.material}\n                      containerComponent={\n                        <VictoryVoronoiContainer\n                          responsive={false}\n                          flyoutStyle={{ fill: \"black\" }}\n                        />\n                      }\n                      width={550}\n                      height={450}\n                      padding={{ left: 50, right: 60, top: 10, bottom: 60 }}>\n\n                      <VictoryAxis\n                        style={{\n                          tickLabels: { fontSize: 20, padding: 5 }\n                        }}\n                        tickFormat={(t) => new Date(t * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric' })}\n                        tickValues={[\n                          dataTS['13001'][0].t,\n                          dataTS[\"13001\"][32].t,\n                          dataTS[\"13001\"][62].t,\n                          dataTS[\"13001\"][93].t,\n                          dataTS[\"13001\"][123].t,\n                          dataTS[\"13001\"][154].t,\n                          dataTS[\"13001\"][dataTS[\"13001\"].length - 1].t\n                        ]}\n                      />\n                      <VictoryAxis dependentAxis tickCount={5}\n                        style={{\n                          tickLabels: { fontSize: 20, padding: 5 }\n                        }}\n                        tickFormat={(y) => (y < 1000 ? (Math.round(y, 2) === 0.00 ? \" \" : y) : (y / 1000 + 'k'))}\n                      />\n\n                      <VictoryBar style={{ data: { fill: stateColor } }} barWidth={4} data={dataTS[stateFips + countyFips] ? dataTS[stateFips + countyFips] : dataTS[\"99999\"]}\n                        x='t' y='deathsdaily'\n                      />\n                      <VictoryLine name=\"Line\" style={{ data: { stroke: countyColor } }} data={dataTS[stateFips + countyFips] ? dataTS[stateFips + countyFips] : dataTS[\"99999\"]}\n                        x='t' y='deathsdailymean7'\n                        labels={({ datum }) =>\n                          `${countyName}\\n` +\n                          `Date: ${new Date(datum.t * 1000).toLocaleDateString()}\\n` +\n                          `Daily new deaths: ${Math.round(datum.deathsdaily, 2)}\\n` +\n                          `7-d Rolling average of daily new deaths: ${Math.round(datum.deathsdailymean7, 2)}`}\n                        labelComponent={\n                          <VictoryTooltip\n                            orientation=\"top\"\n                            style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'white' }}\n                            constrainToVisibleArea\n                            labelComponent={<VictoryLabel dx={-130} textAnchor='start' />}\n                            flyoutStyle={{ fill: \"black\", fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\n                          />\n                        }\n                      />\n\n                    </VictoryChart>\n                  </Grid.Column>\n                </Grid.Row>\n                <Grid.Row style={{ paddingTop: '2em', paddingLeft: '0em', paddingRight: '2em' }} >\n                  <Grid.Column width={8} style={{ paddingLeft: '1em', paddingRight: '3em' }}>\n                    <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\n                      As of {covidMetricLast.t === 'n/a' ? 'N/A' : (new Date(covidMetricLast.t * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}, this chart shows the daily number of new cases of confirmed COVID-19 in <b>{countyName}</b>. The daily number reflects the date the case was first reported to DPH.\n                  The vertical bars show the number of new daily cases while the line shows the 7-day moving average of new daily cases.\n                  </small>\n                  </Grid.Column>\n                  <Grid.Column width={8} style={{ paddingLeft: '3em', paddingRight: '3em' }}>\n                    <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\n                      As of {covidMetricLast.t === 'n/a' ? 'N/A' : (new Date(covidMetricLast.t * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}, this chart shows the daily number of new deaths of confirmed COVID-19 in <b>{countyName}</b>. The daily number reflects the date the death was first reported to DPH.\n                  The vertical bars show the number of new daily deaths while the line shows the 7-day moving average of new daily cases.\n                  </small>\n                  </Grid.Column>\n                </Grid.Row>\n                <Grid.Row style={{ paddingTop: '8em' }}>\n                  <Grid.Column width={9}>\n                    <Header as='h2' style={{ fontWeight: 400, paddingLeft: '1em' }}>\n                      <Header.Content >\n                        <strong>Confirmed COVID-19 cases {countyName} by zip code</strong>\n                        {/* <Header.Subheader style={{fontWeight: 300}}>.</Header.Subheader> */}\n                      </Header.Content>\n                    </Header>\n                    <svg width=\"120\" height=\"300\" style={{ paddingLeft: '3.5em' }}>\n                      {_.map(colorPalette, (color, i) => {\n                        return <rect key={i} y={20 * i} x={25} width=\"20\" height=\"20\" style={{ fill: colorPalette[(colorPalette.length - 1 - i).toString()], strokeWidth: 1, stroke: colorPalette[(colorPalette.length - 1 - i).toString()] }} />\n                      })}\n                      {/* <text y={15} x={47} style={{fontSize: '0.8em'}}>High</text>\n                  <text y={20 * (colorPalette.length)} x={47} style={{fontSize: '0.8em'}}>Low</text> */}\n                      {/* {_.map(legendSplit, (splitpoint, i) => {\n                        if (legendSplit[i] < 1) {\n                          return <text key={i} y={21 * (legendSplit.length - i)} x={47} style={{ fontSize: '0.8em' }}> {legendSplit[i].toFixed(1)}</text>\n                        }\n                        return <text key={i} y={21 * ((legendSplit.length - i))} x={47} style={{ fontSize: '0.8em' }}> {legendSplit[i].toFixed(0)}</text>\n                      })} */}\n                      <text y={20 * (colorPalette.length)} x={47} style={{ fontSize: '0.8em' }}> {legendMin} </text>\n                      <text y={8} x={47} style={{ fontSize: '0.8em' }}>{legendMax}</text>\n                    </svg>\n\n                    <ComposableMap projection=\"geoAlbersUsa\"\n                      style={{ paddingLeft: '2em' }}\n                      projectionConfig={{ scale: `${configsCounty.scale}` }}\n                      width={500}\n                      height={350}\n                      data-tip=\"\"\n                      offsetX={configsCounty.offsetX}\n                      offsetY={configsCounty.offsetY}>\n                      <Geographies geography={configsCounty.url}>\n                        {({ geographies }) => geographies.map(geo =>\n                          <Geography\n                            key={geo.rsmKey}\n                            geography={geo}\n                            style={{\n                              default: {\n                                stroke: \"#607D8B\",\n                                strokeWidth: 0.95,\n                                outline: \"none\",\n                              }\n                            }}\n                            onMouseEnter={(event) => {\n                              // console.log(event);\n                              // setCountyFips(geo.properties.COUNTYFP);\n                              setCountyName(fips2county[stateFips + geo.properties.COUNTYFP]);\n                              setZipCode(geo.properties.ZCTA5CE10);\n                              setZipCodeFinal(geo.properties.ZCTA5CE10);\n                              setTooltipContent(<div><font size=\"+2\"><b >{geo.properties.ZCTA5CE10}</b> </font> <br />\n                                {/* <b>Total Cases</b>: {dataZip[geo.properties.ZCTA5CE10]['casescum']} <br />\n                                <b>Total Deaths</b>: {dataZip[geo.properties.ZCTA5CE10]['deathscum']} <br /> */}\n                              </div>);\n                            }}\n                            onMouseLeave={(event) => {\n                              setTooltipContent(\"\")\n                            }}\n                            fill={zipCode === geo.properties.ZCTA5CE10 ? countyColor :\n                              ((colorScale && dataZip[geo.properties.ZCTA5CE10] && dataZip[geo.properties.ZCTA5CE10]['casescum']) ?\n                                colorScale[dataZip[geo.properties.ZCTA5CE10]['casescum']] : colorPalette[0])}\n                          />\n                        )}\n                      </Geographies>\n                    </ComposableMap>\n                  </Grid.Column>\n\n                </Grid.Row>\n\n\n                <Grid.Row style={{ paddingTop: '2em', paddingLeft: '0em', paddingRight: '2em' }} >\n\n                  <Grid.Column width={9} style={{ paddingLeft: '2em', paddingRight: '5em' }}>\n                    <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\n                      {varNameMap['casescum'].text}{dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' : (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))} . The darker shading indicates a larger number of {varNameMap['casescum'].name}.</small>\n                  </Grid.Column>\n\n                </Grid.Row>\n                <Grid.Row style={{ paddingTop: 0 }}>\n                  <small style={{ fontWeight: 300, color: 'black' }}>\n                    Note: Data are provisional and subject to change. Zip codes may cross county boundaries. Zip codes being displayed include the total count of cases for that zip code.\n                    </small>\n                </Grid.Row>\n              </Grid>\n              <Divider horizontal style={{ fontWeight: 600, color: '#232423', fontSize: '16pt', paddingTop: '1em' }}>Characteristics of confirmed COVID-19 cases for {countyName}</Divider>\n              <Grid columns={2} style={{ width: \"1260px\" }} centered>\n                <Grid.Row >\n                  <Grid.Column>\n                    <svg width=\"400\" height=\"500\" >\n                      <VictoryLabel style={{\n                        textAnchor: \"start\",\n                        verticalAnchor: \"end\", fill: \"#000000\", fontFamily: \"inherit\",\n                        fontSize: \"20px\", fontWeight: \"bold\"\n                      }} text=\"Proportion of cases with a comorbidity\n                  \" x={15} y={28} textAnchor=\"middle\" />\n                      <VictoryPie\n                        colorScale={['Gray', 'GoldenRod']}\n                        standalone={false}\n                        style={{ labels: { fill: \"white\" } }}\n                        labelRadius={80}\n                        width={400} height={400}\n                        padAngle={1}\n                        data={[\n                          { x: \"Cats\", y: 22, label: \"22%\" },\n                          { x: \"Dogs\", y: 78, label: \"78%\" },\n                        ]}\n                      />\n                      <VictoryLegend\n                        standalone={false}\n                        colorScale={['Gray', 'GoldenRod']}\n                        x={150} y={350}\n                        data={[{ name: \"No underlying conditions\", labels: { fontSize: 18 } },\n                        { name: \"Underlying health condition\", labels: { fontSize: 18 } }\n                        ]}\n                      />\n                    </svg>\n                  </Grid.Column>\n                  <Grid.Column style={{ paddingLeft: '2em', paddingRight: '1em', paddingTop: '8em' }}>\n                    <small style={{ fontWeight: 300, fontSize: 20, color: 'black' }} align=\"justify\">\n                      The pie chart shows the proportion of confirmed COVID-19 cases in <b>{countyName}</b> who\n                  presented with an underlying medical condition. Underlying medical conditions\n                  increase the risk of experiencing severe disease which may lead to hospitalization\n                  and death. Of the {datades_cases[stateFips + countyFips]['cdc_underlying2_N'] ? datades_cases[stateFips + countyFips]['cdc_underlying2_N'] : \"N/A\"} confirmed cases with data available, {datades_cases[stateFips + countyFips]['cdc_underlying2Percent'] ? datades_cases[stateFips + countyFips]['cdc_underlying2Percent'].toFixed(2) : \"N/A\"}% had an underlying medical condition that increases risk of severe outcomes according to the CDC. These underlying medical conditions include: lung disease, diabetes, cardiovascular disease, renal disease, and/or an immunocompromised state. The chart excludes data from {datades_cases[stateFips + countyFips]['cdc_underlying2Pmiss'] ? datades_cases[stateFips + countyFips]['cdc_underlying2Pmiss'].toFixed(2) : \"N/A\"}% of confirmed COVID-19 cases whose medical history was unknown.\n                    </small>\n                  </Grid.Column>\n                  {/* <Grid.Row style={{ paddingTop: 0 }}>\n                  <small style={{ fontWeight: 300, color: 'black' }}>\n                    Note: For comorbidities, we include lung disease, diabetes, CVD, renal disease, Immunocompromised state. \n                    </small>\n                </Grid.Row> */}\n\n                </Grid.Row>\n              </Grid>\n              <Divider horizontal style={{ fontWeight: 600, color: '#232423', fontSize: '16pt', paddingTop: '1em', paddingBottom: \"0em\" }}>Percentage of Confirmed Cases by Demographic Group in {countyName}</Divider>\n              <Grid style={{ width: \"1260px\" }}>\n                {datades_cases[stateFips + countyFips]['NObs'] < 50 && datades_cases[stateFips + countyFips]['outcome'] === 'COVID Death' ?\n                  <Header as='h2' style={{ fontWeight: 400 }}>\n                    <Header.Content>\n                      <Header.Subheader style={{ fontWeight: 300, fontSize: '16pt', color: 'black' }}>\n                        Rates broken down by age, sex, and race are not shown for {countyName} because there are fewer than 50 confirmed COVID-19 cases with complete information.\n                </Header.Subheader>\n                    </Header.Content>\n\n                  </Header>\n                  :\n                  <Grid.Row columns={3} style={{ paddingTop: 0 }}>\n                    <Grid.Column>\n                      <BarChart\n                        cate={\"Cases\"}\n                        var_num={4}\n                        title=\"Age Group\"\n                        keyv={[\"< 20\", \"20-44\", \"45-64\", \"65+\"]}\n                        var={[\"019ageC_P\", \"2044ageC_P\", \"4564ageC_P\", \"65ageC_P\"]}\n                        var1={[\"019ageP\", \"2044ageP\", \"4564ageP\", \"65ageP\"]}\n                        width={400}\n                        stateFips={stateFips}\n                        countyFips={countyFips}\n                        data={data_cases} />\n\n                    </Grid.Column>\n                    <Grid.Column>\n                      <BarChart\n                        cate={\"Cases\"}\n                        var_num={2}\n                        title=\"Sex\"\n                        keyv={[\"Female\", \"Male\"]}\n                        var={[\"femaleC_P\", \"maleC_P\"]}\n                        var1={[\"femaleP\", \"maleP\"]}\n                        pad={80}\n                        width={400}\n                        stateFips={stateFips}\n                        countyFips={countyFips}\n                        data={data_cases} />\n                    </Grid.Column>\n                    <Grid.Column>\n                      <BarChart\n                        cate={\"Cases\"}\n                        var_num={4}\n                        title=\"Race-Ethnicity\"\n                        keyv={[\"Other\", \"Hispanic\", \"Black\", \"White\"]}\n                        var={[\"otherNHC_P\", \"hispanicC_P\", \"blackC_P\", \"whiteC_P\"]}\n                        var1={[\"otherNHP\", \"hispanicP\", \"blackP\", \"whiteP\"]}\n                        width={400}\n                        stateFips={stateFips}\n                        countyFips={countyFips}\n                        data={data_cases} />\n                    </Grid.Column>\n                  </Grid.Row>\n                }\n                {datades_cases[stateFips + countyFips]['NObs'] < 50 && datades_cases[stateFips + countyFips]['outcome'] === 'COVID Death' ? ' ' :\n                  <Grid.Row columns={3} style={{ padding: 0 }}>\n                    <Grid.Column style={{ paddingLeft: '4em', paddingRight: '0em' }}>\n                      <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\n                      This chart shows the percentage of cases and percentage of the population by age for <b>{countyName}</b>. The chart excludes data from {datades_cases[stateFips + countyFips]['age4catPmiss'].toFixed(2)}% of confirmed cases who were missing information on age.\n                    </small>\n                    </Grid.Column>\n                    <Grid.Column style={{ paddingLeft: '4em', paddingRight: '0em' }}>\n                      <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\n                      This chart shows the percentage of cases and percentage of the population by sex for <b>{countyName}</b>. The chart excludes data from {datades_cases[stateFips + countyFips]['femalePmiss'].toFixed(2)}% of confirmed cases who were missing information on sex.\n                    </small>\n                    </Grid.Column>\n                    <Grid.Column style={{ paddingLeft: '4em', paddingRight: '0em' }}>\n                      <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\n                      This chart shows the percentage of cases and percentage of the population by race and ethnicity for <b>{countyName}</b>. The chart excludes data from {datades_cases[stateFips + countyFips]['race_3Pmiss'].toFixed(2)}% of confirmed cases who were missing information on race/ethnicity.                    </small>\n                    </Grid.Column>\n                  </Grid.Row>}\n              </Grid>\n\n              <Divider horizontal style={{ fontWeight: 600, color: '#232423', fontSize: '16pt', paddingTop: '1em', paddingBottom: \"0em\" }}>Percentage of Deaths by Demographic Group in {countyName}</Divider>\n              <Grid style={{ width: \"1260px\" }}>\n                {!(datades_deaths[stateFips + countyFips]) ? <Header as='h2' style={{ fontWeight: 400, paddingTop: '0.5em' }}>\n                  <Header.Content>\n                    <Header.Subheader style={{ fontWeight: 300, fontSize: '16pt' }}>\n                      Rates broken down by age, sex, and race are not shown for {countyName} because there are fewer than 50 confirmed COVID-19 deaths with complete information.\n                    </Header.Subheader>\n                  </Header.Content>\n                </Header>\n                  :\n                  datades_deaths[stateFips + countyFips]['NObs'] < 50 && datades_deaths[stateFips + countyFips]['outcome'] === 'COVID Death' ?\n                    <Header as='h2' style={{ fontWeight: 400, paddingTop: '0.5em' }}>\n                      <Header.Content>\n                        <Header.Subheader style={{ fontWeight: 300, fontSize: '16pt' }}>\n                          Rates broken down by age, sex, and race are not shown for {countyName} because there are fewer than 50 confirmed COVID-19 deaths with complete information.\n                    </Header.Subheader>\n                      </Header.Content>\n                    </Header>\n                    :\n                    <Grid.Row columns={3} style={{ paddingTop: 0 }}>\n                      <Grid.Column>\n                        <BarChart\n                          cate={\"Deaths\"}\n                          var_num={4}\n                          title=\"Age Group\"\n                          keyv={[\"< 20\", \"20-44\", \"45-64\", \"65+\"]}\n                          var={[\"019ageC_P\", \"2044ageC_P\", \"4564ageC_P\", \"65ageC_P\"]}\n                          var1={[\"019ageP\", \"2044ageP\", \"4564ageP\", \"65ageP\"]}\n                          width={400}\n                          stateFips={stateFips}\n                          countyFips={countyFips}\n                          data={data_deaths} />\n                      </Grid.Column>\n                      <Grid.Column>\n                        <BarChart\n                          cate={\"Deaths\"}\n                          var_num={2}\n                          title=\"Sex\"\n                          keyv={[\"Female\", \"Male\"]}\n                          var={[\"femaleC_P\", \"maleC_P\"]}\n                          var1={[\"femaleP\", \"maleP\"]}\n                          width={400}\n                          pad={80}\n                          stateFips={stateFips}\n                          countyFips={countyFips}\n                          data={data_deaths} />\n                      </Grid.Column>\n                      <Grid.Column>\n                        <BarChart\n                          cate={\"Deaths\"}\n                          var_num={4}\n                          title=\"Race-Ethnicity\"\n                          keyv={[\"Other\", \"Hispanic\", \"Black\", \"White\"]}\n                          var={[\"otherNHC_P\", \"hispanicC_P\", \"blackC_P\", \"whiteC_P\"]}\n                          var1={[\"otherNHP\", \"hispanicP\", \"blackP\", \"whiteP\"]}\n                          width={400}\n                          stateFips={stateFips}\n                          countyFips={countyFips}\n                          data={data_deaths} />\n                      </Grid.Column>\n                    </Grid.Row>}\n                {!(datades_deaths[stateFips + countyFips]) ? ' ' :\n\n\n                  datades_deaths[stateFips + countyFips]['NObs'] < 50 && datades_deaths[stateFips + countyFips]['outcome'] === 'COVID Death' ? ' ' :\n                    <Grid.Row columns={3} style={{ padding: 0 }}>\n                      <Grid.Column style={{ paddingLeft: '4em', paddingRight: '0em' }}>\n                        <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\n                        This chart shows the percentage of deaths and percentage of the population by age group for <b>{countyName}</b>. The chart excludes data from {datades_deaths[stateFips + countyFips]['age4catPmiss'].toFixed(2)}% of confirmed deaths who were missing information on age.\n                    </small>\n                      </Grid.Column>\n                      <Grid.Column style={{ paddingLeft: '4em', paddingRight: '0em' }}>\n                        <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\n                        This chart shows the percentage of deaths and percentage of the population by sex for <b>{countyName}</b>. The chart excludes data from {datades_deaths[stateFips + countyFips]['femalePmiss'].toFixed(2)}% of confirmed deaths who were missing information on sex.\n                    </small>\n                      </Grid.Column>\n                      <Grid.Column style={{ paddingLeft: '4em', paddingRight: '0em' }}>\n                        <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\n                        This chart shows the percentage of deaths and percentage of the population by race and ethnicity for <b>{countyName}</b>. The chart excludes data from {datades_deaths[stateFips + countyFips]['race_3Pmiss'].toFixed(2)}% of confirmed deaths who were missing information on race/ethnicity.                    </small>\n                      </Grid.Column>\n                    </Grid.Row>}\n              </Grid>\n              <Divider horizontal style={{ fontWeight: 600, color: '#232423', fontSize: '16pt', paddingTop: '1em' }}>General characteristics of {countyName} residents</Divider>\n              <Header as='h2' style={{ fontWeight: 400 }}>\n                <Header.Content>\n                  <Header.Subheader style={{ fontWeight: 300, fontSize: '16pt', color: 'black' }}>\n                    Social, economic, health and environmental factors impact an individual’s risk of infection and COVID-19 severity.\n                    Counties with large groups of vulnerable people may be disproportionately impacted by COVID-19. The table below characterizes the overall population characteristics of residents of <b>{countyName}</b>, Georgia, and the United States.\n                    </Header.Subheader>\n                </Header.Content>\n              </Header>\n              <small style={{ fontWeight: 300, color: 'black' }}>\n                <div>Note: These are not characteristics of covid.</div>\n              </small>\n              <Table striped compact basic='very'>\n                <Table.Header>\n                  <Table.Row>\n                    <Table.HeaderCell>Characteristic</Table.HeaderCell>\n                    <Table.HeaderCell>{countyName}</Table.HeaderCell>\n                    <Table.HeaderCell>{stateName}</Table.HeaderCell>\n                    <Table.HeaderCell>United States</Table.HeaderCell>\n                  </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                  {_.map(data[stateFips + countyFips],\n                    (v, k) => {\n                      var rmList = [\"cases\", \"deaths\", \"dailycases\", \"dailydeaths\", \"mean7daycases\", \"mean7daydeaths\", \"covidmortality\"\n                        , \"caserate\", \"covidmortality7day\", \"caserate7day\"];\n                      if (!rmList.includes(k)) {\n                        return (\n                          <Table.Row key={k}>\n                            <Table.Cell>{varMap[k] ? varMap[k].name : k}</Table.Cell>\n                            <Table.Cell>{isNaN(v) ? v : (Math.round(v * 100) / 100)}</Table.Cell>\n                            <Table.Cell>{isNaN(data[stateFips][k]) ? data[stateFips][k] : (Math.round(data[stateFips][k] * 100) / 100)}</Table.Cell>\n                            <Table.Cell>{isNaN(data['_nation'][k]) ? data['_nation'][k] : (Math.round(data['_nation'][k] * 100) / 100)}</Table.Cell>\n                          </Table.Row>\n                        )\n                      }\n                    })}\n                </Table.Body>\n              </Table>\n            </div>\n          }\n          {/* <Divider horizontal style={{ fontWeight: 300, color: '#b1b3b3', fontSize: '1.2em', paddingTop: '1em' }}></Divider> */}\n          <small>\n            <div style={{ paddingTop: '1em', paddingBottom: '1em' }}><a href=\"/data-sources\">Data source and interpretation</a></div>\n          </small>\n        </Container>\n        <ReactTooltip>{tooltipContent}</ReactTooltip>\n\n      </div>\n    );\n  } else {\n    return <Loader active inline='centered' />\n  }\n\n\n\n}","import React from 'react'\r\nimport { Route, Redirect } from 'react-router-dom'\r\nconst PrivateRoute = ({component: Component, ...props}) => {\r\n    return <Route {...props} render={(p) => {\r\n        const login = document.cookie.includes('login=true')\r\n        if (login){ \r\n            return <Component />\r\n        } else { \r\n            alert(\"Please log in, then you can access this web!\")\r\n            return <Redirect to={{\r\n                pathname: '/',\r\n                state: {\r\n                    from: p.location.pathname\r\n                }\r\n            }}/>\r\n        }\r\n    }}/>\r\n}\r\nexport default PrivateRoute","import React, { Component } from \"react\";\r\nimport { Form, Header } from \"semantic-ui-react\";\r\nimport \"./auth.css\";\r\n// import logo from \"../../data/logo.png\";\r\n\r\n  export default function Layout(props){\r\n    return (\r\n        <div className=\"auth-main\">\r\n          <div className=\"auth-content\">\r\n            <div className=\"auth-card\">\r\n            <img size='mini' src='https://dph.georgia.gov/themes/custom/ga_forest/orchard/assets/images/icons/logo/ga-logo--gold.svg' alt=\"Logo\" className=\"auth-logo\"/>\r\n              <Header as=\"h2\" color=\"black\" textAlign=\"center\">\r\n                {props.header}\r\n              </Header>\r\n              <Form.Group size=\"large\" className=\"auth-form\" autoComplete=\"off\">\r\n                {props.children}\r\n              </Form.Group>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n\r\n  }","\r\nimport React, { useState, useEffect, Component } from 'react';\r\n// import { Button, FormGroup, FormControl, FormLabel  } from \"react-bootstrap\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport \"./Login.css\";\r\nimport { Button, Form, Message } from \"semantic-ui-react\";\r\nimport Layout from \"./Layout\";\r\nimport fetchProfileData from \"./TokenGet\"\r\nimport { sha256 } from 'js-sha256';\r\n\r\n\r\nexport default function Login(props) {\r\n    const [isLogin, setIsLogin]= useState(document.cookie.includes('login=true'))\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const history = useHistory();\r\n    const [user, setUser] = useState(null);\r\n    const [tok, setTok] = useState(null);\r\n    const promise = fetchProfileData();\r\n\r\n\r\n    // console.log(document.cookie.includes('login=true'))\r\n\r\n    useEffect(() => {\r\n        fetch('/data/token.json')\r\n            .then(res => res.json())\r\n            .then(x => setTok(x));\r\n\r\n        promise.then(data => {\r\n            setUser(data);\r\n        });\r\n    }, []);\r\n\r\n    function arrayEquals(a, b) {\r\n        return Array.isArray(a) &&\r\n          Array.isArray(b) &&\r\n          a.length === b.length &&\r\n          a.every((val, index) => val === b[index]);\r\n      }\r\n\r\n    function validateForm() {\r\n        // return email.length > 0 && password.length > 0;\r\n        return password.length > 0;\r\n\r\n    }\r\n    const setCookie = (key, value, day) => {\r\n        let expires = 13600 * 1000\r\n        let date = new Date( + new Date() + expires)\r\n        document.cookie = `${key}=${value};expires=${date.toUTCString()}`\r\n    }\r\n\r\n    function handleSubmit(event) {\r\n        let login = !isLogin\r\n        event.preventDefault();\r\n        setIsLogin(login)\r\n        \r\n        // console.log(password.toLowerCase()])\r\n        // console.log(sha256(password))\r\n            if (sha256(password).localeCompare(tok.tokens)===0) {\r\n                // console.log(tok.tokens[password])\r\n                setCookie('login', true, 1)\r\n                history.push('/13')\r\n            }\r\n            else{\r\n                alert(\"Token is not right, please contact jzha524@emory.edu for web access\")\r\n                setCookie('login', '', -1)\r\n                history.push('/')\r\n            }\r\n        }\r\n\r\n\r\n        // if(password.toLowerCase() in tok.tokens){\r\n        //     // console.log(tok.tokens[password.toLowerCase()])\r\n        //     if (tok.tokens[password.toLowerCase()].localeCompare(email)===0) {\r\n        //         // console.log(tok.tokens[password])\r\n        //         setCookie('login', true, 1)\r\n        //         history.push('/13')\r\n        //     }\r\n        //     else{\r\n        //         alert(\"Name and email are not match\")\r\n        //         setCookie('login', '', -1)\r\n        //         history.push('/')\r\n        //     }\r\n        // }\r\n        // else{\r\n        //     alert(\"No such user, please contact the admin\")\r\n        //         setCookie('login', '', -1)\r\n        //         history.push('/')\r\n        // }\r\n    // }\r\n        \r\n\r\n    if (user === null) {\r\n        return <p>Loading profile...</p>;\r\n    }\r\n    else {\r\n\r\n        return (\r\n\r\n            <Layout header=\"Dashboard Log in\">\r\n                <Form.Input\r\n                    fluid\r\n                    icon=\"edit\"\r\n                    iconPosition=\"left\"\r\n                    type=\"password\"\r\n                    placeholder=\"Password\"\r\n                    className=\"auth-input-field\"\r\n                    onChange={e => setPassword(e.target.value)}\r\n                />\r\n                {/* <Form.Input\r\n                    fluid\r\n                    icon=\"envelope\"\r\n                    iconPosition=\"left\"\r\n                    placeholder=\"E-mail address\"\r\n                    className=\"auth-input-field\"\r\n                    onChange={e => setEmail(e.target.value)}\r\n                /> */}\r\n                <Button color=\"teal\" fluid size=\"huge\" onClick={handleSubmit} disabled={!validateForm()}>\r\n                    Login\r\n        </Button>\r\n        <p>Contact jzha524@emory.edu for web access</p>\r\n            </Layout>\r\n            \r\n        )\r\n    }\r\n}","// React\r\nimport React, { Suspense, useState, useEffect } from 'react'\r\n// Components & Hooks\r\n\r\nimport 'semantic-ui-css/semantic.min.css'\r\n\r\nexport default function fetchProfileData() {\r\n    return Promise.all([\r\n      fetchUser(),\r\n    ]).then((user) => {\r\n      return  user ;\r\n    });\r\n  }\r\n  \r\n  function fetchUser() {\r\n    // console.log(\"fetch user...\");\r\n    return new Promise(resolve => {\r\n      setTimeout(() => {\r\n        // console.log(\"fetched user\");\r\n        resolve(fetch('/data/token.json')\r\n        .then(res => {\r\n            res.json()}));\r\n      }, 1000);\r\n    });\r\n  }","// React\r\nimport React from 'react'\r\n// Components & Hooks\r\nimport StateMap from \"./StateMap\";\r\nimport CountyReport from \"./CountyReport\";\r\n// import AboutUs from \"./AboutUs\";\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\n\r\nimport PrivateRoute from \"./privateRoute\"\r\n\r\nimport Login from './login';\r\n\r\n\r\n\r\nApp.propTypes = {};\r\nexport default function App() {\r\n\r\n\r\n\r\n      return (\r\n\r\n        <Router>\r\n          <Switch>\r\n          <PrivateRoute path='/:stateFips/:countyFips' component = {CountyReport}/>\r\n          <PrivateRoute path='/:stateFips' component = {StateMap}/>\r\n          <Route exact path='/'>\r\n              <Login />\r\n            </Route>\r\n    \r\n          </Switch>\r\n        </Router>\r\n      );\r\n\r\n}\r\n\r\n","import 'react-app-polyfill/ie9';\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}