{"version":3,"sources":["components/AppBar.js","components/MapProvider.js","utils.js","components/useGeographies.js","components/Geographies.js","components/Geography.js","components/ComposableMap.js","components/Notes.js","components/StateMap.js","components/CountyReport.js","components/privateRoute.js","components/Layout.js","components/login.js","components/TokenGet.js","components/App.js","index.js"],"names":["AppBar","props","history","useHistory","Menu","borderless","inverted","fixed","style","backgroundImage","backgroundSize","Container","paddingRight","Item","as","header","Image","size","src","onClick","push","fontSize","fontWeight","color","lineHeight","geoPath","d3Geo","projections","MapContext","createContext","MapProvider","width","height","offsetX","offsetY","projection","projectionConfig","restProps","center","cx","cy","rotate","rx","ry","rz","parallels","p1","p2","s","scale","projMemo","useMemo","scl","proj","translate","forEach","d","makeProjection","useCallback","value","path","Provider","getFeatures","geographies","parseGeographies","Array","isArray","feats","feature","objects","Object","keys","features","useGeographies","geography","useContext","useState","setGeographies","useEffect","url","window","fetch","then","res","ok","Error","statusText","json","catch","error","console","log","geos","map","i","rsmKey","svgPath","prepareFeatures","Geographies","children","className","length","memo","onMouseEnter","onMouseLeave","onMouseDown","onMouseUp","onFocus","onBlur","isPressed","setPressed","isFocused","setFocus","tabIndex","evt","ComposableMap","Notes","paddingTop","casesColor","mortalityColor","colorPalette","colorPalette1","colorPalette2","nameList","createRef","sectionStyle2","numberWithCommas","x","toString","pattern","test","replace","StickyExampleAdjacentContext","activeItem","sTate","setsTate","Rail","attached","position","Sticky","offset","compact","pointing","secondary","vertical","href","name","active","activeCharacter","e","Header","paddingLeft","SvgMap","_","key","y","fill","strokeWidth","stroke","legendSplit","splitpoint","toFixed","legendSplit1","legendMax","legendMin","ChartGraph","dataTS","varGraphPair","metric","stateFips","countyFips","countyname","data1","theme","VictoryTheme","material","containerComponent","responsive","flyoutStyle","padding","left","right","top","bottom","tickLabels","tickFormat","t","Date","toLocaleDateString","month","day","tickValues","Math","round","dependentAxis","tickCount","data","barWidth","alignment","data2","labels","datum","labelComponent","orientation","fontFamily","constrainToVisibleArea","dx","textAnchor","fillOpacity","takeRight","StateMap","config","setConfig","setStateName","setCountyFips","countyFipscvi","setCountyFipscvi","countyFipssi","setCountyFipssi","countyFipsubr","setCountyFipsubr","countyFipsblack","setCountyFipsblack","countyFipshis","setCountyFipshis","countyFipspov","setCountyFipspov","countyFipsdia","setCountyFipsdia","countyFipsa65","setCountyFipsa65","countyFipsmale","setCountyFipsmale","countyName","setCountyName","setCountyNamecvi","setCountyNamesi","setCountyNameubr","setCountyNameblack","setCountyNamehis","setCountyNamepov","setCountyNamedia","setCountyNamea65","setCountyNamemale","characterRef","setData","dataUs","setDataUs","data_index","setIndexData","dataCha","setDataCha","dateCur","setDateCur","colorCVI","setColorCVI","colorSI","setColorSI","colorUbr","setColorUbr","colorBlack","setColorBlack","colorHis","setColorHis","colorPov","setColorPov","colorDia","setColorDia","colorA65","setColorA65","colorMale","setColorMale","casesdaily","casesdailymean14","setCovidMetric","covidMetric14","setCovidMetric14","colors","setDataTS","setTooltipContent","tooltipContentcvi","setTooltipContentcvi","tooltipContentsi","setTooltipContentsi","tooltipContentubr","setTooltipContentubr","tooltipContentblack","setTooltipContentblack","tooltipContenthis","setTooltipContenthis","tooltipContentpov","setTooltipContentpov","tooltipContentdia","setTooltipContentdia","tooltipContenta65","setTooltipContenta65","tooltipContentmale","setTooltipContentmale","colorScale","setColorScale","data_cases","setDataCG","data_deaths","setDataDG","datades_cases","setDatadesCG","datades_deaths","setDatadesDG","setLegendMax","setLegendMax1","setLegendMin","setLegendMaxGraph","setLegendSplit","setLegendSplit1","setMetric","metricOptions1","text","dropdownopt","metricName","setMetricName","varNameMap","delayHandler","setDelayHandler","configMatched","configs","find","fips","k","temp_Data_metric","each","sort","a","b","countIqr","quantile","belowIqr","filter","upIqr","split","scaleQuantile","domain","range","split1","thr","thr1","quantiles","floor","csUs","max","min","slice","indexColor","rateIqr","IQR3","interV","dicto","m","cs","scaleMap","si","scaleMapsi","his","scaleMap_his","black","scaleMap_black","pov","scaleMap_pov","dia","scaleMap_dia","age","scaleMap_age","male","scaleMap_male","id","ref","imageSrc","isCentered","opacity","parallaxOffset","Grid","column","paddingBottom","divided","Column","Row","Content","textAlign","marginTop","minWidth","stackable","columns","Divider","hidden","Subheader","data-tip","data-for","Dropdown","background","borderTop","borderLeft","borderRight","borderBottom","borderRadius","minHeight","inline","search","fluid","options","onChange","geo","properties","COUNTYFP","default","outline","pressed","setTimeout","fips2county","clearTimeout","centered","align","todaydate","year","cat","domainPadding","ylog","minDomain","gutter","symbol","type","parseFloat","maxDomain","scale1","offsetX1","offsetY2","ticks","axis","grid","label","axisLabel","horizontal","barRatio","ez","includes","Loader","sectionStyle1","BarChart","var_num","pad","title","cate","keyv","var","co","var1","CountyReport","useParams","configsCounty","stateName","zipCode","setZipCode","setZipCodeFinal","dataG","setDataG","dataZip","setDataZip","setDataMapOut","setLegendMaxD","setLegendMinD","setLegendSplitD","setColorScaleD","tooltipContent","casescum","deathscum","casescumR","deathscumR","deathsdailymean14","casesdailymean14R","deathsdailymean14R","covidMetric","covidMetricLast","setCovidMetricLast","covidMetricGa","setCovidMetricGa","varMap","setVarMap","configscounty","countyfips","Number","csD","menu","Breadcrumb","Section","link","Table","HeaderCell","colSpan","Popup","trigger","content","todaydat","basic","flowing","hoverable","List","toLocaleString","casescum14day","casescum14dayR","category14day","change14day","date","celled","singleLine","deathscum14day","deathscum14dayR","cfr","cfrcompare","casesdailymean7","deathsdaily","deathsdailymean7","event","ZCTA5CE10","standalone","labelRadius","padAngle","striped","Body","v","Cell","isNaN","PrivateRoute","Component","component","render","p","document","cookie","alert","to","pathname","state","from","location","Layout","alt","Form","Group","autoComplete","Login","isLogin","setIsLogin","password","setPassword","user","setUser","tok","setTok","promise","Promise","all","resolve","setCookie","toUTCString","Input","icon","iconPosition","placeholder","target","Button","login","preventDefault","sha256","localeCompare","tokens","disabled","App","exact","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.a46530f9.chunk.js","sourcesContent":["import React from \"react\";\nimport ErrorBoundary from \"react-error-boundary\";\nimport { Container, Menu, Image, Divider } from 'semantic-ui-react';\n\nimport { useHistory } from 'react-router-dom';\n\n\nexport default function AppBar(props) {\n\n  const history = useHistory();\n\n  return (\n    <ErrorBoundary>\n      <Menu borderless inverted fixed='top'\n        style={{backgroundImage: 'url(\"/Emory_COVID_header_LightBlue.jpg\")',\n                backgroundSize: 'cover'}}>\n      {/* <Menu borderless inverted fixed='top'\n        style={{backgroundImage: 'url(\"https://www.htmlcsscolor.com/preview/128x128/103052.png\")',\n                backgroundSize: 'cover'}}> */}\n        <Container style = {{paddingRight: '150em'}}>\n          <Menu.Item as='a' header >\n                <Image size='mini' src='https://dph.georgia.gov/themes/custom/ga_forest/orchard/assets/images/icons/logo/ga-logo--gold.svg' />\n          </Menu.Item>\n          \n          <Menu.Item as='a' header onClick={() => history.push('/13')}>\n            <span style={{fontSize: '17px',fontWeight: 400, color: '#fff', lineHeight: 1.3}}>\n           <strong>Georgia Department</strong>\n           <br></br>\n           <em>of</em>\n           <strong>&nbsp;Public Health</strong>\n           </span>\n          </Menu.Item>\n          {/* <Menu.Item \n            active={props.menu==='countyReport'} \n            content='Home'\n            onClick={() => history.push('/13')}\n            name='countyReport'/> */}\n          {/* <Menu.Item \n            active={props.menu==='countyCompare'} \n            onClick={() => history.push('/compare-counties')}\n            name='countyCompare'>\n            Compare Counties\n          </Menu.Item> */}\n          {/* <Menu.Item \n            active={props.menu==='dataSources'} \n            onClick={() => history.push('/data-sources')}\n            name='dataSources'>\n            Data Sources &<br/>Interpretation\n          </Menu.Item>\n          <Menu.Item \n            active={props.menu==='aboutUs'} \n            content='About Us'\n            onClick={() => history.push('/about-team')}\n            name='aboutUs'/>             */}\n          {/* <Menu.Menu position='left'>\n            <Menu.Item as='a' header>\n              <Image size='mini' src='https://dph.georgia.gov/themes/custom/ga_forest/orchard/assets/images/icons/logo/ga-logo--gold.svg' />\n            </Menu.Item>\n          </Menu.Menu> */}\n        </Container>\n      </Menu>\n    </ErrorBoundary>\n  );\n}\n\n\n\n","\nimport React, {\n  createContext,\n  useMemo,\n  useCallback,\n} from \"react\"\nimport PropTypes from \"prop-types\"\nimport * as d3Geo from \"d3-geo\"\n\nconst { geoPath, ...projections } = d3Geo\n\nconst MapContext = createContext()\n\nconst makeProjection = ({\n  projectionConfig = {},\n  projection = \"geoEqualEarth\",\n  width = 800,\n  height = 600,\n  offsetX = 0,\n  offsetY = 0\n}) => {\n  const isFunc = typeof projection === \"function\"\n\n  if (isFunc) return projection\n\n  const scl = projectionConfig.scale || null;\n\n  let proj = projections[projection]().translate([width/2 + (offsetX)*scl/1000 ,\n                                              height/2 +(offsetY)*scl/1000]);\n\n  const supported = [\n    proj.center ? \"center\" : null,\n    proj.rotate ? \"rotate\" : null,\n    proj.scale ? \"scale\" : null,\n    proj.parallels ? \"parallels\" : null,\n  ]\n\n  supported.forEach(d => {\n    if (!d) return\n    proj = proj[d](projectionConfig[d] || proj[d]())\n  })\n\n  return proj\n}\n\nconst MapProvider = ({\n  width,\n  height,\n  offsetX,\n  offsetY,\n  projection,\n  projectionConfig,\n  ...restProps\n}) => {\n  const [cx, cy] = projectionConfig.center || []\n  const [rx, ry, rz] = projectionConfig.rotate || []\n  const [p1, p2] = projectionConfig.parallels || []\n  const s = projectionConfig.scale || null\n\n  const projMemo = useMemo(() => {\n    return makeProjection({\n      projectionConfig: {\n        center: (cx || cx === 0) || (cy || cy === 0) ? [cx, cy] : null,\n        rotate: (rx || rx === 0) || (ry || ry === 0) ? [rx, ry, rz] : null,\n        parallels: (p1 || p1 === 0) || (p2 || p2 === 0) ? [p1, p2] : null,\n        scale: s,\n      },\n      projection,\n      width,\n      height,\n      offsetX,\n      offsetY,\n    })\n  }, [ width, height, projection, cx, cy, rx, ry, rz, p1, p2, s, offsetX, offsetY ])\n\n  const proj = useCallback(projMemo, [projMemo])\n\n  const value = useMemo(() => {\n    return {\n      width,\n      height,\n      projection: proj,\n      path: geoPath().projection(proj),\n    }\n  }, [ width, height, proj ])\n\n  return (<MapContext.Provider value={value} {...restProps} />)\n}\n\nMapProvider.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  offsetX: PropTypes.number,\n  offsetY: PropTypes.number,\n  projection: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.func,\n  ]),\n  projectionConfig: PropTypes.object,\n}\n\nexport { MapProvider, MapContext }\n","\nimport { feature } from \"topojson-client\"\n\nexport function getCoords(w, h, t) {\n  const xOffset = (w * t.k - w) / 2\n  const yOffset = (h * t.k - h) / 2\n  return [w / 2 - (xOffset + t.x) / t.k, h / 2 - (yOffset + t.y) / t.k]\n}\n\nexport function fetchGeographies(url) {\n  return fetch(url)\n    .then(res => {\n      if (!res.ok) {\n        throw Error(res.statusText)\n      }\n      return res.json()\n    }).catch(error => {\n      console.log(\"There was a problem when fetching the data: \", error)\n    })\n}\n\nexport function getFeatures(geographies, parseGeographies) {\n  if (Array.isArray(geographies)) return parseGeographies ? parseGeographies(geographies) : geographies\n  const feats = feature(\n    geographies,\n    geographies.objects[Object.keys(geographies.objects)[0]]\n  ).features\n  return parseGeographies ? parseGeographies(feats) : feats\n}\n\nexport function prepareFeatures(geographies, path) {\n  return geographies ? geographies.map((d, i) => {\n    return {\n      ...d,\n      rsmKey: `geo-${i}`,\n      svgPath: path(d),\n    }\n  }) : []\n}\n\nexport function createConnectorPath(dx = 30, dy = 30, curve = 0.5) {\n  const curvature = Array.isArray(curve) ? curve : [curve, curve]\n  const curveX = dx / 2 * curvature[0]\n  const curveY = dy / 2 * curvature[1]\n  return `M${0},${0} Q${-dx / 2 - curveX},${-dy / 2 + curveY} ${-dx},${-dy}`\n}\n\nexport function isString(geo) { return typeof geo === \"string\" }\n","\nimport { useMemo, useState, useEffect, useContext } from \"react\"\nimport { MapContext } from \"./MapProvider\"\n\nimport { fetchGeographies, getFeatures, prepareFeatures, isString } from \"../utils\"\n\nexport default function useGeographies({ geography, parseGeographies }) {\n  const { path } = useContext(MapContext)\n  const [geographies, setGeographies] = useState()\n\n  useEffect(() => {\n    if (typeof window === `undefined`) return\n\n    if (isString(geography)) {\n      fetchGeographies(geography).then(geos => {\n        if (geos) setGeographies(getFeatures(geos, parseGeographies))\n      })\n    } else {\n      setGeographies(getFeatures(geography, parseGeographies))\n    }\n  }, [geography, parseGeographies])\n\n  const output = useMemo(() => {\n    return prepareFeatures(geographies, path)\n  }, [geographies, path])\n\n  return { geographies: output }\n}\n","\nimport React, { useContext } from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport { MapContext } from \"./MapProvider\"\nimport useGeographies from \"./useGeographies\"\n\nconst Geographies = ({\n  geography,\n  children,\n  parseGeographies,\n  className = \"\",\n  ...restProps\n}) => {\n  const { path, projection } = useContext(MapContext)\n  const { geographies } = useGeographies({ geography, parseGeographies })\n  // console.log(geographies)\n\n  return (\n    <g className={`rsm-geographies ${className}`} {...restProps}>\n      {\n        geographies && geographies.length > 0 &&\n        children({ geographies, path, projection })\n        \n      }\n    </g>\n  )\n}\n\nGeographies.propTypes = {\n  geography: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.object,\n    PropTypes.array,\n  ]),\n  children: PropTypes.func,\n  parseGeographies: PropTypes.func,\n  className: PropTypes.string,\n}\n\nexport default Geographies\n","\nimport React, { useState, memo } from \"react\"\nimport PropTypes from \"prop-types\"\n\nconst Geography = ({\n  geography,\n  onMouseEnter,\n  onMouseLeave,\n  onMouseDown,\n  onMouseUp,\n  onFocus,\n  onBlur,\n  style = {},\n  className = \"\",\n  ...restProps\n}) => {\n  const [isPressed, setPressed] = useState(false)\n  const [isFocused, setFocus] = useState(false)\n\n  function handleMouseEnter(evt) {\n    setFocus(true)\n    if (onMouseEnter) onMouseEnter(evt)\n    // console.log(onMouseEnter)\n  }\n\n  function handleMouseLeave(evt) {\n    setFocus(false)\n    if (isPressed) setPressed(false)\n    if (onMouseLeave) onMouseLeave(evt)\n  }\n\n  function handleFocus(evt) {\n    setFocus(true)\n    if (onFocus) onFocus(evt)\n  }\n\n  function handleBlur(evt) {\n    setFocus(false)\n    if (isPressed) setPressed(false)\n    if (onBlur) onBlur(evt)\n  }\n\n  function handleMouseDown(evt) {\n    setPressed(true)\n    if (onMouseDown) onMouseDown(evt)\n  }\n\n  function handleMouseUp(evt) {\n    setPressed(false)\n    if (onMouseUp) onMouseUp(evt)\n  }\n\n  return (\n    <path\n      tabIndex=\"0\"\n      className={`rsm-geography ${className}`}\n      d={geography.svgPath}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      onFocus={handleFocus}\n      onBlur={handleBlur}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n      style={style[isPressed || isFocused ? (isPressed ? \"pressed\" : \"hover\") : \"default\"]}\n      {...restProps}\n    />\n  )\n}\n\nGeography.propTypes = {\n  geography: PropTypes.object,\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  onMouseDown: PropTypes.func,\n  onMouseUp: PropTypes.func,\n  onFocus: PropTypes.func,\n  onBlur: PropTypes.func,\n  style: PropTypes.object,\n  className: PropTypes.string,\n}\n\nexport default memo(Geography)\n","\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport { MapProvider } from \"./MapProvider\"\n\nconst ComposableMap = ({\n  width = 800,\n  height = 600,\n  offsetX = 0,\n  offsetY = 0,\n  projection = \"geoEqualEarth\",\n  projectionConfig = {},\n  className = \"\",\n  ...restProps\n}) => {\n  return (\n    <MapProvider\n      width={width}\n      height={height}\n      offsetX={offsetX}\n      offsetY={offsetY}\n      projection={projection}\n      projectionConfig={projectionConfig}\n    >\n      <svg\n        width={width}\n        height={height}\n        className={`rsm-svg ${className}`}\n        {...restProps}\n      />\n    </MapProvider>\n  )\n}\n\nComposableMap.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  projection: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.func,\n  ]),\n  projectionConfig: PropTypes.object,\n  className: PropTypes.string,\n}\n\nexport default ComposableMap\n","import React from 'react'\nimport { Grid, List, Divider, Image } from 'semantic-ui-react'\n\nexport default function Notes(props){\n\n  return (\n    <div style={{paddingTop: '2em', fontWeight: 300}}>\n    {/* <Divider/>\n    <Grid>\n      <Grid.Row>\n        <Grid.Column style={{fontSize: '1em', lineHeight: '1.5em'}}>\n          Early data about COVID-19 suggests that communities are affected very differently due to social determinants of health like population density, poverty, residential segregation, underlying chronic health conditions, and availability of medical services. \n          In order to predict how the epidemic will continue to unfold and prepare for the future, it is critical to understand differences in underlying risk factors. \n          There is no one-size-fits all approach to combat the epidemic, but accurate and meaningful data is a key component of a robust public health response that is informed by contextual factors and prioritizes health equity.\n          <br/><br/>\n          The COVID-19 Health Equity Dashboard seeks to fill the gaps in county-level data about the virus and underlying social determinants of health. \n          Our goal is for this Dashboard to facilitate easy comparisons of counties with respect to COVID-19 outcomes and social determinants. \n          We hope this becomes a valuable resource for and critical component of tailored public health responses to COVID-19 across the wide range of environments that Americans inhabit.\n        </Grid.Column>\n      </Grid.Row>\n      <Divider hidden/>\n      <Grid.Row columns={2}>\n        <Grid.Column>          \n          <Image size='small' src='/logo.png' />\n          &copy; 2020 Emory University. All rights reserved.\n        </Grid.Column>\n        <Grid.Column>          \n          <small>\n            This dashboard is created using\n            <List as='ol'>\n              <List.Item as='li' value='-'><a href=\"https://www.react-simple-maps.io/\">React Simple Maps</a> by <a href=\"https://www.zcreativelabs.com/\">z creative labs</a></List.Item>\n              <List.Item as='li' value='-'><a href=\"https://formidable.com/open-source/victory/\">Victory</a> by <a href=\"https://formidable.com/\">Formidable</a></List.Item>\n              <List.Item as='li' value='-'><a href=\"https://github.com/Semantic-Org/Semantic-UI-React\">Semantic UI React</a> by <a href=\"https://github.com/levithomason\">@levithomason</a>and an amazing community of <a href=\"https://github.com/Semantic-Org/Semantic-UI-React/graphs/contributors\">contributors</a></List.Item> \n              <List.Item as='li' value='-'><a href=\"https://github.com/facebook/create-react-app\">Create React App</a> by <a href=\"https://about.fb.com/company-info/\">Facebook</a></List.Item> \n            </List>\n          </small>\n        </Grid.Column>\n      </Grid.Row>\n    </Grid> */}\n    </div>);\n}\n","import React, { useEffect, Component, useState, createRef, useRef } from 'react'\nimport { Container, Grid, Breadcrumb, Dropdown, Header, Loader, Divider, Rail, Sticky, Popup, Button, Menu } from 'semantic-ui-react'\nimport AppBar from './AppBar';\nimport Geographies from './Geographies';\nimport Geography from './Geography';\nimport ComposableMap from './ComposableMap';\nimport {\n    VictoryChart,\n    VictoryTooltip,\n    VictoryVoronoiContainer,\n    VictoryContainer,\n    VictoryGroup,\n    VictoryBar,\n    VictoryTheme,\n    VictoryAxis,\n    VictoryLegend,\n    VictoryLine,\n    VictoryLabel,\n    VictoryScatter,\n    VictoryPie\n} from 'victory';\nimport Slider from \"@material-ui/core/Slider\";\nimport LazyHero from 'react-lazy-hero';\nimport { Waypoint } from 'react-waypoint'\n// import Background from '/CoronaVirus_LightBlue.jpg';\n\nimport { useParams, useHistory } from 'react-router-dom';\nimport Notes from './Notes';\nimport ReactTooltip from \"react-tooltip\";\nimport _ from 'lodash';\nimport { scaleQuantile, scaleQuantize } from \"d3-scale\";\nimport { quantile, ascending } from 'd3';\nimport fips2county from './fips2county.json'\n// import configscounty from \"./county_config.json\";\n\nimport configs from \"./state_config.json\";\n\nconst casesColor = [\n    \"#72ABB1\",\n    \"#337fb5\"\n];\nconst mortalityColor = [\n    \"#0270A1\",\n    \"#024174\"\n];\nconst colorPalette = [\n    \"#e1dce2\",\n    \"#d3b6cd\",\n    \"#bf88b5\",\n    \"#af5194\",\n    \"#99528c\",\n    \"#633c70\",\n];\nconst colorPalette1 = [\n    \"#67335E\",\n    \"#6B2A4D\",\n    \"#70213B\",\n    \"#74182A\",\n    '#7d0707'\n];\nconst colorPalette2 = [\n    \"#e1dce2\",\n    \"#d3b6cd\",\n    \"#bf88b5\",\n    \"#af5194\",\n    \"#99528c\",\n\n];\n\nconst colorOut = '#c6007e';\nconst contextRef = createRef()\nconst nameList = ['summary', 're', 'cvi', 'si', 'urbanrural', 'poverty', 'black', 'hispanic', 'diabetes', 'age', 'male'];\nvar scrollCount = 0;\n\nconst countyColor = '#f2a900';\nconst stateColor = '#bdbfc1';\nconst nationColor = '#d9d9d7';\nconst colorHighlight = '#f2a900';\nconst marks = [\n    {\n        value: 0,\n        label: 'Mar 1',\n    },\n    {\n        value: 10,\n        label: 'April 1',\n    },\n    {\n        value: 20,\n        label: 'May 1',\n    },\n    {\n        value: 30,\n        label: 'June 1',\n    },\n];\n\nconst sectionStyle1 = {\n    width: \"100%\",\n    height: \"100%\",\n    backgroundColor: '#f0fafe'\n};\nconst sectionStyle2 = {\n    width: \"100%\",\n    height: \"100%\",\n    backgroundSize: 'cover',\n    backgroundImage: `url(\"/CoronaVirus_LightBlue.jpg\")`\n};\n\nfunction valuetext(value) {\n    return `${value}°C`;\n}\n\nfunction numberWithCommas(x) {\n    x = x.toString();\n    var pattern = /(-?\\d+)(\\d{3})/;\n    while (pattern.test(x))\n        x = x.replace(pattern, \"$1,$2\");\n    return x;\n}\n\nfunction StickyExampleAdjacentContext(props) {\n    const [sTate, setsTate] = useState({ activeItem: 'Interactive Map' })\n    const { activeItem } = sTate\n    useEffect(() => {\n        setsTate(nameList[scrollCount])\n        console.log('name changed!!!!!!!!')\n    }, [scrollCount])\n    // console.log(props.activeCharacter)\n    return (\n\n        <div >\n            <Rail attached size='mini' position='left'>\n                <Sticky offset={150}>\n                    <Menu\n                        size='small'\n                        compact\n                        pointing secondary vertical>\n                        <Menu.Item as='a' href=\"#summary\" name='Interactive Map' active={props.activeCharacter == 'Interactive Map' || activeItem === 'Interactive Map'}\n                            onClick={(e, { name }) => { setsTate({ activeItem: name }) }}><Header as='h4'>Georgia Interactive Map</Header></Menu.Item>\n                        <Menu.Item as='a' href=\"#age_g\" name='COVID-19 Demographics' active={props.activeCharacter === 'COVID-19 Demographics' || activeItem === 'COVID-19 Demographics'}\n                            onClick={(e, { name }) => { setsTate({ activeItem: name }) }}><Header as='h4'>COVID-19 Demographics</Header></Menu.Item>\n\n                        \n                        <Menu.Item as='a' style={{ paddingLeft: '3em' }} href=\"#age_g\" name='COVID-19 by Age' active={props.activeCharacter === 'COVID-19 by Age' || activeItem === 'COVID-19 by Age'}\n                            onClick={(e, { name }) => { setsTate({ activeItem: name }) }}>Age</Menu.Item>\n                        <Menu.Item as='a' style={{ paddingLeft: '3em' }} href=\"#sex_g\" name='COVID-19 by Sex' active={props.activeCharacter === 'COVID-19 by Sex' || activeItem === 'COVID-19 by Sex'}\n                            onClick={(e, { name }) => { setsTate({ activeItem: name }) }}>Sex</Menu.Item>\n                        <Menu.Item style={{ paddingLeft: '3em' }} as='a' href=\"#re\" name='COVID-19 by Race/Ethnicity' active={props.activeCharacter === 'COVID-19 by Race/Ethnicity' || activeItem === 'COVID-19 by Race/Ethnicity'}\n                            onClick={(e, { name }) => { setsTate({ activeItem: name }) }}>Race and Ethnicity</Menu.Item>\n\n                        \n                        <Menu.Item as='a' href=\"#chara\" name='COVID-19 by County Characteristics' active={props.activeCharacter === 'COVID-19 by County Characteristics' || activeItem === 'COVID-19 by County Characteristics'}\n                            onClick={(e, { name }) => { setsTate({ activeItem: name }) }}><Header as='h4'>COVID-19 County Disparities</Header></Menu.Item>\n\n                        <Menu.Item as='a' style={{ paddingLeft: '3em' }} href=\"#cvi\" name='Community Vulnerability Index' active={props.activeCharacter === 'Community Vulnerability Index' || activeItem === 'Community Vulnerability Index'}\n                            onClick={(e, { name }) => { setsTate({ activeItem: name }) }} >Community COVID-19 Vulnerability Index</Menu.Item>\n                        <Menu.Item as='a' style={{ paddingLeft: '3em' }} href=\"#si\" name='Residential Segregation Index' active={props.activeCharacter === 'Residential Segregation Index' || activeItem === 'Residential Segregation Index'}\n                            onClick={(e, { name }) => { setsTate({ activeItem: name }) }}>County Racial Segregation Index</Menu.Item>\n                        <Menu.Item as='a' style={{ paddingLeft: '3em' }} href=\"#urbanrural\" name='County Metropolitan Status' active={props.activeCharacter === 'Characteristics - Metropolitan Status' || activeItem === 'Characteristics - Metropolitan Status'}\n                            onClick={(e, { name }) => { setsTate({ activeItem: name }) }} />\n                        <Menu.Item as='a' style={{ paddingLeft: '3em' }} href=\"#poverty\" name='County Poverty' active={props.activeCharacter === 'Characteristics - Poverty' || activeItem === 'Characteristics - Poverty'}\n                            onClick={(e, { name }) => { setsTate({ activeItem: name }) }} />\n                        <Menu.Item as='a' style={{ paddingLeft: '3em' }} href=\"#black\" name='County African American' active={props.activeCharacter === 'Characteristics - African American' || activeItem === 'Characteristics - African American'}\n                            onClick={(e, { name }) => { setsTate({ activeItem: name }) }} />\n                        <Menu.Item as='a' style={{ paddingLeft: '3em' }} href=\"#hispanic\" name='County Hispanic' active={props.activeCharacter === 'Characteristics - Hispanic' || activeItem === 'Characteristics - Hispanic'}\n                            onClick={(e, { name }) => { setsTate({ activeItem: name }) }} />\n                        <Menu.Item as='a' style={{ paddingLeft: '3em' }} href=\"#diabetes\" name='County Diabetes' active={props.activeCharacter === 'Characteristics - Diabetes' || activeItem === 'Characteristics - Diabetes'}\n                            onClick={(e, { name }) => { setsTate({ activeItem: name }) }} />\n                        <Menu.Item as='a' style={{ paddingLeft: '3em' }} href=\"#age\" name='County Age over 65' active={props.activeCharacter === 'Characteristics - Age over 65' || activeItem === 'Characteristics - Age over 65'}\n                            onClick={(e, { name }) => { setsTate({ activeItem: name }) }} />\n                        <Menu.Item as='a' style={{ paddingLeft: '3em' }} href=\"#male\" name='County Male Percentage' active={props.activeCharacter === 'Characteristics - Male Percentage' || activeItem === 'Characteristics - Male Percentage'}\n                            onClick={(e, { name }) => { setsTate({ activeItem: name }) }} />\n                    </Menu>\n                </Sticky>\n            </Rail>\n        </div>\n    )\n\n}\n\nfunction SvgMap(props) {\n    // var lengthSplit1 = props.lengthSplit1;\n    if (props.name === 'casescum') {\n        return (\n            <svg width=\"500\" height=\"55\">\n                {_.map(colorPalette, (color, i) => {\n                    return <rect key={i} x={50 + 25 * i} y={20} width=\"25\" height=\"20\" style={{ fill: color, strokeWidth: 1, stroke: color }} />\n                })}\n                {_.map(colorPalette1, (color, i) => {\n                    return <rect key={i} x={200 + 25 * i} y={20} width=\"25\" height=\"20\" style={{ fill: color, strokeWidth: 1, stroke: color }} />\n                })}\n\n                {/* <rect x={180} y={20} width=\"25\" height=\"20\" style={{ fill: colorOut, strokeWidth: 1, stroke: colorOut }} /> */}\n                <text x={50} y={52} style={{ fontSize: '0.8em' }}>Low</text>\n                <text x={300} y={52} style={{ fontSize: '0.8em' }}>High</text>\n                {_.map(props.legendSplit, (splitpoint, i) => {\n                    if (props.legendSplit[i] < 1) {\n                        return <text key={i} x={57 + 25 * (i)} y={15} style={{ fontSize: '0.7em' }}> {props.legendSplit[i].toFixed(1)}</text>\n                    }\n                    if (props.legendSplit[i] >= 1000) {\n                        return <text key={i} x={70 + 25 * (i)} y={15} style={{ fontSize: '0.7em' }}> {(props.legendSplit[i] / 1000).toFixed(1) + \"K\"}</text>\n                    }\n                    return <text key={i} x={70 + 25 * (i)} y={15} style={{ fontSize: '0.7em' }}> {props.legendSplit[i].toFixed(0)}</text>\n                })}\n\n                {_.map(props.legendSplit1, (splitpoint, i) => {\n                    if (props.legendSplit1[i] >= 1000) {\n                        return <text key={i} x={220 + 25 * (i)} y={15} style={{ fontSize: '0.7em' }}> {(props.legendSplit1[i] / 1000).toFixed(1) + \"K\"}</text>\n                    }\n                    return <text key={i} x={220 + 25 * (i)} y={15} style={{ fontSize: '0.7em' }}> {props.legendSplit1[i].toFixed(0)}</text>\n                })}\n                <text x={325} y={15} style={{ fontSize: '0.7em' }}>{props.legendMax}</text>\n                <text x={50} y={15} style={{ fontSize: '0.7em' }}> {(props.legendMin / 100).toFixed(0)} </text>\n                <rect x={5} y={20} width=\"25\" height=\"20\" style={{ fill: \"#FFFFFF\", strokeWidth: 0.5, stroke: \"#000000\" }} />\n                <text x={8} y={52} style={{ fontSize: '0.7em' }}> N/A </text>\n            </svg>\n\n        )\n    }\n    else {\n        return (\n            <svg width=\"500\" height=\"55\">\n                {_.map(colorPalette, (color, i) => {\n                    return <rect key={i} x={55 + 25 * i} y={20} width=\"25\" height=\"20\" style={{ fill: color, strokeWidth: 1, stroke: color }} />\n                })}\n\n                <rect x={230} y={20} width=\"25\" height=\"20\" style={{ fill: colorOut, strokeWidth: 1, stroke: colorOut }} />\n                <text x={55} y={52} style={{ fontSize: '0.8em' }}>Low</text>\n                <text x={230} y={52} style={{ fontSize: '0.8em' }}>High</text>\n                {_.map(props.legendSplit, (splitpoint, i) => {\n                    if (props.legendSplit[i] < 1) {\n                        return <text key={i} x={62 + 25 * (i)} y={15} style={{ fontSize: '0.7em' }}> {props.legendSplit[i].toFixed(1)}</text>\n                    }\n                    if (props.legendSplit[i] >= 1000) {\n                        return <text key={i} x={72 + 25 * (i)} y={15} style={{ fontSize: '0.7em' }}> {(props.legendSplit[i] / 1000).toFixed(1) + \"K\"}</text>\n                    }\n                    return <text key={i} x={72 + 25 * (i)} y={15} style={{ fontSize: '0.7em' }}> {props.legendSplit[i].toFixed(0)}</text>\n                })}\n                {props.legendMin < 100 ? <text x={55} y={15} style={{ fontSize: '0.7em' }}> {(props.legendMin / 1).toFixed(0)} </text> :\n                    <text x={47} y={15} style={{ fontSize: '0.7em' }}> {(props.legendMin / 1).toFixed(0)} </text>\n                }\n\n\n\n                <text x={224} y={15} style={{ fontSize: '0.7em' }}>{props.legendSplit[colorPalette.length - 1] < 1 ? props.legendSplit[colorPalette.length - 1].toFixed(1)\n                    : props.legendSplit[colorPalette.length - 1] > 1000 ?\n                        (props.legendSplit[colorPalette.length - 1] / 1000).toFixed(1) + \"K\" : props.legendSplit[colorPalette.length - 1].toFixed(0)\n                }</text>\n                <text x={251} y={15} style={{ fontSize: '0.7em' }}>{props.legendMax}</text>\n                <rect x={5} y={20} width=\"25\" height=\"20\" style={{ fill: \"#FFFFFF\", strokeWidth: 0.5, stroke: \"#000000\" }} />\n                <text x={8} y={52} style={{ fontSize: '0.7em' }}> N/A </text>\n\n                {/* <text x={250} y={42} style={{fontSize: '0.8em'}}> Click on a county below </text>\n          <text x={250} y={52} style={{fontSize: '0.8em'}}> for a detailed report. </text> */}\n            </svg>\n\n        )\n    }\n}\n\n\nfunction ChartGraph(props) {\n    var varGraphPair = props.name;\n    var dataTS;\n    var metric = props.metric;\n    var stateFips = props.stateFips;\n    var countyFips = props.countyFips;\n    var countyname = props.countyname;\n\n    if (props.metric === \"casescum14dayR\") {\n        dataTS = props.data1;\n\n        return (\n            <VictoryChart theme={VictoryTheme.material}\n                containerComponent={\n                    <VictoryVoronoiContainer\n                        responsive={false}\n                        flyoutStyle={{ fill: \"white\" }}\n                    />\n                }\n                width={730}\n                height={500}\n                padding={{ left: 55, right: 70, top: 10, bottom: 50 }}>\n                <VictoryAxis\n                    style={{\n                        tickLabels: { fontSize: 25, padding: 5 }\n                    }}\n                    tickFormat={(t) => new Date(t * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric' })}\n\n                    tickValues={[\n                        dataTS[dataTS.length - Math.round(dataTS.length / 4) * 3 - 1].t,\n                        dataTS[dataTS.length - Math.round(dataTS.length / 4) * 2 - 1].t,\n                        dataTS[dataTS.length - Math.round(dataTS.length / 4) - 1].t,\n                        dataTS[dataTS.length - 1].t]}\n\n                />\n                <VictoryAxis dependentAxis tickCount={5}\n                    style={{\n                        tickLabels: { fontSize: 25, padding: 5 }\n                    }}\n                    tickFormat={(y) => (y < 1000 ? (Math.round(y, 2) === 0.00 ? \" \" : y) : (y / 1000 + 'k'))}\n                />\n                <VictoryBar style={{ data: { fill: stateColor } }} barWidth={8} alignment=\"start\" data={dataTS ? dataTS : props.data2[\"99999\"]}\n                    x='t' y={varGraphPair[metric]['name'][0]}\n\n                />\n                <VictoryLine name=\"Line1\" style={{ data: { stroke: countyColor, strokeWidth: ({ active }) => active ? 7 : 5 } }} data={dataTS ? dataTS : props.data2[\"99999\"]}\n                    x='t' y={varGraphPair[metric]['name'][1]}\n                    labels={({ datum }) => `${countyname}\\n` +\n                        `Date: ${new Date(datum.t * 1000).toLocaleDateString()}\\n` +\n                        `${varGraphPair[metric]['legend'][1]}: ${Math.round(datum[varGraphPair[metric]['name'][1]], 2)}\\n` +\n                        `${varGraphPair[metric]['legend'][0]}: ${Math.round(datum[varGraphPair[metric]['name'][0]], 2)}`\n                    }\n                    labelComponent={\n                        <VictoryTooltip\n                            orientation=\"top\"\n                            style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'white' }}\n                            constrainToVisibleArea\n                            labelComponent={<VictoryLabel dx={-100} textAnchor='start' />}\n                            flyoutStyle={{ fill: \"black\", fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\n                        />\n                    }\n                />\n                {varGraphPair[metric]['name'][1] === 'casesdailymean7' || varGraphPair[metric]['name'][1] === 'deathsdailymean7' ?\n                    <VictoryAxis dependentAxis tickCount={5}\n                        style={{\n                            tickLabels: { fontSize: 25, padding: 5 }\n                        }}\n                        tickFormat={(y) => (y < 1000 ? (Math.round(y, 2) === 0.00 ? \" \" : y) : (y / 1000 + 'k'))}\n                    /> :\n                    <VictoryLine name=\"Line11\" style={{ data: { stroke: '#007dba', strokeWidth: ({ active }) => active ? 5 : 3 } }} data={_.takeRight(props.data2[stateFips], 14) ? _.takeRight(props.data2[stateFips], 14) : props.data2[\"99999\"]}\n                        x='t' y={varGraphPair[metric]['name'][1]}\n                        labels={({ datum }) => [`Georgia\\n`,\n                            `Date: ${new Date(datum.t * 1000).toLocaleDateString()}\\n`,\n                            `${varGraphPair[metric]['legend'][1]}: ${Math.round(datum[varGraphPair[metric]['name'][1]], 2)}\\n`,\n                            `${varGraphPair[metric]['legend'][0]}: ${Math.round(datum[varGraphPair[metric]['name'][0]], 2)}`\n                        ]}\n                        labelComponent={\n                            <VictoryTooltip\n                                orientation=\"top\"\n                                style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'white' }}\n                                constrainToVisibleArea\n                                labelComponent={<VictoryLabel dx={-100} textAnchor='start' />}\n                                flyoutStyle={{ fill: \"black\", fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\n                            />\n                        }\n                    />}\n            </VictoryChart>)\n    }\n    else {\n        dataTS = props.data2;\n        return (\n            <VictoryChart theme={VictoryTheme.material}\n                containerComponent={\n                    <VictoryVoronoiContainer\n\n                        responsive={false}\n                        flyoutStyle={{ fill: \"black\" }}\n                    />\n                }\n                width={730}\n                height={500}\n                padding={{ left: 55, right: 70, top: 10, bottom: 50 }}>\n                <VictoryAxis\n                    style={{\n                        tickLabels: { fontSize: 25, padding: 5 }\n                    }}\n                    tickFormat={(t) => new Date(t * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric' })}\n                    tickValues={[\n                        // 1583035200, 1585713600, 1588305600, 1590984000, 1593576000\n                        dataTS['13001'][0].t,\n                        dataTS[\"13001\"][32].t,\n                        dataTS[\"13001\"][62].t,\n                        dataTS[\"13001\"][93].t,\n                        dataTS[\"13001\"][123].t,\n                        dataTS[\"13001\"][154].t,\n                        dataTS[\"13001\"][dataTS[\"13001\"].length - 1].t\n                    ]}\n\n\n                />\n                <VictoryAxis dependentAxis tickCount={6}\n                    style={{\n                        tickLabels: { fontSize: 25, padding: 5 }\n                    }}\n                    tickFormat={(y) => (y < 1000 ? (Math.round(y, 2) === 0.00 ? \" \" : y) : (y / 1000 + 'k'))}\n                />\n                <VictoryBar style={{ data: { fill: stateColor } }} barWidth={4} data={dataTS[stateFips + countyFips] ? dataTS[stateFips + countyFips] : dataTS[\"99999\"]}\n                    x='t' y={varGraphPair[metric]['name'][0]}\n\n                />\n                <VictoryLine name=\"Line1\" style={{ data: { stroke: countyColor, strokeWidth: ({ active }) => active ? 7 : 5 } }} data={dataTS[stateFips + countyFips] ? dataTS[stateFips + countyFips] : dataTS[\"99999\"]}\n                    x='t' y={varGraphPair[metric]['name'][1]}\n                    labels={({ datum }) => `${countyname}\\n` +\n                        `Date: ${new Date(datum.t * 1000).toLocaleDateString()}\\n` +\n                        `${varGraphPair[metric]['legend'][1]}: ${Math.round(datum[varGraphPair[metric]['name'][1]], 2)}\\n` +\n                        `${varGraphPair[metric]['legend'][0]}: ${Math.round(datum[varGraphPair[metric]['name'][0]], 2)}`\n                    }\n                    labelComponent={\n                        <VictoryTooltip\n                            orientation=\"top\"\n                            style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'white' }}\n                            constrainToVisibleArea\n                            labelComponent={<VictoryLabel dx={-75} textAnchor='start' />}\n                            flyoutStyle={{ fill: \"black\", fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\n                        />\n                    }\n                />\n                {varGraphPair[metric]['name'][1] === 'casesdailymean7' || varGraphPair[metric]['name'][1] === 'deathsdailymean7' ?\n                    <VictoryAxis dependentAxis tickCount={5}\n                        style={{\n                            tickLabels: { fontSize: 25, padding: 5 }\n                        }}\n                        tickFormat={(y) => (y < 1000 ? (Math.round(y, 2) === 0.00 ? \" \" : y) : (y / 1000 + 'k'))}\n                    /> :\n                    <VictoryLine name=\"Line11\" style={{ data: { stroke: '#007dba', strokeWidth: ({ active }) => active ? 5 : 3 } }} data={dataTS[stateFips] ? dataTS[stateFips] : dataTS[\"99999\"]}\n                        x='t' y={varGraphPair[metric]['name'][1]}\n                        labels={({ datum }) => [`Georgia\\n`,\n                            `Date: ${new Date(datum.t * 1000).toLocaleDateString()}    \\n`,\n                            `${varGraphPair[metric]['legend'][1]}: ${Math.round(datum[varGraphPair[metric]['name'][1]], 2)}\\n`,\n                            `${varGraphPair[metric]['legend'][0]}: ${Math.round(datum[varGraphPair[metric]['name'][0]], 2)}`\n                        ]}\n                        labelComponent={\n                            <VictoryTooltip\n                                // orientation=\"top\"\n                                style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'white' }}\n                                constrainToVisibleArea\n                                // flyoutComponent={<CustomFlyout/>}\n                                labelComponent={<VictoryLabel dx={-80} textAnchor='start' />}\n                                flyoutStyle={{ fill: \"black\", fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\n                            />\n                        }\n                    />}\n            </VictoryChart>)\n    }\n}\n\n\n\nexport default function StateMap(props) {\n\n    // let { stateFips } = useParams();\n    const hig = '80';\n    const stateFips = '13';\n    const [config, setConfig] = useState();\n    const [stateName, setStateName] = useState('');\n\n    const [countyFips, setCountyFips] = useState('121');\n    const [countyFipscvi, setCountyFipscvi] = useState('121');\n    const [countyFipssi, setCountyFipssi] = useState('121');\n    const [countyFipsubr, setCountyFipsubr] = useState('');\n    const [countyFipsblack, setCountyFipsblack] = useState('');\n    const [countyFipshis, setCountyFipshis] = useState('');\n    const [countyFipspov, setCountyFipspov] = useState('');\n    const [countyFipsdia, setCountyFipsdia] = useState('');\n    const [countyFipsa65, setCountyFipsa65] = useState('');\n    const [countyFipsmale, setCountyFipsmale] = useState('21');\n    const [countyName, setCountyName] = useState('Fulton County');\n    const [countyNamecvi, setCountyNamecvi] = useState('Fulton County');\n    const [countyNamesi, setCountyNamesi] = useState('Fulton County');\n    const [countyNameubr, setCountyNameubr] = useState('Fulton County');\n    const [countyNameblack, setCountyNameblack] = useState('Fulton County');\n    const [countyNamehis, setCountyNamehis] = useState('Fulton County');\n    const [countyNamepov, setCountyNamepov] = useState('Fulton County');\n    const [countyNamedia, setCountyNamedia] = useState('Fulton County');\n    const [countyNamea65, setCountyNamea65] = useState('Fulton County');\n    const [countyNamemale, setCountyNamemale] = useState('Fulton County');\n\n    const history = useHistory();\n    const [fips, setFips] = useState('13');\n    const [activeCharacter, setActiveCharacter] = useState('')\n    const activeClass = 'character-block--active';\n    const characterRef = createRef();\n    // const [dataFltrd, setDataFltrd] = useState();\n    // const [dataFltrdUs, setDataFltrdUs] = useState();\n\n    // const [dataStateFltrd, setDataStateFltrd] = useState();\n    // const [dataState, setDataState] = useState();\n\n    const [data, setData] = useState();\n    const [dataUs, setDataUs] = useState();\n    const [data_index, setIndexData] = useState();\n    const [dataCha, setDataCha] = useState();\n\n    const [dateCur, setDateCur] = useState();\n    const [colorCVI, setColorCVI] = useState();\n    const [colorSI, setColorSI] = useState();\n    const [colorUbr, setColorUbr] = useState();\n    const [colorBlack, setColorBlack] = useState();\n    const [colorHis, setColorHis] = useState();\n    const [colorPov, setColorPov] = useState();\n    const [colorDia, setColorDia] = useState();\n    const [colorA65, setColorA65] = useState();\n    const [colorMale, setColorMale] = useState();\n    // const [stateLabels, setStateLabels] = useState();\n    const [covidMetric, setCovidMetric] = useState({ casesdaily: 'N/A', casesdailymean14: 'N/A', t: 'n/a' });\n    const [covidMetric14, setCovidMetric14] = useState({ casesdaily: 'N/A', casesdailymean14: 'N/A', t: 'n/a' });\n    const colors = {\n        \"3\": '#024174',\n        '2': \"#99bbcf\",\n        '1': '#337fb5'\n    };\n    const [dataTS, setDataTS] = useState();\n    const [tooltipContent, setTooltipContent] = useState('');\n    const [tooltipContentcvi, setTooltipContentcvi] = useState('');\n    const [tooltipContentsi, setTooltipContentsi] = useState('');\n    const [tooltipContentubr, setTooltipContentubr] = useState('');\n    const [tooltipContentblack, setTooltipContentblack] = useState('');\n    const [tooltipContenthis, setTooltipContenthis] = useState('');\n    const [tooltipContentpov, setTooltipContentpov] = useState('');\n    const [tooltipContentdia, setTooltipContentdia] = useState('');\n    const [tooltipContenta65, setTooltipContenta65] = useState('');\n    const [tooltipContentmale, setTooltipContentmale] = useState('');\n\n    const [colorScale, setColorScale] = useState();\n    const [data_cases, setDataCG] = useState();\n    const [data_deaths, setDataDG] = useState();\n    const [datades_cases, setDatadesCG] = useState();\n    const [datades_deaths, setDatadesDG] = useState();\n\n    const [legendMax, setLegendMax] = useState([]);\n    const [legendMax1, setLegendMax1] = useState([]);\n    const [legendMin, setLegendMin] = useState([]);\n    const [legendMax_graph, setLegendMaxGraph] = useState({});\n    const [legendSplit, setLegendSplit] = useState([]);\n    const [legendSplit1, setLegendSplit1] = useState([]);\n\n    const [metric, setMetric] = useState('casescumR');\n    const [metric_graph, setMetricGraph] = useState(['casesdaily', 'casesdailymean14']);\n\n    const metricOptions1 = [{ key: 'cacum', value: 'casescum', text: 'Total COVID-19 cases' },\n    { key: 'decum', value: 'deathscum', text: 'Total COVID-19 deaths' },\n    { key: 'cacumr', value: 'casescumR', text: 'COVID-19 cases per 100,000 population' },\n    { key: 'decumr', value: 'deathscumR', text: 'COVID-19 deaths per 100,000 population' },\n    { key: 'cacum14R', value: 'casescum14dayR', text: 'Last 14 days cases per 100,000 population' }];\n\n    const metricOptions2 = [{ key: 'cs', value: 'cs', text: 'Confirmed cases per 100,000 population' },\n    { key: 'hp', value: 'hp', text: 'Hospitalizations per 100,000 population' },\n    { key: 'ds', value: 'ds', text: 'Deaths per 100,000 population' }];\n    const dropdownopt = {\n        'casescum': 'Total COVID-19 cases', 'deathscum': 'Total COVID-19 deaths',\n        'casescumR': 'COVID-19 cases per 100,000 population', 'deathscumR': 'COVID-19 deaths per 100,000 population'\n    };\n\n    const varGraphPair = {\n        \"casescum\": { \"name\": ['casesdaily', 'casesdailymean7'], \"legend\": ['Daily cases', '7-d rolling average '] },\n        \"deathscum\": { \"name\": ['deathsdaily', 'deathsdailymean7'], \"legend\": ['Daily deaths', '7-d rolling average '] },\n        \"casescumR\": { \"name\": ['casesdailyR', 'casesdailymean7R'], \"legend\": ['Daily cases per 100,000', '7-d rolling average'] },\n        \"deathscumR\": { \"name\": ['deathsdailyR', 'deathsdailymean7R'], \"legend\": ['Daily deaths per 100,000', '7-d rolling average'] },\n        \"casescum14dayR\": { \"name\": ['casesdailyR', 'casesdailymean7R'], \"legend\": ['Last 14 days cases per 100,000', '7-d rolling average'] }\n    };\n    const [metricName, setMetricName] = useState('COVID-19 cases per 100,000 population');\n    const varNameMap = {\n        \"casescum\": { \"name\": 'cases', \"text\": \"The map shows the total number of confirmed COVID-19 cases in each county as of \", \"cat\": 'case' },\n        \"casescum14dayR\": { \"name\": 'cases per 100,000 residents', \"text\": \"The map shows the number of confirmed COVID-19 cases for past two weeks in each county as of \", \"cat\": 'case' },\n        \"deathscum\": { \"name\": 'deaths', \"text\": \"The map shows the total number of confirmed COVID-19 deaths in each county as of \", \"cat\": 'death' },\n        \"casescumR\": { \"name\": 'cases per 100,000 residents', \"text\": \"The map shows the total number of confirmed COVID-19 cases per 100,000 residents in each county as of \", \"cat\": 'case' },\n        \"deathscumR\": { \"name\": 'deaths per 100,000 residents', \"text\": \"The map shows the total number of confirmed COVID-19 deaths per 100,000 residents in each county as of \", \"cat\": 'death' }\n    };\n    const varMap = { \"cacum\": metricOptions2[0], \"decum\": metricOptions2[1], \"cacumr\": metricOptions2[2], \"decumr\": metricOptions1[1] };\n    const [delayHandler, setDelayHandler] = useState(null)\n    // contextRef = createRef()\n\n    // useEffect(() => {\n    //     console.log(characterRef)\n    //     const handleIntersection = function(entries) {\n    //       entries.forEach((entry) => {\n    //         if (entry.target.id !== activeCharacter && entry.isIntersecting) {\n    //           setActiveCharacter(entry.target.id);\n    //         }\n    //       });\n    //     };\n    //     const observer = new IntersectionObserver(handleIntersection);\n    //     observer.observe(characterRef.current);\n    //     return () => observer.disconnect(); // Clenaup the observer if component unmount.\n    //   }, [activeCharacter, setActiveCharacter, characterRef]);\n\n\n    useEffect(() => {\n\n        const configMatched = configs.find(s => s.fips === stateFips);\n        // console.log(configMatched.fips);\n        if (!configMatched) {\n            history.push('/');\n        } else {\n\n            setConfig(configMatched);\n            // console.log(countyFips);\n            setStateName(configMatched.name);\n            fetch('/data/data_cases_ga.json').then(res => res.json())\n                .then(x => setDataCG(x)\n                );\n            fetch('/data/data_deaths_ga.json').then(res => res.json())\n                .then(x => setDataDG(x));\n            fetch('/data/data_describe_cases.json').then(res => res.json())\n                .then(x => setDatadesCG(x));\n            fetch('/data/data_describe_deaths.json').then(res => res.json())\n                .then(x => setDatadesDG(x));\n            fetch('/data/data.json').then(res => res.json())\n                .then(x => {\n                    setData(x);\n                    setDataUs(x);\n                    if (metric === 'casescum') {\n\n                        _.map(x, (d, k) => {\n                            d.fips = k\n                            return d\n                        });\n                        var temp_Data_metric = [];\n                        // retrieve metric data as list\n                        _.each(x, d => {\n                            if (d.fips.length === 5 && d.fips[0] === '1' && d.fips[1] === '3') {\n                                temp_Data_metric.push(d[metric]);\n                            }\n                        });\n\n                        temp_Data_metric.sort(function (a, b) {\n                            return a - b;\n                        });\n                        var countIqr = 3 * quantile(temp_Data_metric, 0.75) - 2 * quantile(temp_Data_metric, 0.25);\n                        // console.log(temp_Data_metric);\n                        //   var top10 = _.takeRight(temp_Data_metric,10)[0];\n\n                        //   var belowIqr = _.map(_.filter(temp_Data_metric,\n                        //     d => (d<top10\n                        //       )),\n                        //     d => d);\n                        // console.log(belowTop)\n                        var belowIqr = _.map(_.filter(temp_Data_metric,\n                            d => (d < countIqr\n                            )),\n                            d => d);\n\n                        var upIqr = _.map(_.filter(temp_Data_metric,\n                            d => (d >= countIqr\n                            )),\n                            d => d);\n\n                        var split = scaleQuantile()\n                            .domain(belowIqr).range(colorPalette);\n                        var split1 = scaleQuantile()\n                            .domain(upIqr).range(colorPalette1);\n                        // console.log(split.quantiles())\n                        // console.log(split1.quantiles())\n\n\n                        var thr = [];\n                        var thr1 = [];\n                        for (i = 0; i < split1.quantiles().length; i++) {\n                            thr1[i] = split1.quantiles()[i];\n                        }\n                        thr1.push(_.takeRight(temp_Data_metric)[0]);\n\n                        for (i = 0; i < split.quantiles().length; i++) {\n                            thr[i] = split.quantiles()[i];\n                        }\n                        thr.push(Math.round(countIqr / 100) * 100);\n\n                        // console.log(thr1);\n                        var i;\n                        for (i = 0; i < thr.length; i++) {\n                            if (thr[i] < 100) {\n                                thr[i] = Math.round(thr[i] / 10) * 10;\n                            }\n                            else {\n                                thr[i] = Math.round(thr[i] / 100) * 100;\n                            }\n                        }\n                        for (i = 0; i < thr1.length; i++) {\n                            if (thr1[i] < 100) {\n                                thr1[i] = Math.floor(thr1[i] / 10) * 10;\n                            }\n                            else {\n                                thr1[i] = Math.floor(thr1[i] / 100) * 100;\n                            }\n\n                        }\n                        // console.log(thr1)\n\n                        const csUs = {};\n                        var indexColor;\n                        _.map(belowIqr, d => {\n                            if (d >= 0 && d <= thr[0]) {\n                                csUs[d] = colorPalette[0];\n                            };\n                            if (d > thr[0] && d <= thr[1]) {\n                                csUs[d] = colorPalette[1];\n                            }\n                            if (d > thr[1] && d <= thr[2]) {\n                                csUs[d] = colorPalette[2];\n                            }\n                            if (d > thr[2] && d <= thr[3]) {\n                                csUs[d] = colorPalette[3];\n                            }\n                            if (d > thr[3] && d <= thr[4]) {\n                                csUs[d] = colorPalette[4];\n                            }\n                            if (d > thr[4] && d <= thr[5]) {\n                                csUs[d] = colorPalette[5];\n                            }\n                        });\n\n                        _.map(upIqr, d => {\n                            if (d > thr[5] && d <= thr1[0]) {\n                                csUs[d] = colorPalette1[0];\n                            }\n                            if (d > thr1[0] && d <= thr1[1]) {\n                                csUs[d] = colorPalette1[1];\n                            }\n                            if (d > thr1[1] && d <= thr1[2]) {\n                                csUs[d] = colorPalette1[2];\n                            }\n                            if (d > thr1[2] && d <= thr1[3]) {\n                                csUs[d] = colorPalette1[3];\n                            }\n                            if (d > thr1[3] && d <= thr1[4]) {\n                                csUs[d] = colorPalette1[4];\n                            }\n                        })\n                        let scaleMap = csUs;\n\n                        setColorScale(scaleMap);\n\n                        var max = _.takeRight(temp_Data_metric)[0];\n                        var min = temp_Data_metric[0];\n                        // console.log(max);\n                        if (max > 999) {\n                            max = (max / 1000).toFixed(0) + \"K\";\n                            // console.log(max);\n                            setLegendMax(max);\n                        } else {\n                            setLegendMax(max.toFixed(0));\n\n                        }\n                        setLegendMin(min.toFixed(0));\n\n                        setLegendSplit(thr);\n                        // console.log(thr1[4])\n                        setLegendSplit1(thr1.slice(0, 4));\n                        setLegendMax1(thr1[4]);\n\n                    }\n                    else {\n                        _.map(x, (d, k) => {\n                            d.fips = k\n                            return d\n                        });\n\n                        var temp_Data = {};\n                        var temp_Data_metric = [];\n                        // retrieve metric data as list\n                        _.each(x, d => {\n                            if (d.fips.length === 5 && d.fips[0] === '1' && d.fips[1] === '3') {\n                                temp_Data_metric.push(d[metric]);\n                            }\n                        });\n                        temp_Data[metric] = temp_Data_metric;\n\n                        temp_Data_metric.sort(function (a, b) {\n                            return a - b;\n                        });\n                        // console.log(temp_Data_metric);\n                        //   console.log(quantile(temp_Data_metric, 0.75));\n                        //   console.log(quantile(temp_Data_metric, 0.25));\n                        //   console.log(3*quantile(temp_Data_metric, 0.75)-2*quantile(temp_Data_metric, 0.25));\n                        // console.log(6*quantile(temp_Data_metric, 0.75)-5*quantile(temp_Data_metric, 0.25))\n                        var countIqr = 6 * quantile(temp_Data_metric, 0.75) - 5 * quantile(temp_Data_metric, 0.25);\n                        var rateIqr = 3 * quantile(temp_Data_metric, 0.75) - 2 * quantile(temp_Data_metric, 0.25);\n                        var IQR3 = _.map(_.filter(_.map(x, (d, k) => {\n                            d.fips = k\n                            return d\n                        }),\n                            d => (metric === 'casescumR' || metric === 'deathscumR' ? d[metric] > 0 && d[metric] < rateIqr &&\n                                d.fips.length === 5\n                                : d[metric] > 0 && d[metric] < countIqr &&\n                                d.fips.length === 5\n                            )),\n                            d => d[metric]);\n\n                        // console.log(IQR3);\n\n                        const csUs = {};\n                        var indexColor;\n                        _.map(IQR3, d => {\n                            if (metric === 'casescumR' || metric === 'deathscumR' || metric == 'casescum14dayR') { var interV = (rateIqr.toFixed(0)) / colorPalette.length }\n                            else { var interV = (countIqr.toFixed(0)) / colorPalette.length }\n\n                            if (metric === 'deathscum' || metric === 'deathscumR') {\n                                indexColor = Math.round(interV / 10) * 10;\n                            }\n                            else {\n                                indexColor = Math.round(interV / 100) * 100;\n                            }\n                            // console.log(indexColor);\n                            csUs[d] = colorPalette[Math.floor(d / indexColor)];\n                        })\n\n                        _.map(x, d => {\n                            if (d[metric] > indexColor * colorPalette.length) {\n                                csUs[d[metric]] = colorOut;\n                            }\n                            if (d[metric] < indexColor * colorPalette.length && d[metric] > 3 * quantile(temp_Data_metric, 0.75) - 2 * quantile(temp_Data_metric, 0.25).toFixed(0)) {\n                                csUs[d[metric]] = colorPalette[colorPalette.length - 1];\n                            }\n                        })\n                        let scaleMap = csUs;\n\n                        setColorScale(scaleMap);\n\n                        var max = _.takeRight(temp_Data_metric)[0];\n                        var min = temp_Data_metric[0];\n                        // console.log(max);\n                        if (max > 999) {\n                            max = (max / 1000).toFixed(0) + \"K\";\n                            // console.log(max);\n                            setLegendMax(max);\n                        } else {\n                            setLegendMax(max.toFixed(0));\n\n                        }\n                        setLegendMin(min.toFixed(0));\n                        var split = [];\n                        var i = 0;\n                        for (i = 0; i < colorPalette.length; i++) {\n                            split.push((i + 1) * indexColor);\n                        }\n\n                        setLegendSplit(split);\n                        // console.log(split);\n\n                    }\n                });\n\n            // fetch('/data/timeseries13' + '.json').then(res => res.json())\n            //   .then(x => setDataTS(x));\n            fetch('/data/timeseries13' + '.json').then(res => res.json())\n                .then(\n                    x => {\n                        setDataTS(x);\n                        // var max = 0\n                        var dicto = {}\n                        for (var key in x) {\n                            var max = 0\n                            _.each(x[key], m => {\n                                if (m[varGraphPair[metric]['name'][0]] > max) {\n                                    max = m[varGraphPair[metric]['name'][0]];\n                                }\n                            });\n                            dicto[key] = max;\n                            // console.log(varNameMap['cacum'].text);\n                        }\n                        // console.log(dicto);\n                        setLegendMaxGraph(dicto);\n                    });\n\n            fetch('/data/data.json').then(res => res.json())\n                .then(x => {\n                    setDateCur(x)\n\n                    const cs = scaleQuantile()\n                        .domain(_.map(_.filter(_.map(x, (d, k) => {\n                            d.fips = k\n                            return d\n                        }),\n                            d => (\n                                d['cvi'] >= 0)),\n                            d => d['cvi']))\n                        .range(colorPalette2);\n\n                    let scaleMap = {}\n                    _.each(x, d => {\n                        if (d[metric] >= 0) {\n                            scaleMap[d['cvi']] = cs(d['cvi'])\n                        }\n                    });\n                    // console.log(cs)\n                    setColorCVI(scaleMap);\n\n                    const si = scaleQuantile()\n                        .domain(_.map(_.filter(_.map(x, (d, k) => {\n                            d.fips = k\n                            return d\n                        }),\n                            d => (\n                                d['si'] >= 0)),\n                            d => d['si']))\n                        .range(colorPalette2);\n\n                    let scaleMapsi = {}\n                    _.each(x, d => {\n                        if (d[metric] >= 0) {\n                            scaleMapsi[d['si']] = si(d['si'])\n                        }\n                    });\n\n                    setColorSI(scaleMapsi);\n\n                });\n            fetch('/data/index_data.json').then(res => res.json())\n                .then(x => {\n                    setIndexData(x)\n                    // console.log(x)\n\n                });\n            fetch('/data/data_cases_ga.json').then(res => res.json())\n                .then(x => {\n\n                    // setDataCG(x)\n                    const his = scaleQuantile()\n                        .domain(_.map(_.filter(_.map(x, (d, k) => {\n                            d.fips = k\n                            return d\n                        }),\n                            d => (\n                                d['hispanicP'] >= 0)),\n                            d => d['hispanicP']))\n                        .range(colorPalette2);\n\n                    let scaleMap_his = {}\n                    _.each(x, d => {\n                        if (d['hispanicP'] >= 0) {\n                            scaleMap_his[d['hispanicP']] = his(d['hispanicP'])\n                        }\n                    });\n                    setColorHis(scaleMap_his);\n\n\n\n                }\n                );\n\n\n\n            fetch('/data/data_us.json').then(res => res.json())\n                .then(x => {\n                    setDataCha(x)\n                    // const cs = scaleQuantile()\n                    //     .domain(_.map(_.filter(_.map(x, (d, k) => {\n                    //         d.fips = k\n                    //         return d\n                    //     }),\n                    //         d => (\n                    //             d['_013_Urbanization_Code'] >= 0)),\n                    //         d => d['_013_Urbanization_Code']))\n                    //     .range(colorPalette);\n\n                    let scaleMap = {}\n                    _.each(x, d => {\n                        if (d['_013_Urbanization_Code'] === 1.0) {\n                            scaleMap[d['_013_Urbanization_Code']] = colorPalette[0]\n                        }\n                        if (d['_013_Urbanization_Code'] === 2.0) {\n                            scaleMap[d['_013_Urbanization_Code']] = colorPalette[1]\n                        }\n                        if (d['_013_Urbanization_Code'] === 3.0) {\n                            scaleMap[d['_013_Urbanization_Code']] = colorPalette[2]\n                        }\n                        if (d['_013_Urbanization_Code'] === 4.0) {\n                            scaleMap[d['_013_Urbanization_Code']] = colorPalette[3]\n                        }\n                        if (d['_013_Urbanization_Code'] === 5.0) {\n                            scaleMap[d['_013_Urbanization_Code']] = colorPalette[4]\n                        }\n                        if (d['_013_Urbanization_Code'] === 6.0) {\n                            scaleMap[d['_013_Urbanization_Code']] = colorPalette[5]\n                        }\n                    });\n\n                    setColorUbr(scaleMap);\n                    // console.log(scaleMap)\n\n                    const black = scaleQuantile()\n                        .domain(_.map(_.filter(_.map(x, (d, k) => {\n                            d.fips = k\n                            return d\n                        }),\n                            d => (\n                                d['black'] >= 0)),\n                            d => d['black']))\n                        .range(colorPalette2);\n\n                    let scaleMap_black = {}\n                    _.each(x, d => {\n                        if (d['black'] >= 0) {\n                            scaleMap_black[d['black']] = black(d['black'])\n                        }\n                    });\n                    setColorBlack(scaleMap_black);\n\n                    const pov = scaleQuantile()\n                        .domain(_.map(_.filter(_.map(x, (d, k) => {\n                            d.fips = k\n                            return d\n                        }),\n                            d => (\n                                d['poverty'] >= 0)),\n                            d => d['poverty']))\n                        .range(colorPalette2);\n\n                    let scaleMap_pov = {}\n                    _.each(x, d => {\n                        if (d['poverty'] >= 0) {\n                            scaleMap_pov[d['poverty']] = pov(d['poverty'])\n                        }\n                    });\n                    setColorPov(scaleMap_pov);\n\n\n                    const dia = scaleQuantile()\n                        .domain(_.map(_.filter(_.map(x, (d, k) => {\n                            d.fips = k\n                            return d\n                        }),\n                            d => (\n                                d['diabetes'] >= 0)),\n                            d => d['diabetes']))\n                        .range(colorPalette2);\n\n                    let scaleMap_dia = {}\n                    _.each(x, d => {\n                        if (d['diabetes'] >= 0) {\n                            scaleMap_dia[d['diabetes']] = dia(d['diabetes'])\n                        }\n                    });\n                    setColorDia(scaleMap_dia);\n\n                    const age = scaleQuantile()\n                        .domain(_.map(_.filter(_.map(x, (d, k) => {\n                            d.fips = k\n                            return d\n                        }),\n                            d => (\n                                d['age65over'] >= 0)),\n                            d => d['age65over']))\n                        .range(colorPalette2);\n\n                    let scaleMap_age = {}\n                    _.each(x, d => {\n                        if (d['age65over'] >= 0) {\n                            scaleMap_age[d['age65over']] = age(d['age65over'])\n                        }\n                    });\n                    setColorA65(scaleMap_age);\n\n\n                    const male = scaleQuantile()\n                        .domain(_.map(_.filter(_.map(x, (d, k) => {\n                            d.fips = k\n                            return d\n                        }),\n                            d => (\n                                d['male'] >= 0)),\n                            d => d['male']))\n                        .range(colorPalette2);\n\n                    let scaleMap_male = {}\n                    _.each(x, d => {\n                        if (d['male'] >= 0) {\n                            scaleMap_male[d['male']] = male(d['male'])\n                        }\n                    });\n                    setColorMale(scaleMap_male);\n                });\n        }\n    }, [stateFips, metric]);\n\n\n\n    useEffect(() => {\n        if (dataTS && dataTS[stateFips + countyFips]) {\n            setCovidMetric(_.takeRight(dataTS[stateFips + countyFips])[0]);\n            setCovidMetric14(_.takeRight(dataTS[stateFips + countyFips], 14));\n\n        }\n    }, [dataTS, countyFips])\n\n    if (dataTS && dataUs) {\n\n        return (\n            <div\n                className={`character-block ${activeClass}`}\n                id=\"mycontent\"\n                ref={characterRef}>\n\n                <div>\n                    <LazyHero\n                        imageSrc={\"/CoronaVirus_LightBlue.jpg\"}\n                        color={'#E0F5FF'}\n                        isCentered={true}\n                        opacity={0}\n                        parallaxOffset={55}\n                        //chidren={}\n                        style={{\n                            height: \"450px\"\n                        }}\n                    >\n                        <Grid column={2} style={{ paddingTop: '2em', paddingLeft: '0em', paddingBottom: '2em', width: \"1260px\" }} divided>\n                            <Grid.Column width={5}>\n                                <Grid.Row>\n                                    <Header as='h1' style={{ fontWeight: 300 }}>\n                                        <Header.Content style={{\n                                            fontSize: \"20pt\",\n                                            color: '#0072AE',\n                                            fontWeight: 1000,\n                                            textAlign: \"left\",\n                                            paddingRight: '5em'\n                                        }}>\n                                            <b>Georgia COVID-19</b>\n                                        </Header.Content>\n                                    </Header>\n                                </Grid.Row>\n                                <Grid.Row>\n                                    <Header as=\"h1\" style={{\n                                        fontSize: \"44pt\",\n                                        fontWeight: 1000,\n                                        textAlign: \"left\"\n                                    }}>\n                                        Health Equity Dashboard\n                            </Header>\n                                </Grid.Row>\n                            </Grid.Column>\n\n                            <Grid.Column width={11}>\n                                <Header as='h2' style={{\n                                    fontWeight: 400,\n                                    fontSize: \"16pt\",\n                                    paddingRight: 0,\n                                    textAlign: \"left\",\n                                }}>\n                                    <Header.Content>\n                                        The Georgia Health Equity dashboard is a tool to dynamically track the burden of cases and deaths across the\n                                        counties in Georgia.\n                                        <br></br>\n                                        <br></br>\n                                        We pair data on COVID-19 cases and deaths collected by the Georgia Department of Public Health with county population characteristics\n                                        to document the differential impact of the epidemic across the state. These data are made available to the public in an effort to inform planning, policy\n                                        development, and decision making by county health officials and individual residents.\n                                    </Header.Content>\n                                </Header>\n                            </Grid.Column>\n                        </Grid>\n                    </LazyHero>\n                </div>\n                <AppBar />\n\n                <Container style={{ marginTop: '6em', minWidth: '1260px' }}>\n\n                    {config &&\n                        <div>\n\n                            {/* <Breadcrumb>\n                                <Breadcrumb.Section link onClick={() => history.push('/')}></Breadcrumb.Section>\n            <Breadcrumb.Divider />\n                                <Breadcrumb.Section active>{stateName}</Breadcrumb.Section>\n                                <Breadcrumb.Divider />\n                            </Breadcrumb> */}\n                            <Grid stackable columns={3} style={{ width: \"100%\", height: \"100%\"}} >\n                                <Grid.Column>\n                                    <StickyExampleAdjacentContext activeCharacter={activeCharacter} />\n                                </Grid.Column>\n                                {/* <center> <Waypoint\n                                    onEnter={() => {\n                                        setActiveCharacter('Interactive Map')\n                                        console.log(activeCharacter)\n                                    }}\n                                    onLeave={() => {\n                                    }}>\n                                </Waypoint> </center> */}\n                                <Grid.Column width={16} style={{ width: \"100%\", height: \"100%\"}}>\n                                    <Divider id='summary' hidden />\n\n                                    <Grid columns={2} style={{ paddingBottom: '3em' }}>\n                                        <Grid.Row>\n                                            <Grid.Column width={16}>\n                                                <Header as='h2' style={{ fontFamily: 'lato', fontSize: \"16px\", paddingRight: 0, color: '#414042' }}>\n                                                    <Header.Content>\n\n                                                        <Header.Subheader style={{ fontFamily: 'lato', fontSize: \"16px\", paddingRight: 0, color: '#414042' }}>Click the dropdowns below to adjust the data you are viewing:</Header.Subheader>\n                                                    </Header.Content>\n                                                </Header>\n                                            </Grid.Column>\n                                        </Grid.Row>\n                                        <Grid.Column width={7} data-tip='ga' data-for='ga' style={{ paddingLeft: \"2\", paddingLeft: \"1\" }}>\n                                            <Header as='h2' style={{ fontWeight: 600 }}>\n                                                <Header.Content>\n                                                    <Dropdown\n                                                        style={{\n                                                            background: '#fff',\n                                                            fontSize: \"17pt\",\n                                                            fontWeight: 600,\n                                                            theme: '#000000',\n                                                            width: '520px',\n                                                            top: '0em',\n                                                            left: '0em',\n                                                            text: \"Select\",\n                                                            borderTop: 'none',\n                                                            borderLeft: '1px solid #FFFFFF',\n                                                            borderRight: 'none',\n                                                            borderBottom: '0.9px solid #bdbfc1',\n                                                            borderRadius: 0,\n                                                            minHeight: '1.0em',\n                                                            paddingBottom: '0.2em'\n                                                        }}\n                                                        text={metricName}\n                                                        inline\n                                                        search\n                                                        fluid\n\n\n                                                        pointing='top'\n                                                        options={metricOptions1}\n                                                        onChange={(e, { value }) => {\n                                                            setMetric(value);\n                                                            setMetricName(dropdownopt[value]);\n                                                        }}\n                                                    />\n                                                    <Header.Subheader style={{ fontFamily: 'lato', fontSize: \"10pt\", paddingTop: 1, color: '#414042' }}>\n                                                        Click map below to see county-level data.\n                                        </Header.Subheader>\n                                                </Header.Content>\n                                            </Header>\n                                            <SvgMap name={metric}\n                                                legendSplit={legendSplit}\n                                                legendSplit1={legendSplit1}\n                                                legendMin={legendMin}\n                                                legendMax={legendMax}\n                                            />\n                                            <ComposableMap projection=\"geoAlbersUsa\"\n                                                projectionConfig={{ scale: `${config.scale}` }}\n                                                width={500}\n                                                height={550}\n                                                data-tip=\"\"\n                                                offsetX={config.offsetX}\n                                                offsetY={config.offsetY}>\n                                                <Geographies geography={config.url}>\n                                                    {({ geographies }) => geographies.map(geo =>\n                                                        <Geography\n                                                            key={geo.rsmKey}\n                                                            geography={geo}\n                                                            onClick={() => {\n                                                                history.push(\"/\" + stateFips + \"/\" + geo.properties.COUNTYFP);\n                                                                // console.log(geo.properties.COUNTYFP);\n                                                            }}\n                                                            style={{\n                                                                default: {\n                                                                    //  fill: \"#ECEFF1\",\n                                                                    stroke: \"#607D8B\",\n                                                                    strokeWidth: 0.95,\n                                                                    outline: \"none\",\n                                                                },\n                                                                pressed: {\n                                                                    outline: \"none\",\n                                                                }\n                                                            }}\n                                                            onMouseEnter={() => {\n                                                                setDelayHandler(setTimeout(() => {\n                                                                    setCountyFips(geo.properties.COUNTYFP);\n                                                                    setCountyName(fips2county[stateFips + geo.properties.COUNTYFP]);\n                                                                    // setTooltipContent('Click to see more county data');\n                                                                }, 100))\n                                                            }}\n                                                            onMouseLeave={() => {\n                                                                clearTimeout(delayHandler)\n                                                                setTooltipContent(\"\")\n                                                            }}\n                                                            fill={countyFips === geo.properties.COUNTYFP ? countyColor :\n                                                                ((colorScale && dataUs[stateFips + geo.properties.COUNTYFP] &&\n                                                                    dataUs[stateFips + geo.properties.COUNTYFP][metric] && dataUs[stateFips + geo.properties.COUNTYFP][metric] > 0) ?\n                                                                    colorScale[dataUs[stateFips + geo.properties.COUNTYFP][metric]] :\n                                                                    (colorScale && dataUs[stateFips + geo.properties.COUNTYFP] && dataUs[stateFips + geo.properties.COUNTYFP][metric] === 0) ? '#e1dce2' : '#FFFFFF')}\n                                                        />\n                                                    )}\n                                                </Geographies>\n                                            </ComposableMap>\n\n                                            <Grid.Row style={{ paddingTop: '0.5em', paddingLeft: '0em', paddingRight: '2em' }} centered>\n                                                <small style={{ fontFamily: 'lato', fontSize: 18, color: '#414042' }} align=\"left\">\n                                                    {varNameMap[metric].text}{dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' : (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))} . The darker shading indicates a larger number of {varNameMap[metric].name}.\n                    </small>\n                                            </Grid.Row>\n\n                                        </Grid.Column>\n                                        <Grid.Column width={9} style={{ paddingLeft: \"2\", paddingLeft: \"1\" }}>\n                                            <Header as='h2' style={{ fontWeight: 400, paddingLeft: \"1em\" }}>\n                                                <Header.Content>\n                                                    {/* {varGraphPair[metric]['legend'][0]} for <span style={{ color: countyColor }}>{countyName}</span> */}\n                                                    {varGraphPair[metric]['legend'][0]} for <b>{countyName}</b>\n                                                    <Header.Subheader style={{ fontWeight: 300 }}>\n                                                    </Header.Subheader>\n                                                </Header.Content>\n                                            </Header>\n                                            <Grid>\n                                                <Grid.Column>\n                                                    <Grid.Row style={{ paddingLeft: \"1.5\", paddingTop: \"1\", paddingBottom: 0 }} centered>\n\n                                                        <svg width=\"630\" height='80'>\n\n                                                            <rect x={50} y={12} width=\"15\" height=\"2\" style={{ fill: countyColor, strokeWidth: 1, stroke: countyColor }} />\n                                                            <text x={75} y={20} style={{ fontSize: 16 }}>7-day rolling average in {countyName}</text>\n\n                                                            {varGraphPair[metric]['name'][1] === 'casesdailymean7' || varGraphPair[metric]['name'][1] === 'deathsdailymean7' ?\n                                                                <rect x={50} y={40} width=\"15\" height=\"15\" style={{ fill: stateColor, strokeWidth: 1, stroke: stateColor }} /> :\n                                                                <rect x={50} y={35} width=\"15\" height=\"1\" style={{ fill: '#007dba', strokeWidth: 1, stroke: '#007dba' }} />}\n                                                            {varGraphPair[metric]['name'][1] === 'casesdailymean7' || varGraphPair[metric]['name'][1] === 'deathsdailymean7' ?\n                                                                <text x={75} y={52} style={{ fontSize: 16 }}> {varGraphPair[metric]['legend'][0]} </text> :\n                                                                <rect x={50} y={35} width=\"15\" height=\"1\" style={{ fill: '#007dba', strokeWidth: 1, stroke: '#007dba' }} />}\n                                                            {varGraphPair[metric]['name'][1] === 'casesdailymean7' || varGraphPair[metric]['name'][1] === 'deathsdailymean7' ?\n                                                                <text x={250} y={12} style={{ fontSize: 0 }}></text> :\n                                                                <text x={75} y={43} style={{ fontSize: 16 }}>7-day rolling average in Georgia</text>}\n                                                            {varGraphPair[metric]['name'][1] === 'casesdailymean7' || varGraphPair[metric]['name'][1] === 'deathsdailymean7' ?\n                                                                <rect x={0} y={0} width=\"0\" height=\"0\" style={{ fill: 'white', strokeWidth: 0, stroke: 'white' }} /> :\n                                                                <rect x={50} y={55} width=\"15\" height=\"15\" style={{ fill: stateColor, strokeWidth: 1, stroke: stateColor }} />}\n                                                            {varGraphPair[metric]['name'][1] === 'casesdailymean7' || varGraphPair[metric]['name'][1] === 'deathsdailymean7' ?\n                                                                <rect x={0} y={0} width=\"0\" height=\"0\" style={{ fill: 'white', strokeWidth: 0, stroke: 'white' }} /> :\n                                                                <text x={75} y={68} style={{ fontSize: 16 }}> {varGraphPair[metric]['legend'][0]} </text>}\n\n                                                        </svg>\n\n                                                        <ChartGraph\n                                                            name={varGraphPair}\n                                                            metric={metric}\n                                                            stateFips={stateFips}\n                                                            countyFips={countyFips}\n                                                            data1={covidMetric14}\n                                                            data2={dataTS}\n                                                            countyname={countyName}\n                                                        />\n                                                    </Grid.Row>\n                                                    <Grid.Row style={{ paddingTop: '3.8em', paddingLeft: '2.9em', paddingRight: '2.9em' }} centered>\n                                                        <small style={{ fontFamily: 'lato', fontSize: 18, color: '#414042' }} align=\"left\">\n                                                            This chart shows the daily number of new confirmed COVID-19 {varNameMap[metric].name} in <b>{countyName}</b> as of {dataTS[stateFips + countyFips][0].todaydate === 'n/a' ? 'N/A' :\n                                                                (new Date(dataTS[stateFips + countyFips][0].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}. The daily number reflects the date the {varNameMap[metric].cat} was first reported to DPH.\n                        The vertical bars show the number of new daily {varNameMap[metric].name} while the line shows the 7-day moving average of new daily {varNameMap[metric].name}.\n                        </small>\n                                                    </Grid.Row>\n                                                </Grid.Column>\n                                            </Grid>\n                                        </Grid.Column>\n                                    </Grid>\n\n\n\n                                    {/* <center> <Waypoint\n                                        onEnter={() => {\n                                            setActiveCharacter('COVID-19 by Race/Ethnicity')\n                                            console.log(activeCharacter)\n                                        }}\n                                        onLeave={() => {\n                                        }}>\n                                    </Waypoint> </center> */}\n\n                                    <Grid >\n                                        {/* <center> <Waypoint\n                                            onEnter={() => {\n                                                setActiveCharacter('COVID-19 by Age')\n                                                console.log(activeCharacter)\n                                            }}\n                                            onLeave={() => {\n                                            }}>\n                                        </Waypoint> </center> */}\n                                        <div id='age_g' style={sectionStyle2}>\n                                            <Header as='h2' style={{ textAlign: 'center', color: 'black', fontSize: \"22pt\", paddingTop: '1em', paddingBottom: '1em' }}>\n                                                <Header.Content>\n                                                    COVID-19 by Age\n                                    </Header.Content>\n                                            </Header>\n                                        </div>\n                                        <Grid style={{ paddingLeft: \"7em\", paddingTop: '0.5em', paddingRight: \"7em\", width: \"100%\", height: \"100%\" }}>\n                                            <Grid.Row columns={2} style={{ paddingTop: 11 }}>\n                                                <Grid.Column style={{ paddingTop: '1em', paddingBottom: 18 }}>\n                                                    <Header as='h2' style={{ textAlign: 'center', fontSize: \"18pt\", lineHeight: \"16pt\", paddingRight: '2em' }}>\n                                                        <Header.Content>\n                                                            Percentage of COVID-19 Cases and Population by Age in Georgia\n            \t\t                        </Header.Content>\n                                                    </Header>\n                                                    <VictoryChart\n                                                        theme={VictoryTheme.material}\n                                                        width={500}\n                                                        height={300}\n                                                        domainPadding={10}\n                                                        scale={{ y: props.ylog ? 'log' : 'linear' }}\n                                                        minDomain={{ y: props.ylog ? 1 : 0 }}\n                                                        padding={{ left: 79, right: 40, top: 60, bottom: 50 }}\n                                                        containerComponent={<VictoryContainer responsive={false} />}\n                                                    >\n\n                                                        <VictoryAxis style={{\n                                                            tickLabels: { fontSize: 18, padding: 2 }\n                                                        }} />\n                                                        <VictoryAxis dependentAxis\n                                                            domain={[0, 1]}\n                                                            style={{\n                                                                tickLabels: { fontSize: 18, padding: 2 }\n                                                            }}\n                                                            tickFormat={(y) => (y <= 1 ? y * 100 : (y / 1000 + 'k'))} />\n                                                        <VictoryLegend x={80} y={40}\n                                                            orientation=\"horizontal\"\n                                                            gutter={1}\n                                                            data={[\n                                                                { name: 'Percentage of Cases', symbol: { fill: colors['1'], type: \"square\" } },\n                                                                { name: \"Percentage of Population\", symbol: { fill: colors['2'], type: \"square\" } },\n                                                            ]}\n                                                        />\n                                                        <VictoryGroup offset={20}\n                                                            colorScale={\"qualitative\"}\n                                                        >\n\n                                                            <VictoryBar\n                                                                alignment=\"start\"\n                                                                barWidth={20}\n                                                                labels={({ datum }) => `Percentage of Cases: ${numberWithCommas(parseFloat(datum.value).toFixed(2) * 100)}%`}\n                                                                data={[{ key: \"< 20\", 'value': data_cases['13'][\"019ageC_P\"] || 0, 'colors': '1' },\n                                                                { key: \"20-44\", 'value': data_cases['13'][\"2044ageC_P\"] || 0, 'colors': '1' },\n                                                                { key: \"45-64\", 'value': data_cases['13'][\"4564ageC_P\"] || 0, 'colors': '1' },\n                                                                { key: \"65+\", 'value': data_cases['13'][\"65ageC_P\"] || 0, 'colors': '1' }]}\n                                                                labelComponent={<VictoryTooltip\n                                                                    orientation=\"top\"\n                                                                    style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'black' }}\n                                                                    constrainToVisibleArea\n                                                                    labelComponent={<VictoryLabel dx={-60} textAnchor='start' />}\n                                                                    flyoutStyle={{ fill: colors['1'], fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\n                                                                />}\n                                                                style={{\n                                                                    data: {\n                                                                        fill: ({ datum }) => colors[datum.colors],\n                                                                        fillOpacity: 2\n                                                                    }\n                                                                }}\n                                                                x=\"key\"\n                                                                y=\"value\"\n                                                            />\n                                                            <VictoryBar\n                                                                alignment=\"start\"\n                                                                barWidth={20}\n                                                                data={[{ key: \"< 20\", 'value': data_cases['13'][\"019ageP\"] || 0, 'colors': '2' },\n                                                                { key: \"20-44\", 'value': data_cases['13'][\"2044ageP\"] || 0, 'colors': '2' },\n                                                                { key: \"45-64\", 'value': data_cases['13'][\"4564ageP\"] || 0, 'colors': '2' },\n                                                                { key: \"65+\", 'value': data_cases['13'][\"65ageP\"] || 0, 'colors': '2' }]}\n                                                                labels={({ datum }) =>\n                                                                    `Percentage of Population: ${numberWithCommas(parseFloat(datum.value).toFixed(2) * 100)}%`\n                                                                }\n                                                                labelComponent={<VictoryTooltip\n                                                                    orientation=\"top\"\n                                                                    style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'black' }}\n                                                                    constrainToVisibleArea\n                                                                    // labelComponent={<VictoryLabel dx={-50} textAnchor='start' />}\n                                                                    flyoutStyle={{ fill: \"grey\", fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\n                                                                />}\n                                                                style={{\n                                                                    data: {\n                                                                        fill: ({ datum }) => colors[datum.colors],\n                                                                        fillOpacity: 0.7\n                                                                    }\n                                                                }}\n                                                                x=\"key\"\n                                                                y=\"value\"\n                                                            />\n                                                        </VictoryGroup>\n                                                    </VictoryChart>\n\n                                                </Grid.Column>\n                                                <Grid.Column style={{ paddingTop: '1em', paddingBottom: 18 }}>\n                                                    <Header as='h2' style={{ textAlign: 'center', fontSize: \"18pt\", lineHeight: \"16pt\", paddingRight: '2em' }}>\n                                                        <Header.Content>\n                                                            Percentage of COVID-19 Deaths and Population by Age in Georgia\n            \t\t                        </Header.Content>\n                                                    </Header>\n                                                    <VictoryChart\n                                                        theme={VictoryTheme.material}\n                                                        width={500}\n                                                        height={300}\n                                                        domainPadding={10}\n                                                        scale={{ y: props.ylog ? 'log' : 'linear' }}\n                                                        minDomain={{ y: props.ylog ? 1 : 0 }}\n                                                        padding={{ left: 79, right: 40, top: 60, bottom: 50 }}\n                                                        containerComponent={<VictoryContainer responsive={false} />}\n                                                    >\n                                                        <VictoryAxis style={{\n                                                            tickLabels: { fontSize: 18, padding: 2 }\n                                                        }} />\n                                                        <VictoryAxis dependentAxis\n                                                            domain={[0, 1]}\n                                                            style={{\n                                                                tickLabels: { fontSize: 18, padding: 2 }\n                                                            }}\n                                                            tickFormat={(y) => (y <= 1 ? y * 100 : (y / 1000 + 'k'))} />\n                                                        <VictoryLegend x={80} y={40}\n                                                            orientation=\"horizontal\"\n                                                            gutter={1}\n                                                            data={[\n                                                                { name: 'Percentage of Deaths', symbol: { fill: colors['1'], type: \"square\" } },\n                                                                { name: \"Percentage of Population\", symbol: { fill: colors['2'], type: \"square\" } },\n                                                            ]}\n                                                        />\n                                                        <VictoryGroup offset={20}\n                                                            colorScale={\"qualitative\"}\n                                                        >\n\n                                                            <VictoryBar\n                                                                alignment=\"start\"\n                                                                barWidth={20}\n                                                                // labels={({ datum }) => (Math.round(datum.value * 100) / 100)}\n                                                                labels={({ datum }) => `Percentage of Deaths: ${numberWithCommas(parseFloat(datum.value).toFixed(2) * 100)}%`}\n                                                                data={[{ key: \"< 20\", 'value': data_deaths['13'][\"019ageC_P\"] || 0, 'colors': '3' },\n                                                                { key: \"20-44\", 'value': data_deaths['13'][\"2044ageC_P\"] || 0, 'colors': '3' },\n                                                                { key: \"45-64\", 'value': data_deaths['13'][\"4564ageC_P\"] || 0, 'colors': '3' },\n                                                                { key: \"65+\", 'value': data_deaths['13'][\"65ageC_P\"] || 0, 'colors': '3' }]}\n                                                                labelComponent={<VictoryTooltip\n                                                                    orientation=\"top\"\n                                                                    style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'black' }}\n                                                                    constrainToVisibleArea\n                                                                    labelComponent={<VictoryLabel dx={-60} textAnchor='start' />}\n                                                                    flyoutStyle={{ fill: colors['1'], fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\n                                                                />}\n                                                                style={{\n                                                                    data: {\n                                                                        fill: ({ datum }) => colors[datum.colors],\n                                                                        fillOpacity: 2\n                                                                    }\n                                                                }}\n                                                                x=\"key\"\n                                                                y=\"value\"\n                                                            />\n                                                            <VictoryBar\n                                                                alignment=\"start\"\n                                                                barWidth={20}\n                                                                data={[{ key: \"< 20\", 'value': data_deaths['13'][\"019ageP\"] || 0, 'colors': '2' },\n                                                                { key: \"20-44\", 'value': data_deaths['13'][\"2044ageP\"] || 0, 'colors': '2' },\n                                                                { key: \"45-64\", 'value': data_deaths['13'][\"4564ageP\"] || 0, 'colors': '2' },\n                                                                { key: \"65+\", 'value': data_deaths['13'][\"65ageP\"] || 0, 'colors': '2' }]}\n                                                                labels={({ datum }) =>\n                                                                    `Percentage of Population: ${numberWithCommas(parseFloat(datum.value).toFixed(2) * 100)}%`\n                                                                }\n                                                                labelComponent={<VictoryTooltip\n                                                                    orientation=\"top\"\n                                                                    style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'black' }}\n                                                                    constrainToVisibleArea\n                                                                    flyoutStyle={{ fill: \"grey\", fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\n                                                                />}\n                                                                style={{\n                                                                    data: {\n                                                                        fill: ({ datum }) => colors[datum.colors],\n                                                                        fillOpacity: 0.7\n                                                                    }\n                                                                }}\n                                                                x=\"key\"\n                                                                y=\"value\"\n                                                            />\n                                                        </VictoryGroup>\n                                                    </VictoryChart>\n                                                </Grid.Column>\n                                            </Grid.Row>\n                                        </Grid>\n                                        <Grid style={{ width: \"100%\", height: \"100%\", paddingBottom: '5em' }}>\n                                            <Grid.Row columns={2} style={{ paddingBottom: 7 }}>\n                                                <Grid.Column>\n                                                    <Header as='h2' style={{ fontSize: \"14pt\", lineHeight: \"16pt\", width: 450, paddingLeft: 132 }}>\n                                                        <Header.Subheader style={{ fontFamily: 'lato', fontSize: 18, color: '#414042', lineHeight: \"16pt\", width: 450, textAlign: 'left' }}>\n                                                            This chart shows the percentage of cases and percentage of the population by age for <b>Georgia</b>. The chart excludes data from {datades_cases['13']['age4catPmiss'].toFixed(2)}% of confirmed cases who were missing information on age. <b>Data Updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' :\n                                                                (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}</b>\n\n                                                        </Header.Subheader>\n                                                    </Header>\n                                                </Grid.Column>\n                                                <Grid.Column>\n                                                    <Header as='h2' style={{ fontWeight: 400, width: 450, paddingLeft: 38 }}>\n                                                        <Header.Subheader style={{ fontFamily: 'lato', fontSize: 18, color: '#414042', lineHeight: \"16pt\", width: 450, textAlign: 'left' }}>\n                                                            This chart shows the percentage of deaths and percentage of the population by race and ethnicity for <b>Georgia</b>. The chart excludes data from {datades_deaths['13']['age4catPmiss'].toFixed(2)}% of confirmed deaths who were missing information on age. <b>Data Updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' :\n                                                                (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}</b>\n                                                        </Header.Subheader>\n                                                    </Header>\n                                                </Grid.Column>\n                                            </Grid.Row>\n                                        </Grid>\n\n                                        {/* <center> <Waypoint\n                                            onEnter={() => {\n                                                setActiveCharacter('COVID-19 by Sex')\n                                                console.log(activeCharacter)\n                                            }}\n                                            onLeave={() => {\n                                            }}>\n                                        </Waypoint> </center> */}\n                                        {/* <center> <Divider id='sex_g' hidden style={{ paddingBottom: 50 }} /> </center>\n                                        <center> <Divider /> </center> */}\n                                        <div id='sex_g' style={sectionStyle2}>\n                                            <Header as='h2' style={{ textAlign: 'center', color: 'black', fontSize: \"22pt\", paddingTop: '1em', paddingBottom: '1em' }}>\n                                                <Header.Content>\n                                                    COVID-19 by Sex\n                                    </Header.Content>\n                                            </Header>\n                                        </div>\n                                        <Grid style={{ paddingLeft: \"7em\", paddingTop: '0.5em', paddingRight: \"7em\", width: \"100%\", height: \"100%\" }}>\n                                            <Grid.Row columns={2} style={{ paddingTop: 11 }}>\n                                                <Grid.Column style={{ paddingTop: '1em', paddingBottom: 18 }}>\n                                                    <Header as='h2' style={{ textAlign: 'center', fontSize: \"18pt\", lineHeight: \"16pt\", paddingRight: '2em' }}>\n                                                        <Header.Content>\n                                                            Percentage of COVID-19 Cases and Population by Sex in Georgia\n            \t\t                        </Header.Content>\n                                                    </Header>\n                                                    <VictoryChart\n                                                        theme={VictoryTheme.material}\n                                                        width={500}\n                                                        height={300}\n                                                        domainPadding={100}\n                                                        scale={{ y: props.ylog ? 'log' : 'linear' }}\n                                                        // minDomain={{ y: props.ylog ? 1 : 0 }}\n                                                        maxDomain={{ y: 1 }}\n                                                        padding={{ left: 79, right: 40, top: 60, bottom: 50 }}\n                                                        containerComponent={<VictoryContainer responsive={false} />}\n                                                    >\n                                                        {/* <VictoryLabel style={{\n                                                fontSize: 20, paddingBottom: '0.5em'\n                                            }} text={props.title} x={(560) / 2} y={20} textAnchor=\"middle\" /> */}\n                                                        <VictoryAxis style={{\n                                                            tickLabels: { fontSize: 18, padding: 2 }\n                                                        }} />\n                                                        <VictoryAxis dependentAxis\n                                                            domain={[0, 1]}\n                                                            style={{\n                                                                tickLabels: { fontSize: 18, padding: 2 }\n                                                            }}\n                                                            tickFormat={(y) => (y <= 1 ? y * 100 : (y / 1000 + 'k'))} />\n                                                        <VictoryLegend x={80} y={40}\n                                                            orientation=\"horizontal\"\n                                                            gutter={1}\n                                                            // style={{ border: { stroke: \"black\" } }}\n                                                            data={[\n                                                                { name: 'Percentage of Cases', symbol: { fill: colors['1'], type: \"square\" } },\n                                                                { name: \"Percentage of Population\", symbol: { fill: colors['2'], type: \"square\" } },\n                                                            ]}\n                                                        />\n                                                        <VictoryGroup offset={20}\n                                                            colorScale={\"qualitative\"}\n                                                        >\n\n                                                            <VictoryBar\n                                                                alignment=\"start\"\n                                                                barWidth={20}\n                                                                // labels={({ datum }) => (Math.round(datum.value * 100) / 100)}\n                                                                labels={({ datum }) => `Percentage of Cases: ${numberWithCommas(parseFloat(datum.value).toFixed(2) * 100)}%`}\n                                                                data={[\n                                                                    { key: \"Male\", 'value': data_cases['13'][\"maleC_P\"] || 0, 'colors': '1' },\n                                                                    { key: \"Female\", 'value': data_cases['13'][\"femaleC_P\"] || 0, 'colors': '1' }]}\n                                                                labelComponent={<VictoryTooltip\n                                                                    orientation=\"top\"\n                                                                    style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'black' }}\n                                                                    constrainToVisibleArea\n                                                                    labelComponent={<VictoryLabel dx={-60} textAnchor='start' />}\n                                                                    flyoutStyle={{ fill: colors['1'], fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\n                                                                />}\n                                                                style={{\n                                                                    data: {\n                                                                        fill: ({ datum }) => colors[datum.colors],\n                                                                        fillOpacity: 2\n                                                                    }\n                                                                }}\n                                                                x=\"key\"\n                                                                y=\"value\"\n                                                            />\n                                                            <VictoryBar\n                                                                alignment=\"start\"\n                                                                barWidth={20}\n                                                                data={[\n                                                                    { key: \"Male\", 'value': data_cases['13'][\"maleP\"] || 0, 'colors': '2' },\n                                                                    { key: \"Female\", 'value': data_cases['13'][\"femaleP\"] || 0, 'colors': '2' }]}\n                                                                labels={({ datum }) =>\n                                                                    `Percentage of Population: ${numberWithCommas(parseFloat(datum.value).toFixed(2) * 100)}%`\n                                                                }\n                                                                labelComponent={<VictoryTooltip\n                                                                    orientation=\"top\"\n                                                                    style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'black' }}\n                                                                    constrainToVisibleArea\n                                                                    flyoutStyle={{ fill: \"grey\", fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\n                                                                />}\n                                                                style={{\n                                                                    data: {\n                                                                        fill: ({ datum }) => colors[datum.colors],\n                                                                        fillOpacity: 0.7\n                                                                    }\n                                                                }}\n                                                                x=\"key\"\n                                                                y=\"value\"\n                                                            />\n                                                        </VictoryGroup>\n                                                    </VictoryChart>\n\n                                                </Grid.Column>\n                                                <Grid.Column style={{ paddingTop: '1em', paddingBottom: 18 }}>\n                                                    <Header as='h2' style={{ textAlign: 'center', fontSize: \"18pt\", lineHeight: \"16pt\", paddingRight: '2em' }}>\n                                                        <Header.Content>\n                                                            Percentage of COVID-19 Deaths and Population by Sex in Georgia\n            \t\t                        </Header.Content>\n                                                    </Header>\n                                                    <VictoryChart\n                                                        theme={VictoryTheme.material}\n                                                        width={500}\n                                                        height={300}\n                                                        domainPadding={100}\n                                                        scale={{ y: props.ylog ? 'log' : 'linear' }}\n                                                        // minDomain={{ y: props.ylog ? 1 : 0 }}\n                                                        maxDomain={{ y: 1 }}\n                                                        padding={{ left: 79, right: 40, top: 60, bottom: 50 }}\n                                                        containerComponent={<VictoryContainer responsive={false} />}\n                                                    >\n                                                        <VictoryAxis style={{\n                                                            tickLabels: { fontSize: 18, padding: 2 }\n                                                        }} />\n                                                        <VictoryAxis dependentAxis\n                                                            domain={[0, 1]}\n                                                            style={{\n                                                                tickLabels: { fontSize: 18, padding: 2 }\n                                                            }}\n                                                            tickFormat={(y) => (y <= 1 ? y * 100 : (y / 1000 + 'k'))} />\n                                                        <VictoryLegend x={80} y={40}\n                                                            orientation=\"horizontal\"\n                                                            gutter={1}\n                                                            // style={{ border: { stroke: \"black\" } }}\n                                                            data={[\n                                                                { name: 'Percentage of Deaths', symbol: { fill: colors['1'], type: \"square\" } },\n                                                                { name: \"Percentage of Population\", symbol: { fill: colors['2'], type: \"square\" } },\n                                                            ]}\n                                                        />\n                                                        <VictoryGroup offset={20}\n                                                            colorScale={\"qualitative\"}\n                                                        >\n\n                                                            <VictoryBar\n                                                                alignment=\"start\"\n                                                                barWidth={20}\n                                                                // labels={({ datum }) => (Math.round(datum.value * 100) / 100)}\n                                                                labels={({ datum }) => `Percentage of Deaths: ${numberWithCommas(parseFloat(datum.value).toFixed(2) * 100)}%`}\n                                                                data={[\n                                                                    { key: \"Male\", 'value': data_deaths['13'][\"maleC_P\"] || 0, 'colors': '3' },\n                                                                    { key: \"Female\", 'value': data_deaths['13'][\"femaleC_P\"] || 0, 'colors': '3' }]}\n                                                                labelComponent={<VictoryTooltip\n                                                                    orientation=\"top\"\n                                                                    style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'black' }}\n                                                                    constrainToVisibleArea\n                                                                    labelComponent={<VictoryLabel dx={-60} textAnchor='start' />}\n                                                                    flyoutStyle={{ fill: colors['1'], fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\n                                                                />}\n                                                                style={{\n                                                                    data: {\n                                                                        fill: ({ datum }) => colors[datum.colors],\n                                                                        fillOpacity: 2\n                                                                    }\n                                                                }}\n                                                                x=\"key\"\n                                                                y=\"value\"\n                                                            />\n                                                            <VictoryBar\n                                                                alignment=\"start\"\n                                                                barWidth={20}\n                                                                data={[\n                                                                    { key: \"Male\", 'value': data_deaths['13'][\"maleP\"] || 0, 'colors': '2' },\n                                                                    { key: \"Female\", 'value': data_deaths['13'][\"femaleP\"] || 0, 'colors': '2' }]}\n                                                                labels={({ datum }) =>\n                                                                    `Percentage of Population: ${numberWithCommas(parseFloat(datum.value).toFixed(2) * 100)}%`\n                                                                }\n                                                                labelComponent={<VictoryTooltip\n                                                                    orientation=\"top\"\n                                                                    style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'black' }}\n                                                                    constrainToVisibleArea\n                                                                    // labelComponent={<VictoryLabel dx={-50} textAnchor='start' />}\n                                                                    flyoutStyle={{ fill: \"grey\", fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\n                                                                />}\n                                                                style={{\n                                                                    data: {\n                                                                        fill: ({ datum }) => colors[datum.colors],\n                                                                        fillOpacity: 0.7\n                                                                    }\n                                                                }}\n                                                                x=\"key\"\n                                                                y=\"value\"\n                                                            />\n                                                        </VictoryGroup>\n                                                    </VictoryChart>\n\n                                                </Grid.Column>\n                                            </Grid.Row>\n                                        </Grid>\n                                        <Grid style={{ width: \"100%\", height: \"100%\",paddingBottom: '5em' }}>\n                                            <Grid.Row columns={2} style={{ paddingBottom: 7 }}>\n                                                <Grid.Column>\n                                                    <Header as='h2' style={{ fontSize: \"14pt\", lineHeight: \"16pt\", width: 450, paddingLeft: 132 }}>\n                                                        <Header.Subheader style={{ fontFamily: 'lato', fontSize: 18, color: '#414042', lineHeight: \"16pt\", width: 450, textAlign: 'left' }}>\n                                                            This chart shows the percentage of cases and percentage of the population by sex for <b>Georgia</b>. The chart excludes data from {datades_cases['13']['femalePmiss'].toFixed(2)}% of confirmed cases who were missing information on sex. <b>Data Updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' :\n                                                                (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}</b>\n                                                        </Header.Subheader>\n                                                    </Header>\n                                                </Grid.Column>\n                                                <Grid.Column>\n                                                    <Header as='h2' style={{ fontWeight: 400, width: 450, paddingLeft: 38 }}>\n\n                                                        <Header.Subheader style={{ fontFamily: 'lato', fontSize: 18, color: '#414042', lineHeight: \"16pt\", width: 450, textAlign: 'left' }}>\n                                                            This chart shows the percentage of deaths and percentage of the population by sex for <b>Georgia</b>. The chart excludes data from {datades_deaths['13']['femalePmiss'].toFixed(2)}% of confirmed deaths who were missing information on sex. <b>Data Updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' :\n                                                                (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}</b>\n                                                        </Header.Subheader>\n                                                    </Header>\n                                                </Grid.Column>\n                                            </Grid.Row>\n                                        </Grid>\n                                        \n                                        <div id='re' style={sectionStyle2}>\n                                            <Header as='h2' style={{ textAlign: 'center', color: 'black', fontSize: \"22pt\", paddingTop: '1em', paddingBottom: '1em' }}>\n                                                <Header.Content>\n                                                    COVID-19 by Race/Ethnicity\n                                    </Header.Content>\n                                            </Header>\n                                        </div>\n\n                                        <Grid style={{ paddingLeft: \"7em\", paddingTop: '0.5em', paddingRight: \"7em\", width: \"100%\", height: \"100%\" }}>\n                                            <Grid.Row columns={2} style={{ paddingTop: 11 }}>\n                                                <Grid.Column style={{ paddingTop: '1em', paddingBottom: 18 }}>\n                                                    <Header as='h2' style={{ textAlign: 'center', fontSize: \"18pt\", lineHeight: \"16pt\", paddingRight: '2em' }}>\n                                                        <Header.Content>\n                                                            Percentage of COVID-19 Cases and Population by Race in Georgia\n            \t\t                        </Header.Content>\n                                                    </Header>\n                                                    <VictoryChart\n                                                        theme={VictoryTheme.material}\n                                                        width={500}\n                                                        height={300}\n                                                        domainPadding={10}\n                                                        scale={{ y: props.ylog ? 'log' : 'linear' }}\n                                                        minDomain={{ y: props.ylog ? 1 : 0 }}\n                                                        padding={{ left: 79, right: 40, top: 60, bottom: 50 }}\n                                                        containerComponent={<VictoryContainer responsive={false} />}\n                                                    >\n                                                        {/* <VictoryLabel style={{\n                                                fontSize: 20, paddingBottom: '0.5em'\n                                            }} text={props.title} x={(560) / 2} y={20} textAnchor=\"middle\" /> */}\n                                                        <VictoryAxis style={{\n                                                            tickLabels: { fontSize: 18, padding: 2 }\n                                                        }} />\n                                                        <VictoryAxis dependentAxis\n                                                            domain={[0, 1]}\n                                                            style={{\n                                                                tickLabels: { fontSize: 18, padding: 2 }\n                                                            }}\n                                                            tickFormat={(y) => (y <= 1 ? y * 100 : (y / 1000 + 'k'))} />\n                                                        <VictoryLegend x={80} y={40}\n                                                            orientation=\"horizontal\"\n                                                            gutter={1}\n                                                            // style={{ border: { stroke: \"black\" } }}\n                                                            data={[\n                                                                { name: 'Percentage of Cases', symbol: { fill: colors['1'], type: \"square\" } },\n                                                                { name: \"Percentage of Population\", symbol: { fill: colors['2'], type: \"square\" } },\n                                                            ]}\n                                                        />\n                                                        <VictoryGroup offset={20}\n                                                            colorScale={\"qualitative\"}\n                                                        >\n\n                                                            <VictoryBar\n                                                                alignment=\"start\"\n                                                                barWidth={20}\n                                                                // labels={({ datum }) => (Math.round(datum.value * 100) / 100)}\n                                                                labels={({ datum }) => `Percentage of Cases: ${numberWithCommas(parseFloat(datum.value).toFixed(2) * 100)}%`}\n                                                                data={[{ key: \"White\", 'value': data_cases['13'][\"whiteC_P\"] || 0, 'colors': '1' },\n                                                                { key: \"Black\", 'value': data_cases['13'][\"blackC_P\"] || 0, 'colors': '1' },\n                                                                { key: \"Hispanic\", 'value': data_cases['13'][\"hispanicC_P\"] || 0, 'colors': '1' },\n                                                                { key: \"Other\", 'value': data_cases['13'][\"otherNHC_P\"] || 0, 'colors': '1' }]}\n                                                                labelComponent={<VictoryTooltip\n                                                                    orientation=\"top\"\n                                                                    style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'black' }}\n                                                                    constrainToVisibleArea\n                                                                    labelComponent={<VictoryLabel dx={-60} textAnchor='start' />}\n                                                                    flyoutStyle={{ fill: colors['1'], fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\n                                                                />}\n                                                                style={{\n                                                                    data: {\n                                                                        fill: ({ datum }) => colors[datum.colors],\n                                                                        fillOpacity: 2\n                                                                    }\n                                                                }}\n                                                                x=\"key\"\n                                                                y=\"value\"\n                                                            />\n                                                            <VictoryBar\n                                                                alignment=\"start\"\n                                                                barWidth={20}\n                                                                data={[{ key: \"White\", 'value': data_cases['13'][\"whiteP\"] || 0, 'colors': '2' },\n                                                                { key: \"Black\", 'value': data_cases['13'][\"blackP\"] || 0, 'colors': '2' },\n                                                                { key: \"Hispanic\", 'value': data_cases['13'][\"hispanicP\"] || 0, 'colors': '2' },\n                                                                { key: \"Other\", 'value': data_cases['13'][\"otherNHP\"] || 0, 'colors': '2' }]}\n                                                                labels={({ datum }) =>\n                                                                    `Percentage of Population: ${numberWithCommas(parseFloat(datum.value).toFixed(2) * 100)}%`\n                                                                }\n                                                                labelComponent={<VictoryTooltip\n                                                                    orientation=\"top\"\n                                                                    style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'black' }}\n                                                                    constrainToVisibleArea\n                                                                    // labelComponent={<VictoryLabel dx={-50} textAnchor='start' />}\n                                                                    flyoutStyle={{ fill: \"grey\", fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\n                                                                />}\n                                                                style={{\n                                                                    data: {\n                                                                        fill: ({ datum }) => colors[datum.colors],\n                                                                        fillOpacity: 0.7\n                                                                    }\n                                                                }}\n                                                                x=\"key\"\n                                                                y=\"value\"\n                                                            />\n                                                        </VictoryGroup>\n                                                    </VictoryChart>\n\n                                                </Grid.Column>\n                                                <Grid.Column style={{ paddingTop: '1em', paddingBottom: 18 }}>\n                                                    <Header as='h2' style={{ textAlign: 'center', fontSize: \"18pt\", lineHeight: \"16pt\", paddingRight: '2em' }}>\n                                                        <Header.Content>\n                                                            Percentage of COVID-19 Deaths and Population by Race in Georgia\n            \t\t                        </Header.Content>\n                                                    </Header>\n                                                    <VictoryChart\n                                                        theme={VictoryTheme.material}\n                                                        width={500}\n                                                        height={300}\n                                                        domainPadding={10}\n                                                        scale={{ y: props.ylog ? 'log' : 'linear' }}\n                                                        minDomain={{ y: props.ylog ? 1 : 0 }}\n                                                        padding={{ left: 79, right: 40, top: 60, bottom: 50 }}\n                                                        containerComponent={<VictoryContainer responsive={false} />}\n                                                    >\n                                                        {/* <VictoryLabel style={{\n                                                fontSize: 20, paddingBottom: '0.5em'\n                                            }} text={props.title} x={(560) / 2} y={20} textAnchor=\"middle\" /> */}\n                                                        <VictoryAxis style={{\n                                                            tickLabels: { fontSize: 18, padding: 2 }\n                                                        }} />\n                                                        <VictoryAxis dependentAxis\n                                                            domain={[0, 1]}\n                                                            style={{\n                                                                tickLabels: { fontSize: 18, padding: 2 }\n                                                            }}\n                                                            tickFormat={(y) => (y <= 1 ? y * 100 : (y / 1000 + 'k'))} />\n                                                        <VictoryLegend x={80} y={40}\n                                                            orientation=\"horizontal\"\n                                                            gutter={1}\n                                                            // style={{ border: { stroke: \"black\" } }}\n                                                            data={[\n                                                                { name: 'Percentage of Deaths', symbol: { fill: colors['1'], type: \"square\" } },\n                                                                { name: \"Percentage of Population\", symbol: { fill: colors['2'], type: \"square\" } },\n                                                            ]}\n                                                        />\n                                                        <VictoryGroup offset={20}\n                                                            colorScale={\"qualitative\"}\n                                                        >\n\n                                                            <VictoryBar\n                                                                alignment=\"start\"\n                                                                barWidth={20}\n                                                                // labels={({ datum }) => (Math.round(datum.value * 100) / 100)}\n                                                                labels={({ datum }) => `Percentage of Deaths: ${numberWithCommas(parseFloat(datum.value).toFixed(2) * 100)}%`}\n                                                                data={[{ key: \"White\", 'value': data_deaths['13'][\"whiteC_P\"] || 0, 'colors': '3' },\n                                                                { key: \"Black\", 'value': data_deaths['13'][\"blackC_P\"] || 0, 'colors': '3' },\n                                                                { key: \"Hispanic\", 'value': data_deaths['13'][\"hispanicC_P\"] || 0, 'colors': '3' },\n                                                                { key: \"Other\", 'value': data_deaths['13'][\"otherNHC_P\"] || 0, 'colors': '3' }]}\n                                                                labelComponent={<VictoryTooltip\n                                                                    orientation=\"top\"\n                                                                    style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'black' }}\n                                                                    constrainToVisibleArea\n                                                                    labelComponent={<VictoryLabel dx={-60} textAnchor='start' />}\n                                                                    flyoutStyle={{ fill: colors['1'], fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\n                                                                />}\n                                                                style={{\n                                                                    data: {\n                                                                        fill: ({ datum }) => colors[datum.colors],\n                                                                        fillOpacity: 2\n                                                                    }\n                                                                }}\n                                                                x=\"key\"\n                                                                y=\"value\"\n                                                            />\n                                                            <VictoryBar\n                                                                alignment=\"start\"\n                                                                barWidth={20}\n                                                                data={[{ key: \"White\", 'value': data_deaths['13'][\"whiteP\"] || 0, 'colors': '2' },\n                                                                { key: \"Black\", 'value': data_deaths['13'][\"blackP\"] || 0, 'colors': '2' },\n                                                                { key: \"Hispanic\", 'value': data_deaths['13'][\"hispanicP\"] || 0, 'colors': '2' },\n                                                                { key: \"Other\", 'value': data_deaths['13'][\"otherNHP\"] || 0, 'colors': '2' }]}\n                                                                labels={({ datum }) =>\n                                                                    `Percentage of Population: ${numberWithCommas(parseFloat(datum.value).toFixed(2) * 100)}%`\n                                                                }\n                                                                labelComponent={<VictoryTooltip\n                                                                    orientation=\"top\"\n                                                                    style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'black' }}\n                                                                    constrainToVisibleArea\n                                                                    // labelComponent={<VictoryLabel dx={-50} textAnchor='start' />}\n                                                                    flyoutStyle={{ fill: \"grey\", fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\n                                                                />}\n                                                                style={{\n                                                                    data: {\n                                                                        fill: ({ datum }) => colors[datum.colors],\n                                                                        fillOpacity: 0.7\n                                                                    }\n                                                                }}\n                                                                x=\"key\"\n                                                                y=\"value\"\n                                                            />\n                                                        </VictoryGroup>\n                                                    </VictoryChart>\n\n\n                                                </Grid.Column>\n                                            </Grid.Row>\n                                        </Grid>\n                                        <Grid style={{ width: \"100%\", height: \"100%\", paddingBottom: '3em' }}>\n                                            <Grid.Row columns={2} style={{ paddingBottom: 7 }}>\n                                                <Grid.Column>\n                                                    <Header as='h2' style={{ fontSize: \"14pt\", lineHeight: \"16pt\", width: 450, paddingLeft: 132 }}>\n                                                        <Header.Subheader style={{ fontFamily: 'lato', fontSize: 18, color: '#414042', lineHeight: \"16pt\", width: 450, textAlign: 'left' }}>\n                                                            This chart shows the percentage of cases and percentage of the population by race and ethnicity for <b>Georgia</b>. The chart excludes data from {datades_cases['13']['race_3Pmiss'].toFixed(2)}% of confirmed cases who were missing information on race/ethnicity. <b>Data Updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' :\n                                                                (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}</b>\n\n                                                        </Header.Subheader>\n                                                    </Header>\n                                                </Grid.Column>\n                                                <Grid.Column>\n                                                    <Header as='h2' style={{ fontWeight: 400, width: 450, paddingLeft: 38 }}>\n                                                        <Header.Subheader style={{ fontFamily: 'lato', fontSize: 18, color: '#414042', lineHeight: \"16pt\", width: 450, textAlign: 'left' }}>\n                                                            This chart shows the percentage of deaths and percentage of the population by race and ethnicity for <b>Georgia</b>. The chart excludes data from {datades_deaths['13']['race_3Pmiss'].toFixed(2)}% of confirmed deaths who were missing information on race/ethnicity. <b>Data Updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' :\n                                                                (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}</b>\n                                                        </Header.Subheader>\n                                                    </Header>\n                                                </Grid.Column>\n                                            </Grid.Row>\n                                        </Grid>\n\n\n                                        {/* Charactor */}\n                                        {/* <center> <Waypoint\n                                            onEnter={() => {\n                                                setActiveCharacter('COVID-19 by County Characteristics')\n                                                console.log(activeCharacter)\n                                            }}>\n                                        </Waypoint> </center> */}\n                                        <Grid id='chara' style={{ paddingBottom: '2em' }}>\n                                            <Grid.Row>\n                                                <div id='chara' style={sectionStyle2}>\n                                                    <Header as='h2' style={{ textAlign: 'center', color: 'black', fontSize: \"22pt\", paddingTop: '1em', paddingBottom: '1em' }}>\n                                                        <Header.Content>\n                                                            COVID-19 by County Characteristics\n                                    </Header.Content>\n                                                    </Header>\n                                                </div>\n                                            </Grid.Row>\n                                            <Header as='h2' style={{ textAlign: 'center', color: 'black', fontSize: \"18pt\", paddingTop: 0 }}>\n\n                                                <Header.Subheader style={{ color: '#000000', textAlign: 'left', fontSize: \"16pt\", paddingTop: 16, paddingBottom: 10, paddingLeft: 0, paddingRight: 0 }}>\n                                                    {/* <center> <b style={{ fontSize: \"18pt\" }}>COVID-19 cases per 100,000 across the population characteristics of all the counties in the United States </b> </center> */}\n                                                        COVID-19 affects communities very differently. Underlying medical conditions;\n                                                        racial, gender, and age demographics; income levels; and population density are\n                                                        all contributing factors that determine the rate of COVID-19 in different counties.\n                                                        Some of the many county characteristics that may have a large impact on disparate rates\n                                                        of infection are displayed below, with counties divided into quintiles based on each characteristic,\n                                                        unless otherwise noted.\n                                                        </Header.Subheader>\n                                            </Header>\n                                        </Grid>\n                            \n                                                               \n\n                                        {/* cvi */}\n                                        {/* <center> <Waypoint\n                                            onEnter={() => {\n                                                setActiveCharacter('Community Vulnerability Index')\n                                                console.log(activeCharacter)\n                                            }}\n                                            onLeave={() => {\n                                                setActiveCharacter('Community Vulnerability Index')\n                                            }}>\n                                        </Waypoint> </center> */}\n                                        <Grid id=\"cvi\" >\n                                            <Grid.Row>\n                                            <div id='cvi' style={sectionStyle2}>\n                                            <Header as='h2' style={{ textAlign: 'center', color: 'black', fontSize: \"19pt\", paddingTop: '1em', paddingBottom: '1em' }}>\n                                                    <Header.Content>COVID-19 by Community Vulnerability Index</Header.Content>\n                                                </Header>\n                                                </div>\n                                            </Grid.Row>\n                                            <Header as='h2' style={{ textAlign: 'center', color: 'black', fontSize: \"18pt\", paddingTop: 10 }}>\n                                                <Header.Subheader style={{ color: '#000000', textAlign: 'left', fontSize: \"16pt\", paddingTop: 16, paddingBottom: 28, paddingLeft: 0, paddingRight: 0 }}>\n                                                The COVID-19 Community Vulnerability Index measures the expected negative impact that a community may face in the context of the COVID-19 epidemic. \n                                                Identifying counties at risk for worse COVID-19 health outcomes can help inform politics and distribution of resources. The COVID-19 Community Vulnerability \n                                                Index (CCVI) was created by Surgo Foundation. CCVI incorporates 34 county characteristics, with six core themes: socioeconomic status, household composition \n                                                and disability, minority status and language, housing type and transportation, epidemiologic factors, healthcare system factors. More information about the \n                                                COVID-19 Community Vulnerability Index can be found <a href=\"https://precisionforcovid.org/ccvi\">here</a>.\n\n<br />\n                                                    <br />\n\n                                                </Header.Subheader>\n                                            </Header>\n                                            <Grid.Column width={7} style={{ paddingLeft: \"2\", paddingLeft: \"1\" }}>\n                                                <Grid.Row style={{ paddingTop: \"0\" }}>\n                                                    <Header as='h2' style={{ fontWeight: 600, fontSize: \"16pt\", lineHeight: \"16pt\" }}>\n                                                        <Header.Content>\n                                                            Georgia Community Vulnerability Index Map\n                                        </Header.Content>\n                                                    </Header>\n                                                </Grid.Row>\n                                                <Grid.Row data-tip='cvi' data-for='cvi' style={{ paddingTop: \"0\", paddingBottom: '1em' }}>\n                                                    <svg width=\"320\" height=\"80\">\n                                                        {_.map(colorPalette2, (color, i) => {\n                                                            return <rect key={i} x={110 + 20 * i} y={40} width=\"20\" height=\"20\" style={{ fill: color, strokeWidth: 1, stroke: color }} />\n                                                        })}\n                                                        <text x={20} y={50} style={{ fontSize: '0.8em' }}>Least vulnerable</text>\n                                                        <text x={20} y={59} style={{ fontSize: '0.8em' }}>counties</text>\n                                                        <text x={140 + 20 * (colorPalette2.length - 1)} y={50} style={{ fontSize: '0.8em' }}>Highest vulnerable</text>\n                                                        <text x={140 + 20 * (colorPalette2.length - 1)} y={59} style={{ fontSize: '0.8em' }}>counties</text>\n\n                                                    </svg>\n                                                    <ComposableMap projection=\"geoAlbersUsa\"\n                                                        projectionConfig={{ scale: `${config.scale1}` }}\n                                                        width={600}\n                                                        height={600}\n                                                        data-tip=\"\"\n                                                        offsetX={config.offsetX1}\n                                                        offsetY={config.offsetY2}>\n                                                        <Geographies geography={config.url}>\n                                                            {({ geographies }) => geographies.map(geo =>\n                                                                <Geography\n                                                                    key={geo.rsmKey}\n                                                                    geography={geo}\n\n                                                                    style={{\n                                                                        default: {\n                                                                            //  fill: \"#ECEFF1\",\n                                                                            stroke: \"#607D8B\",\n                                                                            strokeWidth: 0.95,\n                                                                            outline: \"none\",\n                                                                        },\n                                                                        pressed: {\n                                                                            outline: \"none\",\n                                                                        }\n                                                                    }}\n                                                                    onMouseEnter={() => {\n\n                                                                        setCountyFipscvi(geo.properties.COUNTYFP);\n                                                                        setCountyNamecvi(fips2county[stateFips + geo.properties.COUNTYFP]);\n                                                                        setTooltipContentcvi(fips2county[stateFips + geo.properties.COUNTYFP] + \"'s CCVI: \" + dataUs[stateFips + geo.properties.COUNTYFP]['cvi'].toFixed(2));\n\n                                                                    }}\n                                                                    onMouseLeave={() => {\n                                                                        setTooltipContent(\"\")\n                                                                    }}\n                                                                    fill={countyFipscvi === geo.properties.COUNTYFP ? countyColor :\n                                                                        ((colorCVI && dataUs[stateFips + geo.properties.COUNTYFP] &&\n                                                                            dataUs[stateFips + geo.properties.COUNTYFP]['cvi'] && dataUs[stateFips + geo.properties.COUNTYFP]['cvi'] > 0) ?\n                                                                            colorCVI[dataUs[stateFips + geo.properties.COUNTYFP]['cvi']] :\n                                                                            (colorCVI && dataUs[stateFips + geo.properties.COUNTYFP] && dataUs[stateFips + geo.properties.COUNTYFP]['cvi'] === 0) ? '#e1dce2' : '#FFFFFF')}\n                                                                />\n                                                            )}\n                                                        </Geographies>\n                                                    </ComposableMap>\n                                                </Grid.Row>\n                                                <Grid.Row style={{ paddingTop: '1.5em', paddingLeft: '0em', paddingRight: '2em' }} centered>\n                                                    <small style={{ fontFamily: 'lato', fontSize: 18, color: '#414042' }} align=\"justify\">\n                                                        This map shows each Georgia county according to its Community Vulnerability ranking.\n                                                        County rankings are based on CCVI quintile, which ranks each county in one of five\n                                                        groups depending on CCVI score.\n                                            </small>\n                                                </Grid.Row>\n                                            </Grid.Column>\n                                            <Grid.Column width={9} style={{ paddingLeft: \"2\", paddingLeft: \"1\" }}>\n                                                <Grid.Row columns={1}>\n                                                    <Grid.Column style={{ paddingTop: 0, paddingBottom: 3 }}>\n                                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"16pt\", lineHeight: \"16pt\" }}>\n                                                            <Header.Content>\n                                                                COVID-19 Case Rate by Community Vulnerability Index\n                                                </Header.Content>\n                                                        </Header>\n                                                        <VictoryChart\n                                                            theme={VictoryTheme.material}\n                                                            width={730}\n                                                            height={270}\n                                                            domainPadding={20}\n                                                            minDomain={{ y: props.ylog ? 1 : 0 }}\n                                                            padding={{ left: 200, right: 50, top: 10, bottom: 35 }}\n                                                            style={{ fontSize: \"14pt\" }}\n                                                            containerComponent={<VictoryContainer responsive={false} />}\n                                                        >\n                                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\n                                                            <VictoryAxis dependentAxis\n                                                                label='COVID-19 Cases per 100,000 Residents'\n                                                                style={{\n                                                                    ticks: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, axisLabel: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' },\n                                                                    labels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' }, tickLabels: { fontSize: \"0px\", fill: '#000000', padding: 10, fontFamily: 'lato' }\n                                                                }} />\n                                                            <VictoryBar\n                                                                horizontal\n                                                                barRatio={0.75}\n                                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(0))}\n                                                                data={[\n                                                                    { key: \"Least vulnerable\\n counties\", 'value': (data_index['cvi_index'][\"low20\"]['casesdailymean7R'] / data_index['cvi_index'][\"low20\"]['casesdailymean7R']) * data_index['cvi_index'][\"low20\"]['casesdailymean7R'] || 0, 'ez': data_index['cvi_index'][\"low20\"]['county_list'] },\n                                                                    { key: \"Q2\", 'value': (data_index['cvi_index'][\"Q2\"]['casesdailymean7R'] / data_index['cvi_index'][\"Q2\"]['casesdailymean7R']) * data_index['cvi_index'][\"Q2\"]['casesdailymean7R'] || 0, 'ez': data_index['cvi_index'][\"Q2\"]['county_list'] },\n                                                                    { key: \"Q3\", 'value': (data_index['cvi_index'][\"Q3\"]['casesdailymean7R'] / data_index['cvi_index'][\"Q3\"]['casesdailymean7R']) * data_index['cvi_index'][\"Q3\"]['casesdailymean7R'] || 0, 'ez': data_index['cvi_index'][\"Q3\"]['county_list'] },\n                                                                    { key: \"Q4\", 'value': (data_index['cvi_index'][\"Q4\"]['casesdailymean7R'] / data_index['cvi_index'][\"Q4\"]['casesdailymean7R']) * data_index['cvi_index'][\"Q4\"]['casesdailymean7R'] || 0, 'ez': data_index['cvi_index'][\"Q4\"]['county_list'] },\n                                                                    { key: \"Most vulnerable\\n counties\", 'value': (data_index['cvi_index'][\"high20\"]['casesdailymean7R'] / data_index['cvi_index'][\"high20\"]['casesdailymean7R']) * data_index['cvi_index'][\"high20\"]['casesdailymean7R'] || 0, 'ez': data_index['cvi_index'][\"high20\"]['county_list'] }\n                                                                ]}\n                                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"20px\", fill: \"#000000\" }} />}\n                                                                style={{\n                                                                    data: {\n                                                                        fill: ({ datum }) => datum.ez.includes(countyFipscvi) ? countyColor : casesColor[1]\n                                                                    }\n                                                                }}\n                                                                // style={{\n                                                                //     data: {\n                                                                //         fill: casesColor[1]\n                                                                //     }\n                                                                // }}\n                                                                x=\"key\"\n                                                                y=\"value\"\n                                                            />\n                                                        </VictoryChart>\n                                                    </Grid.Column>\n                                                </Grid.Row>\n                                                <Grid.Row style={{ paddingTop: '0.1em', paddingLeft: '2.9em', paddingRight: '0.1em' }} centered>\n                                                    <small style={{ fontFamily: 'lato', fontSize: 18, color: '#414042' }} align=\"justify\">\n                                                        This chart shows the number of COVID-19 cases per 100,000 residents as of {dataTS[stateFips + countyFips][0].todaydate === 'n/a' ? 'N/A' :\n                                                            (new Date(dataTS[stateFips + countyFips][0].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))} by CCVI ranking.\n                                                    Counties in the highest 20% are the most vulnerable. The y-axis displays CCVI rankings based on quintiles (groups of 20%). The x-axis displays the average number\n                                                    of COVID-19 cases per 100,000 that occurred in each group of counties ranked by CCVI.\n                        </small>\n                                                </Grid.Row>\n                                                <Grid.Row columns={1}>\n                                                    <Grid.Column style={{ paddingTop: 15, paddingBottom: 3 }}>\n                                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"16pt\", lineHeight: \"16pt\", paddingLeft: \"1em\" }}>\n                                                            <Header.Content>\n                                                                COVID-19 Death Rate by Community Vulnerability Index\n                                            </Header.Content>\n                                                        </Header>\n                                                        <VictoryChart\n                                                            theme={VictoryTheme.material}\n                                                            width={730}\n                                                            height={270}\n                                                            domainPadding={20}\n                                                            minDomain={{ y: props.ylog ? 1 : 0 }}\n                                                            padding={{ left: 200, right: 60, top: 10, bottom: 35 }}\n                                                            style={{ fontSize: \"14pt\" }}\n                                                            containerComponent={<VictoryContainer responsive={false} />}\n                                                        >\n                                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\n                                                            <VictoryAxis dependentAxis\n                                                                label='COVID-19 Deaths per 100,000 Residents'\n                                                                style={{\n                                                                    ticks: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, axisLabel: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' },\n                                                                    labels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' }, tickLabels: { fontSize: \"0px\", fill: '#000000', padding: 10, fontFamily: 'lato' }\n                                                                }} />\n                                                            <VictoryBar\n                                                                horizontal\n                                                                barRatio={0.75}\n                                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(2))}\n                                                                data={[\n                                                                    { key: \"Least vulnerable\\n counties\", 'value': data_index['cvi_index'][\"low20\"]['deathsdailymean7R'] || 0, 'ez': data_index['cvi_index'][\"low20\"]['county_list'] },\n                                                                    { key: \"Q2\", 'value': data_index['cvi_index'][\"Q2\"]['deathsdailymean7R'] || 0, 'ez': data_index['cvi_index'][\"Q2\"]['county_list'] },\n                                                                    { key: \"Q3\", 'value': data_index['cvi_index'][\"Q3\"]['deathsdailymean7R'] || 0, 'ez': data_index['cvi_index'][\"Q3\"]['county_list'] },\n                                                                    { key: \"Q4\", 'value': data_index['cvi_index'][\"Q4\"]['deathsdailymean7R'] || 0, 'ez': data_index['cvi_index'][\"Q4\"]['county_list'] },\n                                                                    { key: \"Most vulnerable\\n counties\", 'value': data_index['cvi_index'][\"high20\"]['deathsdailymean7R'] || 0, 'ez': data_index['cvi_index'][\"high20\"]['county_list'] }\n                                                                ]}\n                                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"20px\", fill: \"#000000\" }} />}\n                                                                style={{\n                                                                    data: {\n                                                                        fill: ({ datum }) => datum.ez.includes(countyFipscvi) ? countyColor : mortalityColor[1]\n                                                                    }\n                                                                }}\n                                                                x=\"key\"\n                                                                y=\"value\"\n                                                            />\n                                                        </VictoryChart>\n\n                                                    </Grid.Column>\n                                                </Grid.Row>\n                                                <Grid.Row style={{ paddingTop: '0.1em', paddingLeft: '2.9em', paddingRight: '0.1em' }} centered>\n                                                    <small style={{ fontFamily: 'lato', fontSize: 18, color: '#414042' }} align=\"justify\">\n                                                        This chart shows the number of COVID-19 deaths per 100,000 residents as of {dataTS[stateFips + countyFips][0].todaydate === 'n/a' ? 'N/A' :\n                                                            (new Date(dataTS[stateFips + countyFips][0].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))} by CCVI ranking.\n                                                    The y-axis displays CCVI rankings based on quintiles (groups of 20%). The x-axis displays the average number of COVID-19 deaths per 100,000 that occurred in each\n                                                    group of counties ranked by CCVI.\n                        </small>\n                                                </Grid.Row>\n                                            </Grid.Column>\n\n                                        </Grid>\n\n                                        {/* SI */}\n                                        {/* <center> <Waypoint\n                                            onEnter={() => {\n                                                setActiveCharacter('Residential Segregation Index')\n                                                console.log(activeCharacter)\n                                            }}>\n                                        </Waypoint> </center> */}\n                                        <Grid id='si' >\n                                            <Grid.Row>\n                                                <div id='si' style={sectionStyle2}>\n                                                <Header as='h2' style={{ textAlign: 'center', color: 'black', fontSize: \"19pt\", paddingTop: '1em', paddingBottom: '1em' }}>\n                                                        <Header.Content>\n                                                            COVID-19 by Residential Segregation Index\n                                    </Header.Content>\n                                                    </Header>\n                                                </div>\n                                                {/* <div style={sectionStyle2}>\n                                                <Header as='h2' textAlign='center' style={{ color: 'black', fontSize: \"22pt\", paddingTop: '3em', paddingBottom:'3em'}}>\n                                                    <Header.Content></Header.Content>\n                                                </Header>\n                                                </div> */}\n                                            </Grid.Row>\n\n                                            <Header as='h2' style={{ textAlign: 'center', color: 'black', fontSize: \"18pt\", paddingTop: 0 }}>\n\n                                                <Header.Subheader style={{ fontFamily: 'lato', color: '#000000', textAlign: 'left', fontSize: \"16pt\", paddingTop: 0, paddingBottom: 28, paddingLeft: 0, paddingRight: 0 }}>\n\n                                                    Racial residential segregation refers to the phenomenon of racial and ethnic groups living in separate neighborhoods. Residing in separate neighborhoods leads to the experience\n                                                    of differing living conditions across racial and ethnic groups. In the United States, African American/Black populations in particular have been forced into living in areas with\n                                                    worse housing quality, educational opportunities, and employment prospects through various policies that have promoted residential segregation. The Residential Segregation Index\n                                                    is a measure of the degree to which black and white Americans reside in separate neighborhoods, with 100 indicating total separation and 0 indicating total integration.\n                                <br></br>\n                                In the figures below, we show the case and death rates of COVID-19 across Georgia counties with different levels of residential segregation index.\n\n                <br />\n                                                    <br />\n\n                                                </Header.Subheader>\n                                            </Header>\n                                            <Grid.Column width={7} style={{ paddingLeft: \"2\", paddingLeft: \"1\" }}>\n\n                                                <Grid.Row data-tip='si' data-for='si' style={{ paddingLeft: \"2\", paddingLeft: \"1\", paddingBottom: '1.5em' }}>\n                                                    <Header as='h2' style={{ fontWeight: 600, fontSize: \"16pt\", lineHeight: \"16pt\" }}>\n                                                        <Header.Content>\n                                                            Georgia Residential Segregation Index Map\n                                        </Header.Content>\n                                                    </Header>\n                                                    <svg width=\"500\" height=\"80\">\n                                                        {_.map(colorPalette2, (color, i) => {\n                                                            return <rect key={i} x={110 + 20 * i} y={40} width=\"20\" height=\"20\" style={{ fill: color, strokeWidth: 1, stroke: color }} />\n                                                        })}\n                                                        <text x={20} y={50} style={{ fontSize: '0.8em' }}>Least residential</text>\n                                                        <text x={20} y={59} style={{ fontSize: '0.8em' }}>segregation</text>\n                                                        <text x={140 + 20 * (colorPalette2.length - 1)} y={50} style={{ fontSize: '0.8em' }}>Highest residential</text>\n                                                        <text x={140 + 20 * (colorPalette2.length - 1)} y={59} style={{ fontSize: '0.8em' }}>segregation</text>\n                                                        <rect x={140 + 20 * (colorPalette2.length - 1) + 100} y={40} width=\"25\" height=\"20\" style={{ fill: \"#FFFFFF\", strokeWidth: 0.5, stroke: \"#000000\" }} />\n                                                        <text x={140 + 20 * (colorPalette2.length - 1) + 130} y={52} style={{ fontSize: '0.7em' }}> N/A </text>\n\n                                                    </svg>\n                                                    <ComposableMap projection=\"geoAlbersUsa\"\n                                                        projectionConfig={{ scale: `${config.scale1}` }}\n                                                        width={600}\n                                                        height={600}\n                                                        data-tip=\"\"\n                                                        offsetX={config.offsetX1}\n                                                        offsetY={config.offsetY2}>\n                                                        <Geographies geography={config.url}>\n                                                            {({ geographies }) => geographies.map(geo =>\n                                                                <Geography\n                                                                    key={geo.rsmKey}\n                                                                    geography={geo}\n\n                                                                    style={{\n                                                                        default: {\n                                                                            //  fill: \"#ECEFF1\",\n                                                                            stroke: \"#607D8B\",\n                                                                            strokeWidth: 0.95,\n                                                                            outline: \"none\",\n                                                                        },\n                                                                        pressed: {\n                                                                            outline: \"none\",\n                                                                        }\n                                                                    }}\n                                                                    onMouseEnter={() => {\n\n                                                                        setCountyFipssi(geo.properties.COUNTYFP);\n                                                                        setCountyNamesi(fips2county[stateFips + geo.properties.COUNTYFP]);\n                                                                        setTooltipContentsi(fips2county[stateFips + geo.properties.COUNTYFP] + \"'s SI: \" + dataUs[stateFips + geo.properties.COUNTYFP]['si'].toFixed(0));\n\n                                                                    }}\n                                                                    onMouseLeave={() => {\n                                                                        setTooltipContent(\"\")\n                                                                    }}\n                                                                    fill={countyFipssi === geo.properties.COUNTYFP ? countyColor :\n                                                                        ((colorSI && dataUs[stateFips + geo.properties.COUNTYFP] &&\n                                                                            dataUs[stateFips + geo.properties.COUNTYFP]['si'] && dataUs[stateFips + geo.properties.COUNTYFP]['si'] > 0) ?\n                                                                            colorSI[dataUs[stateFips + geo.properties.COUNTYFP]['si']] :\n                                                                            (colorScale && dataUs[stateFips + geo.properties.COUNTYFP] && dataUs[stateFips + geo.properties.COUNTYFP][metric] === 0) ? '#e1dce2' : '#FFFFFF')}\n                                                                />\n                                                            )}\n                                                        </Geographies>\n                                                    </ComposableMap>\n                                                </Grid.Row>\n                                                <Grid.Row style={{ paddingTop: 0, paddingLeft: '0em', paddingRight: '2em' }} centered>\n                                                    <small style={{ fontFamily: 'lato', fontSize: 18, color: '#414042' }} align=\"justify\">\n                                                        This map shows each Georgia county according to its residential segregation ranking.\n                                                        County rankings are based on residential segregation quintile, which ranks each county\n                                                        in one of five groups depending on residential segregation score.\n                                            </small>\n                                                </Grid.Row>\n                                            </Grid.Column>\n                                            <Grid.Column width={9} style={{ paddingLeft: \"2\", paddingLeft: \"1\" }}>\n                                                <Grid.Row columns={1}>\n                                                    <Grid.Column style={{ paddingTop: 0, paddingBottom: 3 }}>\n                                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"16pt\", lineHeight: \"16pt\" }}>\n                                                            <Header.Content>\n                                                                COVID-19 Case Rate by Residential Segregation Index\n                                                    </Header.Content>\n                                                        </Header>\n                                                        <VictoryChart\n                                                            theme={VictoryTheme.material}\n                                                            width={730}\n                                                            height={270}\n                                                            domainPadding={20}\n                                                            minDomain={{ y: props.ylog ? 1 : 0 }}\n                                                            padding={{ left: 220, right: 30, top: 10, bottom: 35 }}\n                                                            style={{ fontSize: \"14pt\" }}\n                                                            containerComponent={<VictoryContainer responsive={false} />}\n                                                        >\n                                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\n                                                            <VictoryAxis dependentAxis\n                                                                label='COVID-19 Cases per 100,000 Residents'\n                                                                style={{\n                                                                    ticks: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, axisLabel: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' },\n                                                                    labels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' }, tickLabels: { fontSize: \"0px\", fill: '#000000', padding: 10, fontFamily: 'lato' }\n                                                                }} />\n                                                            <VictoryBar\n                                                                horizontal\n                                                                barRatio={0.75}\n                                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(0))}\n                                                                data={[\n                                                                    {\n                                                                        key: \"Counties with lowest\\n residential segregation\", 'value':\n                                                                            data_index['s_index'][\"low20\"]['casesdailymean7R'] || 0, 'ez': data_index['s_index'][\"low20\"]['county_list']\n                                                                    },\n                                                                    { key: \"Q2\", 'value': data_index['s_index'][\"Q2\"]['casesdailymean7R'] || 0, 'ez': data_index['s_index'][\"Q2\"]['county_list'] },\n                                                                    {\n                                                                        key: \"Q3\", 'value': data_index['s_index'][\"Q3\"]['casesdailymean7R']\n                                                                            || 0, 'ez': data_index['s_index'][\"Q3\"]['county_list']\n                                                                    },\n                                                                    { key: \"Q4\", 'value': data_index['s_index'][\"Q4\"]['casesdailymean7R'] || 0, 'ez': data_index['s_index'][\"Q4\"]['county_list'] },\n                                                                    {\n                                                                        key: \"Counties with highest\\n residential segregation\",\n                                                                        'value': data_index['s_index'][\"high20\"]['casesdailymean7R'] || 0, 'ez': data_index['s_index'][\"high20\"]['county_list']\n                                                                    }\n                                                                ]}\n                                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"20px\", fill: \"#000000\" }} />}\n                                                                style={{\n                                                                    data: {\n                                                                        fill: ({ datum }) => datum.ez.includes(countyFipssi) ? countyColor : casesColor[1]\n                                                                    }\n                                                                }}\n                                                                x=\"key\"\n                                                                y=\"value\"\n                                                            />\n                                                        </VictoryChart>\n                                                    </Grid.Column>\n                                                </Grid.Row>\n                                                <Grid.Row style={{ paddingTop: '0.1em', paddingLeft: '2.9em', paddingRight: '0.1em' }} centered>\n                                                    <small style={{ fontFamily: 'lato', fontSize: 18, color: '#414042' }} align=\"justify\">\n                                                        This chart shows the number of COVID-19 cases per 100,000 residents as of {dataTS[stateFips + countyFips][0].todaydate === 'n/a' ? 'N/A' :\n                                                            (new Date(dataTS[stateFips + countyFips][0].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))} by residential segregation index.\n                                                    The y-axis displays residential segregation rankings based on quintiles (groups of 20%). The x-axis displays the average number of COVID-19 cases per 100,000 that occurred in each\n                                                    group of counties ranked by residential segregation.\n                        </small>\n                                                </Grid.Row>\n                                                <Grid.Row columns={1}>\n                                                    <Grid.Column style={{ paddingTop: 15, paddingBottom: 3 }}>\n                                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"16pt\", lineHeight: \"16pt\", paddingLeft: \"1em\" }}>\n                                                            <Header.Content>\n                                                                COVID-19 Death Rate by Residential Segregation Index\n                                                    </Header.Content>\n                                                        </Header>\n                                                        <VictoryChart\n                                                            theme={VictoryTheme.material}\n                                                            width={730}\n                                                            height={270}\n                                                            domainPadding={20}\n                                                            minDomain={{ y: props.ylog ? 1 : 0 }}\n                                                            padding={{ left: 220, right: 30, top: 10, bottom: 35 }}\n                                                            style={{ fontSize: \"14pt\" }}\n                                                            containerComponent={<VictoryContainer responsive={false} />}\n                                                        >\n                                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\n                                                            <VictoryAxis dependentAxis\n                                                                label='COVID-19 Deaths per 100,000 Residents'\n                                                                style={{\n                                                                    ticks: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, axisLabel: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' },\n                                                                    labels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' }, tickLabels: { fontSize: \"0px\", fill: '#000000', padding: 10, fontFamily: 'lato' }\n                                                                }} />\n                                                            <VictoryBar\n                                                                horizontal\n                                                                barRatio={0.75}\n                                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(2))}\n                                                                data={[\n                                                                    {\n                                                                        key: \"Counties with lowest\\n residential segregation\", 'value':\n                                                                            (data_index['s_index'][\"low20\"]['deathsdailymean7R'] / data_index['s_index'][\"Q2\"]['deathsdailymean7R'])\n                                                                            * data_index['s_index'][\"Q2\"]['deathsdailymean7R'] || 0, 'ez': data_index['s_index'][\"low20\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Q2\", 'value': (data_index['s_index'][\"Q2\"]['deathsdailymean7R']\n                                                                            / data_index['s_index'][\"Q2\"]['deathsdailymean7R']) *\n                                                                            data_index['s_index'][\"Q2\"]['deathsdailymean7R'] || 0, 'ez': data_index['s_index'][\"Q2\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Q3\", 'value': (data_index['s_index'][\"Q3\"]['deathsdailymean7R']\n                                                                            / data_index['s_index'][\"Q2\"]['deathsdailymean7R'])\n                                                                            * data_index['s_index'][\"Q2\"]['deathsdailymean7R'] || 0, 'ez': data_index['s_index'][\"Q3\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Q4\", 'value': (data_index['s_index'][\"Q4\"]['deathsdailymean7R']\n                                                                            / data_index['s_index'][\"Q2\"]['deathsdailymean7R'])\n                                                                            * data_index['s_index'][\"Q2\"]['deathsdailymean7R'] || 0, 'ez': data_index['s_index'][\"Q4\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Counties with highest\\n residential segregation\", 'value': (data_index['s_index'][\"high20\"]['deathsdailymean7R']\n                                                                            / data_index['s_index'][\"Q2\"]['deathsdailymean7R'])\n                                                                            * data_index['s_index'][\"Q2\"]['deathsdailymean7R'] || 0, 'ez': data_index['s_index'][\"high20\"]['county_list']\n                                                                    }\n                                                                ]}\n                                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"20px\", fill: \"#000000\" }} />}\n                                                                style={{\n                                                                    data: {\n                                                                        fill: ({ datum }) => datum.ez.includes(countyFipssi) ? countyColor : mortalityColor[1]\n                                                                    }\n                                                                }}\n                                                                x=\"key\"\n                                                                y=\"value\"\n                                                            />\n                                                        </VictoryChart>\n\n                                                    </Grid.Column>\n                                                </Grid.Row>\n                                                <Grid.Row style={{ paddingTop: '0.1em', paddingLeft: '2.9em', paddingRight: '0.1em' }} centered>\n                                                    <small style={{ fontFamily: 'lato', fontSize: 18, color: '#414042' }} align=\"justify\">\n                                                        This chart shows the number of COVID-19 deaths per 100,000 residents as of {dataTS[stateFips + countyFips][0].todaydate === 'n/a' ? 'N/A' :\n                                                            (new Date(dataTS[stateFips + countyFips][0].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))} by residential segregation index.\n                                                    The y-axis displays residential segregation rankings based on quintiles (groups of 20%). The x-axis displays the average number of COVID-19 deaths per 100,000 that occurred in each\n                                                    group of counties ranked by residential segregation.\n                        </small>\n                                                </Grid.Row>\n\n                                            </Grid.Column>\n                                        </Grid>\n\n                                        \n                                        {/* urbanrural */}\n                                        {/* <center> <Waypoint\n                                            onEnter={() => {\n                                                setActiveCharacter('Characteristics - Metropolitan Status')\n                                                console.log(activeCharacter)\n                                            }}>\n                                        </Waypoint> </center> */}\n                                        <Grid id=\"urbanrural\" >\n                                            <Grid.Row>\n                                            <div id='urbanrural' style={sectionStyle2}>\n                                                <Header as='h2' style={{ textAlign: 'center', color: 'black', fontSize: \"19pt\", paddingTop: '1em', paddingBottom: '1em' }}>\n                                                    <Header.Content>COVID-19 by Metropolitan Status</Header.Content>\n                                                </Header>\n                                                </div>\n                                            </Grid.Row>\n                                            <Grid.Column width={7} style={{ paddingLeft: \"2\", paddingLeft: \"1\" }}>\n                                                <Grid.Row style={{ paddingTop: \"0\" }}>\n                                                    <Header as='h2' style={{ fontWeight: 600, fontSize: \"16pt\", lineHeight: \"16pt\" }}>\n                                                        <Header.Content>\n                                                            Georgia Metropolitan Status Map\n                                        </Header.Content>\n                                                    </Header>\n                                                </Grid.Row>\n                                                <Grid.Row data-tip='urb' data-for='urb' style={{ paddingTop: \"0\", paddingBottom: '1em' }}>\n                                                    <ComposableMap projection=\"geoAlbersUsa\"\n                                                        projectionConfig={{ scale: `${config.scale1}` }}\n                                                        width={600}\n                                                        height={600}\n                                                        data-tip=\"\"\n                                                        offsetX={config.offsetX1}\n                                                        offsetY={config.offsetY2}>\n                                                        <Geographies geography={config.url}>\n                                                            {({ geographies }) => geographies.map(geo =>\n                                                                <Geography\n                                                                    key={geo.rsmKey}\n                                                                    geography={geo}\n\n                                                                    style={{\n                                                                        default: {\n                                                                            //  fill: \"#ECEFF1\",\n                                                                            stroke: \"#607D8B\",\n                                                                            strokeWidth: 0.95,\n                                                                            outline: \"none\",\n                                                                        },\n                                                                        pressed: {\n                                                                            outline: \"none\",\n                                                                        }\n                                                                    }}\n                                                                    onMouseEnter={() => {\n\n                                                                        setCountyFipsubr(geo.properties.COUNTYFP);\n                                                                        setCountyNameubr(fips2county[stateFips + geo.properties.COUNTYFP]);\n                                                                        setTooltipContentubr(fips2county[stateFips + geo.properties.COUNTYFP] + \"'s status: \" + dataCha[stateFips + geo.properties.COUNTYFP]['_013_Urbanization']);\n\n                                                                    }}\n                                                                    onMouseLeave={() => {\n                                                                        setTooltipContent(\"\")\n                                                                    }}\n                                                                    fill={countyFipsubr === geo.properties.COUNTYFP ? countyColor :\n                                                                        ((colorUbr && dataCha[stateFips + geo.properties.COUNTYFP] &&\n                                                                            dataCha[stateFips + geo.properties.COUNTYFP]['_013_Urbanization_Code'] && dataCha[stateFips + geo.properties.COUNTYFP]['_013_Urbanization_Code'] > 0) ?\n                                                                            colorUbr[dataCha[stateFips + geo.properties.COUNTYFP]['_013_Urbanization_Code']] :\n                                                                            (colorUbr && dataCha[stateFips + geo.properties.COUNTYFP] && dataCha[stateFips + geo.properties.COUNTYFP]['_013_Urbanization_Code'] === 0) ? '#e1dce2' : '#FFFFFF')}\n                                                                />\n                                                            )}\n                                                        </Geographies>\n                                                    </ComposableMap>\n                                                    <svg width=\"600\" height=\"180\">\n                                                        <rect key={0} x={50} y={40} width=\"20\" height=\"20\" style={{ fill: colorPalette[0], strokeWidth: 1, stroke: colorPalette[0] }} />\n                                                        <text x={80} y={55} style={{ fontSize: '0.8em' }}>Remote rural areas</text>\n                                                        <rect key={1} x={200} y={40} width=\"20\" height=\"20\" style={{ fill: colorPalette[1], strokeWidth: 1, stroke: colorPalette[1] }} />\n                                                        <text x={230} y={55} style={{ fontSize: '0.8em' }}>Rural areas near cities</text>\n                                                        <rect key={2} x={360} y={40} width=\"20\" height=\"20\" style={{ fill: colorPalette[2], strokeWidth: 1, stroke: colorPalette[2] }} />\n                                                        <text x={390} y={55} style={{ fontSize: '0.8em' }}>Small cities</text>\n\n                                                        <rect key={3} x={50} y={80} width=\"20\" height=\"20\" style={{ fill: colorPalette[3], strokeWidth: 1, stroke: colorPalette[3] }} />\n                                                        <text x={80} y={95} style={{ fontSize: '0.8em' }}>Small suburbs</text>\n                                                        <rect key={4} x={200} y={80} width=\"20\" height=\"20\" style={{ fill: colorPalette[4], strokeWidth: 1, stroke: colorPalette[4] }} />\n                                                        <text x={230} y={95} style={{ fontSize: '0.8em' }}>Large suburbs</text>\n                                                        <rect key={5} x={360} y={80} width=\"20\" height=\"20\" style={{ fill: colorPalette[5], strokeWidth: 1, stroke: colorPalette[5] }} />\n                                                        <text x={390} y={95} style={{ fontSize: '0.8em' }}>Inner city</text>\n                                                    </svg>\n                                                </Grid.Row>\n                                                <Grid.Row style={{ paddingTop: '2em', paddingLeft: '0em', paddingRight: '2em' }} centered>\n                                                    <small style={{ fontFamily: 'lato', fontSize: 18, color: '#414042' }} align=\"justify\">\n                                                        This map shows each Georgia county according to its metropolitan status.\n                                                        County rankings are based on metropolitan status, which ranks each county in one of six\n                                                        groups depending on population.\n                                            </small>\n                                                </Grid.Row>\n                                            </Grid.Column>\n\n                                            <Grid.Column width={9} style={{ paddingLeft: \"2\", paddingLeft: \"1\" }}>\n                                                <Grid.Row columns={1} style={{ paddingBottom: \"2\" }}>\n                                                    <Grid.Column style={{ paddingTop: 0, paddingBottom: 3 }}>\n                                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"16pt\", lineHeight: \"16pt\" }}>\n                                                            <Header.Content>\n                                                                COVID-19 Cases Rate by Urban-Rural Classification\n                                                </Header.Content>\n                                                        </Header>\n                                                        <VictoryChart\n                                                            theme={VictoryTheme.material}\n                                                            width={730}\n                                                            height={270}\n                                                            domainPadding={20}\n                                                            minDomain={{ y: props.ylog ? 1 : 0 }}\n                                                            padding={{ left: 200, right: 30, top: 10, bottom: 35 }}\n                                                            style={{ fontSize: \"14pt\" }}\n                                                            containerComponent={<VictoryContainer responsive={false} />}\n                                                        >\n                                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\n                                                            <VictoryAxis dependentAxis\n                                                                label={\"COVID-19 Cases per 100,000 Residents\"}\n                                                                style={{\n                                                                    ticks: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, axisLabel: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' },\n                                                                    labels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' }, tickLabels: { fontSize: \"0px\", fill: '#000000', padding: 10, fontFamily: 'lato' }\n                                                                }} />\n                                                            <VictoryBar\n                                                                horizontal\n                                                                barRatio={0.75}\n                                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(0))}\n                                                                data={[\n                                                                    {\n                                                                        key: \"Inner city\", 'value': data_index['urbanrural'][\"LargeCentralMetro\"]['casesdailymean7R'] || 0,\n                                                                        'ez': data_index['urbanrural'][\"LargeCentralMetro\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Large suburbs\", 'value': data_index['urbanrural'][\"LargeFringeMetro\"]['casesdailymean7R'] || 0,\n                                                                        'ez': data_index['urbanrural'][\"LargeFringeMetro\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Small suburbs\", 'value': data_index['urbanrural'][\"MediumMetro\"]['casesdailymean7R'] || 0,\n                                                                        'ez': data_index['urbanrural'][\"MediumMetro\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Small cities\", 'value': data_index['urbanrural'][\"SmallMetro\"]['casesdailymean7R'] || 0,\n                                                                        'ez': data_index['urbanrural'][\"SmallMetro\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Rural areas near\\n cities\", 'value': data_index['urbanrural'][\"Micropolitan(Nonmetro)\"]['casesdailymean7R'] || 0,\n                                                                        'ez': data_index['urbanrural'][\"Micropolitan(Nonmetro)\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Remote rural areas\", 'value': data_index['urbanrural'][\"NonCore(Nonmetro)\"]['casesdailymean7R'] || 0,\n                                                                        'ez': data_index['urbanrural'][\"NonCore(Nonmetro)\"]['county_list']\n                                                                    }\n                                                                ]}\n                                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"20px\", fill: \"#000000\" }} />}\n                                                                style={{\n                                                                    data: {\n                                                                        fill: ({ datum }) => datum.ez.includes(countyFipsubr) ? countyColor : casesColor[1]\n                                                                    }\n                                                                }}\n                                                                x=\"key\"\n                                                                y=\"value\"\n                                                            />\n                                                        </VictoryChart>\n                                                    </Grid.Column>\n                                                </Grid.Row>\n                                                <Grid.Row style={{ paddingTop: '0.1em', paddingLeft: '2.9em', paddingRight: '0.1em' }} centered>\n                                                    <small style={{ fontFamily: 'lato', fontSize: 18, color: '#414042' }} align=\"justify\">\n                                                        This chart shows the number of COVID-19 cases per 100,000 residents (x-axis) by metropolitan status (y-axis).\n                                                Inner city counties have {'>'} 1 million population or contain the entire or large part of the population of the largest principle city.\n                                                Large suburban counties have a population {'>'} 1 million, but do not qualify as inner city. Small suburban counties have a population of 250,000-999,999.\n                                                Small cities have populations {'<'} 250,000 and are near large cities. Smallest city counties have an urbanized area with population between 10,000-49,999.\n                                                Remote rural counties have populations less than 10,000 individuals. This urban-rural classification comes from the National Center for Health Statistics. <b>Data Updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' :\n                                                            (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}</b>\n\n                                                    </small>\n                                                </Grid.Row>\n                                                <Grid.Row columns={1}>\n                                                    <Grid.Column style={{ paddingTop: 15, paddingBottom: 3 }}>\n                                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"16pt\", lineHeight: \"16pt\", paddingLeft: \"1em\" }}>\n                                                            <Header.Content>\n                                                                COVID-19 Death Rate by Urban-Rural Classification\n                                            </Header.Content>\n                                                        </Header>\n                                                        <VictoryChart\n                                                            theme={VictoryTheme.material}\n                                                            width={730}\n                                                            height={270}\n                                                            domainPadding={20}\n                                                            minDomain={{ y: props.ylog ? 1 : 0 }}\n                                                            padding={{ left: 200, right: 30, top: 10, bottom: 35 }}\n                                                            style={{ fontSize: \"14pt\" }}\n                                                            containerComponent={<VictoryContainer responsive={false} />}\n                                                        >\n                                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\n                                                            <VictoryAxis dependentAxis\n                                                                label='COVID-19 Deaths per 100,000 Residents'\n                                                                style={{\n                                                                    ticks: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, axisLabel: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' },\n                                                                    labels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' }, tickLabels: { fontSize: \"0px\", fill: '#000000', padding: 10, fontFamily: 'lato' }\n                                                                }} />\n                                                            <VictoryBar\n                                                                horizontal\n                                                                barRatio={0.75}\n                                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(3))}\n                                                                data={[\n                                                                    {\n                                                                        key: \"Inner city\", 'value': data_index['urbanrural'][\"LargeCentralMetro\"]['deathsdailymean7R'] || 0,\n                                                                        'ez': data_index['urbanrural'][\"LargeCentralMetro\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Large suburbs\", 'value': data_index['urbanrural'][\"LargeFringeMetro\"]['deathsdailymean7R'] || 0,\n                                                                        'ez': data_index['urbanrural'][\"LargeFringeMetro\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Small suburbs\", 'value': data_index['urbanrural'][\"MediumMetro\"]['deathsdailymean7R'] || 0,\n                                                                        'ez': data_index['urbanrural'][\"MediumMetro\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Small cities\", 'value': data_index['urbanrural'][\"SmallMetro\"]['deathsdailymean7R'] || 0,\n                                                                        'ez': data_index['urbanrural'][\"SmallMetro\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Rural areas near\\n cities\", 'value': data_index['urbanrural'][\"Micropolitan(Nonmetro)\"]['deathsdailymean7R'] || 0,\n                                                                        'ez': data_index['urbanrural'][\"Micropolitan(Nonmetro)\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Remote rural areas\", 'value': data_index['urbanrural'][\"NonCore(Nonmetro)\"]['deathsdailymean7R'] || 0,\n                                                                        'ez': data_index['urbanrural'][\"NonCore(Nonmetro)\"]['county_list']\n                                                                    }\n                                                                ]}\n                                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"18px\", fill: \"#000000\" }} />}\n                                                                style={{\n                                                                    data: {\n                                                                        fill: ({ datum }) => datum.ez.includes(countyFipsubr) ? countyColor : mortalityColor[1]\n                                                                    }\n                                                                }}\n                                                                x=\"key\"\n                                                                y=\"value\"\n                                                            />\n                                                        </VictoryChart>\n\n                                                    </Grid.Column>\n                                                </Grid.Row>\n                                                <Grid.Row style={{ paddingTop: '0.1em', paddingLeft: '2.9em', paddingRight: '0.1em' }} centered>\n                                                    <small style={{ fontFamily: 'lato', fontSize: 18, color: '#414042' }} align=\"justify\">\n                                                        This chart shows the number of COVID-19 deaths per 100,000 residents (x-axis) by metropolitan status (y-axis).\n                                                Inner city counties have {'>'} 1 million population or contain the entire or large part of the population of the largest principle city.\n                                                Large suburban counties have a population {'>'} 1 million, but do not qualify as inner city. Small suburban counties have a population of 250,000-999,999.\n                                                Small cities have populations {'<'} 250,000 and are near large cities. Smallest city counties have an urbanized area with population between 10,000-49,999.\n                                                Remote rural counties have populations less than 10,000 individuals. This urban-rural classification comes from the National Center for Health Statistics. <b>Data Updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' :\n                                                            (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}</b>\n\n                                                    </small>\n                                                </Grid.Row>\n                                            </Grid.Column>\n                                        </Grid>\n\n                                        {/* poverty */}\n                                        {/* <center> <Waypoint\n                                            onEnter={() => {\n                                                setActiveCharacter('Characteristics - Poverty')\n                                                console.log(activeCharacter)\n                                            }}>\n                                        </Waypoint> </center> */}\n                                        <Grid id=\"poverty\" >\n                                            <Grid.Row>\n                                            <div id='poverty' style={sectionStyle2}>\n                                                <Header as='h2' style={{ textAlign: 'center', color: 'black', fontSize: \"19pt\", paddingTop: '1em', paddingBottom: '1em' }}>\n                                                    <Header.Content> COVID-19 by Percentage Population in Poverty</Header.Content>\n                                                </Header>\n                                                </div>\n                                            </Grid.Row>\n                                            <Grid.Column width={7} style={{ paddingLeft: \"2\", paddingLeft: \"1\" }}>\n                                                <Grid.Row style={{ paddingTop: \"0\" }}>\n                                                    <Header as='h2' style={{ fontWeight: 600, fontSize: \"16pt\", lineHeight: \"16pt\" }}>\n                                                        <Header.Content>\n                                                            Georgia Percentage Population in Poverty Map\n                                        </Header.Content>\n                                                    </Header>\n                                                </Grid.Row>\n                                                <Grid.Row data-tip='pov' data-for='pov' style={{ paddingTop: \"0\", paddingBottom: '1em' }}>\n                                                    <svg width=\"600\" height=\"80\">\n                                                        {_.map(colorPalette2, (color, i) => {\n                                                            return <rect key={i} x={150 + 20 * i} y={40} width=\"20\" height=\"20\" style={{ fill: color, strokeWidth: 1, stroke: color }} />\n                                                        })}\n                                                        <text x={20} y={50} style={{ fontSize: '0.8em' }}>Least poverty population </text>\n                                                        <text x={20} y={59} style={{ fontSize: '0.8em' }}> counties</text>\n                                                        <text x={180 + 20 * (colorPalette2.length - 1)} y={50} style={{ fontSize: '0.8em' }}>Highest poverty population</text>\n                                                        <text x={180 + 20 * (colorPalette2.length - 1)} y={59} style={{ fontSize: '0.8em' }}>counties</text>\n\n                                                    </svg>\n                                                    <ComposableMap projection=\"geoAlbersUsa\"\n                                                        projectionConfig={{ scale: `${config.scale1}` }}\n                                                        width={600}\n                                                        height={600}\n                                                        data-tip=\"\"\n                                                        offsetX={config.offsetX1}\n                                                        offsetY={config.offsetY2}>\n                                                        <Geographies geography={config.url}>\n                                                            {({ geographies }) => geographies.map(geo =>\n                                                                <Geography\n                                                                    key={geo.rsmKey}\n                                                                    geography={geo}\n\n                                                                    style={{\n                                                                        default: {\n                                                                            //  fill: \"#ECEFF1\",\n                                                                            stroke: \"#607D8B\",\n                                                                            strokeWidth: 0.95,\n                                                                            outline: \"none\",\n                                                                        },\n                                                                        pressed: {\n                                                                            outline: \"none\",\n                                                                        }\n                                                                    }}\n                                                                    onMouseEnter={() => {\n\n                                                                        setCountyFipspov(geo.properties.COUNTYFP);\n                                                                        setCountyNamepov(fips2county[stateFips + geo.properties.COUNTYFP]);\n                                                                        setTooltipContentpov(fips2county[stateFips + geo.properties.COUNTYFP]);\n\n                                                                    }}\n                                                                    onMouseLeave={() => {\n                                                                        setTooltipContent(\"\")\n                                                                    }}\n                                                                    fill={countyFipspov === geo.properties.COUNTYFP ? countyColor :\n                                                                        ((colorPov && dataCha[stateFips + geo.properties.COUNTYFP] &&\n                                                                            dataCha[stateFips + geo.properties.COUNTYFP]['poverty'] && dataCha[stateFips + geo.properties.COUNTYFP]['poverty'] > 0) ?\n                                                                            colorPov[dataCha[stateFips + geo.properties.COUNTYFP]['poverty']] :\n                                                                            (colorPov && dataCha[stateFips + geo.properties.COUNTYFP] && dataCha[stateFips + geo.properties.COUNTYFP]['poverty'] === 0) ? '#e1dce2' : '#FFFFFF')}\n                                                                />\n                                                            )}\n                                                        </Geographies>\n                                                    </ComposableMap>\n\n                                                </Grid.Row>\n                                                <Grid.Row style={{ paddingTop: '3em', paddingLeft: '0em', paddingRight: '2em' }} centered>\n                                                    <small style={{ fontFamily: 'lato', fontSize: 18, color: '#414042' }} align=\"justify\">\n                                                        This map shows each Georgia county according to its percentage population in poverty.\n                                                        County rankings are based on  percentage of population in poverty, which ranks each county in one of five\n                                                        groups depending on population in poverty.\n                                            </small>\n                                                </Grid.Row>\n                                            </Grid.Column>\n\n                                            <Grid.Column width={9} style={{ paddingLeft: \"2\", paddingLeft: \"1\" }}>\n                                                <Grid.Row columns={1} style={{ paddingBottom: \"2\" }}>\n                                                    <Grid.Column style={{ paddingTop: 0, paddingBottom: 3 }}>\n                                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"16pt\", lineHeight: \"16pt\" }}>\n                                                            <Header.Content>\n                                                                COVID-19 Case Rate by Percentage of Population in Poverty\n                                                </Header.Content>\n                                                        </Header>\n                                                        <VictoryChart\n                                                            theme={VictoryTheme.material}\n                                                            width={730}\n                                                            height={270}\n                                                            domainPadding={20}\n                                                            minDomain={{ y: props.ylog ? 1 : 0 }}\n                                                            padding={{ left: 305, right: 30, top: 10, bottom: 35 }}\n                                                            style={{ fontSize: \"14pt\" }}\n                                                            containerComponent={<VictoryContainer responsive={false} />}\n                                                        >\n                                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\n                                                            <VictoryAxis dependentAxis\n                                                                label={\"COVID-19 Cases per 100,000 Residents\"}\n                                                                style={{\n                                                                    ticks: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, axisLabel: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' },\n                                                                    labels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' }, tickLabels: { fontSize: \"0px\", fill: '#000000', padding: 10, fontFamily: 'lato' }\n                                                                }} />\n                                                            <VictoryBar\n                                                                horizontal\n                                                                barRatio={0.75}\n                                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(0))}\n                                                                data={[\n                                                                    {\n                                                                        key: \"Counties with lowest\\n percentage population in poverty\", 'value': data_index['poverty'][\"low20\"]['casesdailymean7R'] || 0,\n                                                                        'ez': data_index['poverty'][\"low20\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Q2\", 'value': data_index['poverty'][\"Q2\"]['casesdailymean7R'] || 0,\n                                                                        'ez': data_index['poverty'][\"Q2\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Q3\", 'value': data_index['poverty'][\"Q3\"]['casesdailymean7R'] || 0,\n                                                                        'ez': data_index['poverty'][\"Q3\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Q4\", 'value': data_index['poverty'][\"Q4\"]['casesdailymean7R'] || 0,\n                                                                        'ez': data_index['poverty'][\"Q4\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Counties with highest\\n percentage  population in poverty\", 'value': data_index['poverty'][\"high20\"]['casesdailymean7R'] || 0,\n                                                                        'ez': data_index['poverty'][\"high20\"]['county_list']\n                                                                    }\n                                                                ]}\n                                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"20px\", fill: \"#000000\" }} />}\n                                                                style={{\n                                                                    data: {\n                                                                        fill: ({ datum }) => datum.ez.includes(countyFipspov) ? countyColor : casesColor[1]\n                                                                    }\n                                                                }}\n                                                                x=\"key\"\n                                                                y=\"value\"\n                                                            />\n                                                        </VictoryChart>\n                                                    </Grid.Column>\n                                                </Grid.Row>\n                                                <Grid.Row style={{ paddingTop: '0.1em', paddingLeft: '2.9em', paddingRight: '0.1em' }} centered>\n                                                    <small style={{ fontFamily: 'lato', fontSize: 18, color: '#414042' }} align=\"justify\">\n                                                        This chart shows the number of COVID-19 cases per 100,000 residents by county ranking on percentage of population in poverty.\n                                                        The y-axis displays percentage population in poverty rankings for counties based on quintiles (groups of 20%). The x-axis displays\n                                                the average number of COVID-19 cases per 100,000 that occurred in each group of counties ranked by percentage population in poverty. <b>Data Updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' :\n                                                            (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}</b>\n\n                                                    </small>\n                                                </Grid.Row>\n                                                <Grid.Row columns={1}>\n                                                    <Grid.Column style={{ paddingTop: 15, paddingBottom: 3 }}>\n                                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"16pt\", lineHeight: \"16pt\", paddingLeft: \"1em\" }}>\n                                                            <Header.Content>\n                                                                COVID-19 Death Rate by Percentage of Population in Poverty\n                                            </Header.Content>\n                                                        </Header>\n                                                        <VictoryChart\n                                                            theme={VictoryTheme.material}\n                                                            width={730}\n                                                            height={270}\n                                                            domainPadding={20}\n                                                            minDomain={{ y: props.ylog ? 1 : 0 }}\n                                                            padding={{ left: 305, right: 30, top: 10, bottom: 35 }}\n                                                            style={{ fontSize: \"14pt\" }}\n                                                            containerComponent={<VictoryContainer responsive={false} />}\n                                                        >\n                                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\n                                                            <VictoryAxis dependentAxis\n                                                                label='COVID-19 Deaths per 100,000 Residents'\n                                                                style={{\n                                                                    ticks: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, axisLabel: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' },\n                                                                    labels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' }, tickLabels: { fontSize: \"0px\", fill: '#000000', padding: 10, fontFamily: 'lato' }\n                                                                }} />\n                                                            <VictoryBar\n                                                                horizontal\n                                                                barRatio={0.75}\n                                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(3))}\n                                                                data={[\n                                                                    {\n                                                                        key: \"Counties with lowest\\n percentage population in poverty\", 'value': data_index['poverty'][\"low20\"]['deathsdailymean7R'] || 0,\n                                                                        'ez': data_index['poverty'][\"low20\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Q2\", 'value': data_index['poverty'][\"Q2\"]['deathsdailymean7R'] || 0,\n                                                                        'ez': data_index['poverty'][\"Q2\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Q3\", 'value': data_index['poverty'][\"Q3\"]['deathsdailymean7R'] || 0,\n                                                                        'ez': data_index['poverty'][\"Q3\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Q4\", 'value': data_index['poverty'][\"Q4\"]['deathsdailymean7R'] || 0,\n                                                                        'ez': data_index['poverty'][\"Q4\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Counties with highest\\n percentage  population in poverty\", 'value': data_index['poverty'][\"high20\"]['deathsdailymean7R'] || 0,\n                                                                        'ez': data_index['poverty'][\"high20\"]['county_list']\n                                                                    }\n                                                                ]}\n                                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"18px\", fill: \"#000000\" }} />}\n                                                                style={{\n                                                                    data: {\n                                                                        fill: ({ datum }) => datum.ez.includes(countyFipspov) ? countyColor : mortalityColor[1]\n                                                                    }\n                                                                }}\n                                                                x=\"key\"\n                                                                y=\"value\"\n                                                            />\n                                                        </VictoryChart>\n\n                                                    </Grid.Column>\n                                                </Grid.Row>\n                                                <Grid.Row style={{ paddingTop: '0.1em', paddingLeft: '2.9em', paddingRight: '0.1em' }} centered>\n                                                    <small style={{ fontFamily: 'lato', fontSize: 18, color: '#414042' }} align=\"justify\">\n                                                        This chart shows the number of COVID-19 deaths per 100,000 residents by county ranking on percentage of population in poverty.\n                                                        The y-axis displays percentage population in poverty rankings for counties based on quintiles (groups of 20%). The x-axis displays\n                                                the average number of COVID-19 deaths per 100,000 that occurred in each group of counties ranked by percentage population in poverty. <b>Data Updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' :\n                                                            (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}</b>\n\n                                                    </small>\n                                                </Grid.Row>\n                                            </Grid.Column>\n                                        </Grid>\n\n                                        {/* black */}\n                                        {/* <center> <Waypoint\n                                            onEnter={() => {\n                                                setActiveCharacter('Characteristics - African American')\n                                                console.log(activeCharacter)\n                                            }}>\n                                        </Waypoint> </center> */}\n                                        <Grid id=\"black\" >\n                                            <Grid.Row>\n                                            <div id='black' style={sectionStyle2}>\n                                                <Header as='h2' style={{ textAlign: 'center', color: 'black', fontSize: \"19pt\", paddingTop: '1em', paddingBottom: '1em' }}>\n                                                    <Header.Content> COVID-19 by Percentage African American Population</Header.Content>\n                                                </Header>\n                                                </div>\n                                            </Grid.Row>\n                                            <Grid.Column width={7} style={{ paddingLeft: \"2\", paddingLeft: \"1\" }}>\n                                                <Grid.Row style={{ paddingTop: \"0\" }}>\n                                                    <Header as='h2' style={{ fontWeight: 600, fontSize: \"16pt\", lineHeight: \"16pt\" }}>\n                                                        <Header.Content>\n                                                            Georgia Percentage African American Population Map\n                                        </Header.Content>\n                                                    </Header>\n                                                </Grid.Row>\n                                                <Grid.Row data-tip='black' data-for='black' style={{ paddingTop: \"0\", paddingBottom: '1em' }}>\n                                                    <svg width=\"600\" height=\"80\">\n                                                        {_.map(colorPalette2, (color, i) => {\n                                                            return <rect key={i} x={150 + 20 * i} y={40} width=\"20\" height=\"20\" style={{ fill: color, strokeWidth: 1, stroke: color }} />\n                                                        })}\n                                                        <text x={20} y={50} style={{ fontSize: '0.8em' }}>Least African American  </text>\n                                                        <text x={20} y={61} style={{ fontSize: '0.8em' }}> population counties</text>\n                                                        <text x={180 + 20 * (colorPalette2.length - 1)} y={50} style={{ fontSize: '0.8em' }}>Highest African American </text>\n                                                        <text x={180 + 20 * (colorPalette2.length - 1)} y={61} style={{ fontSize: '0.8em' }}>population counties</text>\n\n                                                    </svg>\n                                                    <ComposableMap projection=\"geoAlbersUsa\"\n                                                        projectionConfig={{ scale: `${config.scale1}` }}\n                                                        width={600}\n                                                        height={600}\n                                                        data-tip=\"\"\n                                                        offsetX={config.offsetX1}\n                                                        offsetY={config.offsetY2}>\n                                                        <Geographies geography={config.url}>\n                                                            {({ geographies }) => geographies.map(geo =>\n                                                                <Geography\n                                                                    key={geo.rsmKey}\n                                                                    geography={geo}\n\n                                                                    style={{\n                                                                        default: {\n                                                                            //  fill: \"#ECEFF1\",\n                                                                            stroke: \"#607D8B\",\n                                                                            strokeWidth: 0.95,\n                                                                            outline: \"none\",\n                                                                        },\n                                                                        pressed: {\n                                                                            outline: \"none\",\n                                                                        }\n                                                                    }}\n                                                                    onMouseEnter={() => {\n\n                                                                        setCountyFipsblack(geo.properties.COUNTYFP);\n                                                                        setCountyNameblack(fips2county[stateFips + geo.properties.COUNTYFP]);\n                                                                        setTooltipContentblack(fips2county[stateFips + geo.properties.COUNTYFP]);\n\n                                                                    }}\n                                                                    onMouseLeave={() => {\n                                                                        setTooltipContent(\"\")\n                                                                    }}\n                                                                    fill={countyFipsblack === geo.properties.COUNTYFP ? countyColor :\n                                                                        ((colorBlack && dataCha[stateFips + geo.properties.COUNTYFP] &&\n                                                                            dataCha[stateFips + geo.properties.COUNTYFP]['black'] && dataCha[stateFips + geo.properties.COUNTYFP]['black'] > 0) ?\n                                                                            colorBlack[dataCha[stateFips + geo.properties.COUNTYFP]['black']] :\n                                                                            (colorBlack && dataCha[stateFips + geo.properties.COUNTYFP] && dataCha[stateFips + geo.properties.COUNTYFP]['black'] === 0) ? '#e1dce2' : '#FFFFFF')}\n                                                                />\n                                                            )}\n                                                        </Geographies>\n                                                    </ComposableMap>\n\n                                                </Grid.Row>\n                                                <Grid.Row style={{ paddingTop: '3em', paddingLeft: '0em', paddingRight: '2em' }} centered>\n                                                    <small style={{ fontFamily: 'lato', fontSize: 18, color: '#414042' }} align=\"justify\">\n                                                        This map shows each Georgia county according to its percentage African American population.\n                                                        County rankings are based on percentage African American population quintile, which ranks each county in one of five\n                                                        groups depending on African American population.\n                                            </small>\n                                                </Grid.Row>\n                                            </Grid.Column>\n\n                                            <Grid.Column width={9} style={{ paddingLeft: \"2\", paddingLeft: \"1\" }}>\n                                                <Grid.Row columns={1} style={{ paddingBottom: \"2\" }}>\n                                                    <Grid.Column style={{ paddingTop: 0, paddingBottom: 3 }}>\n                                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"16pt\", lineHeight: \"16pt\" }}>\n                                                            <Header.Content>\n                                                                COVID-19 Case Rate by Percentage of African American Population\n                                                </Header.Content>\n                                                        </Header>\n                                                        <VictoryChart\n                                                            theme={VictoryTheme.material}\n                                                            width={730}\n                                                            height={270}\n                                                            domainPadding={20}\n                                                            minDomain={{ y: props.ylog ? 1 : 0 }}\n                                                            padding={{ left: 305, right: 30, top: 10, bottom: 35 }}\n                                                            style={{ fontSize: \"14pt\" }}\n                                                            containerComponent={<VictoryContainer responsive={false} />}\n                                                        >\n                                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\n                                                            <VictoryAxis dependentAxis\n                                                                label={\"COVID-19 Cases per 100,000 Residents\"}\n                                                                style={{\n                                                                    ticks: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, axisLabel: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' },\n                                                                    labels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' }, tickLabels: { fontSize: \"0px\", fill: '#000000', padding: 10, fontFamily: 'lato' }\n                                                                }} />\n                                                            <VictoryBar\n                                                                horizontal\n                                                                barRatio={0.75}\n                                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(0))}\n                                                                data={[\n                                                                    {\n                                                                        key: \"Counties with lowest percentage\\n African American\", 'value': data_index['black'][\"low20\"]['casesdailymean7R'] || 0,\n                                                                        'ez': data_index['black'][\"low20\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Q2\", 'value': data_index['black'][\"Q2\"]['casesdailymean7R'] || 0,\n                                                                        'ez': data_index['black'][\"Q2\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Q3\", 'value': data_index['black'][\"Q3\"]['casesdailymean7R'] || 0,\n                                                                        'ez': data_index['black'][\"Q3\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Q4\", 'value': data_index['black'][\"Q4\"]['casesdailymean7R'] || 0,\n                                                                        'ez': data_index['black'][\"Q4\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Counties with highest percentage\\n African American\", 'value': data_index['black'][\"high20\"]['casesdailymean7R'] || 0,\n                                                                        'ez': data_index['black'][\"high20\"]['county_list']\n                                                                    }\n                                                                ]}\n                                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"20px\", fill: \"#000000\" }} />}\n                                                                style={{\n                                                                    data: {\n                                                                        fill: ({ datum }) => datum.ez.includes(countyFipsblack) ? countyColor : casesColor[1]\n                                                                    }\n                                                                }}\n                                                                x=\"key\"\n                                                                y=\"value\"\n                                                            />\n                                                        </VictoryChart>\n                                                    </Grid.Column>\n                                                </Grid.Row>\n                                                <Grid.Row style={{ paddingTop: '0.1em', paddingLeft: '2.9em', paddingRight: '0.1em' }} centered>\n                                                    <small style={{ fontFamily: 'lato', fontSize: 18, color: '#414042' }} align=\"justify\">\n                                                        This chart shows the number of COVID-19 cases per 100,000 residents by percentage African American population ranking.\n                                                        The y-axis displays percentage African American population rankings based on quintiles (groups of 20%). The x-axis displays\n                                                the average number of COVID-19 cases per 100,000 that occurred in each group of counties ranked by percentage African American. <b>Data Updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' :\n                                                            (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}</b>\n\n                                                    </small>\n                                                </Grid.Row>\n                                                <Grid.Row columns={1}>\n                                                    <Grid.Column style={{ paddingTop: 15, paddingBottom: 3 }}>\n                                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"16pt\", lineHeight: \"16pt\", paddingLeft: \"1em\" }}>\n                                                            <Header.Content>\n                                                                COVID-19 Death Rate by Percentage of African American Population\n                                            </Header.Content>\n                                                        </Header>\n                                                        <VictoryChart\n                                                            theme={VictoryTheme.material}\n                                                            width={730}\n                                                            height={270}\n                                                            domainPadding={20}\n                                                            minDomain={{ y: props.ylog ? 1 : 0 }}\n                                                            padding={{ left: 305, right: 30, top: 10, bottom: 35 }}\n                                                            style={{ fontSize: \"14pt\" }}\n                                                            containerComponent={<VictoryContainer responsive={false} />}\n                                                        >\n                                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\n                                                            <VictoryAxis dependentAxis\n                                                                label='COVID-19 Deaths per 100,000 Residents'\n                                                                style={{\n                                                                    ticks: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, axisLabel: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' },\n                                                                    labels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' }, tickLabels: { fontSize: \"0px\", fill: '#000000', padding: 10, fontFamily: 'lato' }\n                                                                }} />\n                                                            <VictoryBar\n                                                                horizontal\n                                                                barRatio={0.75}\n                                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(3))}\n                                                                data={[\n                                                                    {\n                                                                        key: \"Counties with lowest percentage\\n African American\", 'value': data_index['black'][\"low20\"]['deathsdailymean7R'] || 0,\n                                                                        'ez': data_index['black'][\"low20\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Q2\", 'value': data_index['black'][\"Q2\"]['deathsdailymean7R'] || 0,\n                                                                        'ez': data_index['black'][\"Q2\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Q3\", 'value': data_index['black'][\"Q3\"]['deathsdailymean7R'] || 0,\n                                                                        'ez': data_index['black'][\"Q3\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Q4\", 'value': data_index['black'][\"Q4\"]['deathsdailymean7R'] || 0,\n                                                                        'ez': data_index['black'][\"Q4\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Counties with highest percentage\\n African American\", 'value': data_index['black'][\"high20\"]['deathsdailymean7R'] || 0,\n                                                                        'ez': data_index['black'][\"high20\"]['county_list']\n                                                                    }\n                                                                ]}\n                                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"18px\", fill: \"#000000\" }} />}\n                                                                style={{\n                                                                    data: {\n                                                                        fill: ({ datum }) => datum.ez.includes(countyFipsblack) ? countyColor : mortalityColor[1]\n                                                                    }\n                                                                }}\n                                                                x=\"key\"\n                                                                y=\"value\"\n                                                            />\n                                                        </VictoryChart>\n\n                                                    </Grid.Column>\n                                                </Grid.Row>\n                                                <Grid.Row style={{ paddingTop: '0.1em', paddingLeft: '2.9em', paddingRight: '0.1em' }} centered>\n                                                    <small style={{ fontFamily: 'lato', fontSize: 18, color: '#414042' }} align=\"justify\">\n                                                        This chart shows the number of COVID-19 deaths per 100,000 residents by percentage African American population ranking.\n                                                        The y-axis displays percentage African American population rankings based on quintiles (groups of 20%). The x-axis displays\n                                                the average number of COVID-19 deaths per 100,000 that occurred in each group of counties ranked by percentage African American. <b>Data Updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' :\n                                                            (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}</b>\n\n                                                    </small>\n                                                </Grid.Row>\n                                            </Grid.Column>\n                                        </Grid>\n\n                                        {/* Hispanic */}\n                                        {/* <center> <Waypoint\n                                            onEnter={() => {\n                                                setActiveCharacter('Characteristics - Hispanic')\n                                                console.log(activeCharacter)\n                                            }}>\n                                        </Waypoint> </center> */}\n                                        <Grid id=\"hispanic\" >\n                                            <Grid.Row>\n                                            <div id='hispanic' style={sectionStyle2}>\n                                                <Header as='h2' style={{ textAlign: 'center', color: 'black', fontSize: \"19pt\", paddingTop: '1em', paddingBottom: '1em' }}>\n                                                    <Header.Content> COVID-19 by Percentage Hispanic Population</Header.Content>\n                                                </Header>\n                                                </div>\n                                            </Grid.Row>\n                                            <Grid.Column width={7} style={{ paddingLeft: \"2\", paddingLeft: \"1\" }}>\n                                                <Grid.Row style={{ paddingTop: \"0\" }}>\n                                                    <Header as='h2' style={{ fontWeight: 600, fontSize: \"16pt\", lineHeight: \"16pt\" }}>\n                                                        <Header.Content>\n                                                            Georgia Percentage Hispanic Population Map\n                                        </Header.Content>\n                                                    </Header>\n                                                </Grid.Row>\n                                                <Grid.Row data-tip='his' data-for='his' style={{ paddingTop: \"0\", paddingBottom: '1em' }}>\n                                                    <svg width=\"600\" height=\"80\">\n                                                        {_.map(colorPalette2, (color, i) => {\n                                                            return <rect key={i} x={150 + 20 * i} y={40} width=\"20\" height=\"20\" style={{ fill: color, strokeWidth: 1, stroke: color }} />\n                                                        })}\n                                                        <text x={40} y={50} style={{ fontSize: '0.8em' }}>Least Hispanic  </text>\n                                                        <text x={40} y={61} style={{ fontSize: '0.8em' }}> population counties</text>\n                                                        <text x={180 + 20 * (colorPalette2.length - 1)} y={50} style={{ fontSize: '0.8em' }}>Highest Hispanic </text>\n                                                        <text x={180 + 20 * (colorPalette2.length - 1)} y={61} style={{ fontSize: '0.8em' }}>population counties</text>\n\n                                                    </svg>\n                                                    <ComposableMap projection=\"geoAlbersUsa\"\n                                                        projectionConfig={{ scale: `${config.scale1}` }}\n                                                        width={600}\n                                                        height={600}\n                                                        data-tip=\"\"\n                                                        offsetX={config.offsetX1}\n                                                        offsetY={config.offsetY2}>\n                                                        <Geographies geography={config.url}>\n                                                            {({ geographies }) => geographies.map(geo =>\n                                                                <Geography\n                                                                    key={geo.rsmKey}\n                                                                    geography={geo}\n\n                                                                    style={{\n                                                                        default: {\n                                                                            //  fill: \"#ECEFF1\",\n                                                                            stroke: \"#607D8B\",\n                                                                            strokeWidth: 0.95,\n                                                                            outline: \"none\",\n                                                                        },\n                                                                        pressed: {\n                                                                            outline: \"none\",\n                                                                        }\n                                                                    }}\n                                                                    onMouseEnter={() => {\n\n                                                                        setCountyFipshis(geo.properties.COUNTYFP);\n                                                                        setCountyNamehis(fips2county[stateFips + geo.properties.COUNTYFP]);\n                                                                        setTooltipContenthis(fips2county[stateFips + geo.properties.COUNTYFP]);\n\n                                                                    }}\n                                                                    onMouseLeave={() => {\n                                                                        setTooltipContent(\"\")\n                                                                    }}\n                                                                    fill={countyFipshis === geo.properties.COUNTYFP ? countyColor :\n                                                                        ((colorHis && data_cases[stateFips + geo.properties.COUNTYFP] &&\n                                                                            data_cases[stateFips + geo.properties.COUNTYFP]['hispanicP'] && data_cases[stateFips + geo.properties.COUNTYFP]['hispanicP'] > 0) ?\n                                                                            colorHis[data_cases[stateFips + geo.properties.COUNTYFP]['hispanicP']] :\n                                                                            (colorHis && data_cases[stateFips + geo.properties.COUNTYFP] && data_cases[stateFips + geo.properties.COUNTYFP]['hispanicP'] === 0) ? '#e1dce2' : '#FFFFFF')}\n                                                                />\n                                                            )}\n                                                        </Geographies>\n                                                    </ComposableMap>\n\n                                                </Grid.Row>\n                                                <Grid.Row style={{ paddingTop: '1.5em', paddingLeft: '0em', paddingRight: '2em' }} centered>\n                                                    <small style={{ fontFamily: 'lato', fontSize: 18, color: '#414042' }} align=\"justify\">\n                                                        This map shows each Georgia county according to its percentage Hispanic population.\n                                                        County rankings are based on percentage Hispanic population quintile, which ranks each county in one of five\n                                                        groups depending on Hispanic population.\n                                            </small>\n                                                </Grid.Row>\n                                            </Grid.Column>\n\n                                            <Grid.Column width={9} style={{ paddingLeft: \"2\", paddingLeft: \"1\" }}>\n                                                <Grid.Row columns={1} style={{ paddingBottom: \"2\" }}>\n                                                    <Grid.Column style={{ paddingTop: 0, paddingBottom: 3 }}>\n                                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"16pt\", lineHeight: \"16pt\" }}>\n                                                            <Header.Content>\n                                                                COVID-19 Case Rate by Percentage of African American Population\n                                                </Header.Content>\n                                                        </Header>\n                                                        <VictoryChart\n                                                            theme={VictoryTheme.material}\n                                                            width={730}\n                                                            height={270}\n                                                            domainPadding={20}\n                                                            minDomain={{ y: props.ylog ? 1 : 0 }}\n                                                            padding={{ left: 305, right: 30, top: 10, bottom: 35 }}\n                                                            style={{ fontSize: \"14pt\" }}\n                                                            containerComponent={<VictoryContainer responsive={false} />}\n                                                        >\n                                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\n                                                            <VictoryAxis dependentAxis\n                                                                label={\"COVID-19 Cases per 100,000 Residents\"}\n                                                                style={{\n                                                                    ticks: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, axisLabel: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' },\n                                                                    labels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' }, tickLabels: { fontSize: \"0px\", fill: '#000000', padding: 10, fontFamily: 'lato' }\n                                                                }} />\n                                                            <VictoryBar\n                                                                horizontal\n                                                                barRatio={0.75}\n                                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(0))}\n                                                                data={[\n                                                                    {\n                                                                        key: \"Counties with lowest\\n percentage Hispanic\", 'value': data_index['hispanic'][\"low20\"]['casesdailymean7R'] || 0,\n                                                                        'ez': data_index['hispanic'][\"low20\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Q2\", 'value': data_index['hispanic'][\"Q2\"]['casesdailymean7R'] || 0,\n                                                                        'ez': data_index['hispanic'][\"Q2\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Q3\", 'value': data_index['hispanic'][\"Q3\"]['casesdailymean7R'] || 0,\n                                                                        'ez': data_index['hispanic'][\"Q3\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Q4\", 'value': data_index['hispanic'][\"Q4\"]['casesdailymean7R'] || 0,\n                                                                        'ez': data_index['hispanic'][\"Q4\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Counties with highest\\n percentage Hispanic\", 'value': data_index['hispanic'][\"high20\"]['casesdailymean7R'] || 0,\n                                                                        'ez': data_index['hispanic'][\"high20\"]['county_list']\n                                                                    }\n                                                                ]}\n                                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"20px\", fill: \"#000000\" }} />}\n                                                                style={{\n                                                                    data: {\n                                                                        fill: ({ datum }) => datum.ez.includes(countyFipshis) ? countyColor : casesColor[1]\n                                                                    }\n                                                                }}\n                                                                x=\"key\"\n                                                                y=\"value\"\n                                                            />\n                                                        </VictoryChart>\n                                                    </Grid.Column>\n                                                </Grid.Row>\n                                                <Grid.Row style={{ paddingTop: '0.1em', paddingLeft: '2.9em', paddingRight: '0.1em' }} centered>\n                                                    <small style={{ fontFamily: 'lato', fontSize: 18, color: '#414042' }} align=\"justify\">\n                                                        This chart shows the number of COVID-19 cases per 100,000 residents by percentage Hispanic population ranking. The y-axis displays percentage\n                                                        Hispanic population rankings based on quintiles (groups of 20%). The x-axis displays the average number of COVID-19 cases per 100,000 that occurred\n                                                in each group of counties ranked by percentage Hispanic. <b>Data Updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' :\n                                                            (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}</b>\n\n                                                    </small>\n                                                </Grid.Row>\n                                                <Grid.Row columns={1}>\n                                                    <Grid.Column style={{ paddingTop: 15, paddingBottom: 3 }}>\n                                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"16pt\", lineHeight: \"16pt\", paddingLeft: \"1em\" }}>\n                                                            <Header.Content>\n                                                                COVID-19 Death Rate by Percentage of Hispanic Population\n                                            </Header.Content>\n                                                        </Header>\n                                                        <VictoryChart\n                                                            theme={VictoryTheme.material}\n                                                            width={730}\n                                                            height={270}\n                                                            domainPadding={20}\n                                                            minDomain={{ y: props.ylog ? 1 : 0 }}\n                                                            padding={{ left: 305, right: 30, top: 10, bottom: 35 }}\n                                                            style={{ fontSize: \"14pt\" }}\n                                                            containerComponent={<VictoryContainer responsive={false} />}\n                                                        >\n                                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\n                                                            <VictoryAxis dependentAxis\n                                                                label='COVID-19 Deaths per 100,000 Residents'\n                                                                style={{\n                                                                    ticks: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, axisLabel: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' },\n                                                                    labels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' }, tickLabels: { fontSize: \"0px\", fill: '#000000', padding: 10, fontFamily: 'lato' }\n                                                                }} />\n                                                            <VictoryBar\n                                                                horizontal\n                                                                barRatio={0.75}\n                                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(3))}\n                                                                data={[\n                                                                    {\n                                                                        key: \"Counties with lowest\\n percentage Hispanic\", 'value': data_index['hispanic'][\"low20\"]['deathsdailymean7R'] || 0,\n                                                                        'ez': data_index['hispanic'][\"low20\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Q2\", 'value': data_index['hispanic'][\"Q2\"]['deathsdailymean7R'] || 0,\n                                                                        'ez': data_index['hispanic'][\"Q2\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Q3\", 'value': data_index['hispanic'][\"Q3\"]['deathsdailymean7R'] || 0,\n                                                                        'ez': data_index['hispanic'][\"Q3\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Q4\", 'value': data_index['hispanic'][\"Q4\"]['deathsdailymean7R'] || 0,\n                                                                        'ez': data_index['hispanic'][\"Q4\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Counties with highest\\n percentage Hispanic\", 'value': data_index['hispanic'][\"high20\"]['deathsdailymean7R'] || 0,\n                                                                        'ez': data_index['hispanic'][\"high20\"]['county_list']\n                                                                    }\n                                                                ]}\n                                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"18px\", fill: \"#000000\" }} />}\n                                                                style={{\n                                                                    data: {\n                                                                        fill: ({ datum }) => datum.ez.includes(countyFipshis) ? countyColor : mortalityColor[1]\n                                                                    }\n                                                                }}\n                                                                x=\"key\"\n                                                                y=\"value\"\n                                                            />\n                                                        </VictoryChart>\n\n                                                    </Grid.Column>\n                                                </Grid.Row>\n                                                <Grid.Row style={{ paddingTop: '0.1em', paddingLeft: '2.9em', paddingRight: '0.1em' }} centered>\n                                                    <small style={{ fontFamily: 'lato', fontSize: 18, color: '#414042' }} align=\"justify\">\n                                                        This chart shows the number of COVID-19 deaths per 100,000 residents by percentage Hispanic population ranking. The y-axis\n                                                        displays percentage Hispanic population rankings based on quintiles (groups of 20%). The x-axis displays the average number\n                                                of COVID-19 deaths per 100,000 that occurred in each group of counties ranked by percentage Hispanic. <b>Data Updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' : (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}</b>\n\n                                                    </small>\n                                                </Grid.Row>\n                                            </Grid.Column>\n                                        </Grid>\n\n                                        {/* diabetes */}\n                                        {/* <center> <Waypoint\n                                            onEnter={() => {\n                                                setActiveCharacter('Characteristics - Diabetes')\n                                                console.log(activeCharacter)\n                                            }}>\n                                        </Waypoint> </center> */}\n                                        <Grid id=\"diabetes\" >\n                                            <Grid.Row>\n                                            <div id='diabetes' style={sectionStyle2}>\n                                                <Header as='h2' style={{ textAlign: 'center', color: 'black', fontSize: \"19pt\", paddingTop: '1em', paddingBottom: '1em' }}>\n                                                    <Header.Content> COVID-19 by Percentage of Population with Diabetes</Header.Content>\n                                                </Header>\n                                            </div>\n                                            </Grid.Row>\n                                            <Grid.Column width={7} style={{ paddingLeft: \"2\", paddingLeft: \"1\" }}>\n                                                <Grid.Row style={{ paddingTop: \"0\" }}>\n                                                    <Header as='h2' style={{ fontWeight: 600, fontSize: \"16pt\", lineHeight: \"16pt\" }}>\n                                                        <Header.Content>\n                                                            Georgia Percentage of Population with Diabetes Map\n                                        </Header.Content>\n                                                    </Header>\n                                                </Grid.Row>\n                                                <Grid.Row data-tip='dia' data-for='dia' style={{ paddingTop: \"0\", paddingBottom: '1em' }}>\n                                                    <svg width=\"600\" height=\"80\">\n                                                        {_.map(colorPalette2, (color, i) => {\n                                                            return <rect key={i} x={150 + 20 * i} y={40} width=\"20\" height=\"20\" style={{ fill: color, strokeWidth: 1, stroke: color }} />\n                                                        })}\n                                                        <text x={38} y={50} style={{ fontSize: '0.8em' }}>Least population with </text>\n                                                        <text x={38} y={61} style={{ fontSize: '0.8em' }}>diabetes counties</text>\n                                                        <text x={180 + 20 * (colorPalette2.length - 1)} y={50} style={{ fontSize: '0.8em' }}>Highest population with </text>\n                                                        <text x={180 + 20 * (colorPalette2.length - 1)} y={61} style={{ fontSize: '0.8em' }}>diabetes counties</text>\n\n                                                    </svg>\n                                                    <ComposableMap projection=\"geoAlbersUsa\"\n                                                        projectionConfig={{ scale: `${config.scale1}` }}\n                                                        width={600}\n                                                        height={600}\n                                                        data-tip=\"\"\n                                                        offsetX={config.offsetX1}\n                                                        offsetY={config.offsetY2}>\n                                                        <Geographies geography={config.url}>\n                                                            {({ geographies }) => geographies.map(geo =>\n                                                                <Geography\n                                                                    key={geo.rsmKey}\n                                                                    geography={geo}\n\n                                                                    style={{\n                                                                        default: {\n                                                                            //  fill: \"#ECEFF1\",\n                                                                            stroke: \"#607D8B\",\n                                                                            strokeWidth: 0.95,\n                                                                            outline: \"none\",\n                                                                        },\n                                                                        pressed: {\n                                                                            outline: \"none\",\n                                                                        }\n                                                                    }}\n                                                                    onMouseEnter={() => {\n\n                                                                        setCountyFipsdia(geo.properties.COUNTYFP);\n                                                                        setCountyNamedia(fips2county[stateFips + geo.properties.COUNTYFP]);\n                                                                        setTooltipContentdia(fips2county[stateFips + geo.properties.COUNTYFP]);\n\n                                                                    }}\n                                                                    onMouseLeave={() => {\n                                                                        setTooltipContent(\"\")\n                                                                    }}\n                                                                    fill={countyFipsdia === geo.properties.COUNTYFP ? countyColor :\n                                                                        ((colorDia && dataCha[stateFips + geo.properties.COUNTYFP] &&\n                                                                            dataCha[stateFips + geo.properties.COUNTYFP]['diabetes'] && dataCha[stateFips + geo.properties.COUNTYFP]['diabetes'] > 0) ?\n                                                                            colorDia[dataCha[stateFips + geo.properties.COUNTYFP]['diabetes']] :\n                                                                            (colorDia && dataCha[stateFips + geo.properties.COUNTYFP] && dataCha[stateFips + geo.properties.COUNTYFP]['diabetes'] === 0) ? '#e1dce2' : '#FFFFFF')}\n                                                                />\n                                                            )}\n                                                        </Geographies>\n                                                    </ComposableMap>\n\n                                                </Grid.Row>\n                                                <Grid.Row style={{ paddingTop: '3em', paddingLeft: '0em', paddingRight: '2em' }} centered>\n                                                    <small style={{ fontFamily: 'lato', fontSize: 18, color: '#414042' }} align=\"justify\">\n                                                        This map shows each Georgia county according to its percentage of population with diabetes.\n                                                        County rankings are based on percentage of population with diabetes quintile, which ranks each county in one of five\n                                                        groups depending on population with diabetes.\n                                            </small>\n                                                </Grid.Row>\n                                            </Grid.Column>\n\n                                            <Grid.Column width={9} style={{ paddingLeft: \"2\", paddingLeft: \"1\" }}>\n                                                <Grid.Row columns={1} style={{ paddingBottom: \"2\" }}>\n                                                    <Grid.Column style={{ paddingTop: 0, paddingBottom: 3 }}>\n                                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"16pt\", lineHeight: \"16pt\" }}>\n                                                            <Header.Content>\n                                                                COVID-19 Case Rate by Percentage of Population with Diabetes\n                                                </Header.Content>\n                                                        </Header>\n                                                        <VictoryChart\n                                                            theme={VictoryTheme.material}\n                                                            width={730}\n                                                            height={270}\n                                                            domainPadding={20}\n                                                            minDomain={{ y: props.ylog ? 1 : 0 }}\n                                                            padding={{ left: 305, right: 30, top: 10, bottom: 35 }}\n                                                            style={{ fontSize: \"14pt\" }}\n                                                            containerComponent={<VictoryContainer responsive={false} />}\n                                                        >\n                                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\n                                                            <VictoryAxis dependentAxis\n                                                                label={\"COVID-19 Cases per 100,000 Residents\"}\n                                                                style={{\n                                                                    ticks: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, axisLabel: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' },\n                                                                    labels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' }, tickLabels: { fontSize: \"0px\", fill: '#000000', padding: 10, fontFamily: 'lato' }\n                                                                }} />\n                                                            <VictoryBar\n                                                                horizontal\n                                                                barRatio={0.75}\n                                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(0))}\n                                                                data={[\n                                                                    {\n                                                                        key: \"Counties with lowest percentage\\n population with diabetes\", 'value': data_index['diabetes'][\"low20\"]['casesdailymean7R'] || 0,\n                                                                        'ez': data_index['diabetes'][\"low20\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Q2\", 'value': data_index['diabetes'][\"Q2\"]['casesdailymean7R'] || 0,\n                                                                        'ez': data_index['diabetes'][\"Q2\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Q3\", 'value': data_index['diabetes'][\"Q3\"]['casesdailymean7R'] || 0,\n                                                                        'ez': data_index['diabetes'][\"Q3\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Q4\", 'value': data_index['diabetes'][\"Q4\"]['casesdailymean7R'] || 0,\n                                                                        'ez': data_index['diabetes'][\"Q4\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Counties with highest percentage\\n population with diabetes\", 'value': data_index['diabetes'][\"high20\"]['casesdailymean7R'] || 0,\n                                                                        'ez': data_index['diabetes'][\"high20\"]['county_list']\n                                                                    }\n                                                                ]}\n                                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"20px\", fill: \"#000000\" }} />}\n                                                                style={{\n                                                                    data: {\n                                                                        fill: ({ datum }) => datum.ez.includes(countyFipsdia) ? countyColor : casesColor[1]\n                                                                    }\n                                                                }}\n                                                                x=\"key\"\n                                                                y=\"value\"\n                                                            />\n                                                        </VictoryChart>\n                                                    </Grid.Column>\n                                                </Grid.Row>\n                                                <Grid.Row style={{ paddingTop: '0.1em', paddingLeft: '2.9em', paddingRight: '0.1em' }} centered>\n                                                    <small style={{ fontFamily: 'lato', fontSize: 18, color: '#414042' }} align=\"justify\">\n                                                        This chart shows the number of COVID-19 cases per 100,000 residents by county ranking on percentage of population with diabetes.\n                                                        The y-axis displays percentage population with diabetes rankings for counties based on quintiles (groups of 20%). The x-axis displays\n                                                the average number of COVID-19 cases per 100,000 that occurred in each group of counties ranked by percentage population with diabetes. <b>Data Updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' :\n                                                            (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}</b>\n\n                                                    </small>\n                                                </Grid.Row>\n                                                <Grid.Row columns={1}>\n                                                    <Grid.Column style={{ paddingTop: 15, paddingBottom: 3 }}>\n                                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"16pt\", lineHeight: \"16pt\", paddingLeft: \"1em\" }}>\n                                                            <Header.Content>\n                                                                COVID-19 Death Rate by Percentage of Population with Diabetes\n                                            </Header.Content>\n                                                        </Header>\n                                                        <VictoryChart\n                                                            theme={VictoryTheme.material}\n                                                            width={730}\n                                                            height={270}\n                                                            domainPadding={20}\n                                                            minDomain={{ y: props.ylog ? 1 : 0 }}\n                                                            padding={{ left: 305, right: 30, top: 10, bottom: 35 }}\n                                                            style={{ fontSize: \"14pt\" }}\n                                                            containerComponent={<VictoryContainer responsive={false} />}\n                                                        >\n                                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\n                                                            <VictoryAxis dependentAxis\n                                                                label='COVID-19 Deaths per 100,000 Residents'\n                                                                style={{\n                                                                    ticks: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, axisLabel: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' },\n                                                                    labels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' }, tickLabels: { fontSize: \"0px\", fill: '#000000', padding: 10, fontFamily: 'lato' }\n                                                                }} />\n                                                            <VictoryBar\n                                                                horizontal\n                                                                barRatio={0.75}\n                                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(3))}\n                                                                data={[\n                                                                    {\n                                                                        key: \"Counties with lowest percentage\\n population with diabetes\", 'value': data_index['diabetes'][\"low20\"]['deathsdailymean7R'] || 0,\n                                                                        'ez': data_index['diabetes'][\"low20\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Q2\", 'value': data_index['diabetes'][\"Q2\"]['deathsdailymean7R'] || 0,\n                                                                        'ez': data_index['diabetes'][\"Q2\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Q3\", 'value': data_index['diabetes'][\"Q3\"]['deathsdailymean7R'] || 0,\n                                                                        'ez': data_index['diabetes'][\"Q3\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Q4\", 'value': data_index['diabetes'][\"Q4\"]['deathsdailymean7R'] || 0,\n                                                                        'ez': data_index['diabetes'][\"Q4\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Counties with highest percentage\\n population with diabetes\", 'value': data_index['diabetes'][\"high20\"]['deathsdailymean7R'] || 0,\n                                                                        'ez': data_index['diabetes'][\"high20\"]['county_list']\n                                                                    }\n                                                                ]}\n                                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"18px\", fill: \"#000000\" }} />}\n                                                                style={{\n                                                                    data: {\n                                                                        fill: ({ datum }) => datum.ez.includes(countyFipsdia) ? countyColor : mortalityColor[1]\n                                                                    }\n                                                                }}\n                                                                x=\"key\"\n                                                                y=\"value\"\n                                                            />\n                                                        </VictoryChart>\n\n                                                    </Grid.Column>\n                                                </Grid.Row>\n                                                <Grid.Row style={{ paddingTop: '0.1em', paddingLeft: '2.9em', paddingRight: '0.1em' }} centered>\n                                                    <small style={{ fontFamily: 'lato', fontSize: 18, color: '#414042' }} align=\"justify\">\n                                                        This chart shows the number of COVID-19 deaths per 100,000 residents by county ranking on percentage of population with diabetes.\n                                                        The y-axis displays percentage population with diabetes rankings for counties based on quintiles (groups of 20%). The x-axis displays\n                                                the average number of COVID-19 deaths per 100,000 that occurred in each group of counties ranked by percentage population with diabetes. <b>Data Updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' :\n                                                            (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}</b>\n                                                    </small>\n                                                </Grid.Row>\n                                            </Grid.Column>\n                                        </Grid>\n\n                                        {/* age */}\n                                        {/* <center> <Waypoint\n                                            onEnter={() => {\n                                                setActiveCharacter('Characteristics - Age over 65')\n                                                console.log(activeCharacter)\n                                            }}>\n                                        </Waypoint> </center> */}\n                                        <Grid id=\"age\" >\n                                            <Grid.Row>\n                                            <div id='age' style={sectionStyle2}>\n                                                <Header as='h2' style={{ textAlign: 'center', color: 'black', fontSize: \"19pt\", paddingTop: '1em', paddingBottom: '1em' }}>\n                                                    <Header.Content> COVID-19 by Percentage of Population Age Over 65</Header.Content>\n                                                </Header>\n                                                </div>\n                                            </Grid.Row>\n                                            <Grid.Column width={7} style={{ paddingLeft: \"2\", paddingLeft: \"1\" }}>\n                                                <Grid.Row style={{ paddingTop: \"0\" }}>\n                                                    <Header as='h2' style={{ fontWeight: 600, fontSize: \"16pt\", lineHeight: \"16pt\" }}>\n                                                        <Header.Content>\n                                                            Georgia Percentage of Population Age Over 65 Map\n                                        </Header.Content>\n                                                    </Header>\n                                                </Grid.Row>\n                                                <Grid.Row data-tip='age' data-for='age' style={{ paddingTop: \"0\", paddingBottom: '1em' }}>\n                                                    <svg width=\"600\" height=\"80\">\n                                                        {_.map(colorPalette2, (color, i) => {\n                                                            return <rect key={i} x={150 + 20 * i} y={40} width=\"20\" height=\"20\" style={{ fill: color, strokeWidth: 1, stroke: color }} />\n                                                        })}\n                                                        <text x={40} y={50} style={{ fontSize: '0.8em' }}>Least population over </text>\n                                                        <text x={40} y={61} style={{ fontSize: '0.8em' }}>Age 65 counties</text>\n                                                        <text x={180 + 20 * (colorPalette2.length - 1)} y={50} style={{ fontSize: '0.8em' }}>Highest population over </text>\n                                                        <text x={180 + 20 * (colorPalette2.length - 1)} y={61} style={{ fontSize: '0.8em' }}>Age 65 counties</text>\n\n                                                    </svg>\n                                                    <ComposableMap projection=\"geoAlbersUsa\"\n                                                        projectionConfig={{ scale: `${config.scale1}` }}\n                                                        width={600}\n                                                        height={600}\n                                                        data-tip=\"\"\n                                                        offsetX={config.offsetX1}\n                                                        offsetY={config.offsetY2}>\n                                                        <Geographies geography={config.url}>\n                                                            {({ geographies }) => geographies.map(geo =>\n                                                                <Geography\n                                                                    key={geo.rsmKey}\n                                                                    geography={geo}\n\n                                                                    style={{\n                                                                        default: {\n                                                                            //  fill: \"#ECEFF1\",\n                                                                            stroke: \"#607D8B\",\n                                                                            strokeWidth: 0.95,\n                                                                            outline: \"none\",\n                                                                        },\n                                                                        pressed: {\n                                                                            outline: \"none\",\n                                                                        }\n                                                                    }}\n                                                                    onMouseEnter={() => {\n\n                                                                        setCountyFipsa65(geo.properties.COUNTYFP);\n                                                                        setCountyNamea65(fips2county[stateFips + geo.properties.COUNTYFP]);\n                                                                        setTooltipContenta65(fips2county[stateFips + geo.properties.COUNTYFP]);\n\n                                                                    }}\n                                                                    onMouseLeave={() => {\n                                                                        setTooltipContent(\"\")\n                                                                    }}\n                                                                    fill={countyFipsa65 === geo.properties.COUNTYFP ? countyColor :\n                                                                        ((colorA65 && dataCha[stateFips + geo.properties.COUNTYFP] &&\n                                                                            dataCha[stateFips + geo.properties.COUNTYFP]['age65over'] && dataCha[stateFips + geo.properties.COUNTYFP]['age65over'] > 0) ?\n                                                                            colorA65[dataCha[stateFips + geo.properties.COUNTYFP]['age65over']] :\n                                                                            (colorA65 && dataCha[stateFips + geo.properties.COUNTYFP] && dataCha[stateFips + geo.properties.COUNTYFP]['age65over'] === 0) ? '#e1dce2' : '#FFFFFF')}\n                                                                />\n                                                            )}\n                                                        </Geographies>\n                                                    </ComposableMap>\n\n                                                </Grid.Row>\n                                                <Grid.Row style={{ paddingTop: '6em', paddingLeft: '0em', paddingRight: '2em' }} centered>\n                                                    <small style={{ fontFamily: 'lato', fontSize: 18, color: '#414042' }} align=\"justify\">\n                                                        This map shows each Georgia county according to its percentage of population over 65 years.\n                                                        County rankings are based on percentage of population over 65 years quintile, which ranks each county in one of five\n                                                        groups depending on population over age 65.\n                                            </small>\n                                                </Grid.Row>\n                                            </Grid.Column>\n\n                                            <Grid.Column width={9} style={{ paddingLeft: \"2\", paddingLeft: \"1\" }}>\n                                                <Grid.Row columns={1} style={{ paddingBottom: \"2\" }}>\n                                                    <Grid.Column style={{ paddingTop: 0, paddingBottom: 3 }}>\n                                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"16pt\", lineHeight: \"16pt\" }}>\n                                                            <Header.Content>\n                                                                COVID-19 Case Rate by Percentage of Population over the Age 65 Years\n                                                </Header.Content>\n                                                        </Header>\n                                                        <VictoryChart\n                                                            theme={VictoryTheme.material}\n                                                            width={730}\n                                                            height={270}\n                                                            domainPadding={20}\n                                                            minDomain={{ y: props.ylog ? 1 : 0 }}\n                                                            padding={{ left: 305, right: 30, top: 10, bottom: 35 }}\n                                                            style={{ fontSize: \"14pt\" }}\n                                                            containerComponent={<VictoryContainer responsive={false} />}\n                                                        >\n                                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\n                                                            <VictoryAxis dependentAxis\n                                                                label={\"COVID-19 Cases per 100,000 Residents\"}\n                                                                style={{\n                                                                    ticks: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, axisLabel: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' },\n                                                                    labels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' }, tickLabels: { fontSize: \"0px\", fill: '#000000', padding: 10, fontFamily: 'lato' }\n                                                                }} />\n                                                            <VictoryBar\n                                                                horizontal\n                                                                barRatio={0.75}\n                                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(0))}\n                                                                data={[\n                                                                    {\n                                                                        key: \"Counties with lowest\\n percentage over 65\", 'value': data_index['age65over'][\"low20\"]['casesdailymean7R'] || 0,\n                                                                        'ez': data_index['age65over'][\"low20\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Q2\", 'value': data_index['age65over'][\"Q2\"]['casesdailymean7R'] || 0,\n                                                                        'ez': data_index['age65over'][\"Q2\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Q3\", 'value': data_index['age65over'][\"Q3\"]['casesdailymean7R'] || 0,\n                                                                        'ez': data_index['age65over'][\"Q3\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Q4\", 'value': data_index['age65over'][\"Q4\"]['casesdailymean7R'] || 0,\n                                                                        'ez': data_index['age65over'][\"Q4\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Counties with highest\\n percentage over 65\", 'value': data_index['age65over'][\"high20\"]['casesdailymean7R'] || 0,\n                                                                        'ez': data_index['age65over'][\"high20\"]['county_list']\n                                                                    }\n                                                                ]}\n                                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"20px\", fill: \"#000000\" }} />}\n                                                                style={{\n                                                                    data: {\n                                                                        fill: ({ datum }) => datum.ez.includes(countyFipsa65) ? countyColor : casesColor[1]\n                                                                    }\n                                                                }}\n                                                                x=\"key\"\n                                                                y=\"value\"\n                                                            />\n                                                        </VictoryChart>\n                                                    </Grid.Column>\n                                                </Grid.Row>\n                                                <Grid.Row style={{ paddingTop: '0.1em', paddingLeft: '2.9em', paddingRight: '0.1em' }} centered>\n                                                    <small style={{ fontFamily: 'lato', fontSize: 18, color: '#414042' }} align=\"justify\">\n                                                        This chart shows the number of COVID-19 cases per 100,000 residents by county ranking on percentage of population over 65 years.\n                                                        The y-axis displays percentage population over 65 rankings for counties based on quintiles (groups of 20%). The x-axis displays the\n                                                average number of COVID-19 cases per 100,000 that occurred in each group of counties ranked by percentage population over 65 years. <b>Data Updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' :\n                                                            (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}</b>\n\n                                                    </small>\n                                                </Grid.Row>\n                                                <Grid.Row columns={1}>\n                                                    <Grid.Column style={{ paddingTop: 15, paddingBottom: 3 }}>\n                                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"16pt\", lineHeight: \"16pt\", paddingLeft: \"1em\" }}>\n                                                            <Header.Content>\n                                                                COVID-19 Death Rate by Percentage of Population over the Age 65 Years\n                                            </Header.Content>\n                                                        </Header>\n                                                        <VictoryChart\n                                                            theme={VictoryTheme.material}\n                                                            width={730}\n                                                            height={270}\n                                                            domainPadding={20}\n                                                            minDomain={{ y: props.ylog ? 1 : 0 }}\n                                                            padding={{ left: 305, right: 30, top: 10, bottom: 35 }}\n                                                            style={{ fontSize: \"14pt\" }}\n                                                            containerComponent={<VictoryContainer responsive={false} />}\n                                                        >\n                                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\n                                                            <VictoryAxis dependentAxis\n                                                                label='COVID-19 Deaths per 100,000 Residents'\n                                                                style={{\n                                                                    ticks: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, axisLabel: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' },\n                                                                    labels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' }, tickLabels: { fontSize: \"0px\", fill: '#000000', padding: 10, fontFamily: 'lato' }\n                                                                }} />\n                                                            <VictoryBar\n                                                                horizontal\n                                                                barRatio={0.75}\n                                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(3))}\n                                                                data={[\n                                                                    {\n                                                                        key: \"Counties with lowest\\n percentage over 65\", 'value': data_index['age65over'][\"low20\"]['deathsdailymean7R'] || 0,\n                                                                        'ez': data_index['age65over'][\"low20\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Q2\", 'value': data_index['age65over'][\"Q2\"]['deathsdailymean7R'] || 0,\n                                                                        'ez': data_index['age65over'][\"Q2\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Q3\", 'value': data_index['age65over'][\"Q3\"]['deathsdailymean7R'] || 0,\n                                                                        'ez': data_index['age65over'][\"Q3\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Q4\", 'value': data_index['age65over'][\"Q4\"]['deathsdailymean7R'] || 0,\n                                                                        'ez': data_index['age65over'][\"Q4\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Counties with highest\\n percentage over 65\", 'value': data_index['age65over'][\"high20\"]['deathsdailymean7R'] || 0,\n                                                                        'ez': data_index['age65over'][\"high20\"]['county_list']\n                                                                    }\n                                                                ]}\n                                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"18px\", fill: \"#000000\" }} />}\n                                                                style={{\n                                                                    data: {\n                                                                        fill: ({ datum }) => datum.ez.includes(countyFipsa65) ? countyColor : mortalityColor[1]\n                                                                    }\n                                                                }}\n                                                                x=\"key\"\n                                                                y=\"value\"\n                                                            />\n                                                        </VictoryChart>\n\n                                                    </Grid.Column>\n                                                </Grid.Row>\n                                                <Grid.Row style={{ paddingTop: '0.1em', paddingLeft: '2.9em', paddingRight: '0.1em' }} centered>\n                                                    <small style={{ fontFamily: 'lato', fontSize: 18, color: '#414042' }} align=\"justify\">\n                                                        This chart shows the number of COVID-19 deaths per 100,000 residents by county ranking on percentage of population over 65 years.\n                                                        The y-axis displays percentage population over 65 rankings for counties based on quintiles (groups of 20%). The x-axis displays the\n                                                average number of COVID-19 deaths per 100,000 that occurred in each group of counties ranked by percentage population over 65 years. <b>Data Updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' :\n                                                            (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}</b>\n                                                    </small>\n                                                </Grid.Row>\n                                            </Grid.Column>\n                                        </Grid>\n\n                                        {/* Male */}\n                                        {/* <center> <Waypoint\n                                            onEnter={() => {\n                                                setActiveCharacter('Characteristics - Male Percentage')\n                                                console.log(activeCharacter)\n                                            }}>\n                                        </Waypoint> </center> */}\n                                        <Grid id='male' >\n                                            <Grid.Row>\n                                            <div id='male' style={sectionStyle2}>\n                                                <Header as='h2' style={{ textAlign: 'center', color: 'black', fontSize: \"19pt\", paddingTop: '1em', paddingBottom: '1em' }}>\n                                                    <Header.Content> COVID-19 by Percentage of Male</Header.Content>\n                                                </Header>\n                                                </div>\n                                            </Grid.Row>\n                                            <Grid.Column width={7} style={{ paddingLeft: \"2\", paddingLeft: \"1\" }}>\n                                                <Grid.Row style={{ paddingTop: \"0\" }}>\n                                                    <Header as='h2' style={{ fontWeight: 600, fontSize: \"16pt\", lineHeight: \"16pt\" }}>\n                                                        <Header.Content>\n                                                            Georgia Percentage of Male Map\n                                        </Header.Content>\n                                                    </Header>\n                                                </Grid.Row>\n                                                <Grid.Row data-tip='male' data-for='male' style={{ paddingTop: \"0\", paddingBottom: '1em' }}>\n                                                    <svg width=\"600\" height=\"80\">\n                                                        {_.map(colorPalette2, (color, i) => {\n                                                            return <rect key={i} x={150 + 20 * i} y={40} width=\"20\" height=\"20\" style={{ fill: color, strokeWidth: 1, stroke: color }} />\n                                                        })}\n                                                        <text x={40} y={50} style={{ fontSize: '0.8em' }}>Least percentage of </text>\n                                                        <text x={40} y={59} style={{ fontSize: '0.8em' }}> male counties</text>\n                                                        <text x={180 + 20 * (colorPalette2.length - 1)} y={50} style={{ fontSize: '0.8em' }}>Highest percentage of</text>\n                                                        <text x={180 + 20 * (colorPalette2.length - 1)} y={59} style={{ fontSize: '0.8em' }}>male counties</text>\n\n                                                    </svg>\n                                                    <ComposableMap projection=\"geoAlbersUsa\"\n                                                        projectionConfig={{ scale: `${config.scale1}` }}\n                                                        width={600}\n                                                        height={600}\n                                                        data-tip=\"\"\n                                                        offsetX={config.offsetX1}\n                                                        offsetY={config.offsetY2}>\n                                                        <Geographies geography={config.url}>\n                                                            {({ geographies }) => geographies.map(geo =>\n                                                                <Geography\n                                                                    key={geo.rsmKey}\n                                                                    geography={geo}\n\n                                                                    style={{\n                                                                        default: {\n                                                                            //  fill: \"#ECEFF1\",\n                                                                            stroke: \"#607D8B\",\n                                                                            strokeWidth: 0.95,\n                                                                            outline: \"none\",\n                                                                        },\n                                                                        pressed: {\n                                                                            outline: \"none\",\n                                                                        }\n                                                                    }}\n                                                                    onMouseEnter={() => {\n\n                                                                        setCountyFipsmale(geo.properties.COUNTYFP);\n                                                                        setCountyNamemale(fips2county[stateFips + geo.properties.COUNTYFP]);\n                                                                        setTooltipContentmale(fips2county[stateFips + geo.properties.COUNTYFP]);\n\n                                                                    }}\n                                                                    onMouseLeave={() => {\n                                                                        setTooltipContent(\"\")\n                                                                    }}\n                                                                    fill={countyFipsmale === geo.properties.COUNTYFP ? countyColor :\n                                                                        ((colorMale && dataCha[stateFips + geo.properties.COUNTYFP] &&\n                                                                            dataCha[stateFips + geo.properties.COUNTYFP]['male'] && dataCha[stateFips + geo.properties.COUNTYFP]['male'] > 0) ?\n                                                                            colorMale[dataCha[stateFips + geo.properties.COUNTYFP]['male']] :\n                                                                            (colorMale && dataCha[stateFips + geo.properties.COUNTYFP] && dataCha[stateFips + geo.properties.COUNTYFP]['male'] === 0) ? '#e1dce2' : '#FFFFFF')}\n                                                                />\n                                                            )}\n                                                        </Geographies>\n                                                    </ComposableMap>\n\n                                                </Grid.Row>\n                                                <Grid.Row style={{ paddingTop: '1.5em', paddingLeft: '0em', paddingRight: '2em' }} centered>\n                                                    <small style={{ fontFamily: 'lato', fontSize: 18, color: '#414042' }} align=\"justify\">\n                                                        This map shows each Georgia county according to its percentage of male.\n                                                        County rankings are based on percentage male quintile, which ranks each county in one of five\n                                                        groups depending on percentage male.\n                                            </small>\n                                                </Grid.Row>\n                                            </Grid.Column>\n\n                                            <Grid.Column width={9} style={{ paddingLeft: \"2\", paddingLeft: \"1\" }}>\n                                                <Grid.Row columns={1} style={{ paddingBottom: \"2\" }}>\n                                                    <Grid.Column style={{ paddingTop: 0, paddingBottom: 3 }}>\n                                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"16pt\", lineHeight: \"16pt\" }}>\n                                                            <Header.Content>\n                                                                COVID-19 Case Rate by Percentage of Male Population\n                                                </Header.Content>\n                                                        </Header>\n                                                        <VictoryChart\n                                                            theme={VictoryTheme.material}\n                                                            width={730}\n                                                            height={270}\n                                                            domainPadding={20}\n                                                            minDomain={{ y: props.ylog ? 1 : 0 }}\n                                                            padding={{ left: 305, right: 30, top: 10, bottom: 35 }}\n                                                            style={{ fontSize: \"14pt\" }}\n                                                            containerComponent={<VictoryContainer responsive={false} />}\n                                                        >\n                                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\n                                                            <VictoryAxis dependentAxis\n                                                                label={\"COVID-19 Cases per 100,000 Residents\"}\n                                                                style={{\n                                                                    ticks: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, axisLabel: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' },\n                                                                    labels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' }, tickLabels: { fontSize: \"0px\", fill: '#000000', padding: 10, fontFamily: 'lato' }\n                                                                }} />\n                                                            <VictoryBar\n                                                                horizontal\n                                                                barRatio={0.75}\n                                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(0))}\n                                                                data={[\n                                                                    {\n                                                                        key: \"Counties with lowest\\n percentage male population\", 'value': data_index['male'][\"low20\"]['casesdailymean7R'] || 0,\n                                                                        'ez': data_index['male'][\"low20\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Q2\", 'value': data_index['male'][\"Q2\"]['casesdailymean7R'] || 0,\n                                                                        'ez': data_index['male'][\"Q2\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Q3\", 'value': data_index['male'][\"Q3\"]['casesdailymean7R'] || 0,\n                                                                        'ez': data_index['male'][\"Q3\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Q4\", 'value': data_index['male'][\"Q4\"]['casesdailymean7R'] || 0,\n                                                                        'ez': data_index['male'][\"Q4\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Counties with highest\\n percentage male population\", 'value': data_index['male'][\"high20\"]['casesdailymean7R'] || 0,\n                                                                        'ez': data_index['male'][\"high20\"]['county_list']\n                                                                    }\n                                                                ]}\n                                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"20px\", fill: \"#000000\" }} />}\n                                                                style={{\n                                                                    data: {\n                                                                        fill: ({ datum }) => datum.ez.includes(countyFipsmale) ? countyColor : casesColor[1]\n                                                                    }\n                                                                }}\n                                                                x=\"key\"\n                                                                y=\"value\"\n                                                            />\n                                                        </VictoryChart>\n                                                    </Grid.Column>\n                                                </Grid.Row>\n                                                <Grid.Row style={{ paddingTop: '0.1em', paddingLeft: '2.9em', paddingRight: '0.1em' }} centered>\n                                                    <small style={{ fontFamily: 'lato', fontSize: 18, color: '#414042' }} align=\"justify\">\n                                                        This chart shows the number of COVID-19 cases per 100,000 residents by percentage male population ranking. The y-axis displays\n                                                        percentage male rankings for counties based on quintiles (groups of 20%). The x-axis displays the average number of COVID-19 cases\n                                                per 100,000 that occurred in each group of counties ranked by percentage male. <b>Data Updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' :\n                                                            (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}</b>\n\n                                                    </small>\n                                                </Grid.Row>\n                                                <Grid.Row columns={1}>\n                                                    <Grid.Column style={{ paddingTop: 15, paddingBottom: 3 }}>\n                                                        <Header as='h2' style={{ textAlign: 'center', fontSize: \"16pt\", lineHeight: \"16pt\", paddingLeft: \"1em\" }}>\n                                                            <Header.Content>\n                                                                COVID-19 Death Rate by Percentage of Male Population\n                                            </Header.Content>\n                                                        </Header>\n                                                        <VictoryChart\n                                                            theme={VictoryTheme.material}\n                                                            width={730}\n                                                            height={270}\n                                                            domainPadding={20}\n                                                            minDomain={{ y: props.ylog ? 1 : 0 }}\n                                                            padding={{ left: 305, right: 30, top: 10, bottom: 35 }}\n                                                            style={{ fontSize: \"14pt\" }}\n                                                            containerComponent={<VictoryContainer responsive={false} />}\n                                                        >\n                                                            <VictoryAxis style={{ ticks: { stroke: \"#FFFFFF\" }, axis: { stroke: \"#000000\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, labels: { fill: '#000000', fontSize: \"20px\" }, tickLabels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' } }} />\n                                                            <VictoryAxis dependentAxis\n                                                                label='COVID-19 Deaths per 100,000 Residents'\n                                                                style={{\n                                                                    ticks: { stroke: \"transparent\" }, grid: { stroke: \"transparent\" }, axis: { stroke: \"#000000\" }, axisLabel: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' },\n                                                                    labels: { fontSize: \"20px\", fill: '#000000', fontFamily: 'lato' }, tickLabels: { fontSize: \"0px\", fill: '#000000', padding: 10, fontFamily: 'lato' }\n                                                                }} />\n                                                            <VictoryBar\n                                                                horizontal\n                                                                barRatio={0.75}\n                                                                labels={({ datum }) => numberWithCommas(parseFloat(datum.value).toFixed(3))}\n                                                                data={[\n                                                                    {\n                                                                        key: \"Counties with lowest\\n percentage male population\", 'value': data_index['male'][\"low20\"]['deathsdailymean7R'] || 0,\n                                                                        'ez': data_index['male'][\"low20\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Q2\", 'value': data_index['male'][\"Q2\"]['deathsdailymean7R'] || 0,\n                                                                        'ez': data_index['male'][\"Q2\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Q3\", 'value': data_index['male'][\"Q3\"]['deathsdailymean7R'] || 0,\n                                                                        'ez': data_index['male'][\"Q3\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Q4\", 'value': data_index['male'][\"Q4\"]['deathsdailymean7R'] || 0,\n                                                                        'ez': data_index['male'][\"Q4\"]['county_list']\n                                                                    },\n                                                                    {\n                                                                        key: \"Counties with highest\\n percentage male population\", 'value': data_index['male'][\"high20\"]['deathsdailymean7R'] || 0,\n                                                                        'ez': data_index['male'][\"high20\"]['county_list']\n                                                                    }\n                                                                ]}\n                                                                labelComponent={<VictoryLabel dx={5} style={{ fontFamily: 'lato', fontSize: \"18px\", fill: \"#000000\" }} />}\n                                                                style={{\n                                                                    data: {\n                                                                        fill: ({ datum }) => datum.ez.includes(countyFipsmale) ? countyColor : mortalityColor[1]\n                                                                    }\n                                                                }}\n                                                                x=\"key\"\n                                                                y=\"value\"\n                                                            />\n                                                        </VictoryChart>\n\n                                                    </Grid.Column>\n                                                </Grid.Row>\n                                                <Grid.Row style={{ paddingTop: '0.1em', paddingLeft: '2.9em', paddingRight: '0.1em' }} centered>\n                                                    <small style={{ fontFamily: 'lato', fontSize: 18, color: '#414042' }} align=\"justify\">\n                                                        This chart shows the number of COVID-19 deaths per 100,000 residents by percentage male population ranking. The y-axis displays\n                                                        percentage male rankings for counties based on quintiles (groups of 20%). The x-axis displays the average number of COVID-19 deaths\n                                                per 100,000 that occurred in each group of counties ranked by percentage male. <b>Data Updated: {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' :\n                                                            (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}</b>\n\n                                                    </small>\n                                                </Grid.Row>\n                                            </Grid.Column>\n                                        </Grid>\n                                    </Grid>\n                                </Grid.Column>\n\n                            </Grid>\n\n                        </div>\n                    }\n                    <Notes />\n                </Container>\n                <ReactTooltip id='cvi'>{tooltipContentcvi}</ReactTooltip>\n                <ReactTooltip id='si'>{tooltipContentsi}</ReactTooltip>\n                <ReactTooltip id='urb'>{tooltipContentubr}</ReactTooltip>\n                <ReactTooltip id='black'>{tooltipContentblack}</ReactTooltip>\n                <ReactTooltip id='his'>{tooltipContenthis}</ReactTooltip>\n                <ReactTooltip id='pov'>{tooltipContentpov}</ReactTooltip>\n                <ReactTooltip id='dia'>{tooltipContentdia}</ReactTooltip>\n                <ReactTooltip id='age'>{tooltipContenta65}</ReactTooltip>\n                <ReactTooltip id='male'>{tooltipContentmale}</ReactTooltip>\n                <ReactTooltip id='ga'> <font size=\"+2\"><b >{countyName}</b> </font> <br />\n                    <b>Total Cases</b>: {data[stateFips + countyFips]['casescum'] >= 0 ? data[stateFips + countyFips]['casescum'].toFixed(0) : \"N/A\"} <br />\n                    <b>Total Deaths</b>: {data[stateFips + countyFips]['deathscum'] >= 0 ? data[stateFips + countyFips]['deathscum'].toFixed(0) : \"N/A\"} <br />\n                    <b>Total case per 100k</b>: {data[stateFips + countyFips]['casescumR'] >= 0 ? data[stateFips + countyFips]['casescumR'].toFixed(0) : \"N/A\"} <br />\n                    <b>Total Deaths per 100k</b>: {data[stateFips + countyFips]['deathscumR'] >= 0 ? data[stateFips + countyFips]['deathscumR'].toFixed(0) : 'N/A'} <br />\n                    <b>Last 14-day Cases per 100k</b>: {data[stateFips + countyFips]['casescum14dayR'] >= 0 ? data[stateFips + countyFips]['casescum14dayR'].toFixed(0) : \"N/A\"} <br />\n                    <b>Click to see county-level data.</b> </ReactTooltip>\n            </div>\n        );\n    }\n    else {\n        return <Loader active inline='centered' />\n    }\n}","import React, { useEffect, useState } from 'react'\nimport { Container, Grid, Breadcrumb, Header, Loader, List, Table, Divider, Popup } from 'semantic-ui-react'\nimport AppBar from './AppBar';\nimport Geographies from './Geographies';\nimport Geography from './Geography';\nimport ComposableMap from './ComposableMap';\nimport {\n  VictoryChart,\n  VictoryTooltip,\n  VictoryVoronoiContainer,\n  VictoryContainer,\n  VictoryGroup,\n  VictoryBar,\n  VictoryTheme,\n  VictoryAxis,\n  VictoryLegend,\n  VictoryLine,\n  VictoryLabel,\n  VictoryScatter,\n  VictoryPie\n} from 'victory';\n\nimport { useParams, useHistory } from 'react-router-dom';\nimport LazyHero from 'react-lazy-hero';\n\nimport Notes from './Notes';\nimport ReactTooltip from \"react-tooltip\";\nimport fips2county from './fips2county.json'\nimport configs from \"./state_config.json\";\nimport configscounty from \"./county_config.json\";\nimport _ from 'lodash';\nimport * as d3 from 'd3-geo'\nimport Chart from \"react-google-charts\";\nimport { scaleQuantile, scaleQuantize } from \"d3-scale\";\n\nconst countyColor = '#f2a900';\nconst stateColor = '#bdbfc1';\nconst nationColor = '#d9d9d7';\nconst colorPalette = [\n  \"#e1dce2\",\n  \"#d3b6cd\",\n  \"#bf88b5\",\n  \"#af5194\",\n  \"#99528c\",\n  \"#633c70\",\n];\n\n\nfunction ScatterChart(props) {\n\n  return (\n    <VictoryChart\n      width={400}\n      height={300}\n      scale={{ x: props.xlog ? 'log' : 'linear', y: props.ylog ? 'log' : 'linear' }}\n      minDomain={{ y: props.ylog ? 1 : 0 }}\n      padding={{ left: 80, right: 10, top: 50, bottom: 50 }}>\n      {props.showLegend && <VictoryLegend\n        x={10} y={10}\n        orientation=\"horizontal\"\n        colorScale={[stateColor, countyColor]}\n        data={[\n          { name: ('Other counties in ' + props.stateName) }, { name: props.countyName }\n        ]}\n      />}\n      <VictoryScatter\n        data={_.filter(_.map(props.data, (d, k) => { d.fips = k; return d; }), (d) => (\n          d.fips.length === 5 &&\n          d.fips.substring(0, 2) === props.stateFips &&\n          d[props.x] && d[props.y]))}\n        sortKey={(d) => d.fips === (props.stateFips + props.countyFips)}\n        style={{\n          data: {\n            fill: ({ datum }) => datum.fips === (props.stateFips + props.countyFips) ? countyColor : stateColor,\n            fillOpacity: ({ datum }) => datum.fips === (props.stateFips + props.countyFips) ? 1.0 : 0.7\n          }\n        }}\n        size={4}\n        x={props.x}\n        y={props.y}\n      />\n      <VictoryAxis label={props.varMap[props.x] ? props.varMap[props.x].name : props.x}\n        tickCount={4}\n        tickFormat={(y) => (props.rescaleX ? (Math.round(y / 1000) + 'k') : (Math.round(y * 100) / 100))} />\n      <VictoryAxis dependentAxis label={props.varMap[props.y] ? props.varMap[props.y].name : props.y}\n        style={{ axisLabel: { padding: 40 } }}\n        tickCount={5}\n        tickFormat={(y) => (Math.round(y * 100) / 100)} />\n    </VictoryChart>);\n\n}\n\nfunction numberWithCommas(x) {\n  x = x.toString();\n  var pattern = /(-?\\d+)(\\d{3})/;\n  while (pattern.test(x))\n    x = x.replace(pattern, \"$1,$2\");\n  return x;\n}\nconst sectionStyle1 = {\n  width: \"100%\",\n  height: \"100%\",\n  backgroundSize: 'auto auto',\n  backgroundImage: `url(\"/Emory_COVID_header_LightBlue_original.jpg\")`\n};\nconst sectionStyle2 = {\n  width: \"100%\",\n  height: \"100%\",\n  backgroundSize: 'cover',\n  backgroundImage: `url(\"/CoronaVirus_LightBlue.jpg\")`\n};\n\nfunction BarChart(props) {\n  const colors = {\n    \"3\": '#024174',\n    '2': \"#99bbcf\",\n    '1': '#337fb5'\n};\n  if (props.var_num === 4) {\n    return (\n      <VictoryChart\n        theme={VictoryTheme.material}\n        width={props.width || 650}\n        height={300}\n        domainPadding={props.pad || 10}\n        scale={{ y: props.ylog ? 'log' : 'linear' }}\n        minDomain={{ y: props.ylog ? 1 : 0 }}\n        padding={{ left: 79, right: 40, top: 60, bottom: 50 }}\n        containerComponent={<VictoryContainer responsive={false} />}\n      >\n        <VictoryLabel style={{\n          fontSize: 20, paddingBottom: '0.5em'\n        }} text={props.title} x={(props.width || 560) / 2} y={20} textAnchor=\"middle\" />\n        <VictoryAxis style={{\n          tickLabels: { fontSize: 18, padding: 2 }\n        }} />\n        <VictoryAxis dependentAxis\n          domain={[0, 1]}\n          style={{\n            tickLabels: { fontSize: 18, padding: 2 }\n          }}\n          tickFormat={(y) => (y <= 1 ? y * 100 : (y / 1000 + 'k'))} />\n        <VictoryLegend x={80} y={40}\n          orientation=\"horizontal\"\n          gutter={1}\n          // style={{ border: { stroke: \"black\" } }}\n          data={[\n            { name: `Percentage of ${props.cate}`, symbol: { fill: colors['1'], type: \"square\" } },\n            { name: \"Percentage of Population\", symbol: { fill: colors['2'], type: \"square\" } },\n          ]}\n        />\n        <VictoryGroup offset={20}\n          colorScale={\"qualitative\"}\n        >\n\n          <VictoryBar\n            alignment=\"start\"\n            barWidth={20}\n            // labels={({ datum }) => (Math.round(datum.value * 100) / 100)}\n            labels={({ datum }) => `${props.cate} Percent: ${numberWithCommas(parseFloat(datum.value).toFixed(2) * 100)}%`}\n            data={[{ key: props.keyv[0], 'value': props.data[props.stateFips + props.countyFips][props.var[0]] || 0, 'colors': props.co },\n            { key: props.keyv[1], 'value': props.data[props.stateFips + props.countyFips][props.var[1]] || 0, 'colors': props.co },\n            { key: props.keyv[2], 'value': props.data[props.stateFips + props.countyFips][props.var[2]] || 0, 'colors': props.co },\n            { key: props.keyv[3], 'value': props.data[props.stateFips + props.countyFips][props.var[3]] || 0, 'colors': props.co }]}\n            labelComponent={<VictoryTooltip\n              orientation=\"top\"\n              style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'black' }}\n              constrainToVisibleArea\n              labelComponent={<VictoryLabel dx={-60} textAnchor='start' />}\n              flyoutStyle={{ fill: colors['1'], fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\n            />}\n            style={{\n              data: {\n                fill: ({ datum }) => colors[datum.colors],\n                fillOpacity: 2\n              }\n            }}\n            x=\"key\"\n            y=\"value\"\n          />\n          <VictoryBar\n            alignment=\"start\"\n            barWidth={20}\n            data={[{ key: props.keyv[0], 'value': props.data[props.stateFips + props.countyFips][props.var1[0]] || 0, 'colors': '2' },\n            { key: props.keyv[1], 'value': props.data[props.stateFips + props.countyFips][props.var1[1]] || 0, 'colors': '2' },\n            { key: props.keyv[2], 'value': props.data[props.stateFips + props.countyFips][props.var1[2]] || 0, 'colors': '2' },\n            { key: props.keyv[3], 'value': props.data[props.stateFips + props.countyFips][props.var1[3]] || 0, 'colors': '2' }]}\n            labels={({ datum }) =>\n              `Population Percent: ${numberWithCommas(parseFloat(datum.value).toFixed(2) * 100)}%`\n            }\n            labelComponent={<VictoryTooltip\n              orientation=\"top\"\n              style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'black' }}\n              constrainToVisibleArea\n              // labelComponent={<VictoryLabel dx={-50} textAnchor='start' />}\n              flyoutStyle={{ fill: \"grey\", fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\n            />}\n            style={{\n              data: {\n                fill: ({ datum }) => colors[datum.colors],\n                fillOpacity: 0.7\n              }\n            }}\n            x=\"key\"\n            y=\"value\"\n          />\n        </VictoryGroup>\n      </VictoryChart>);\n  }\n  else {\n    return (\n      <VictoryChart\n        theme={VictoryTheme.material}\n        width={props.width || 650}\n        height={300}\n        domainPadding={props.pad || 100}\n\n        scale={{ y: props.ylog ? 'log' : 'linear' }}\n        // minDomain={{ y: props.ylog ? 1 : 0 }}\n        maxDomain={{ y: 1 }}\n        // domain={{ y: [0, 1] }}\n        padding={{ left: 79, right: 40, top: 60, bottom: 50 }}\n        containerComponent={<VictoryContainer responsive={false} />}\n      >\n        <VictoryLabel style={{\n          fontSize: 20, paddingBottom: '5em'\n        }} text={props.title} x={(props.width || 560) / 2} y={20} textAnchor=\"middle\" />\n        <VictoryAxis style={{\n          tickLabels: { fontSize: 18, padding: 2 }\n        }} />\n        <VictoryAxis dependentAxis\n          // domain={{x: [0, 1]}}\n          style={{\n            tickLabels: { fontSize: 18, padding: 2 }\n          }}\n          tickFormat={(y) => (y <= 1 ? y * 100 : console.log(y))}\n        />\n        <VictoryLegend x={80} y={40}\n          orientation=\"horizontal\"\n          gutter={1}\n          // style={{ border: { stroke: \"black\" } }}\n          data={[\n            { name: `Percentage of ${props.cate}`, symbol: { fill: colors['1'], type: \"square\" } },\n            { name: \"Percentage of Population\", symbol: { fill: colors['2'], type: \"square\" } },\n          ]}\n        />\n        <VictoryGroup offset={20}\n          colorScale={\"qualitative\"}\n        >\n          <VictoryBar\n\n            barWidth={20}\n            // labels={({ datum }) => (Math.round(datum.value * 100) / 100)}\n            labels={({ datum }) => `${props.cate} Percent: ${numberWithCommas(parseFloat(datum.value).toFixed(2) * 100)}%`}\n            data={[{ key: props.keyv[0], 'value': props.data[props.stateFips + props.countyFips][props.var[0]] || 0, 'colors': props.co },\n            { key: props.keyv[1], 'value': props.data[props.stateFips + props.countyFips][props.var[1]] || 0, 'colors': props.co }]}\n            labelComponent={<VictoryTooltip\n              orientation=\"top\"\n              style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'black' }}\n              constrainToVisibleArea\n              labelComponent={<VictoryLabel dx={-60} textAnchor='start' />}\n              flyoutStyle={{ fill: colors['1'], fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\n            />}\n            style={{\n              data: {\n                fill: ({ datum }) => colors[datum.colors],\n                fillOpacity: 2\n              }\n            }}\n            x=\"key\"\n            y=\"value\"\n          />\n          <VictoryBar\n\n            barWidth={20}\n            data={[{ key: props.keyv[0], 'value': props.data[props.stateFips + props.countyFips][props.var1[0]] || 0, 'colors': '2' },\n            { key: props.keyv[1], 'value': props.data[props.stateFips + props.countyFips][props.var1[1]] || 0, 'colors': '2' }]}\n\n            labels={({ datum }) =>\n              `Population Percent: ${numberWithCommas(parseFloat(datum.value).toFixed(2) * 100)}%`\n            }\n            labelComponent={<VictoryTooltip\n              orientation=\"top\"\n              style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'black' }}\n              constrainToVisibleArea\n              labelComponent={<VictoryLabel dx={-70} textAnchor='start' />}\n              flyoutStyle={{ fill: \"grey\", fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\n            />}\n            style={{\n              data: {\n                fill: ({ datum }) => colors[datum.colors],\n                fillOpacity: 0.7\n              }\n            }}\n            x=\"key\"\n            y=\"value\"\n          />\n        </VictoryGroup>\n      </VictoryChart>);\n  }\n  // console.log(props.data)\n\n}\n\nexport default function CountyReport() {\n\n  let { stateFips, countyFips } = useParams();\n  const allZero = arr => arr.every(v => Math.round(v, 2) === 0.00)\n  // const [countyFips, setCountyFips] = useState('121');\n  const [configsCounty, setConfig] = useState();\n  const [stateName, setStateName] = useState('Georgia');\n  const [countyName, setCountyName] = useState('');\n  const [dateCur, setDateCur] = useState();\n  const [zipCode, setZipCode] = useState('30328');\n  const [zipCodeH, setZipCodeH] = useState('30328');\n  const [zipCodeD, setZipCodeD] = useState('30328');\n  const [zipCodeFinal, setZipCodeFinal] = useState('30328');\n  const history = useHistory();\n  const [data, setData] = useState();\n  const [data_cases, setDataCG] = useState();\n  const [data_deaths, setDataDG] = useState();\n  const [datades_cases, setDatadesCG] = useState();\n  const [datades_deaths, setDatadesDG] = useState();\n  const [dataG, setDataG] = useState();\n  const [dataZip, setDataZip] = useState();\n  const [dataTS, setDataTS] = useState();\n  const [mapOut, setDataMapOut] = useState();\n\n  const [legendMax, setLegendMax] = useState([]);\n  const [legendMaxD, setLegendMaxD] = useState([]);\n\n  const [legendMax_graph, setLegendMaxGraph] = useState(0);\n\n  const [legendMin, setLegendMin] = useState([]);\n  const [legendMinD, setLegendMinD] = useState([]);\n\n  const [legendSplit, setLegendSplit] = useState([]);\n  const [legendSplitD, setLegendSplitD] = useState([]);\n  const [colorScale, setColorScale] = useState();\n  const [colorScaleD, setColorScaleD] = useState();\n\n\n  // const [metric, setMetric] = useState('mean7daycases');\n  const [tooltipContent, setTooltipContent] = useState('');\n  const [covidMetric, setCovidMetric] = useState({\n    casescum: 'N/A', deathscum: 'N/A', casescumR: 'N/A', deathscumR: 'N/A',\n    casesdailymean14: 'N/A', deathsdailymean14: 'N/A', casesdailymean14R: 'N/A', deathsdailymean14R: 'N/A', \"cfr\": 'N/A', \"cfrcompare\": '', t: 'n/a'\n  });\n  const [covidMetricLast, setCovidMetricLast] = useState({\n    casescum: 'N/A', deathscum: 'N/A', casescumR: 'N/A', deathscumR: 'N/A',\n    casesdailymean14: 'N/A', deathsdailymean14: 'N/A', casesdailymean14R: 'N/A', deathsdailymean14R: 'N/A', \"cfr\": 'N/A', \"cfrcompare\": '', t: 'n/a'\n  });\n  const [covidMetricGa, setCovidMetricGa] = useState({\n    casescum: 'N/A', deathscum: 'N/A', casescumR: 'N/A', deathscumR: 'N/A',\n    casesdailymean14: 'N/A', deathsdailymean14: 'N/A', casesdailymean14R: 'N/A', deathsdailymean14R: 'N/A', \"cfr\": 'N/A', \"cfrcompare\": '', t: 'n/a'\n  });\n  const [covidMetric14, setCovidMetric14] = useState({\n    casescum: 'N/A', deathscum: 'N/A', casescumR: 'N/A', deathscumR: 'N/A',\n    casesdailymean14: 'N/A', deathsdailymean14: 'N/A', casesdailymean14R: 'N/A', deathsdailymean14R: 'N/A', \"cfr\": 'N/A', \"cfrcompare\": '', t: 'n/a'\n  });\n  const [varMap, setVarMap] = useState({});\n  // const [countyFips, setCountyFips] = useState('');\n\n\n  const varNameMap = {\n    \"casescum\": { \"name\": 'cases', \"text\": \"The map shows the total number of confirmed COVID-19 cases in each zip code as of \" },\n    \"deathscum\": { \"name\": 'deaths', \"text\": \"The map shows the total number of confirmed COVID-19 deaths in each zip code as of \" },\n    \"casescumR\": { \"name\": 'cases per 100,000 residents', \"text\": \"The map shows the total number of confirmed COVID-19 cases per 100,000 residents in each zip code as of \" },\n    \"deathscumR\": { \"name\": 'deaths per 100,000 residents', \"text\": \"The map shows the total number of confirmed COVID-19 deaths per 100,000 residents in each zip code as of \" }\n  };\n\n  const [delayHandler, setDelayHandler] = useState(null)\n\n  useEffect(() => {\n\n    const configMatched = configscounty.find(s => s.countyfips === countyFips);\n\n    // let projection = d3.geoAlbersUsa();\n    // // let gps = [-85.504701, 34.855196]\n    // let gps = [-0.6, 38.7]\n    // console.log(projection.center)\n    // console.log(countyfips);\n\n    // console.log(configMatched);\n    if (!configMatched || !fips2county[stateFips + countyFips]) {\n      history.push('/');\n    } else {\n      setConfig(configMatched);\n      // setStateName(configMatched.name);\n      setCountyName(fips2county[stateFips + countyFips]);\n\n      fetch('/data/rawdata/variable_mapping.json').then(res => res.json())\n        .then(x => setVarMap(x));\n\n      fetch('/data/data_us.json').then(res => res.json())\n        .then(x => setData(x));\n      fetch('/data/data.json').then(res => res.json())\n        .then(x => setDateCur(x));\n      fetch('/data/data_cases_ga.json').then(res => res.json())\n        .then(x => setDataCG(x)\n        );\n      fetch('/data/data_deaths_ga.json').then(res => res.json())\n        .then(x => setDataDG(x));\n      fetch('/data/data_describe_cases.json').then(res => res.json())\n        .then(x => setDatadesCG(x));\n      fetch('/data/data_describe_deaths.json').then(res => res.json())\n        .then(x => setDatadesDG(x));\n      fetch('/data/data.json').then(res => res.json())\n        .then(x => setDataG(x));\n\n      fetch('/data/zipcode.json').then(res => res.json())\n        .then(x => setDataZip(x));\n\n      fetch('/data/timeseries13' + '.json').then(res => res.json())\n        .then(x => setDataTS(x));\n\n      fetch('/data/mapout' + '.json').then(res => res.json())\n        .then(x => setDataMapOut(x));\n\n      fetch('/data/timeseries13' + '.json').then(res => res.json())\n        .then(\n          x => {\n            // setDataTS(x);\n            var max = 0\n            var length = 0\n            _.each(x[stateFips + countyFips], d => {\n              length = length + 1\n              // console.log(d);\n              if (d['cases'] > max) {\n                max = d['cases'];\n              }\n\n            });\n            setLegendMaxGraph(max.toFixed(0));\n            // console.log(max.toFixed(0));\n          });\n\n      fetch('/data/zipcode.json').then(res => res.json())\n        .then(x => {\n          // setDataZip(x);\n\n          const cs = scaleQuantile()\n            .domain(_.map(_.filter(_.map(x, (d, k) => {\n              d.fips = k\n              return d\n            }),\n              d => (\n                (d.casescum >= 0 &&\n                  d.fips.length === 5 && Number(d.fips) >= 30001 && Number(d.fips) <= 31999) || (d.casescum >= 0 &&\n                    d.fips.length === 5 && Number(d.fips) >= 39800 && Number(d.fips) <= 39999))),\n              d => d['casescum']))\n            .range(colorPalette);\n\n          let scaleMap = {}\n          _.each(_.filter(_.map(x, (d, k) => {\n            d.fips = k\n            return d\n          }),\n            d => (\n              (d.casescum >= 0 &&\n                d.fips.length === 5 && Number(d.fips) >= 30001 && Number(d.fips) <= 31999) || (d.casescum >= 0 &&\n                  d.fips.length === 5 && Number(d.fips) >= 39800 && Number(d.fips) <= 39999)))\n            , d => {\n              scaleMap[d['casescum']] = cs(d['casescum'])\n            });\n          setColorScale(scaleMap);\n\n          var max = 0\n          var min = 100\n          var length = 0\n          _.each(x, d => {\n            // console.log(d.fips[0]);\n            if ((d['casescum'] > max && d.fips.length === 5 && Number(d.fips) >= 30001 && Number(d.fips) <= 31999) ||\n              (d['casescum'] > max && d.fips.length === 5 && Number(d.fips) >= 39800 && Number(d.fips) <= 39999)\n            ) {\n              max = d['casescum'];\n              // console.log(d.fips)\n            } else if ((d.fips.length === 5 && d['casescum'] < min && d['casescum'] >= 0 && Number(d.fips) >= 30001 && Number(d.fips) <= 31999) ||\n              (d.fips.length === 5 && d['casescum'] < min && d['casescum'] >= 0 && Number(d.fips) >= 39800 && Number(d.fips) <= 39999)\n            ) {\n              min = d['casescum']\n              // console.log(d.fips)\n            }\n\n          });\n          if (max > 999) {\n            max = (max / 1000).toFixed(0) + \"K\";\n            setLegendMax(max);\n          } else {\n            setLegendMax(max.toFixed(0));\n\n          }\n          setLegendMin(min.toFixed(0));\n\n          var split = scaleQuantile()\n            .domain(_.map(_.filter(_.map(x, (d, k) => {\n              d.fips = k\n              return d\n            }),\n              d => (\n                (d.casescum >= 0 &&\n                  d.fips.length === 5 && Number(d.fips) >= 30001 && Number(d.fips) <= 31999) || (d.casescum >= 0 &&\n                    d.fips.length === 5 && Number(d.fips) >= 39800 && Number(d.fips) <= 39999))),\n              d => d['casescum']))\n            .range(colorPalette);\n\n          setLegendSplit(split.quantiles());\n          // console.log(split.quantiles());\n        });\n\n\n    }\n  }, [countyFips]);\n\n  useEffect(() => {\n    fetch('/data/zipcode.json').then(res => res.json())\n      .then(x => {\n        const csD = scaleQuantile()\n          .domain(_.map(_.filter(_.map(x, (d, k) => {\n            d.fips = k\n            return d\n          }),\n            d => (\n              (d.deathscum >= 0 &&\n                d.fips.length === 5 && Number(d.fips) >= 30001 && Number(d.fips) <= 31999) || (d.deathscum >= 0 &&\n                  d.fips.length === 5 && Number(d.fips) >= 39800 && Number(d.fips) <= 39999))),\n            d => d['deathscum']))\n          .range(colorPalette);\n\n        let scaleMap = {}\n        _.each(_.filter(_.map(x, (d, k) => {\n          d.fips = k\n          return d\n        }),\n          d => (\n            (d.deathscum >= 0 &&\n              d.fips.length === 5 && Number(d.fips) >= 30001 && Number(d.fips) <= 31999) || (d.deathscum >= 0 &&\n                d.fips.length === 5 && Number(d.fips) >= 39800 && Number(d.fips) <= 39999)))\n          , d => {\n            scaleMap[d['deathscum']] = csD(d['deathscum'])\n          });\n        setColorScaleD(scaleMap);\n\n        var max = 0\n        var min = 100\n        _.each(x, d => {\n          // console.log(d.fips[0]);\n          if ((d['deathscum'] > max && d.fips.length === 5 && Number(d.fips) >= 30001 && Number(d.fips) <= 31999) ||\n            (d['deathscum'] > max && d.fips.length === 5 && Number(d.fips) >= 39800 && Number(d.fips) <= 39999)\n          ) {\n            max = d['deathscum'];\n            // console.log(max)\n          } else if ((d.fips.length === 5 && d['deathscum'] < min && d['deathscum'] >= 0 && Number(d.fips) >= 30001 && Number(d.fips) <= 31999) ||\n            (d.fips.length === 5 && d['deathscum'] < min && d['deathscum'] >= 0 && Number(d.fips) >= 39800 && Number(d.fips) <= 39999)\n          ) {\n            min = d['deathscum']\n            // console.log(d.fips)\n          }\n\n\n        });\n        if (max > 999) {\n          max = (max / 1000).toFixed(0) + \"K\";\n          setLegendMaxD(max);\n        } else {\n          setLegendMaxD(max.toFixed(0));\n\n        }\n        setLegendMinD(min.toFixed(0));\n\n        var split = scaleQuantile()\n          .domain(_.map(_.filter(_.map(x, (d, k) => {\n            d.fips = k\n            return d\n          }),\n            d => (\n              (d.deathscum >= 0 &&\n                d.fips.length === 5 && Number(d.fips) >= 30001 && Number(d.fips) <= 31999) || (d.deathscum >= 0 &&\n                  d.fips.length === 5 && Number(d.fips) >= 39800 && Number(d.fips) <= 39999))),\n            d => d['deathscum']))\n          .range(colorPalette);\n\n        setLegendSplitD(split.quantiles());\n        // console.log(split.thresholds().reverse());\n      });\n  }, [])\n\n  useEffect(() => {\n    if (dataTS && dataTS[stateFips + countyFips]) {\n      setCovidMetric(dataG[stateFips + countyFips]);\n      setCovidMetricGa(dataG[stateFips]);\n      // setCovidMetric(dataG[stateFips + countyFips]);\n      setCovidMetric14(_.takeRight(dataTS[stateFips + countyFips], 14)[0]);\n      setCovidMetricLast(_.takeRight(dataTS[stateFips + countyFips])[0]);\n    }\n  }, [dataTS])\n\n  if (data && dataTS && varMap) {\n\n    return (\n      <div>\n\n        <AppBar menu='countyReport' />\n        <Container fluid style={{ marginTop: '8em' }}>\n          <Breadcrumb style={{ paddingBottom: '2em', paddingLeft: '30em' }}>\n            <Breadcrumb.Section link onClick={() => history.push('/' + stateFips)}>{stateName}</Breadcrumb.Section>\n            <Breadcrumb.Divider />\n            <Breadcrumb.Section active>{countyName}</Breadcrumb.Section>\n            <Breadcrumb.Divider />\n          </Breadcrumb>\n\n          <div style={sectionStyle2}>\n            <Header as='h2' style={{\n              textAlign: 'center', color: 'black', fontSize: \"22pt\",\n              paddingTop: '3em', paddingBottom: '3em'\n            }}>\n              <Header.Content>\n                Summary of COVID-19 in <b>{countyName}</b>, GA\n              </Header.Content>\n            </Header>\n          </div>\n        </Container>\n        <Container style={{ marginTop: '8em', minWidth: '1260px', paddingRight: 0 }}>\n          {configsCounty &&\n            <div>\n              {/* <Header as='h1' style={{ fontWeight: 300 }}>\n                <Header.Content>\n                  \n                  <b>{countyName}</b>\n                  <Header.Subheader style={{fontWeight: 300}}>\n              See how health determinants impact COVID-19 outcomes. \n              </Header.Subheader>\n                </Header.Content>\n              </Header> */}\n              <Divider horizontal style={{ minWidth: '1260px', fontWeight: 600, color: '#232423', fontSize: '18pt', paddingTop: '1em' }}> COVID-19 <b>cases</b> in {countyName}</Divider>\n\n              <Grid style={{ paddingTop: '2em', width: \"1260px\", paddingLeft: '1.5em' }} centered>\n                {/* <Header as='h2' style={{ fontWeight: 300, textAlign: 'center' }} >\n                  <Header.Content>\n                    COVID-19 <b>cases</b> in {countyName}\n                  </Header.Content>\n                </Header> */}\n                <Grid.Row style={{ paddingTop: '1em' }}>\n                  <Grid.Column width={16} style={{ paddingLeft: '0', paddingRight: '0' }}>\n                    <Table fixed inverted style={sectionStyle1}>\n                      <Table.Header >\n                        <Table.Row textAlign='center' >\n                          <Table.HeaderCell colSpan='1' style={{ width: 150 }}> </Table.HeaderCell>\n                          <Table.HeaderCell style={{ width: 200 }}> <Popup\n                            trigger={<p style={{ paddingLeft: '4.5em' }}>ALL CASES TO DATE</p>\n                            }\n                            content={\"All confirmed cases reported to DPH as of \" + new Date(dateCur[stateFips + countyFips].todaydat * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' })}\n                            basic /></Table.HeaderCell>\n                          <Table.HeaderCell style={{ width: 200 }}><Popup\n                            trigger={<p style={{ paddingLeft: '3em' }}>CASES IN PAST 14 DAYS</p>\n                            }\n                            content={\"All confirmed cases reported to DPH during the 14 days preceding the report publication date.\"}\n                            basic /> </Table.HeaderCell>\n                          <Table.HeaderCell style={{ width: 200 }}><Popup\n                            trigger={<p style={{ paddingLeft: '2.5em' }}>CASES PER 100K (PAST 14 DAYS)</p>\n                            }\n                            content={\"14-day case count/100K residents based on 2020 population projects derived from census data.\"}\n                            basic /> </Table.HeaderCell>\n                          <Table.HeaderCell style={{ width: 200 }}> <Popup\n                            trigger={<p>14-DAY RATE CATEGORY</p>\n                            } flowing hoverable>\n                            Based on the 14-day case rate\n                          <List as='ul'>\n                              <List.Item as='li'>High: {'>'} 100 cases/100K</List.Item>\n                              <List.Item as='li'>Moderately high: {\">\"} 50-100 cases/100K</List.Item>\n                              <List.Item as='li'>Moderately: {\">\"} 10-50 cases/100K</List.Item>\n                              <List.Item as='li'>Low: {\">\"} 0-10 cases/100K</List.Item>\n                              <List.Item as='li'>Less than 5 cases reported, rate not calculated</List.Item>\n                            </List>\n                          </Popup></Table.HeaderCell>\n                          <Table.HeaderCell style={{ width: 200 }}> <Popup\n                            trigger={<p>CHANGE IN LAST 2 WEEKS</p>\n                            } flowing hoverable>\n                            Change in case count during the previous 14 days, comparing<br></br> the second 7-day period to the first 7-day period.\n                          <List as='ul'>\n                              <List.Item as='li'>Increasing: 5% or greater change</List.Item>\n                              <List.Item as='li'>Decreasing: -5% or less change</List.Item>\n                              <List.Item as='li'>Less than 5% change</List.Item>\n                            </List>\n                          </Popup></Table.HeaderCell>\n\n                        </Table.Row>\n                      </Table.Header>\n                    </Table>\n                    <Table fixed >\n                      <Table.Header >\n                        <Table.Row textAlign='center'>\n                          <Table.HeaderCell style={{ fontSize: '18px' }}> {countyName} </Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px', color: '#337fb5' }}>{covidMetric.casescum === null || covidMetric.casescum < 0 ? '0' : covidMetric.casescum.toLocaleString()}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px', color: '#337fb5' }}>{covidMetric.casescum14day === null || covidMetric.casescum14day < 0 ? '0' : numberWithCommas(parseFloat(covidMetric.casescum14day).toFixed(0)).toLocaleString()}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px', color: '#337fb5' }}>{covidMetric.casescum14dayR === null || covidMetric.casescum14dayR < 0 ? '0' : numberWithCommas(parseFloat(covidMetric.casescum14dayR).toFixed(2)).toLocaleString()}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '18px' }}>{covidMetric.category14day === null || covidMetric.category14day < 0 ? '0' : covidMetric.category14day}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '18px' }}>{covidMetric.change14day === null ? '0' : covidMetric.change14day}</Table.HeaderCell>\n                        </Table.Row>\n                        <Table.Row textAlign='center'>\n                          <Table.HeaderCell style={{ fontSize: '18px' }}>Georgia</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px', color: '#337fb5' }}>{covidMetricGa.casescum === null || covidMetricGa.casescum < 0 ? '0' : covidMetricGa.casescum.toLocaleString()}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px', color: '#337fb5' }}>{covidMetricGa.casescum14day === null || covidMetricGa.casescum14day < 0 ? '0' : numberWithCommas(parseFloat(covidMetricGa.casescum14day).toFixed(0)).toLocaleString()}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px', color: '#337fb5' }}>{covidMetricGa.casescum14dayR === null || covidMetricGa.casescum14dayR < 0 ? '0' : numberWithCommas(parseFloat(covidMetricGa.casescum14dayR).toFixed(2)).toLocaleString()}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '18px' }}>{covidMetricGa.category14day === null || covidMetricGa.category14day < 0 ? '0' : covidMetricGa.category14day}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '18px' }}>{covidMetricGa.change14day === null || covidMetricGa.change14day < 0 ? '0' : covidMetricGa.change14day}</Table.HeaderCell>\n                        </Table.Row>\n                      </Table.Header>\n                    </Table>\n                  </Grid.Column>\n\n                </Grid.Row>\n              </Grid>\n\n              <Divider horizontal style={{ fontWeight: 600, color: '#232423', fontSize: '18pt', paddingTop: '1em' }}> COVID-19 <b>deaths</b> in {countyName}</Divider>\n              <Grid style={{ paddingTop: '2em', width: \"1260px\", paddingLeft: '1.5em' }} centered>\n                <Grid.Row style={{ paddingTop: '1em' }}>\n                  <Grid.Column width={16} style={{ paddingLeft: '0', paddingRight: '0' }}>\n                    <Table fixed inverted style={sectionStyle1}>\n                      <Table.Header >\n                        <Table.Row textAlign='center'\n\n                        >\n                          <Table.HeaderCell colSpan='1' style={{ width: 150 }}> </Table.HeaderCell>\n                          <Table.HeaderCell style={{ width: 200 }}><Popup\n                            trigger={<p style={{ paddingLeft: '6.2em' }}>ALL DEATHS TO DATE</p>\n                            }\n                            content={\"All confirmed deaths reported to DPH as of \" + new Date(dateCur.date * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' })}\n                            basic /> </Table.HeaderCell>\n                          <Table.HeaderCell style={{ width: 230 }}><Popup\n                            trigger={<p style={{ paddingLeft: '4.2em' }}> DEATHS IN PAST 14 DAYS</p>\n                            }\n                            content={\"All confirmed deaths reported to DPH during the 14 days preceding the report publication date.\"}\n                            basic /></Table.HeaderCell>\n                          <Table.HeaderCell style={{ width: 200 }}><Popup\n                            trigger={<p style={{ paddingLeft: '0.4em' }}> DEATHS PER 100K (PAST 14 DAYS)</p>\n                            }\n                            content={\"14-day deaths count/100K residents based on 2020 population projects derived from census data.\"}\n                            basic /></Table.HeaderCell>\n                          <Table.HeaderCell style={{ width: 200 }}><Popup\n                            trigger={<p>CASE FATALITY RATIO (%)</p>\n                            }\n                            content={\"The case fatality ratio is the percent of all confirmed cases who have been reported as having died. While this is used as a measure of disease severity, the ratio may also be affected by the level of testing and quality of follow-up data on cases.\"}\n                            basic /> </Table.HeaderCell>\n\n                        </Table.Row>\n                      </Table.Header>\n                    </Table>\n\n                    <Table celled fixed singleLine>\n                      <Table.Header>\n\n\n                        <Table.Row textAlign='center'>\n                          <Table.HeaderCell style={{ fontSize: '18px' }}> {countyName} </Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px', color: '#337fb5' }}>{covidMetric.deathscum === null || covidMetric.deathscum < 0 ? '0' : covidMetric.deathscum.toLocaleString()}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px' , color: '#337fb5'}}>{covidMetric.deathscum14day === null || covidMetric.deathscum14day < 0 ? '0' : numberWithCommas(parseFloat(covidMetric.deathscum14day).toFixed(0)).toLocaleString()}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px' , color: '#337fb5'}}>{covidMetric.deathscum14dayR === null || covidMetric.deathscum14dayR < 0 ? '0' : numberWithCommas(parseFloat(covidMetric.deathscum14dayR).toFixed(2)).toLocaleString()}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px', color: '#337fb5' }}>{covidMetric.cfr === null || covidMetric.cfr < 0 ? '0' : numberWithCommas(parseFloat(covidMetric.cfr).toFixed(2)).toLocaleString() + '%'}</Table.HeaderCell>\n                        </Table.Row>\n                        <Table.Row textAlign='center'>\n                          <Table.HeaderCell style={{ fontSize: '18px' }}>Georgia</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px', color: '#337fb5' }}>{covidMetricGa.deathscum === null || covidMetricGa.deathscum < 0 ? '0' : covidMetricGa.deathscum.toLocaleString()}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px', color: '#337fb5' }}>{covidMetricGa.deathscum14day === null || covidMetricGa.deathscum14day < 0 ? '0' : numberWithCommas(parseFloat(covidMetricGa.deathscum14day).toFixed(0)).toLocaleString()}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px', color: '#337fb5' }}>{covidMetricGa.deathscum14dayR === null || covidMetricGa.deathscum14dayR < 0 ? '0' : numberWithCommas(parseFloat(covidMetricGa.deathscum14dayR).toFixed(2)).toLocaleString()}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px' , color: '#337fb5'}}>{covidMetricGa.cfr === null || covidMetricGa.cfr < 0 ? '0' : numberWithCommas(parseFloat(covidMetricGa.cfr).toFixed(2)).toLocaleString() + '%'}</Table.HeaderCell>\n                        </Table.Row>\n                      </Table.Header>\n                    </Table>\n                  </Grid.Column>\n\n                </Grid.Row>\n\n                <Grid.Row style={{ paddingTop: 0 }}>\n                  <Grid.Column style={{ paddingLeft: '0.01', paddingRight: '0' }}>\n                    <small style={{ fontWeight: 300, fontSize: 16, color: 'black' }} align=\"justify\">\n                      As of {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' : (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}, there were a total of {covidMetric.casescum.toLocaleString()} confirmed cases of COVID-19 and {covidMetric.deathscum.toLocaleString()} deaths due to COVID-19 reported to DPH for {countyName}. In {countyName}, this translates to {numberWithCommas(parseFloat(covidMetric.casescumR).toFixed(0)).toLocaleString()} case(s) per 100,000 residents and {numberWithCommas(parseFloat(covidMetric.deathscumR).toFixed(0)).toLocaleString()} death(s) per 100,000 residents.\n                        On a day-to-day basis, {numberWithCommas(parseFloat(covidMetric.casescum14dayR).toFixed(0)).toLocaleString()} new cases and {numberWithCommas(parseFloat(covidMetric.deathscum14dayR).toFixed(0)).toLocaleString()} new deaths are reported to DPH on average (based on a 14-day rolling average). This means that there are {covidMetric.casescum14dayR === null || covidMetric.casescum14dayR < 0 ? '0' : numberWithCommas(parseFloat(covidMetric.casescum14dayR).toFixed(0)).toLocaleString()} new cases and {covidMetric.deathscum14dayR === null || covidMetric.deathscum14dayR < 0 ? '0' : numberWithCommas(parseFloat(covidMetric.deathscum14dayR).toFixed(0)).toLocaleString()} new deaths per 100,000 residents in {countyName}. The case-fatality ratio measures\n                          the proportion of confirmed COVID-19 cases that ultimately die due to the disease. This is used by epidemiologists to gauge the severity of disease in a particular locale.  In {countyName}, the case-fatality ratio was {covidMetric.cfr === null || covidMetric.cfr < 0 ? '0' : numberWithCommas(parseFloat(covidMetric.cfr).toFixed(2)).toLocaleString() + '%'}, which is {covidMetric.cfrcompare === null || covidMetric.cfrcompare < 0 ? '0' : covidMetric.cfrcompare} than the national average of 4%. All of these data must be interpreted in light of constraints on testing, PUI follow-up quality, and reporting lags in the county.\n                  </small>\n                  </Grid.Column>\n                </Grid.Row>\n              </Grid>\n\n              <Divider horizontal style={{ fontWeight: 300, color: '#b1b3b3', fontSize: '1.2em', paddingTop: '1em' }}></Divider>\n              <Grid column={2} style={{ paddingTop: '2em', paddingBottom: '2em', width: \"1260px\" }}>\n                <Grid.Row style={{ paddingTop: '2em' }}>\n\n                  <Grid.Column width={8}>\n                    <Header as='h2' style={{ fontWeight: \"bold\", fontSize: \"27px\", paddingLeft: \".5em\" }}>\n                      <Header.Content>\n                        Daily cases in {countyName}\n                        <Header.Subheader style={{ fontWeight: 300 }}>\n                        </Header.Subheader>\n                      </Header.Content>\n                    </Header>\n                    <svg width=\"550\" height=\"90\">\n                      <rect x={50} y={50} width=\"15\" height=\"15\" style={{ fill: stateColor, strokeWidth: 1, stroke: stateColor }} />\n                      <rect x={50} y={22} width=\"15\" height=\"1\" style={{ fill: countyColor, strokeWidth: 1, stroke: countyColor }} />\n                      <text x={75} y={64} style={{ fontSize: 18 }}> Daily new cases </text>\n                      <text x={75} y={30} style={{ fontSize: 18 }}>7-D Rolling average</text>\n                    </svg>\n                    <VictoryChart theme={VictoryTheme.material}\n                      containerComponent={\n                        <VictoryVoronoiContainer\n                          responsive={false}\n                          flyoutStyle={{ fill: \"black\" }}\n\n                        />\n                      }\n                      width={550}\n                      height={450}\n                      padding={{ left: 40, right: 60, top: 10, bottom: 60 }}>\n                      <VictoryAxis\n                        style={{\n                          tickLabels: { fontSize: 20, padding: 5 }\n                        }}\n                        tickFormat={(t) => new Date(t * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric' })}\n                        tickValues={[\n                          // 1583035200, 1585713600, 1588305600, 1590984000, 1593576000\n                          dataTS['13001'][0].t,\n                          dataTS[\"13001\"][32].t,\n                          dataTS[\"13001\"][62].t,\n                          dataTS[\"13001\"][93].t,\n                          dataTS[\"13001\"][123].t,\n                          dataTS[\"13001\"][154].t,\n                          dataTS[\"13001\"][dataTS[\"13001\"].length - 1].t\n                        ]}\n                      />\n                      <VictoryAxis dependentAxis tickCount={5}\n                        style={{\n                          tickLabels: { fontSize: 17, paddingLeft: '0em' }\n                        }}\n                        tickFormat={(y) => (y < 1000 ? y : (y / 1000 + 'k'))}\n                      />\n\n                      <VictoryBar style={{ data: { fill: stateColor } }} barWidth={4} data={dataTS[stateFips + countyFips] ? dataTS[stateFips + countyFips] : dataTS[\"99999\"]}\n                        x='t' y='casesdaily'\n                      />\n                      <VictoryLine name=\"Line\" style={{ data: { stroke: countyColor } }} data={dataTS[stateFips + countyFips] ? dataTS[stateFips + countyFips] : dataTS[\"99999\"]}\n                        x='t' y='casesdailymean7'\n                        labels={({ datum }) => `${countyName}\\n` +\n                          `Date: ${new Date(datum.t * 1000).toLocaleDateString()}\\n` +\n                          `Daily new cases: ${Math.round(datum.casesdaily, 2)}\\n` +\n                          `7-d Rolling average of daily new cases: ${Math.round(datum.casesdailymean7, 2)}`\n                        }\n                        labelComponent={\n                          <VictoryTooltip\n                            orientation=\"top\"\n                            style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'white' }}\n                            constrainToVisibleArea\n                            labelComponent={<VictoryLabel dx={-130} textAnchor='start' />}\n                            flyoutStyle={{ fill: \"black\", fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\n                          />\n                        }\n                      />\n\n                    </VictoryChart>\n                  </Grid.Column>\n                  <Grid.Column width={8}>\n                    <Header as='h2' style={{ fontWeight: \"bold\", fontSize: \"27px\", paddingLeft: \".5em\" }}>\n                      <Header.Content>\n                        Daily deaths in {countyName}\n                        <Header.Subheader style={{ fontWeight: 300 }}>\n                        </Header.Subheader>\n                      </Header.Content>\n                    </Header>\n                    <svg width=\"550\" height=\"90\">\n                      <rect x={50} y={50} width=\"15\" height=\"15\" style={{ fill: stateColor, strokeWidth: 1, stroke: stateColor }} />\n                      <rect x={50} y={22} width=\"15\" height=\"1\" style={{ fill: countyColor, strokeWidth: 1, stroke: countyColor }} />\n                      <text x={75} y={64} style={{ fontSize: 18 }}> Daily new deaths </text>\n                      <text x={75} y={30} style={{ fontSize: 18 }}>7-D Rolling average</text>\n                    </svg>\n                    <VictoryChart theme={VictoryTheme.material}\n                      containerComponent={\n                        <VictoryVoronoiContainer\n                          responsive={false}\n                          flyoutStyle={{ fill: \"black\" }}\n                        />\n                      }\n                      width={550}\n                      height={450}\n                      padding={{ left: 50, right: 60, top: 10, bottom: 60 }}>\n\n                      <VictoryAxis\n                        style={{\n                          tickLabels: { fontSize: 20, padding: 5 }\n                        }}\n                        tickFormat={(t) => new Date(t * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric' })}\n                        tickValues={[\n                          dataTS['13001'][0].t,\n                          dataTS[\"13001\"][32].t,\n                          dataTS[\"13001\"][62].t,\n                          dataTS[\"13001\"][93].t,\n                          dataTS[\"13001\"][123].t,\n                          dataTS[\"13001\"][154].t,\n                          dataTS[\"13001\"][dataTS[\"13001\"].length - 1].t\n                        ]}\n                      />\n                      <VictoryAxis dependentAxis tickCount={5}\n                        style={{\n                          tickLabels: { fontSize: 20, padding: 5 }\n                        }}\n                        tickFormat={(y) => (y < 1000 ? (Math.round(y, 2) === 0.00 ? \" \" : y) : (y / 1000 + 'k'))}\n                      />\n\n                      <VictoryBar style={{ data: { fill: stateColor } }} barWidth={4} data={dataTS[stateFips + countyFips] ? dataTS[stateFips + countyFips] : dataTS[\"99999\"]}\n                        x='t' y='deathsdaily'\n                      />\n                      <VictoryLine name=\"Line\" style={{ data: { stroke: countyColor } }} data={dataTS[stateFips + countyFips] ? dataTS[stateFips + countyFips] : dataTS[\"99999\"]}\n                        x='t' y='deathsdailymean7'\n                        labels={({ datum }) =>\n                          `${countyName}\\n` +\n                          `Date: ${new Date(datum.t * 1000).toLocaleDateString()}\\n` +\n                          `Daily new deaths: ${Math.round(datum.deathsdaily, 2)}\\n` +\n                          `7-d Rolling average of daily new deaths: ${Math.round(datum.deathsdailymean7, 2)}`}\n                        labelComponent={\n                          <VictoryTooltip\n                            orientation=\"top\"\n                            style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'white' }}\n                            constrainToVisibleArea\n                            labelComponent={<VictoryLabel dx={-130} textAnchor='start' />}\n                            flyoutStyle={{ fill: \"black\", fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }}\n                          />\n                        }\n                      />\n\n                    </VictoryChart>\n                  </Grid.Column>\n                </Grid.Row>\n                <Grid.Row style={{ paddingTop: '2em', paddingLeft: '0em', paddingRight: '2em' }} >\n                  <Grid.Column width={8} style={{ paddingLeft: '1em', paddingRight: '3em' }}>\n                    <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\n                      As of {covidMetricLast.t === 'n/a' ? 'N/A' : (new Date(covidMetricLast.t * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}, this chart shows the daily number of new cases of confirmed COVID-19 in <b>{countyName}</b>. The daily number reflects the date the case was first reported to DPH.\n                  The vertical bars show the number of new daily cases while the line shows the 7-day moving average of new daily cases.\n                  </small>\n                  </Grid.Column>\n                  <Grid.Column width={8} style={{ paddingLeft: '3em', paddingRight: '3em' }}>\n                    <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\n                      As of {covidMetricLast.t === 'n/a' ? 'N/A' : (new Date(covidMetricLast.t * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}, this chart shows the daily number of new deaths of confirmed COVID-19 in <b>{countyName}</b>. The daily number reflects the date the death was first reported to DPH.\n                  The vertical bars show the number of new daily deaths while the line shows the 7-day moving average of new daily cases.\n                  </small>\n                  </Grid.Column>\n                </Grid.Row>\n                <Grid.Row style={{ paddingTop: '8em' }}>\n                  <Grid.Column width={9}>\n                    <Header as='h2' style={{ fontWeight: 400, paddingLeft: '1em' }}>\n                      <Header.Content >\n                        <strong>Confirmed COVID-19 cases {countyName} by zip code</strong>\n                        {/* <Header.Subheader style={{fontWeight: 300}}>.</Header.Subheader> */}\n                      </Header.Content>\n                    </Header>\n                    <svg width=\"120\" height=\"300\" style={{ paddingLeft: '3.5em' }}>\n                      {_.map(colorPalette, (color, i) => {\n                        return <rect key={i} y={20 * i} x={25} width=\"20\" height=\"20\" style={{ fill: colorPalette[(colorPalette.length - 1 - i).toString()], strokeWidth: 1, stroke: colorPalette[(colorPalette.length - 1 - i).toString()] }} />\n                      })}\n                      {/* <text y={15} x={47} style={{fontSize: '0.8em'}}>High</text>\n                  <text y={20 * (colorPalette.length)} x={47} style={{fontSize: '0.8em'}}>Low</text> */}\n                      {/* {_.map(legendSplit, (splitpoint, i) => {\n                        if (legendSplit[i] < 1) {\n                          return <text key={i} y={21 * (legendSplit.length - i)} x={47} style={{ fontSize: '0.8em' }}> {legendSplit[i].toFixed(1)}</text>\n                        }\n                        return <text key={i} y={21 * ((legendSplit.length - i))} x={47} style={{ fontSize: '0.8em' }}> {legendSplit[i].toFixed(0)}</text>\n                      })} */}\n                      <text y={20 * (colorPalette.length)} x={47} style={{ fontSize: '0.8em' }}> {legendMin} </text>\n                      <text y={8} x={47} style={{ fontSize: '0.8em' }}>{legendMax}</text>\n                    </svg>\n\n                    <ComposableMap projection=\"geoAlbersUsa\"\n                      style={{ paddingLeft: '2em' }}\n                      projectionConfig={{ scale: `${configsCounty.scale}` }}\n                      width={500}\n                      height={350}\n                      data-tip=\"\"\n                      offsetX={configsCounty.offsetX}\n                      offsetY={configsCounty.offsetY}>\n                      <Geographies geography={configsCounty.url}>\n                        {({ geographies }) => geographies.map(geo =>\n                          <Geography\n                            key={geo.rsmKey}\n                            geography={geo}\n                            style={{\n                              default: {\n                                stroke: \"#607D8B\",\n                                strokeWidth: 0.95,\n                                outline: \"none\",\n                              }\n                            }}\n                            onMouseEnter={(event) => {\n                              // console.log(event);\n                              // setCountyFips(geo.properties.COUNTYFP);\n                              setCountyName(fips2county[stateFips + geo.properties.COUNTYFP]);\n                              setZipCode(geo.properties.ZCTA5CE10);\n                              setZipCodeFinal(geo.properties.ZCTA5CE10);\n                              setTooltipContent(<div><font size=\"+2\"><b >{geo.properties.ZCTA5CE10}</b> </font> <br />\n                                {/* <b>Total Cases</b>: {dataZip[geo.properties.ZCTA5CE10]['casescum']} <br />\n                                <b>Total Deaths</b>: {dataZip[geo.properties.ZCTA5CE10]['deathscum']} <br /> */}\n                              </div>);\n                            }}\n                            onMouseLeave={(event) => {\n                              setTooltipContent(\"\")\n                            }}\n                            fill={zipCode === geo.properties.ZCTA5CE10 ? countyColor :\n                              ((colorScale && dataZip[geo.properties.ZCTA5CE10] && dataZip[geo.properties.ZCTA5CE10]['casescum']) ?\n                                colorScale[dataZip[geo.properties.ZCTA5CE10]['casescum']] : colorPalette[0])}\n                          />\n                        )}\n                      </Geographies>\n                    </ComposableMap>\n                  </Grid.Column>\n\n                </Grid.Row>\n\n\n                <Grid.Row style={{ paddingTop: '2em', paddingLeft: '0em', paddingRight: '2em' }} >\n\n                  <Grid.Column width={9} style={{ paddingLeft: '2em', paddingRight: '5em' }}>\n                    <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\n                      {varNameMap['casescum'].text}{dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' : (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))} . The darker shading indicates a larger number of {varNameMap['casescum'].name}.</small>\n                  </Grid.Column>\n\n                </Grid.Row>\n                <Grid.Row style={{ paddingTop: 0, paddingLeft: '1.5em' }}>\n                  <small style={{ fontWeight: 300, color: 'black' }}>\n                    Note: Data are provisional and subject to change. Zip codes may cross county boundaries. Zip codes being displayed include the total count of cases for that zip code.\n                    </small>\n                </Grid.Row>\n              </Grid>\n              <Divider horizontal style={{ fontWeight: 600, color: '#232423', fontSize: '16pt', paddingTop: '1em' }}>Characteristics of confirmed COVID-19 cases for {countyName}</Divider>\n              <Grid columns={2} style={{ width: \"1260px\" }} centered>\n                <Grid.Row >\n                  <Grid.Column>\n                    <svg width=\"400\" height=\"500\" >\n                      {/* <VictoryLabel style={{\n                        textAnchor: \"start\",\n                        verticalAnchor: \"end\", fill: \"#000000\", fontFamily: \"inherit\",\n                        fontSize: \"20px\", fontWeight: \"bold\"\n                      }} text=\"Proportion of cases with a comorbidity\n                  \" x={15} y={28} textAnchor=\"middle\" /> */}\n                      <VictoryPie\n                        colorScale={['#024174', '#337fb5']}\n                        standalone={false}\n                        style={{ labels: { fill: \"white\" } }}\n                        labelRadius={80}\n                        width={400} height={400}\n                        padAngle={2}\n                        data={[\n                          { x: 1, y: 100 - datades_cases[stateFips + countyFips]['cdc_underlying2Percent'], label: `${100 - datades_cases[stateFips + countyFips]['cdc_underlying2Percent'].toFixed(2)}%` },\n                          { x: 2, y: datades_cases[stateFips + countyFips]['cdc_underlying2Percent'], label: `${datades_cases[stateFips + countyFips]['cdc_underlying2Percent'].toFixed(2)}%` },\n                        ]}\n                      />\n                      <VictoryLegend\n                        standalone={false}\n                        colorScale={['#024174', '#337fb5']}\n                        x={150} y={350}\n                        data={[{ name: \"No underlying conditions\", labels: { fontSize: 18 } },\n                        { name: \"Underlying health condition\", labels: { fontSize: 18 } }\n                        ]}\n                      />\n                    </svg>\n                  </Grid.Column>\n                  <Grid.Column style={{ paddingLeft: '0em', paddingRight: '1em', paddingTop: '4em' }}>\n                    <Grid.Row style={{ paddingLeft: '1em' }}>\n                      <Header as='h2' style={{ textAlign: 'left', color: 'black', fontSize: \"18pt\", paddingTop: '0em', paddingBottom: '0em' }}>\n                        <Header.Content>\n                          Proportion of cases with a comorbidity\n                                    </Header.Content>\n                      </Header>\n                    </Grid.Row>\n                    <Divider />\n                    <Grid.Row style={{ paddingLeft: '1em' }}>\n\n                      <small style={{ fontWeight: 300, fontSize: 20, color: 'black' }} align=\"justify\">\n                        The pie chart shows the proportion of confirmed COVID-19 cases in <b>{countyName}</b> who\n                  presented with an underlying medical condition. Underlying medical conditions\n                  increase the risk of experiencing severe disease which may lead to hospitalization\n                  and death. Of the {datades_cases[stateFips + countyFips]['cdc_underlying2_N'] ? datades_cases[stateFips + countyFips]['cdc_underlying2_N'] : \"N/A\"} confirmed cases with data available, {datades_cases[stateFips + countyFips]['cdc_underlying2Percent'] ? datades_cases[stateFips + countyFips]['cdc_underlying2Percent'].toFixed(2) : \"N/A\"}% had an underlying medical condition that increases risk of severe outcomes according to the CDC. These underlying medical conditions include: lung disease, diabetes, cardiovascular disease, renal disease, and/or an immunocompromised state. The chart excludes data from {datades_cases[stateFips + countyFips]['cdc_underlying2Pmiss'] ? datades_cases[stateFips + countyFips]['cdc_underlying2Pmiss'].toFixed(2) : \"N/A\"}% of confirmed COVID-19 cases whose medical history was unknown.\n                    </small>\n                    </Grid.Row>\n\n                  </Grid.Column>\n\n                </Grid.Row>\n              </Grid>\n              <Divider horizontal style={{ fontWeight: 600, color: '#232423', fontSize: '16pt', paddingTop: '1em', paddingBottom: \"0em\" }}>Percentage of Confirmed Cases by Demographic Group in {countyName}</Divider>\n              <Grid style={{ width: \"1260px\" }}>\n                {datades_cases[stateFips + countyFips]['NObs'] < 50 && datades_cases[stateFips + countyFips]['outcome'] === 'COVID Death' ?\n                  <Header as='h2' style={{ fontWeight: 400 }}>\n                    <Header.Content>\n                      <Header.Subheader style={{ fontWeight: 300, fontSize: '16pt', color: 'black' }}>\n                        Rates broken down by age, sex, and race are not shown for {countyName} because there are fewer than 50 confirmed COVID-19 cases with complete information.\n                </Header.Subheader>\n                    </Header.Content>\n\n                  </Header>\n                  :\n                  <Grid.Row columns={3} style={{ paddingTop: 0 }}>\n                    <Grid.Column>\n                      <BarChart\n                        cate={\"Cases\"}\n                        var_num={4}\n                        title=\"Age Group\"\n                        keyv={[\"< 20\", \"20-44\", \"45-64\", \"65+\"]}\n                        var={[\"019ageC_P\", \"2044ageC_P\", \"4564ageC_P\", \"65ageC_P\"]}\n                        var1={[\"019ageP\", \"2044ageP\", \"4564ageP\", \"65ageP\"]}\n                        width={400}\n                        stateFips={stateFips}\n                        countyFips={countyFips}\n                        data={data_cases} \n                        co = '1'/>\n\n                    </Grid.Column>\n                    <Grid.Column>\n                      <BarChart\n                        cate={\"Cases\"}\n                        var_num={2}\n                        title=\"Sex\"\n                        keyv={[\"Female\", \"Male\"]}\n                        var={[\"femaleC_P\", \"maleC_P\"]}\n                        var1={[\"femaleP\", \"maleP\"]}\n                        pad={80}\n                        width={400}\n                        stateFips={stateFips}\n                        countyFips={countyFips}\n                        data={data_cases} \n                        co = '1'/>\n                    </Grid.Column>\n                    <Grid.Column>\n                      <BarChart\n                        cate={\"Cases\"}\n                        var_num={4}\n                        title=\"Race-Ethnicity\"\n                        keyv={[\"Other\", \"Hispanic\", \"Black\", \"White\"]}\n                        var={[\"otherNHC_P\", \"hispanicC_P\", \"blackC_P\", \"whiteC_P\"]}\n                        var1={[\"otherNHP\", \"hispanicP\", \"blackP\", \"whiteP\"]}\n                        width={400}\n                        stateFips={stateFips}\n                        countyFips={countyFips}\n                        data={data_cases} \n                        co = '1'/>\n                    </Grid.Column>\n                  </Grid.Row>\n                }\n                {datades_cases[stateFips + countyFips]['NObs'] < 50 && datades_cases[stateFips + countyFips]['outcome'] === 'COVID Death' ? ' ' :\n                  <Grid.Row columns={3} style={{ padding: 0 }}>\n                    <Grid.Column style={{ paddingLeft: '4em', paddingRight: '0em' }}>\n                      <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\n                        This chart shows the percentage of cases and percentage of the population by age for <b>{countyName}</b>. The chart excludes data from {datades_cases[stateFips + countyFips]['age4catPmiss'].toFixed(2)}% of confirmed cases who were missing information on age.\n                    </small>\n                    </Grid.Column>\n                    <Grid.Column style={{ paddingLeft: '4em', paddingRight: '0em' }}>\n                      <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\n                        This chart shows the percentage of cases and percentage of the population by sex for <b>{countyName}</b>. The chart excludes data from {datades_cases[stateFips + countyFips]['femalePmiss'].toFixed(2)}% of confirmed cases who were missing information on sex.\n                    </small>\n                    </Grid.Column>\n                    <Grid.Column style={{ paddingLeft: '4em', paddingRight: '0em' }}>\n                      <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\n                        This chart shows the percentage of cases and percentage of the population by race and ethnicity for <b>{countyName}</b>. The chart excludes data from {datades_cases[stateFips + countyFips]['race_3Pmiss'].toFixed(2)}% of confirmed cases who were missing information on race/ethnicity.                    </small>\n                    </Grid.Column>\n                  </Grid.Row>}\n              </Grid>\n\n              <Divider horizontal style={{ fontWeight: 600, color: '#232423', fontSize: '16pt', paddingTop: '1em', paddingBottom: \"0em\" }}>Percentage of Deaths by Demographic Group in {countyName}</Divider>\n              <Grid style={{ width: \"1260px\" }}>\n                {!(datades_deaths[stateFips + countyFips]) ? <Header as='h2' style={{ fontWeight: 400, paddingTop: '0.5em' }}>\n                  <Header.Content>\n                    <Header.Subheader style={{ fontWeight: 300, fontSize: '16pt' }}>\n                      Rates broken down by age, sex, and race are not shown for {countyName} because there are fewer than 50 confirmed COVID-19 deaths with complete information.\n                    </Header.Subheader>\n                  </Header.Content>\n                </Header>\n                  :\n                  datades_deaths[stateFips + countyFips]['NObs'] < 50 && datades_deaths[stateFips + countyFips]['outcome'] === 'COVID Death' ?\n                    <Header as='h2' style={{ fontWeight: 400, paddingTop: '0.5em' }}>\n                      <Header.Content>\n                        <Header.Subheader style={{ fontWeight: 300, fontSize: '16pt' }}>\n                          Rates broken down by age, sex, and race are not shown for {countyName} because there are fewer than 50 confirmed COVID-19 deaths with complete information.\n                    </Header.Subheader>\n                      </Header.Content>\n                    </Header>\n                    :\n                    <Grid.Row columns={3} style={{ paddingTop: 0 }}>\n                      <Grid.Column>\n                        <BarChart\n                          cate={\"Deaths\"}\n                          var_num={4}\n                          title=\"Age Group\"\n                          keyv={[\"< 20\", \"20-44\", \"45-64\", \"65+\"]}\n                          var={[\"019ageC_P\", \"2044ageC_P\", \"4564ageC_P\", \"65ageC_P\"]}\n                          var1={[\"019ageP\", \"2044ageP\", \"4564ageP\", \"65ageP\"]}\n                          width={400}\n                          stateFips={stateFips}\n                          countyFips={countyFips}\n                          data={data_deaths} \n                          co = '3'/>\n                      </Grid.Column>\n                      <Grid.Column>\n                        <BarChart\n                          cate={\"Deaths\"}\n                          var_num={2}\n                          title=\"Sex\"\n                          keyv={[\"Female\", \"Male\"]}\n                          var={[\"femaleC_P\", \"maleC_P\"]}\n                          var1={[\"femaleP\", \"maleP\"]}\n                          width={400}\n                          pad={80}\n                          stateFips={stateFips}\n                          countyFips={countyFips}\n                          data={data_deaths} \n                          co = '3'/>\n                      </Grid.Column>\n                      <Grid.Column>\n                        <BarChart\n                          cate={\"Deaths\"}\n                          var_num={4}\n                          title=\"Race-Ethnicity\"\n                          keyv={[\"Other\", \"Hispanic\", \"Black\", \"White\"]}\n                          var={[\"otherNHC_P\", \"hispanicC_P\", \"blackC_P\", \"whiteC_P\"]}\n                          var1={[\"otherNHP\", \"hispanicP\", \"blackP\", \"whiteP\"]}\n                          width={400}\n                          stateFips={stateFips}\n                          countyFips={countyFips}\n                          data={data_deaths} \n                          co = '3'/>\n                      </Grid.Column>\n                    </Grid.Row>}\n                {!(datades_deaths[stateFips + countyFips]) ? ' ' :\n\n\n                  datades_deaths[stateFips + countyFips]['NObs'] < 50 && datades_deaths[stateFips + countyFips]['outcome'] === 'COVID Death' ? ' ' :\n                    <Grid.Row columns={3} style={{ padding: 0 }}>\n                      <Grid.Column style={{ paddingLeft: '4em', paddingRight: '0em' }}>\n                        <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\n                          This chart shows the percentage of deaths and percentage of the population by age group for <b>{countyName}</b>. The chart excludes data from {datades_deaths[stateFips + countyFips]['age4catPmiss'].toFixed(2)}% of confirmed deaths who were missing information on age.\n                    </small>\n                      </Grid.Column>\n                      <Grid.Column style={{ paddingLeft: '4em', paddingRight: '0em' }}>\n                        <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\n                          This chart shows the percentage of deaths and percentage of the population by sex for <b>{countyName}</b>. The chart excludes data from {datades_deaths[stateFips + countyFips]['femalePmiss'].toFixed(2)}% of confirmed deaths who were missing information on sex.\n                    </small>\n                      </Grid.Column>\n                      <Grid.Column style={{ paddingLeft: '4em', paddingRight: '0em' }}>\n                        <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\n                          This chart shows the percentage of deaths and percentage of the population by race and ethnicity for <b>{countyName}</b>. The chart excludes data from {datades_deaths[stateFips + countyFips]['race_3Pmiss'].toFixed(2)}% of confirmed deaths who were missing information on race/ethnicity.                    </small>\n                      </Grid.Column>\n                    </Grid.Row>}\n              </Grid>\n              <Divider horizontal style={{ fontWeight: 600, color: '#232423', fontSize: '16pt', paddingTop: '1em' }}>General characteristics of {countyName} residents</Divider>\n              <Header as='h2' style={{ fontWeight: 400 }}>\n                <Header.Content>\n                  <Header.Subheader style={{ fontWeight: 300, fontSize: '16pt', color: 'black' }}>\n                    Social, economic, health and environmental factors impact an individual’s risk of infection and COVID-19 severity.\n                    Counties with large groups of vulnerable people may be disproportionately impacted by COVID-19. The table below characterizes the overall population characteristics of residents of <b>{countyName}</b>, Georgia, and the United States.\n                    </Header.Subheader>\n                </Header.Content>\n              </Header>\n              <small style={{ fontWeight: 300, color: 'black' }}>\n                <div>Note: These are not characteristics of covid.</div>\n              </small>\n              <Table striped compact basic='very'>\n                <Table.Header>\n                  <Table.Row>\n                    <Table.HeaderCell>Characteristic</Table.HeaderCell>\n                    <Table.HeaderCell>{countyName}</Table.HeaderCell>\n                    <Table.HeaderCell>{stateName}</Table.HeaderCell>\n                    <Table.HeaderCell>United States</Table.HeaderCell>\n                  </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                  {_.map(data[stateFips + countyFips],\n                    (v, k) => {\n                      var rmList = [\"cases\", \"deaths\", \"dailycases\", \"dailydeaths\", \"mean7daycases\", \"mean7daydeaths\", \"covidmortality\"\n                        , \"caserate\", \"covidmortality7day\", \"caserate7day\", \"_013_Urbanization_Code\"];\n                      if (!rmList.includes(k)) {\n                        return (\n                          <Table.Row key={k}>\n                            <Table.Cell>{varMap[k] ? varMap[k].name : k}</Table.Cell>\n                            <Table.Cell>{isNaN(v) ? v : (Math.round(v * 100) / 100)}</Table.Cell>\n                            <Table.Cell>{isNaN(data[stateFips][k]) ? data[stateFips][k] : (Math.round(data[stateFips][k] * 100) / 100)}</Table.Cell>\n                            <Table.Cell>{isNaN(data['_nation'][k]) ? data['_nation'][k] : (Math.round(data['_nation'][k] * 100) / 100)}</Table.Cell>\n                          </Table.Row>\n                        )\n                      }\n                    })}\n                </Table.Body>\n              </Table>\n            </div>\n          }\n          {/* <Divider horizontal style={{ fontWeight: 300, color: '#b1b3b3', fontSize: '1.2em', paddingTop: '1em' }}></Divider> */}\n          <small>\n            <div style={{ paddingTop: '1em', paddingBottom: '1em' }}><a href=\"/data-sources\">Data source and interpretation</a></div>\n          </small>\n        </Container>\n        <ReactTooltip>{tooltipContent}</ReactTooltip>\n\n      </div>\n    );\n  } else {\n    return <Loader active inline='centered' />\n  }\n\n\n\n}","import React from 'react'\r\nimport { Route, Redirect } from 'react-router-dom'\r\nconst PrivateRoute = ({component: Component, ...props}) => {\r\n    return <Route {...props} render={(p) => {\r\n        const login = document.cookie.includes('login=true')\r\n        if (login){ \r\n            return <Component />\r\n        } else { \r\n            alert(\"Please log in, then you can access this web!\")\r\n            return <Redirect to={{\r\n                pathname: '/',\r\n                state: {\r\n                    from: p.location.pathname\r\n                }\r\n            }}/>\r\n        }\r\n    }}/>\r\n}\r\nexport default PrivateRoute","import React, { Component } from \"react\";\r\nimport { Form, Header } from \"semantic-ui-react\";\r\nimport \"./auth.css\";\r\n// import logo from \"../../data/logo.png\";\r\n\r\n  export default function Layout(props){\r\n    return (\r\n        <div className=\"auth-main\">\r\n          <div className=\"auth-content\">\r\n            <div className=\"auth-card\">\r\n            <img size='mini' src='https://dph.georgia.gov/themes/custom/ga_forest/orchard/assets/images/icons/logo/ga-logo--gold.svg' alt=\"Logo\" className=\"auth-logo\"/>\r\n              <Header as=\"h2\" color=\"black\" textAlign=\"center\">\r\n                {props.header}\r\n              </Header>\r\n              <Form.Group size=\"large\" className=\"auth-form\" autoComplete=\"off\">\r\n                {props.children}\r\n              </Form.Group>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n\r\n  }","\r\nimport React, { useState, useEffect, Component } from 'react';\r\n// import { Button, FormGroup, FormControl, FormLabel  } from \"react-bootstrap\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport \"./Login.css\";\r\nimport { Button, Form, Message } from \"semantic-ui-react\";\r\nimport Layout from \"./Layout\";\r\nimport fetchProfileData from \"./TokenGet\"\r\nimport { sha256 } from 'js-sha256';\r\n\r\n\r\nexport default function Login(props) {\r\n    const [isLogin, setIsLogin]= useState(document.cookie.includes('login=true'))\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const history = useHistory();\r\n    const [user, setUser] = useState(null);\r\n    const [tok, setTok] = useState(null);\r\n    const promise = fetchProfileData();\r\n\r\n\r\n    // console.log(document.cookie.includes('login=true'))\r\n\r\n    useEffect(() => {\r\n        fetch('/data/token.json')\r\n            .then(res => res.json())\r\n            .then(x => setTok(x));\r\n\r\n        promise.then(data => {\r\n            setUser(data);\r\n        });\r\n    }, []);\r\n\r\n    function arrayEquals(a, b) {\r\n        return Array.isArray(a) &&\r\n          Array.isArray(b) &&\r\n          a.length === b.length &&\r\n          a.every((val, index) => val === b[index]);\r\n      }\r\n\r\n    function validateForm() {\r\n        // return email.length > 0 && password.length > 0;\r\n        return password.length > 0;\r\n\r\n    }\r\n    const setCookie = (key, value, day) => {\r\n        let expires = 13600 * 1000\r\n        let date = new Date( + new Date() + expires)\r\n        document.cookie = `${key}=${value};expires=${date.toUTCString()}`\r\n    }\r\n\r\n    function handleSubmit(event) {\r\n        let login = !isLogin\r\n        event.preventDefault();\r\n        setIsLogin(login)\r\n        \r\n        // console.log(password.toLowerCase()])\r\n        // console.log(sha256(password))\r\n            if (sha256(password).localeCompare(tok.tokens)===0) {\r\n                // console.log(tok.tokens[password])\r\n                setCookie('login', true, 1)\r\n                history.push('/13')\r\n            }\r\n            else{\r\n                alert(\"Token is not right, please contact jzha524@emory.edu for web access\")\r\n                setCookie('login', '', -1)\r\n                history.push('/')\r\n            }\r\n        }\r\n\r\n\r\n        // if(password.toLowerCase() in tok.tokens){\r\n        //     // console.log(tok.tokens[password.toLowerCase()])\r\n        //     if (tok.tokens[password.toLowerCase()].localeCompare(email)===0) {\r\n        //         // console.log(tok.tokens[password])\r\n        //         setCookie('login', true, 1)\r\n        //         history.push('/13')\r\n        //     }\r\n        //     else{\r\n        //         alert(\"Name and email are not match\")\r\n        //         setCookie('login', '', -1)\r\n        //         history.push('/')\r\n        //     }\r\n        // }\r\n        // else{\r\n        //     alert(\"No such user, please contact the admin\")\r\n        //         setCookie('login', '', -1)\r\n        //         history.push('/')\r\n        // }\r\n    // }\r\n        \r\n\r\n    if (user === null) {\r\n        return <p>Loading profile...</p>;\r\n    }\r\n    else {\r\n\r\n        return (\r\n\r\n            <Layout header=\"Dashboard Log in\">\r\n                <Form.Input\r\n                    fluid\r\n                    icon=\"edit\"\r\n                    iconPosition=\"left\"\r\n                    type=\"password\"\r\n                    placeholder=\"Password\"\r\n                    className=\"auth-input-field\"\r\n                    onChange={e => setPassword(e.target.value)}\r\n                />\r\n                {/* <Form.Input\r\n                    fluid\r\n                    icon=\"envelope\"\r\n                    iconPosition=\"left\"\r\n                    placeholder=\"E-mail address\"\r\n                    className=\"auth-input-field\"\r\n                    onChange={e => setEmail(e.target.value)}\r\n                /> */}\r\n                <Button color=\"teal\" fluid size=\"huge\" onClick={handleSubmit} disabled={!validateForm()}>\r\n                    Login\r\n        </Button>\r\n        <p>Contact jzha524@emory.edu for web access</p>\r\n            </Layout>\r\n            \r\n        )\r\n    }\r\n}","// React\r\nimport React, { Suspense, useState, useEffect } from 'react'\r\n// Components & Hooks\r\n\r\nimport 'semantic-ui-css/semantic.min.css'\r\n\r\nexport default function fetchProfileData() {\r\n    return Promise.all([\r\n      fetchUser(),\r\n    ]).then((user) => {\r\n      return  user ;\r\n    });\r\n  }\r\n  \r\n  function fetchUser() {\r\n    // console.log(\"fetch user...\");\r\n    return new Promise(resolve => {\r\n      setTimeout(() => {\r\n        // console.log(\"fetched user\");\r\n        resolve(fetch('/data/token.json')\r\n        .then(res => {\r\n            res.json()}));\r\n      }, 1000);\r\n    });\r\n  }","// React\r\nimport React from 'react'\r\n// Components & Hooks\r\nimport StateMap from \"./StateMap\";\r\nimport CountyReport from \"./CountyReport\";\r\n// import AboutUs from \"./AboutUs\";\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\n\r\nimport PrivateRoute from \"./privateRoute\"\r\n\r\nimport Login from './login';\r\n\r\n\r\n\r\nApp.propTypes = {};\r\nexport default function App() {\r\n\r\n\r\n\r\n      return (\r\n\r\n        <Router>\r\n          <Switch>\r\n          <PrivateRoute path='/:stateFips/:countyFips' component = {CountyReport}/>\r\n          <PrivateRoute path='/:stateFips' component = {StateMap}/>\r\n          <Route exact path='/'>\r\n              <Login />\r\n            </Route>\r\n    \r\n          </Switch>\r\n        </Router>\r\n      );\r\n\r\n}\r\n\r\n","import 'react-app-polyfill/ie9';\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}