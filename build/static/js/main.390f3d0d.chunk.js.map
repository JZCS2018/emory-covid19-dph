{"version":3,"sources":["components/AppBar.js","components/MapProvider.js","utils.js","components/useGeographies.js","components/Geographies.js","components/Geography.js","components/ComposableMap.js","components/Notes.js","components/StateMap.js","components/CountyReport.js","components/privateRoute.js","components/Layout.js","components/login.js","components/TokenGet.js","components/App.js","index.js"],"names":["AppBar","props","history","useHistory","Menu","borderless","inverted","fixed","style","backgroundImage","backgroundSize","Container","Item","as","header","Image","size","src","onClick","push","fontSize","fontWeight","color","lineHeight","active","menu","content","name","geoPath","d3Geo","projections","MapContext","createContext","MapProvider","width","height","offsetX","offsetY","projection","projectionConfig","restProps","center","cx","cy","rotate","rx","ry","rz","parallels","p1","p2","s","scale","projMemo","useMemo","scl","proj","translate","forEach","d","makeProjection","useCallback","value","path","Provider","getFeatures","geographies","parseGeographies","Array","isArray","feats","feature","objects","Object","keys","features","useGeographies","geography","useContext","useState","setGeographies","useEffect","url","window","fetch","then","res","ok","Error","statusText","json","catch","error","console","log","geos","map","i","rsmKey","svgPath","prepareFeatures","Geographies","children","className","length","memo","onMouseEnter","onMouseLeave","onMouseDown","onMouseUp","onFocus","onBlur","isPressed","setPressed","isFocused","setFocus","tabIndex","evt","ComposableMap","Notes","paddingTop","colorPalette","colorPalette1","SvgMap","_","key","x","y","fill","strokeWidth","stroke","legendSplit","splitpoint","toFixed","legendSplit1","legendMax","legendMin","React","Component","ChartGraph","dataTS","varGraphPair","metric","stateFips","countyFips","countyname","data1","theme","VictoryTheme","material","containerComponent","responsive","flyoutStyle","padding","left","right","top","bottom","tickLabels","tickFormat","t","Date","toLocaleDateString","month","day","tickValues","Math","round","dependentAxis","tickCount","data","barWidth","alignment","data2","labels","datum","labelComponent","orientation","fontFamily","constrainToVisibleArea","dx","textAnchor","fillOpacity","takeRight","StateMap","config","setConfig","stateName","setStateName","setCountyFips","countyName","setCountyName","setData","dataUs","setDataUs","dateCur","setDateCur","casesdaily","casesdailymean14","setCovidMetric","covidMetric14","setCovidMetric14","setDataTS","setTooltipContent","colorScale","setColorScale","setLegendMax","setLegendMax1","setLegendMin","setLegendMaxGraph","setLegendSplit","setLegendSplit1","setMetric","metricOptions1","text","dropdownopt","metricName","setMetricName","varNameMap","delayHandler","setDelayHandler","configMatched","configs","find","fips","k","temp_Data_metric","each","sort","a","b","countIqr","quantile","belowIqr","filter","upIqr","split","scaleQuantile","domain","range","split1","thr","thr1","quantiles","floor","csUs","max","min","slice","indexColor","rateIqr","IQR3","interV","dicto","m","marginTop","minWidth","Breadcrumb","Section","Divider","hidden","Grid","columns","Column","paddingLeft","Header","Content","Dropdown","background","borderTop","borderLeft","borderRight","borderBottom","borderRadius","minHeight","paddingBottom","inline","search","pointing","options","onChange","e","data-tip","geo","properties","COUNTYFP","default","outline","pressed","setTimeout","fips2county","clearTimeout","Row","paddingRight","centered","align","todaydate","year","Subheader","cat","Loader","numberWithCommas","toString","pattern","test","replace","BarChart","colors","domainPadding","pad","ylog","minDomain","title","horizontal","barRatio","keyv","var","CountyReport","useParams","configsCounty","zipCode","setZipCode","setZipCodeFinal","data_cases","setDataCG","data_deaths","setDataDG","datades_cases","setDatadesCG","datades_deaths","setDatadesDG","dataG","setDataG","dataZip","setDataZip","setDataMapOut","setLegendMaxD","setLegendMinD","setLegendSplitD","setColorScaleD","tooltipContent","casescum","deathscum","casescumR","deathscumR","deathsdailymean14","casesdailymean14R","deathsdailymean14R","covidMetric","covidMetricLast","setCovidMetricLast","covidMetricGa","setCovidMetricGa","varMap","setVarMap","configscounty","countyfips","cs","Number","scaleMap","csD","link","textAlign","Table","HeaderCell","colSpan","Popup","trigger","todaydat","basic","flowing","hoverable","List","toLocaleString","casescum14day","parseFloat","casescum14dayR","category14day","change14day","celled","singleLine","date","deathscum14day","deathscum14dayR","cfr","cfrcompare","column","take","casesdailymean7","deathsdaily","deathsdailymean7","event","ZCTA5CE10","verticalAnchor","standalone","labelRadius","padAngle","label","striped","compact","Body","v","includes","Cell","isNaN","href","PrivateRoute","component","render","p","document","cookie","alert","to","pathname","state","from","location","Layout","alt","Form","Group","autoComplete","Login","isLogin","setIsLogin","password","setPassword","user","setUser","tok","setTok","promise","Promise","all","resolve","setCookie","toUTCString","Input","fluid","icon","iconPosition","type","placeholder","target","Button","login","preventDefault","sha256","localeCompare","tokens","disabled","App","exact","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.390f3d0d.chunk.js","sourcesContent":["import React from \"react\";\nimport ErrorBoundary from \"react-error-boundary\";\nimport { Container, Menu, Image, Divider } from 'semantic-ui-react';\n\nimport { useHistory } from 'react-router-dom';\n\n\nexport default function AppBar(props) {\n\n  const history = useHistory();\n\n  return (\n    <ErrorBoundary>\n      <Menu borderless inverted fixed='top'\n        style={{backgroundImage: 'url(\"/Emory_COVID_header_LightBlue.jpg\")',\n                backgroundSize: 'cover'}}>\n      {/* <Menu borderless inverted fixed='top'\n        style={{backgroundImage: 'url(\"https://www.htmlcsscolor.com/preview/128x128/103052.png\")',\n                backgroundSize: 'cover'}}> */}\n        <Container>\n          <Menu.Item as='a' header>\n                <Image size='mini' src='https://dph.georgia.gov/themes/custom/ga_forest/orchard/assets/images/icons/logo/ga-logo--gold.svg' />\n          </Menu.Item>\n          \n          <Menu.Item as='a' header onClick={() => history.push('/')}>\n            <span style={{fontSize: '17px',fontWeight: 400, color: '#fff', lineHeight: 1.3}}>\n           <strong>Georgia Department</strong>\n           <br></br>\n           <em>of</em>\n           <strong>&nbsp;Public Health</strong>\n           </span>\n          </Menu.Item>\n          <Menu.Item \n            active={props.menu==='countyReport'} \n            content='Home'\n            onClick={() => history.push('/13')}\n            name='countyReport'/>\n          {/* <Menu.Item \n            active={props.menu==='countyCompare'} \n            onClick={() => history.push('/compare-counties')}\n            name='countyCompare'>\n            Compare Counties\n          </Menu.Item> */}\n          {/* <Menu.Item \n            active={props.menu==='dataSources'} \n            onClick={() => history.push('/data-sources')}\n            name='dataSources'>\n            Data Sources &<br/>Interpretation\n          </Menu.Item>\n          <Menu.Item \n            active={props.menu==='aboutUs'} \n            content='About Us'\n            onClick={() => history.push('/about-team')}\n            name='aboutUs'/>             */}\n          {/* <Menu.Menu position='left'>\n            <Menu.Item as='a' header>\n              <Image size='mini' src='https://dph.georgia.gov/themes/custom/ga_forest/orchard/assets/images/icons/logo/ga-logo--gold.svg' />\n            </Menu.Item>\n          </Menu.Menu> */}\n        </Container>\n      </Menu>\n    </ErrorBoundary>\n  );\n}\n\n\n\n","\nimport React, {\n  createContext,\n  useMemo,\n  useCallback,\n} from \"react\"\nimport PropTypes from \"prop-types\"\nimport * as d3Geo from \"d3-geo\"\n\nconst { geoPath, ...projections } = d3Geo\n\nconst MapContext = createContext()\n\nconst makeProjection = ({\n  projectionConfig = {},\n  projection = \"geoEqualEarth\",\n  width = 800,\n  height = 600,\n  offsetX = 0,\n  offsetY = 0\n}) => {\n  const isFunc = typeof projection === \"function\"\n\n  if (isFunc) return projection\n\n  const scl = projectionConfig.scale || null;\n\n  let proj = projections[projection]().translate([width/2 + (offsetX)*scl/1000 ,\n                                              height/2 +(offsetY)*scl/1000]);\n\n  const supported = [\n    proj.center ? \"center\" : null,\n    proj.rotate ? \"rotate\" : null,\n    proj.scale ? \"scale\" : null,\n    proj.parallels ? \"parallels\" : null,\n  ]\n\n  supported.forEach(d => {\n    if (!d) return\n    proj = proj[d](projectionConfig[d] || proj[d]())\n  })\n\n  return proj\n}\n\nconst MapProvider = ({\n  width,\n  height,\n  offsetX,\n  offsetY,\n  projection,\n  projectionConfig,\n  ...restProps\n}) => {\n  const [cx, cy] = projectionConfig.center || []\n  const [rx, ry, rz] = projectionConfig.rotate || []\n  const [p1, p2] = projectionConfig.parallels || []\n  const s = projectionConfig.scale || null\n\n  const projMemo = useMemo(() => {\n    return makeProjection({\n      projectionConfig: {\n        center: (cx || cx === 0) || (cy || cy === 0) ? [cx, cy] : null,\n        rotate: (rx || rx === 0) || (ry || ry === 0) ? [rx, ry, rz] : null,\n        parallels: (p1 || p1 === 0) || (p2 || p2 === 0) ? [p1, p2] : null,\n        scale: s,\n      },\n      projection,\n      width,\n      height,\n      offsetX,\n      offsetY,\n    })\n  }, [ width, height, projection, cx, cy, rx, ry, rz, p1, p2, s, offsetX, offsetY ])\n\n  const proj = useCallback(projMemo, [projMemo])\n\n  const value = useMemo(() => {\n    return {\n      width,\n      height,\n      projection: proj,\n      path: geoPath().projection(proj),\n    }\n  }, [ width, height, proj ])\n\n  return (<MapContext.Provider value={value} {...restProps} />)\n}\n\nMapProvider.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  offsetX: PropTypes.number,\n  offsetY: PropTypes.number,\n  projection: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.func,\n  ]),\n  projectionConfig: PropTypes.object,\n}\n\nexport { MapProvider, MapContext }\n","\nimport { feature } from \"topojson-client\"\n\nexport function getCoords(w, h, t) {\n  const xOffset = (w * t.k - w) / 2\n  const yOffset = (h * t.k - h) / 2\n  return [w / 2 - (xOffset + t.x) / t.k, h / 2 - (yOffset + t.y) / t.k]\n}\n\nexport function fetchGeographies(url) {\n  return fetch(url)\n    .then(res => {\n      if (!res.ok) {\n        throw Error(res.statusText)\n      }\n      return res.json()\n    }).catch(error => {\n      console.log(\"There was a problem when fetching the data: \", error)\n    })\n}\n\nexport function getFeatures(geographies, parseGeographies) {\n  if (Array.isArray(geographies)) return parseGeographies ? parseGeographies(geographies) : geographies\n  const feats = feature(\n    geographies,\n    geographies.objects[Object.keys(geographies.objects)[0]]\n  ).features\n  return parseGeographies ? parseGeographies(feats) : feats\n}\n\nexport function prepareFeatures(geographies, path) {\n  return geographies ? geographies.map((d, i) => {\n    return {\n      ...d,\n      rsmKey: `geo-${i}`,\n      svgPath: path(d),\n    }\n  }) : []\n}\n\nexport function createConnectorPath(dx = 30, dy = 30, curve = 0.5) {\n  const curvature = Array.isArray(curve) ? curve : [curve, curve]\n  const curveX = dx / 2 * curvature[0]\n  const curveY = dy / 2 * curvature[1]\n  return `M${0},${0} Q${-dx / 2 - curveX},${-dy / 2 + curveY} ${-dx},${-dy}`\n}\n\nexport function isString(geo) { return typeof geo === \"string\" }\n","\nimport { useMemo, useState, useEffect, useContext } from \"react\"\nimport { MapContext } from \"./MapProvider\"\n\nimport { fetchGeographies, getFeatures, prepareFeatures, isString } from \"../utils\"\n\nexport default function useGeographies({ geography, parseGeographies }) {\n  const { path } = useContext(MapContext)\n  const [geographies, setGeographies] = useState()\n\n  useEffect(() => {\n    if (typeof window === `undefined`) return\n\n    if (isString(geography)) {\n      fetchGeographies(geography).then(geos => {\n        if (geos) setGeographies(getFeatures(geos, parseGeographies))\n      })\n    } else {\n      setGeographies(getFeatures(geography, parseGeographies))\n    }\n  }, [geography, parseGeographies])\n\n  const output = useMemo(() => {\n    return prepareFeatures(geographies, path)\n  }, [geographies, path])\n\n  return { geographies: output }\n}\n","\nimport React, { useContext } from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport { MapContext } from \"./MapProvider\"\nimport useGeographies from \"./useGeographies\"\n\nconst Geographies = ({\n  geography,\n  children,\n  parseGeographies,\n  className = \"\",\n  ...restProps\n}) => {\n  const { path, projection } = useContext(MapContext)\n  const { geographies } = useGeographies({ geography, parseGeographies })\n  // console.log(geographies)\n\n  return (\n    <g className={`rsm-geographies ${className}`} {...restProps}>\n      {\n        geographies && geographies.length > 0 &&\n        children({ geographies, path, projection })\n        \n      }\n    </g>\n  )\n}\n\nGeographies.propTypes = {\n  geography: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.object,\n    PropTypes.array,\n  ]),\n  children: PropTypes.func,\n  parseGeographies: PropTypes.func,\n  className: PropTypes.string,\n}\n\nexport default Geographies\n","\nimport React, { useState, memo } from \"react\"\nimport PropTypes from \"prop-types\"\n\nconst Geography = ({\n  geography,\n  onMouseEnter,\n  onMouseLeave,\n  onMouseDown,\n  onMouseUp,\n  onFocus,\n  onBlur,\n  style = {},\n  className = \"\",\n  ...restProps\n}) => {\n  const [isPressed, setPressed] = useState(false)\n  const [isFocused, setFocus] = useState(false)\n\n  function handleMouseEnter(evt) {\n    setFocus(true)\n    if (onMouseEnter) onMouseEnter(evt)\n    // console.log(onMouseEnter)\n  }\n\n  function handleMouseLeave(evt) {\n    setFocus(false)\n    if (isPressed) setPressed(false)\n    if (onMouseLeave) onMouseLeave(evt)\n  }\n\n  function handleFocus(evt) {\n    setFocus(true)\n    if (onFocus) onFocus(evt)\n  }\n\n  function handleBlur(evt) {\n    setFocus(false)\n    if (isPressed) setPressed(false)\n    if (onBlur) onBlur(evt)\n  }\n\n  function handleMouseDown(evt) {\n    setPressed(true)\n    if (onMouseDown) onMouseDown(evt)\n  }\n\n  function handleMouseUp(evt) {\n    setPressed(false)\n    if (onMouseUp) onMouseUp(evt)\n  }\n\n  return (\n    <path\n      tabIndex=\"0\"\n      className={`rsm-geography ${className}`}\n      d={geography.svgPath}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      onFocus={handleFocus}\n      onBlur={handleBlur}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n      style={style[isPressed || isFocused ? (isPressed ? \"pressed\" : \"hover\") : \"default\"]}\n      {...restProps}\n    />\n  )\n}\n\nGeography.propTypes = {\n  geography: PropTypes.object,\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  onMouseDown: PropTypes.func,\n  onMouseUp: PropTypes.func,\n  onFocus: PropTypes.func,\n  onBlur: PropTypes.func,\n  style: PropTypes.object,\n  className: PropTypes.string,\n}\n\nexport default memo(Geography)\n","\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport { MapProvider } from \"./MapProvider\"\n\nconst ComposableMap = ({\n  width = 800,\n  height = 600,\n  offsetX = 0,\n  offsetY = 0,\n  projection = \"geoEqualEarth\",\n  projectionConfig = {},\n  className = \"\",\n  ...restProps\n}) => {\n  return (\n    <MapProvider\n      width={width}\n      height={height}\n      offsetX={offsetX}\n      offsetY={offsetY}\n      projection={projection}\n      projectionConfig={projectionConfig}\n    >\n      <svg\n        width={width}\n        height={height}\n        className={`rsm-svg ${className}`}\n        {...restProps}\n      />\n    </MapProvider>\n  )\n}\n\nComposableMap.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  projection: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.func,\n  ]),\n  projectionConfig: PropTypes.object,\n  className: PropTypes.string,\n}\n\nexport default ComposableMap\n","import React from 'react'\nimport { Grid, List, Divider, Image } from 'semantic-ui-react'\n\nexport default function Notes(props){\n\n  return (\n    <div style={{paddingTop: '2em', fontWeight: 300}}>\n    {/* <Divider/>\n    <Grid>\n      <Grid.Row>\n        <Grid.Column style={{fontSize: '1em', lineHeight: '1.5em'}}>\n          Early data about COVID-19 suggests that communities are affected very differently due to social determinants of health like population density, poverty, residential segregation, underlying chronic health conditions, and availability of medical services. \n          In order to predict how the epidemic will continue to unfold and prepare for the future, it is critical to understand differences in underlying risk factors. \n          There is no one-size-fits all approach to combat the epidemic, but accurate and meaningful data is a key component of a robust public health response that is informed by contextual factors and prioritizes health equity.\n          <br/><br/>\n          The COVID-19 Health Equity Dashboard seeks to fill the gaps in county-level data about the virus and underlying social determinants of health. \n          Our goal is for this Dashboard to facilitate easy comparisons of counties with respect to COVID-19 outcomes and social determinants. \n          We hope this becomes a valuable resource for and critical component of tailored public health responses to COVID-19 across the wide range of environments that Americans inhabit.\n        </Grid.Column>\n      </Grid.Row>\n      <Divider hidden/>\n      <Grid.Row columns={2}>\n        <Grid.Column>          \n          <Image size='small' src='/logo.png' />\n          &copy; 2020 Emory University. All rights reserved.\n        </Grid.Column>\n        <Grid.Column>          \n          <small>\n            This dashboard is created using\n            <List as='ol'>\n              <List.Item as='li' value='-'><a href=\"https://www.react-simple-maps.io/\">React Simple Maps</a> by <a href=\"https://www.zcreativelabs.com/\">z creative labs</a></List.Item>\n              <List.Item as='li' value='-'><a href=\"https://formidable.com/open-source/victory/\">Victory</a> by <a href=\"https://formidable.com/\">Formidable</a></List.Item>\n              <List.Item as='li' value='-'><a href=\"https://github.com/Semantic-Org/Semantic-UI-React\">Semantic UI React</a> by <a href=\"https://github.com/levithomason\">@levithomason</a>and an amazing community of <a href=\"https://github.com/Semantic-Org/Semantic-UI-React/graphs/contributors\">contributors</a></List.Item> \n              <List.Item as='li' value='-'><a href=\"https://github.com/facebook/create-react-app\">Create React App</a> by <a href=\"https://about.fb.com/company-info/\">Facebook</a></List.Item> \n            </List>\n          </small>\n        </Grid.Column>\n      </Grid.Row>\n    </Grid> */}\n    </div>);\n}\n","import React, { useEffect, useState } from 'react'\nimport { Container, Grid, Breadcrumb, Dropdown, Header, Loader, Divider } from 'semantic-ui-react'\nimport AppBar from './AppBar';\nimport Geographies from './Geographies';\nimport Geography from './Geography';\nimport ComposableMap from './ComposableMap';\nimport {\n    VictoryChart,\n    VictoryTooltip,\n    VictoryVoronoiContainer,\n    VictoryBar,\n    VictoryTheme,\n    VictoryAxis,\n    VictoryLine,\n    VictoryLabel\n} from 'victory';\nimport Slider from \"@material-ui/core/Slider\";\n\n\nimport { useParams, useHistory } from 'react-router-dom';\nimport Notes from './Notes';\nimport ReactTooltip from \"react-tooltip\";\nimport _ from 'lodash';\nimport { scaleQuantile, scaleLinear } from \"d3-scale\";\nimport { quantile, ascending } from 'd3';\nimport fips2county from './fips2county.json'\n// import configscounty from \"./county_config.json\";\n\nimport configs from \"./state_config.json\";\n\n\nconst colorPalette = [\n    \"#e1dce2\",\n    \"#d3b6cd\",\n    \"#bf88b5\",\n    \"#af5194\",\n    \"#99528c\",\n    \"#633c70\",\n];\nconst colorPalette1 = [\n    \"#67335E\",\n    \"#6B2A4D\",\n    \"#70213B\",\n    \"#74182A\",\n    '#7d0707'\n];\n\nconst colorOut = '#7d0707';\n\nconst countyColor = '#f2a900';\nconst stateColor = '#bdbfc1';\nconst nationColor = '#d9d9d7';\nconst colorHighlight = '#f2a900';\nconst marks = [\n    {\n        value: 0,\n        label: 'Mar 1',\n    },\n    {\n        value: 10,\n        label: 'April 1',\n    },\n    {\n        value: 20,\n        label: 'May 1',\n    },\n    {\n        value: 30,\n        label: 'June 1',\n    },\n];\n\nfunction valuetext(value) {\n    return `${value}°C`;\n}\n\nfunction SvgMap(props) {\n    // var lengthSplit1 = props.lengthSplit1;\n    if (props.name === 'casescum') {\n        return (\n            <svg width=\"500\" height=\"55\">\n                {_.map(colorPalette, (color, i) => {\n                    return <rect key={i} x={50 + 25 * i} y={20} width=\"25\" height=\"20\" style={{ fill: color, strokeWidth: 1, stroke: color }} />\n                })}\n                {_.map(colorPalette1, (color, i) => {\n                    return <rect key={i} x={200 + 25 * i} y={20} width=\"25\" height=\"20\" style={{ fill: color, strokeWidth: 1, stroke: color }} />\n                })}\n\n                {/* <rect x={180} y={20} width=\"25\" height=\"20\" style={{ fill: colorOut, strokeWidth: 1, stroke: colorOut }} /> */}\n                <text x={50} y={52} style={{ fontSize: '0.8em' }}>Low</text>\n                <text x={300} y={52} style={{ fontSize: '0.8em' }}>High</text>\n                {_.map(props.legendSplit, (splitpoint, i) => {\n                    if (props.legendSplit[i] < 1) {\n                        return <text key={i} x={57 + 25 * (i)} y={15} style={{ fontSize: '0.7em' }}> {props.legendSplit[i].toFixed(1)}</text>\n                    }\n                    if (props.legendSplit[i] >= 1000) {\n                        return <text key={i} x={70 + 25 * (i)} y={15} style={{ fontSize: '0.7em' }}> {(props.legendSplit[i] / 1000).toFixed(1) + \"K\"}</text>\n                    }\n                    return <text key={i} x={70 + 25 * (i)} y={15} style={{ fontSize: '0.7em' }}> {props.legendSplit[i].toFixed(0)}</text>\n                })}\n\n                {_.map(props.legendSplit1, (splitpoint, i) => {\n                    if (props.legendSplit1[i] >= 1000) {\n                        return <text key={i} x={220 + 25 * (i)} y={15} style={{ fontSize: '0.7em' }}> {(props.legendSplit1[i] / 1000).toFixed(1) + \"K\"}</text>\n                    }\n                    return <text key={i} x={220 + 25 * (i)} y={15} style={{ fontSize: '0.7em' }}> {props.legendSplit1[i].toFixed(0)}</text>\n                })}\n                <text x={325} y={15} style={{ fontSize: '0.7em' }}>{props.legendMax}</text>\n                <text x={50} y={15} style={{ fontSize: '0.7em' }}> {(props.legendMin / 100).toFixed(0)} </text>\n                <rect x={5} y={20} width=\"25\" height=\"20\" style={{ fill: \"#FFFFFF\", strokeWidth: 0.5, stroke: \"#000000\" }} />\n                <text x={8} y={52} style={{ fontSize: '0.7em' }}> N/A </text>\n            </svg>\n\n        )\n    }\n    else {\n        return (\n            <svg width=\"500\" height=\"55\">\n                {_.map(colorPalette, (color, i) => {\n                    return <rect key={i} x={55 + 25 * i} y={20} width=\"25\" height=\"20\" style={{ fill: color, strokeWidth: 1, stroke: color }} />\n                })}\n\n                <rect x={230} y={20} width=\"25\" height=\"20\" style={{ fill: colorOut, strokeWidth: 1, stroke: colorOut }} />\n                <text x={55} y={52} style={{ fontSize: '0.8em' }}>Low</text>\n                <text x={230} y={52} style={{ fontSize: '0.8em' }}>High</text>\n                {_.map(props.legendSplit, (splitpoint, i) => {\n                    if (props.legendSplit[i] < 1) {\n                        return <text key={i} x={62 + 25 * (i)} y={15} style={{ fontSize: '0.7em' }}> {props.legendSplit[i].toFixed(1)}</text>\n                    }\n                    if (props.legendSplit[i] >= 1000) {\n                        return <text key={i} x={72 + 25 * (i)} y={15} style={{ fontSize: '0.7em' }}> {(props.legendSplit[i] / 1000).toFixed(1) + \"K\"}</text>\n                    }\n                    return <text key={i} x={72 + 25 * (i)} y={15} style={{ fontSize: '0.7em' }}> {props.legendSplit[i].toFixed(0)}</text>\n                })}\n                {props.legendMin < 100 ? <text x={55} y={15} style={{ fontSize: '0.7em' }}> {(props.legendMin / 1).toFixed(0)} </text> :\n                    <text x={47} y={15} style={{ fontSize: '0.7em' }}> {(props.legendMin / 1).toFixed(0)} </text>\n                }\n\n\n\n                <text x={224} y={15} style={{ fontSize: '0.7em' }}>{props.legendSplit[colorPalette.length - 1] < 1 ? props.legendSplit[colorPalette.length - 1].toFixed(1)\n                    : props.legendSplit[colorPalette.length - 1] > 1000 ?\n                        (props.legendSplit[colorPalette.length - 1] / 1000).toFixed(1) + \"K\" : props.legendSplit[colorPalette.length - 1].toFixed(0)\n                }</text>\n                <text x={251} y={15} style={{ fontSize: '0.7em' }}>{props.legendMax}</text>\n                <rect x={5} y={20} width=\"25\" height=\"20\" style={{ fill: \"#FFFFFF\", strokeWidth: 0.5, stroke: \"#000000\" }} />\n                <text x={8} y={52} style={{ fontSize: '0.7em' }}> N/A </text>\n\n                {/* <text x={250} y={42} style={{fontSize: '0.8em'}}> Click on a county below </text>\n          <text x={250} y={52} style={{fontSize: '0.8em'}}> for a detailed report. </text> */}\n            </svg>\n\n        )\n    }\n}\nclass CustomFlyout extends React.Component {\n    render() {\n      const {x, y, orientation} = this.props;\n      const newY = orientation === \"bottom\" ? y - 35 : y + 35;\n      return (\n        <g>\n          <circle cx={x} cy={newY} r=\"20\" stroke=\"tomato\" fill=\"none\"/>\n          <circle cx={x} cy={newY} r=\"25\" stroke=\"orange\" fill=\"none\"/>\n          <circle cx={x} cy={newY} r=\"30\" stroke=\"gold\" fill=\"none\"/>\n        </g>\n      );\n    }\n  }\n\nfunction ChartGraph(props) {\n    var varGraphPair = props.name;\n    var dataTS;\n    var metric = props.metric;\n    var stateFips = props.stateFips;\n    var countyFips = props.countyFips;\n    var countyname = props.countyname;\n\n    if (props.metric === \"casescum14dayR\") {\n        dataTS = props.data1;\n\n        return (\n            <VictoryChart theme={VictoryTheme.material}\n                containerComponent={\n                    <VictoryVoronoiContainer\n                        responsive={false}\n                        flyoutStyle={{ fill: \"white\" }}\n                    />\n                }\n                width={730}\n                height={500}\n                padding={{ left: 55, right: 70, top: 10, bottom: 50 }}>\n                <VictoryAxis\n                    style={{\n                        tickLabels: { fontSize: 25, padding: 5 }\n                    }}\n                    tickFormat={(t) => new Date(t * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric' })}\n\n                    tickValues={[\n                        dataTS[dataTS.length - Math.round(dataTS.length / 4) * 3 - 1].t,\n                        dataTS[dataTS.length - Math.round(dataTS.length / 4) * 2 - 1].t,\n                        dataTS[dataTS.length - Math.round(dataTS.length / 4) - 1].t,\n                        dataTS[dataTS.length - 1].t]}\n\n                />\n                <VictoryAxis dependentAxis tickCount={5}\n                    style={{\n                        tickLabels: { fontSize: 25, padding: 5 }\n                    }}\n                    tickFormat={(y) => (y < 1000 ? y : (y / 1000 + 'k'))}\n                />\n                <VictoryBar style={{ data: { fill: stateColor } }} barWidth={8} alignment=\"start\" data={dataTS ? dataTS : props.data2[\"99999\"]}\n                    x='t' y={varGraphPair[metric]['name'][0]}\n\n                />\n                <VictoryLine name=\"Line1\" style={{ data: { stroke: countyColor, strokeWidth: ({ active }) => active ? 7 : 5 } }} data={dataTS ? dataTS : props.data2[\"99999\"]}\n                    x='t' y={varGraphPair[metric]['name'][1]}\n                    labels={({ datum }) => `${countyname}\\n` + \n                    `Date: ${new Date(datum.t * 1000).toLocaleDateString()}\\n` + \n                    `${varGraphPair[metric]['legend'][1]}: ${Math.round(datum[varGraphPair[metric]['name'][1]], 2)}\\n` +\n                    `${varGraphPair[metric]['legend'][0]}: ${Math.round(datum[varGraphPair[metric]['name'][0]], 2)}`\n                    }\n                    labelComponent={\n                        <VictoryTooltip \n                        orientation=\"top\"\n                        style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'white' }} \n                        constrainToVisibleArea \n                        labelComponent={<VictoryLabel dx={-100} textAnchor = 'start'/>}\n                        flyoutStyle={{ fill: \"black\", fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }} \n                        />\n                    }\n                />\n                {varGraphPair[metric]['name'][1] === 'casesdailymean7' || varGraphPair[metric]['name'][1] === 'deathsdailymean7' ?\n                    <VictoryAxis dependentAxis tickCount={5}\n                        style={{\n                            tickLabels: { fontSize: 25, padding: 5 }\n                        }}\n                        tickFormat={(y) => (y < 1000 ? y : (y / 1000 + 'k'))}\n                    /> :\n                    <VictoryLine name=\"Line11\" style={{ data: { stroke: '#007dba', strokeWidth: ({ active }) => active ? 5 : 3 } }} data={_.takeRight(props.data2[stateFips], 14) ? _.takeRight(props.data2[stateFips], 14) : props.data2[\"99999\"]}\n                        x='t' y={varGraphPair[metric]['name'][1]}\n                        labels={({ datum }) => [`Georgia\\n` ,\n                            `Date: ${new Date(datum.t * 1000).toLocaleDateString()}\\n` ,\n                            `${varGraphPair[metric]['legend'][1]}: ${Math.round(datum[varGraphPair[metric]['name'][1]], 2)}\\n`,\n                            `${varGraphPair[metric]['legend'][0]}: ${Math.round(datum[varGraphPair[metric]['name'][0]], 2)}`\n                            ]}\n                            labelComponent={\n                            <VictoryTooltip \n                            orientation=\"top\"\n                            style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'white' }} \n                            constrainToVisibleArea \n                            labelComponent={<VictoryLabel dx={-100} textAnchor = 'start'/>}\n                            flyoutStyle={{ fill: \"black\", fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }} \n                            />\n                        }\n                    />}\n            </VictoryChart>)\n    }\n    else {\n        dataTS = props.data2;\n        return (\n            <VictoryChart theme={VictoryTheme.material}\n                containerComponent={\n                    <VictoryVoronoiContainer\n\n                        responsive={false}\n                        flyoutStyle={{ fill: \"black\" }}\n                    />\n                }\n                width={730}\n                height={500}\n                padding={{ left: 55, right: 70, top: 10, bottom: 50 }}>\n                <VictoryAxis\n                    style={{\n                        tickLabels: { fontSize: 25, padding: 5 }\n                    }}\n                    tickFormat={(t) => new Date(t * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric' })}\n                    tickValues={[\n                        // 1583035200, 1585713600, 1588305600, 1590984000, 1593576000\n                        dataTS['13001'][0].t,\n                      dataTS[\"13001\"][32].t,\n                      dataTS[\"13001\"][62].t,\n                      dataTS[\"13001\"][93].t,\n                      dataTS[\"13001\"][123].t,\n                      dataTS[\"13001\"][154].t,\n                      dataTS[\"13001\"][dataTS[\"13001\"].length-1].t\n                    ]}\n         \n\n                />\n                <VictoryAxis dependentAxis tickCount={6}\n                    style={{\n                        tickLabels: { fontSize: 25, padding: 5 }\n                    }}\n                    tickFormat={(y) => (y < 1000 ? y : (y / 1000 + 'k'))}\n                />\n                <VictoryBar style={{ data: { fill: stateColor } }} barWidth={4} data={dataTS[stateFips + countyFips] ? dataTS[stateFips + countyFips] : dataTS[\"99999\"]}\n                    x='t' y={varGraphPair[metric]['name'][0]}\n\n                />\n                <VictoryLine name=\"Line1\" style={{ data: { stroke: countyColor, strokeWidth: ({ active }) => active ? 7 : 5 } }} data={dataTS[stateFips + countyFips] ? dataTS[stateFips + countyFips] : dataTS[\"99999\"]}\n                    x='t' y={varGraphPair[metric]['name'][1]}\n                    labels={({ datum }) => `${countyname}\\n` + \n                    `Date: ${new Date(datum.t * 1000).toLocaleDateString()}\\n` + \n                    `${varGraphPair[metric]['legend'][1]}: ${Math.round(datum[varGraphPair[metric]['name'][1]], 2)}\\n` +\n                    `${varGraphPair[metric]['legend'][0]}: ${Math.round(datum[varGraphPair[metric]['name'][0]], 2)}`\n                    }\n                    labelComponent={\n                        <VictoryTooltip \n                        orientation=\"top\"\n                        style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'white' }} \n                        constrainToVisibleArea \n                        labelComponent={<VictoryLabel dx={-75} textAnchor = 'start'/>}\n                        flyoutStyle={{ fill: \"black\", fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }} \n                        />\n                    }\n                />\n                {varGraphPair[metric]['name'][1] === 'casesdailymean7' || varGraphPair[metric]['name'][1] === 'deathsdailymean7' ?\n                    <VictoryAxis dependentAxis tickCount={5}\n                        style={{\n                            tickLabels: { fontSize: 25, padding: 5 }\n                        }}\n                        tickFormat={(y) => (y < 1000 ? y : (y / 1000 + 'k'))}\n                    /> :\n                    <VictoryLine name=\"Line11\" style={{ data: { stroke: '#007dba', strokeWidth: ({ active }) => active ? 5 : 3 } }} data={dataTS[stateFips] ? dataTS[stateFips] : dataTS[\"99999\"]}\n                        x='t' y={varGraphPair[metric]['name'][1]}\n                        labels={({ datum }) => [`Georgia\\n` ,\n                            `Date: ${new Date(datum.t * 1000).toLocaleDateString()}    \\n` ,\n                            `${varGraphPair[metric]['legend'][1]}: ${Math.round(datum[varGraphPair[metric]['name'][1]], 2)}\\n`,\n                            `${varGraphPair[metric]['legend'][0]}: ${Math.round(datum[varGraphPair[metric]['name'][0]], 2)}`\n                            ]}\n                        labelComponent={\n                            <VictoryTooltip \n                            // orientation=\"top\"\n                            style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'white' }} \n                            constrainToVisibleArea \n                            // flyoutComponent={<CustomFlyout/>}\n                            labelComponent={<VictoryLabel dx={-80} textAnchor = 'start'/>}\n                            flyoutStyle={{ fill: \"black\", fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }} \n                            />\n                        }\n                    />}\n            </VictoryChart>)\n    }\n}\n\n\n\nexport default function StateMap(props) {\n\n    // let { stateFips } = useParams();\n    const hig = '80';\n    const stateFips = '13';\n    const [config, setConfig] = useState();\n    const [stateName, setStateName] = useState('');\n\n    const [countyFips, setCountyFips] = useState('121');\n    const [countyName, setCountyName] = useState('Fulton County');\n    const history = useHistory();\n    const [fips, setFips] = useState('13');\n\n    // const [dataFltrd, setDataFltrd] = useState();\n    // const [dataFltrdUs, setDataFltrdUs] = useState();\n\n    // const [dataStateFltrd, setDataStateFltrd] = useState();\n    // const [dataState, setDataState] = useState();\n\n    const [data, setData] = useState();\n    const [dataUs, setDataUs] = useState();\n\n    const [dateCur, setDateCur] = useState();\n    const [topTen, setTopTen] = useState([]);\n    // const [stateLabels, setStateLabels] = useState();\n    const [covidMetric, setCovidMetric] = useState({ casesdaily: 'N/A', casesdailymean14: 'N/A', t: 'n/a' });\n    const [covidMetric14, setCovidMetric14] = useState({ casesdaily: 'N/A', casesdailymean14: 'N/A', t: 'n/a' });\n\n    const [dataTS, setDataTS] = useState();\n    const [tooltipContent, setTooltipContent] = useState('');\n    const [colorScale, setColorScale] = useState();\n\n    const [legendMax, setLegendMax] = useState([]);\n    const [legendMax1, setLegendMax1] = useState([]);\n    const [legendMin, setLegendMin] = useState([]);\n    const [legendMax_graph, setLegendMaxGraph] = useState({});\n    const [legendSplit, setLegendSplit] = useState([]);\n    const [legendSplit1, setLegendSplit1] = useState([]);\n\n    const [metric, setMetric] = useState('casescumR');\n    const [metric_graph, setMetricGraph] = useState(['casesdaily', 'casesdailymean14']);\n\n    const metricOptions1 = [{ key: 'cacum', value: 'casescum', text: 'Total COVID-19 cases' },\n    { key: 'decum', value: 'deathscum', text: 'Total COVID-19 deaths' },\n    { key: 'cacumr', value: 'casescumR', text: 'COVID-19 cases per 100,000 population' },\n    { key: 'decumr', value: 'deathscumR', text: 'COVID-19 deaths per 100,000 population' },\n    { key: 'cacum14R', value: 'casescum14dayR', text: 'Last 14 days cases per 100,000 population' }];\n\n    const metricOptions2 = [{ key: 'cs', value: 'cs', text: 'Confirmed cases per 100,000 population' },\n    { key: 'hp', value: 'hp', text: 'Hospitalizations per 100,000 population' },\n    { key: 'ds', value: 'ds', text: 'Deaths per 100,000 population' }];\n    const dropdownopt = {\n        'casescum': 'Total COVID-19 cases', 'deathscum': 'Total COVID-19 deaths',\n        'casescumR': 'COVID-19 cases per 100,000 population', 'deathscumR': 'COVID-19 deaths per 100,000 population'\n    };\n\n    const varGraphPair = {\n        \"casescum\": { \"name\": ['casesdaily', 'casesdailymean7'], \"legend\": ['Daily cases', '7-d rolling average '] },\n        \"deathscum\": { \"name\": ['deathsdaily', 'deathsdailymean7'], \"legend\": ['Daily deaths', '7-d rolling average '] },\n        \"casescumR\": { \"name\": ['casesdailyR', 'casesdailymean7R'], \"legend\": ['Daily cases per 100,000', '7-d rolling average'] },\n        \"deathscumR\": { \"name\": ['deathsdailyR', 'deathsdailymean7R'], \"legend\": ['Daily deaths per 100,000', '7-d rolling average'] },\n        \"casescum14dayR\": { \"name\": ['casesdailyR', 'casesdailymean7R'], \"legend\": ['Last 14 days cases per 100,000', '7-d rolling average'] }\n    };\n    const [metricName, setMetricName] = useState('COVID-19 cases per 100,000 population');\n    const varNameMap = {\n        \"casescum\": { \"name\": 'cases', \"text\": \"The map shows the total number of confirmed COVID-19 cases in each county as of \", \"cat\": 'case' },\n        \"casescum14dayR\": { \"name\": 'cases per 100,000 residents', \"text\": \"The map shows the number of confirmed COVID-19 cases for past two weeks in each county as of \", \"cat\": 'case' },\n        \"deathscum\": { \"name\": 'deaths', \"text\": \"The map shows the total number of confirmed COVID-19 deaths in each county as of \", \"cat\": 'death' },\n        \"casescumR\": { \"name\": 'cases per 100,000 residents', \"text\": \"The map shows the total number of confirmed COVID-19 cases per 100,000 residents in each county as of \", \"cat\": 'case' },\n        \"deathscumR\": { \"name\": 'deaths per 100,000 residents', \"text\": \"The map shows the total number of confirmed COVID-19 deaths per 100,000 residents in each county as of \", \"cat\": 'death' }\n    };\n    const varMap = { \"cacum\": metricOptions2[0], \"decum\": metricOptions2[1], \"cacumr\": metricOptions2[2], \"decumr\": metricOptions1[1] };\n    const [delayHandler, setDelayHandler] = useState(null)\n\n\n\n    useEffect(() => {\n\n        const configMatched = configs.find(s => s.fips === stateFips);\n        // console.log(configMatched.fips);\n        if (!configMatched) {\n            history.push('/');\n        } else {\n\n            setConfig(configMatched);\n            // console.log(countyFips);\n            setStateName(configMatched.name);\n\n            fetch('/data/data.json').then(res => res.json())\n                .then(x => {\n                    setData(x);\n                    setDataUs(x);\n                    if (metric === 'casescum') {\n\n                        _.map(x, (d, k) => {\n                            d.fips = k\n                            return d\n                        });\n                        var temp_Data_metric = [];\n                        // retrieve metric data as list\n                        _.each(x, d => {\n                            if (d.fips.length === 5 && d.fips[0] === '1' && d.fips[1] === '3') {\n                                temp_Data_metric.push(d[metric]);\n                            }\n                        });\n\n                        temp_Data_metric.sort(function (a, b) {\n                            return a - b;\n                        });\n                        var countIqr = 3 * quantile(temp_Data_metric, 0.75) - 2 * quantile(temp_Data_metric, 0.25);\n                        // console.log(temp_Data_metric);\n                        //   var top10 = _.takeRight(temp_Data_metric,10)[0];\n\n                        //   var belowIqr = _.map(_.filter(temp_Data_metric,\n                        //     d => (d<top10\n                        //       )),\n                        //     d => d);\n                        // console.log(belowTop)\n                        var belowIqr = _.map(_.filter(temp_Data_metric,\n                            d => (d < countIqr\n                            )),\n                            d => d);\n\n                        var upIqr = _.map(_.filter(temp_Data_metric,\n                            d => (d >= countIqr\n                            )),\n                            d => d);\n\n                        var split = scaleQuantile()\n                            .domain(belowIqr).range(colorPalette);\n                        var split1 = scaleQuantile()\n                            .domain(upIqr).range(colorPalette1);\n                        // console.log(split.quantiles())\n                        // console.log(split1.quantiles())\n\n\n                        var thr = [];\n                        var thr1 = [];\n                        for (i = 0; i < split1.quantiles().length; i++) {\n                            thr1[i] = split1.quantiles()[i];\n                        }\n                        thr1.push(_.takeRight(temp_Data_metric)[0]);\n\n                        for (i = 0; i < split.quantiles().length; i++) {\n                            thr[i] = split.quantiles()[i];\n                        }\n                        thr.push(Math.round(countIqr / 100) * 100);\n\n                        // console.log(thr1);\n                        var i;\n                        for (i = 0; i < thr.length; i++) {\n                            if (thr[i] < 100) {\n                                thr[i] = Math.round(thr[i] / 10) * 10;\n                            }\n                            else {\n                                thr[i] = Math.round(thr[i] / 100) * 100;\n                            }\n                        }\n                        for (i = 0; i < thr1.length; i++) {\n                            if (thr1[i] < 100) {\n                                thr1[i] = Math.floor(thr1[i] / 10) * 10;\n                            }\n                            else {\n                                thr1[i] = Math.floor(thr1[i] / 100) * 100;\n                            }\n\n                        }\n                        // console.log(thr1)\n\n                        const csUs = {};\n                        var indexColor;\n                        _.map(belowIqr, d => {\n                            if (d >= 0 && d <= thr[0]) {\n                                csUs[d] = colorPalette[0];\n                            };\n                            if (d > thr[0] && d <= thr[1]) {\n                                csUs[d] = colorPalette[1];\n                            }\n                            if (d > thr[1] && d <= thr[2]) {\n                                csUs[d] = colorPalette[2];\n                            }\n                            if (d > thr[2] && d <= thr[3]) {\n                                csUs[d] = colorPalette[3];\n                            }\n                            if (d > thr[3] && d <= thr[4]) {\n                                csUs[d] = colorPalette[4];\n                            }\n                            if (d > thr[4] && d <= thr[5]) {\n                                csUs[d] = colorPalette[5];\n                            }\n                        });\n\n                        _.map(upIqr, d => {\n                            if (d > thr[5] && d <= thr1[0]) {\n                                csUs[d] = colorPalette1[0];\n                            }\n                            if (d > thr1[0] && d <= thr1[1]) {\n                                csUs[d] = colorPalette1[1];\n                            }\n                            if (d > thr1[1] && d <= thr1[2]) {\n                                csUs[d] = colorPalette1[2];\n                            }\n                            if (d > thr1[2] && d <= thr1[3]) {\n                                csUs[d] = colorPalette1[3];\n                            }\n                            if (d > thr1[3] && d <= thr1[4]) {\n                                csUs[d] = colorPalette1[4];\n                            }\n                        })\n                        let scaleMap = csUs;\n\n                        setColorScale(scaleMap);\n\n                        var max = _.takeRight(temp_Data_metric)[0];\n                        var min = temp_Data_metric[0];\n                        // console.log(max);\n                        if (max > 999) {\n                            max = (max / 1000).toFixed(0) + \"K\";\n                            // console.log(max);\n                            setLegendMax(max);\n                        } else {\n                            setLegendMax(max.toFixed(0));\n\n                        }\n                        setLegendMin(min.toFixed(0));\n\n                        setLegendSplit(thr);\n                        // console.log(thr1[4])\n                        setLegendSplit1(thr1.slice(0,4));\n                        setLegendMax1(thr1[4]);\n\n                    }\n                    else {\n                        _.map(x, (d, k) => {\n                            d.fips = k\n                            return d\n                        });\n\n                        var temp_Data = {};\n                        var temp_Data_metric = [];\n                        // retrieve metric data as list\n                        _.each(x, d => {\n                            if (d.fips.length === 5 && d.fips[0] === '1' && d.fips[1] === '3') {\n                                temp_Data_metric.push(d[metric]);\n                            }\n                        });\n                        temp_Data[metric] = temp_Data_metric;\n\n                        temp_Data_metric.sort(function (a, b) {\n                            return a - b;\n                        });\n                        // console.log(temp_Data_metric);\n                        //   console.log(quantile(temp_Data_metric, 0.75));\n                        //   console.log(quantile(temp_Data_metric, 0.25));\n                        //   console.log(3*quantile(temp_Data_metric, 0.75)-2*quantile(temp_Data_metric, 0.25));\n                        // console.log(6*quantile(temp_Data_metric, 0.75)-5*quantile(temp_Data_metric, 0.25))\n                        var countIqr = 6 * quantile(temp_Data_metric, 0.75) - 5 * quantile(temp_Data_metric, 0.25);\n                        var rateIqr = 3 * quantile(temp_Data_metric, 0.75) - 2 * quantile(temp_Data_metric, 0.25);\n                        var IQR3 = _.map(_.filter(_.map(x, (d, k) => {\n                            d.fips = k\n                            return d\n                        }),\n                            d => (metric === 'casescumR' || metric === 'deathscumR' ? d[metric] > 0 && d[metric] < rateIqr &&\n                                d.fips.length === 5\n                                : d[metric] > 0 && d[metric] < countIqr &&\n                                d.fips.length === 5\n                            )),\n                            d => d[metric]);\n\n                        // console.log(IQR3);\n\n                        const csUs = {};\n                        var indexColor;\n                        _.map(IQR3, d => {\n                            if (metric === 'casescumR' || metric === 'deathscumR' || metric == 'casescum14dayR') { var interV = (rateIqr.toFixed(0)) / colorPalette.length }\n                            else { var interV = (countIqr.toFixed(0)) / colorPalette.length }\n\n                            if (metric === 'deathscum' || metric === 'deathscumR') {\n                                indexColor = Math.round(interV / 10) * 10;\n                            }\n                            else {\n                                indexColor = Math.round(interV / 100) * 100;\n                            }\n                            // console.log(indexColor);\n                            csUs[d] = colorPalette[Math.floor(d / indexColor)];\n                        })\n\n                        _.map(x, d => {\n                            if (d[metric] > indexColor * colorPalette.length) {\n                                csUs[d[metric]] = colorOut;\n                            }\n                            if (d[metric] < indexColor * colorPalette.length && d[metric] > 3 * quantile(temp_Data_metric, 0.75) - 2 * quantile(temp_Data_metric, 0.25).toFixed(0)) {\n                                csUs[d[metric]] = colorPalette[colorPalette.length - 1];\n                            }\n                        })\n                        let scaleMap = csUs;\n\n                        setColorScale(scaleMap);\n\n                        var max = _.takeRight(temp_Data_metric)[0];\n                        var min = temp_Data_metric[0];\n                        // console.log(max);\n                        if (max > 999) {\n                            max = (max / 1000).toFixed(0) + \"K\";\n                            // console.log(max);\n                            setLegendMax(max);\n                        } else {\n                            setLegendMax(max.toFixed(0));\n\n                        }\n                        setLegendMin(min.toFixed(0));\n                        var split = [];\n                        var i = 0;\n                        for (i = 0; i < colorPalette.length; i++) {\n                            split.push((i + 1) * indexColor);\n                        }\n\n                        setLegendSplit(split);\n                        // console.log(split);\n\n                    }\n                });\n\n            // fetch('/data/timeseries13' + '.json').then(res => res.json())\n            //   .then(x => setDataTS(x));\n            fetch('/data/timeseries13' + '.json').then(res => res.json())\n                .then(\n                    x => {\n                        setDataTS(x);\n                        // var max = 0\n                        var dicto = {}\n                        for (var key in x) {\n                            var max = 0\n                            _.each(x[key], m => {\n                                if (m[varGraphPair[metric]['name'][0]] > max) {\n                                    max = m[varGraphPair[metric]['name'][0]];\n                                }\n                            });\n                            dicto[key] = max;\n                            // console.log(varNameMap['cacum'].text);\n                        }\n                        // console.log(dicto);\n                        setLegendMaxGraph(dicto);\n                    });\n\n            fetch('/data/data.json').then(res => res.json())\n                .then(x => {\n                    setDateCur(x)\n                    // console.log(x)\n                });\n        }\n    }, [stateFips, metric]);\n\n\n\n    useEffect(() => {\n        if (dataTS && dataTS[stateFips + countyFips]) {\n            setCovidMetric(_.takeRight(dataTS[stateFips + countyFips])[0]);\n            setCovidMetric14(_.takeRight(dataTS[stateFips + countyFips], 14));\n            // console.log(data[stateFips+countyFips])\n            // setDateCur(data[stateFips+countyFips])\n        }\n    }, [dataTS, countyFips])\n\n    if (dataTS && dataUs) {\n\n        return (\n            <div>\n                <AppBar menu='countyReport' />\n                <Container style={{ marginTop: '6em', minWidth: '1260px' }}>\n                    {config &&\n                        <div>\n                            <Breadcrumb>\n                                {/* <Breadcrumb.Section link onClick={() => history.push('/')}></Breadcrumb.Section>\n            <Breadcrumb.Divider /> */}\n                                <Breadcrumb.Section active>{stateName}</Breadcrumb.Section>\n                                {/* <Breadcrumb.Divider /> */}\n                            </Breadcrumb>\n                            <Divider hidden />\n                            <Grid columns={16}>\n                                <Grid.Column width={7} style={{ paddingLeft: \"2\", paddingLeft: \"1\" }}>\n                                    <Header as='h2' style={{ fontWeight: 600 }}>\n                                        <Header.Content>\n                                            <Dropdown\n                                                style={{\n                                                    background: '#fff',\n                                                    fontSize: \"17pt\",\n                                                    fontWeight: 600,\n                                                    theme: '#000000',\n                                                    width: '520px',\n                                                    top: '0em',\n                                                    left: '0em',\n                                                    text: \"Select\",\n                                                    borderTop: 'none',\n                                                    borderLeft: '1px solid #FFFFFF',\n                                                    borderRight: 'none',\n                                                    borderBottom: '0.9px solid #bdbfc1',\n                                                    borderRadius: 0,\n                                                    minHeight: '1.0em',\n                                                    paddingBottom: '0.2em'\n                                                }}\n                                                text={metricName}\n                                                inline\n                                                search\n                                                \n                                                pointing='top'\n                                                options={metricOptions1}\n                                                onChange={(e, { value }) => {\n                                                    setMetric(value);\n                                                    setMetricName(dropdownopt[value]);\n                                                }}\n                                            />\n                                            {/* <Header.Subheader style={{ fontWeight: 300 }}>\n                        Health determinants impact COVID-19 outcomes.\n                    </Header.Subheader> */}\n                                            {/* <Header.Subheader style={{ fontWeight: 300 }}>Click on a state below to drill down to your county data.</Header.Subheader> */}\n                                        </Header.Content>\n                                    </Header>\n                                    <SvgMap name={metric}\n                                        legendSplit={legendSplit}\n                                        legendSplit1={legendSplit1}\n                                        legendMin={legendMin}\n                                        legendMax={legendMax}\n                                    />\n\n                                    <ComposableMap projection=\"geoAlbersUsa\"\n                                        projectionConfig={{ scale: `${config.scale}` }}\n                                        width={500}\n                                        height={550}\n                                        data-tip=\"\"\n                                        offsetX={config.offsetX}\n                                        offsetY={config.offsetY}>\n                                        <Geographies geography={config.url}>\n                                            {({ geographies }) => geographies.map(geo =>\n                                                <Geography\n                                                    key={geo.rsmKey}\n                                                    geography={geo}\n                                                    onClick={() => {\n                                                        history.push(\"/\" + stateFips + \"/\" + geo.properties.COUNTYFP);\n                                                        // console.log(geo.properties.COUNTYFP);\n                                                    }}\n                                                    style={{\n                                                        default: {\n                                                            //  fill: \"#ECEFF1\",\n                                                            stroke: \"#607D8B\",\n                                                            strokeWidth: 0.95,\n                                                            outline: \"none\",\n                                                        },\n                                                        pressed: {\n                                                            outline: \"none\",\n                                                        }\n                                                    }}\n                                                    onMouseEnter={() => {\n                                                        setDelayHandler(setTimeout(() => {\n                                                            setCountyFips(geo.properties.COUNTYFP);\n                                                            setCountyName(fips2county[stateFips + geo.properties.COUNTYFP]);\n                                                            // setTooltipContent('Click to see more county data');\n                                                        }, 500))\n                                                    }}\n                                                    onMouseLeave={() => {\n                                                        clearTimeout(delayHandler)\n                                                        setTooltipContent(\"\")\n                                                    }}\n                                                    fill={countyFips === geo.properties.COUNTYFP ? countyColor :\n                                                        ((colorScale && dataUs[stateFips + geo.properties.COUNTYFP] &&\n                                                            dataUs[stateFips + geo.properties.COUNTYFP][metric] && dataUs[stateFips + geo.properties.COUNTYFP][metric] > 0) ?\n                                                            colorScale[dataUs[stateFips + geo.properties.COUNTYFP][metric]] :\n                                                            (colorScale && dataUs[stateFips + geo.properties.COUNTYFP] && dataUs[stateFips + geo.properties.COUNTYFP][metric] === 0) ? '#e1dce2' : '#FFFFFF')}\n                                                />\n                                            )}\n                                        </Geographies>\n                                    </ComposableMap>\n                                    {/* <div style={{ paddingTop: 0, paddingLeft: '1em', paddingRight: '4em' }}>\n                                    <Slider\n                                        defaultValue={20}\n                                        // getAriaValueText={valuetext}\n                                        aria-labelledby=\"discrete-slider\"\n                                        valueLabelDisplay=\"off\"\n                                        step={10}\n                                        marks={marks}\n                                        min={0}\n                                        max={40}\n                                    />\n                                    </div> */}\n\n\n\n                                    <Grid.Row style={{ paddingTop: 0, paddingLeft: '0em', paddingRight: '2em' }} centered>\n                                        <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\n                                            {varNameMap[metric].text}{dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' : (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))} . The darker shading indicates a larger number of {varNameMap[metric].name}.\n                    </small>\n                                    </Grid.Row>\n\n                                </Grid.Column>\n                                <Grid.Column width={9} style={{ paddingLeft: \"2\", paddingLeft: \"1\" }}>\n                                    <Header as='h2' style={{ fontWeight: 400, paddingLeft: \"2.5\" }}>\n                                        <Header.Content>\n                                            {/* {varGraphPair[metric]['legend'][0]} for <span style={{ color: countyColor }}>{countyName}</span> */}\n                                            {varGraphPair[metric]['legend'][0]} for <b>{countyName}</b>\n                                            <Header.Subheader style={{ fontWeight: 300 }}>\n                                            </Header.Subheader>\n                                        </Header.Content>\n                                    </Header>\n                                    <Grid>\n                                        <Grid.Column>\n                                            <Grid.Row style={{ paddingLeft: \"1.5\", paddingTop: \"1\", paddingBottom: 0 }} centered>\n\n                                                <svg width=\"630\" height='80'>\n\n                                                    <rect x={50} y={12} width=\"15\" height=\"2\" style={{ fill: countyColor, strokeWidth: 1, stroke: countyColor }} />\n                                                    <text x={75} y={20} style={{ fontSize: 16 }}>7-day rolling average in {countyName}</text>\n\n                                                    {varGraphPair[metric]['name'][1] === 'casesdailymean7' || varGraphPair[metric]['name'][1] === 'deathsdailymean7' ?\n                                                        <rect x={50} y={40} width=\"15\" height=\"15\" style={{ fill: stateColor, strokeWidth: 1, stroke: stateColor }} /> :\n                                                        <rect x={50} y={35} width=\"15\" height=\"1\" style={{ fill: '#71c7ec', strokeWidth: 1, stroke: '#71c7ec' }} />}\n                                                    {varGraphPair[metric]['name'][1] === 'casesdailymean7' || varGraphPair[metric]['name'][1] === 'deathsdailymean7' ?\n                                                        <text x={75} y={52} style={{ fontSize: 16 }}> {varGraphPair[metric]['legend'][0]} </text> :\n                                                        <rect x={50} y={35} width=\"15\" height=\"1\" style={{ fill: '#71c7ec', strokeWidth: 1, stroke: '#71c7ec' }} />}\n                                                    {varGraphPair[metric]['name'][1] === 'casesdailymean7' || varGraphPair[metric]['name'][1] === 'deathsdailymean7' ?\n                                                        <text x={250} y={12} style={{ fontSize: 0 }}></text> :\n                                                        <text x={75} y={43} style={{ fontSize: 16 }}>7-day rolling average in Georgia</text>}\n                                                    {varGraphPair[metric]['name'][1] === 'casesdailymean7' || varGraphPair[metric]['name'][1] === 'deathsdailymean7' ?\n                                                        <rect x={0} y={0} width=\"0\" height=\"0\" style={{ fill: 'white', strokeWidth: 0, stroke: 'white' }} /> :\n                                                        <rect x={50} y={55} width=\"15\" height=\"15\" style={{ fill: stateColor, strokeWidth: 1, stroke: stateColor }} />}\n                                                    {varGraphPair[metric]['name'][1] === 'casesdailymean7' || varGraphPair[metric]['name'][1] === 'deathsdailymean7' ?\n                                                        <rect x={0} y={0} width=\"0\" height=\"0\" style={{ fill: 'white', strokeWidth: 0, stroke: 'white' }} /> :\n                                                        <text x={75} y={68} style={{ fontSize: 16 }}> {varGraphPair[metric]['legend'][0]} </text>}\n\n                                                </svg>\n\n                                                <ChartGraph\n                                                    name={varGraphPair}\n                                                    metric={metric}\n                                                    stateFips={stateFips}\n                                                    countyFips={countyFips}\n                                                    data1={covidMetric14}\n                                                    data2={dataTS}\n                                                    countyname={countyName}\n\n                                                />\n\n\n                                            </Grid.Row>\n                                            <Grid.Row style={{ paddingTop: '2em', paddingLeft: '2.9em', paddingRight: '2.9em' }} centered>\n                                                <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\n                                                    This chart shows the daily number of new confirmed COVID-19 {varNameMap[metric].name} in <b>{countyName}</b> as of {dataTS[stateFips + countyFips][0].todaydate === 'n/a' ? 'N/A' : (new Date(dataTS[stateFips + countyFips][0].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}. The daily number reflects the date the {varNameMap[metric].cat} was first reported to DPH.\n                        The vertical bars show the number of new daily {varNameMap[metric].name} while the line shows the 7-day moving average of new daily {varNameMap[metric].name}.\n                        </small>\n                                            </Grid.Row>\n                                        </Grid.Column>\n                                    </Grid>\n                                </Grid.Column>\n\n                            </Grid>\n                        </div>\n                    }\n                    <Notes />\n                </Container>\n                {/* <ReactTooltip>{tooltipContent}</ReactTooltip> */}\n                <ReactTooltip > <font size=\"+2\"><b >{countyName}</b> </font> <br />\n                    <b>Total Cases</b>: {data[stateFips + countyFips]['casescum'] >= 0 ? data[stateFips + countyFips]['casescum'].toFixed(0) : \"N/A\"} <br />\n                    <b>Total Deaths</b>: {data[stateFips + countyFips]['deathscum'] >= 0 ? data[stateFips + countyFips]['deathscum'].toFixed(0) : \"N/A\"} <br />\n                    <b>Total case per 100k</b>: {data[stateFips + countyFips]['casescumR'] >= 0 ? data[stateFips + countyFips]['casescumR'].toFixed(0) : \"N/A\"} <br />\n                    <b>Total Deaths per 100k</b>: {data[stateFips + countyFips]['deathscumR'] >= 0 ? data[stateFips + countyFips]['deathscumR'].toFixed(0) : 'N/A'} <br />\n                    <b>Last 14-day Cases per 100k</b>: {data[stateFips + countyFips]['casescum14dayR'] >= 0 ? data[stateFips + countyFips]['casescum14dayR'].toFixed(0) : \"N/A\"} <br />\n                    <b>Click to see county-level data.</b> </ReactTooltip>\n            </div>\n        );\n    } else {\n        return <Loader active inline='centered' />\n    }\n\n\n\n\n}","import React, { useEffect, useState } from 'react'\nimport { Container, Grid, Breadcrumb, Header, Loader, List, Table, Divider, Popup } from 'semantic-ui-react'\nimport AppBar from './AppBar';\nimport Geographies from './Geographies';\nimport Geography from './Geography';\nimport ComposableMap from './ComposableMap';\nimport {\n  VictoryChart,\n  VictoryTooltip,\n  VictoryVoronoiContainer,\n  VictoryContainer,\n  VictoryGroup,\n  VictoryBar,\n  VictoryTheme,\n  VictoryAxis,\n  VictoryLegend,\n  VictoryLine,\n  VictoryLabel,\n  VictoryScatter,\n  VictoryPie\n} from 'victory';\n\nimport { useParams, useHistory } from 'react-router-dom';\nimport Notes from './Notes';\nimport ReactTooltip from \"react-tooltip\";\nimport fips2county from './fips2county.json'\nimport configs from \"./state_config.json\";\nimport configscounty from \"./county_config.json\";\nimport _ from 'lodash';\nimport * as d3 from 'd3-geo'\nimport Chart from \"react-google-charts\";\nimport { scaleQuantile, scaleQuantize } from \"d3-scale\";\n\nconst countyColor = '#f2a900';\nconst stateColor = '#bdbfc1';\nconst nationColor = '#d9d9d7';\nconst colorPalette = [\n  \"#e1dce2\",\n  \"#d3b6cd\",\n  \"#bf88b5\",\n  \"#af5194\",\n  \"#99528c\",\n  \"#633c70\",\n];\n\n\nfunction ScatterChart(props) {\n\n  return (\n    <VictoryChart\n      width={400}\n      height={300}\n      scale={{ x: props.xlog ? 'log' : 'linear', y: props.ylog ? 'log' : 'linear' }}\n      minDomain={{ y: props.ylog ? 1 : 0 }}\n      padding={{ left: 80, right: 10, top: 50, bottom: 50 }}>\n      {props.showLegend && <VictoryLegend\n        x={10} y={10}\n        orientation=\"horizontal\"\n        colorScale={[stateColor, countyColor]}\n        data={[\n          { name: ('Other counties in ' + props.stateName) }, { name: props.countyName }\n        ]}\n      />}\n      <VictoryScatter\n        data={_.filter(_.map(props.data, (d, k) => { d.fips = k; return d; }), (d) => (\n          d.fips.length === 5 &&\n          d.fips.substring(0, 2) === props.stateFips &&\n          d[props.x] && d[props.y]))}\n        sortKey={(d) => d.fips === (props.stateFips + props.countyFips)}\n        style={{\n          data: {\n            fill: ({ datum }) => datum.fips === (props.stateFips + props.countyFips) ? countyColor : stateColor,\n            fillOpacity: ({ datum }) => datum.fips === (props.stateFips + props.countyFips) ? 1.0 : 0.7\n          }\n        }}\n        size={4}\n        x={props.x}\n        y={props.y}\n      />\n      <VictoryAxis label={props.varMap[props.x] ? props.varMap[props.x].name : props.x}\n        tickCount={4}\n        tickFormat={(y) => (props.rescaleX ? (Math.round(y / 1000) + 'k') : (Math.round(y * 100) / 100))} />\n      <VictoryAxis dependentAxis label={props.varMap[props.y] ? props.varMap[props.y].name : props.y}\n        style={{ axisLabel: { padding: 40 } }}\n        tickCount={5}\n        tickFormat={(y) => (Math.round(y * 100) / 100)} />\n    </VictoryChart>);\n\n}\n\nfunction numberWithCommas(x) {\n  x = x.toString();\n  var pattern = /(-?\\d+)(\\d{3})/;\n  while (pattern.test(x))\n    x = x.replace(pattern, \"$1,$2\");\n  return x;\n}\n\nfunction BarChart(props) {\n  const colors = {\n    \"1\": '#778899',\n  };\n  return (\n    <VictoryChart\n      theme={VictoryTheme.material}\n      width={props.width || 560}\n      height={180}\n      domainPadding={props.pad || 10}\n      scale={{ y: props.ylog ? 'log' : 'linear' }}\n      minDomain={{ y: props.ylog ? 1 : 0 }}\n      padding={{ left: 79, right: 40, top: 40, bottom: 50 }}\n      containerComponent={<VictoryContainer responsive={false} />}\n    >\n      <VictoryLabel style={{\n        fontSize: 20, paddingBottom: '0.5em'\n      }} text={props.title} x={(props.width || 560) / 2} y={26} textAnchor=\"middle\" />\n      <VictoryAxis style={{\n        tickLabels: { fontSize: 18, padding: 2 }\n      }} />\n      <VictoryAxis dependentAxis style={{\n        tickLabels: { fontSize: 18, padding: 2 }\n      }}\n        tickFormat={(y) => (y < 1000 ? y : (y / 1000 + 'k'))} />\n      <VictoryBar\n        horizontal\n        barRatio={0.8}\n        // labels={({ datum }) => (Math.round(datum.value * 100) / 100)}\n        data={[{ key: props.keyv[0], 'value': props.data[props.stateFips + props.countyFips][props.var[0]] || 0, 'colors': '1' },\n        { key: props.keyv[1], 'value': props.data[props.stateFips + props.countyFips][props.var[1]] || 0, 'colors': '1' },\n        { key: props.keyv[2], 'value': props.data[props.stateFips + props.countyFips][props.var[2]] || 0, 'colors': '1' },\n        { key: props.keyv[3], 'value': props.data[props.stateFips + props.countyFips][props.var[3]] || 0, 'colors': '1' }]}\n        labelComponent={<VictoryLabel dx={5} style={{ fontWeight: 300, fontSize: 18, fill: ({ datum }) => colors[datum.key] }} />}\n        style={{\n          data: {\n            fill: ({ datum }) => colors[datum.colors]\n          }\n        }}\n        x=\"key\"\n        y=\"value\"\n      />\n    </VictoryChart>);\n}\n\nexport default function CountyReport() {\n\n  let { stateFips, countyFips } = useParams();\n  // const [countyFips, setCountyFips] = useState('121');\n  const [configsCounty, setConfig] = useState();\n  const [stateName, setStateName] = useState('Georgia');\n  const [countyName, setCountyName] = useState('');\n  const [dateCur, setDateCur] = useState();\n  const [zipCode, setZipCode] = useState('30328');\n  const [zipCodeH, setZipCodeH] = useState('30328');\n  const [zipCodeD, setZipCodeD] = useState('30328');\n  const [zipCodeFinal, setZipCodeFinal] = useState('30328');\n  const history = useHistory();\n  const [data, setData] = useState();\n  const [data_cases, setDataCG] = useState();\n  const [data_deaths, setDataDG] = useState();\n  const [datades_cases, setDatadesCG] = useState();\n  const [datades_deaths, setDatadesDG] = useState();\n  const [dataG, setDataG] = useState();\n  const [dataZip, setDataZip] = useState();\n  const [dataTS, setDataTS] = useState();\n  const [mapOut, setDataMapOut] = useState();\n\n  const [legendMax, setLegendMax] = useState([]);\n  const [legendMaxD, setLegendMaxD] = useState([]);\n\n  const [legendMax_graph, setLegendMaxGraph] = useState(0);\n\n  const [legendMin, setLegendMin] = useState([]);\n  const [legendMinD, setLegendMinD] = useState([]);\n\n  const [legendSplit, setLegendSplit] = useState([]);\n  const [legendSplitD, setLegendSplitD] = useState([]);\n  const [colorScale, setColorScale] = useState();\n  const [colorScaleD, setColorScaleD] = useState();\n\n\n  // const [metric, setMetric] = useState('mean7daycases');\n  const [tooltipContent, setTooltipContent] = useState('');\n  const [covidMetric, setCovidMetric] = useState({\n    casescum: 'N/A', deathscum: 'N/A', casescumR: 'N/A', deathscumR: 'N/A',\n    casesdailymean14: 'N/A', deathsdailymean14: 'N/A', casesdailymean14R: 'N/A', deathsdailymean14R: 'N/A', \"cfr\": 'N/A', \"cfrcompare\": '', t: 'n/a'\n  });\n  const [covidMetricLast, setCovidMetricLast] = useState({\n    casescum: 'N/A', deathscum: 'N/A', casescumR: 'N/A', deathscumR: 'N/A',\n    casesdailymean14: 'N/A', deathsdailymean14: 'N/A', casesdailymean14R: 'N/A', deathsdailymean14R: 'N/A', \"cfr\": 'N/A', \"cfrcompare\": '', t: 'n/a'\n  });\n  const [covidMetricGa, setCovidMetricGa] = useState({\n    casescum: 'N/A', deathscum: 'N/A', casescumR: 'N/A', deathscumR: 'N/A',\n    casesdailymean14: 'N/A', deathsdailymean14: 'N/A', casesdailymean14R: 'N/A', deathsdailymean14R: 'N/A', \"cfr\": 'N/A', \"cfrcompare\": '', t: 'n/a'\n  });\n  const [covidMetric14, setCovidMetric14] = useState({\n    casescum: 'N/A', deathscum: 'N/A', casescumR: 'N/A', deathscumR: 'N/A',\n    casesdailymean14: 'N/A', deathsdailymean14: 'N/A', casesdailymean14R: 'N/A', deathsdailymean14R: 'N/A', \"cfr\": 'N/A', \"cfrcompare\": '', t: 'n/a'\n  });\n  const [varMap, setVarMap] = useState({});\n  // const [countyFips, setCountyFips] = useState('');\n\n\n  const varNameMap = {\n    \"casescum\": { \"name\": 'cases', \"text\": \"The map shows the total number of confirmed COVID-19 cases in each zip code as of \" },\n    \"deathscum\": { \"name\": 'deaths', \"text\": \"The map shows the total number of confirmed COVID-19 deaths in each zip code as of \" },\n    \"casescumR\": { \"name\": 'cases per 100,000 residents', \"text\": \"The map shows the total number of confirmed COVID-19 cases per 100,000 residents in each zip code as of \" },\n    \"deathscumR\": { \"name\": 'deaths per 100,000 residents', \"text\": \"The map shows the total number of confirmed COVID-19 deaths per 100,000 residents in each zip code as of \" }\n  };\n\n  const [delayHandler, setDelayHandler] = useState(null)\n\n  useEffect(() => {\n\n    const configMatched = configscounty.find(s => s.countyfips === countyFips);\n\n    // let projection = d3.geoAlbersUsa();\n    // // let gps = [-85.504701, 34.855196]\n    // let gps = [-0.6, 38.7]\n    // console.log(projection.center)\n    // console.log(countyfips);\n\n    // console.log(configMatched);\n    if (!configMatched || !fips2county[stateFips + countyFips]) {\n      history.push('/');\n    } else {\n      setConfig(configMatched);\n      // setStateName(configMatched.name);\n      setCountyName(fips2county[stateFips + countyFips]);\n\n      fetch('/data/rawdata/variable_mapping.json').then(res => res.json())\n        .then(x => setVarMap(x));\n\n      fetch('/data/data_us.json').then(res => res.json())\n        .then(x => setData(x));\n      fetch('/data/data.json').then(res => res.json())\n        .then(x => setDateCur(x));\n      fetch('/data/data_cases_ga.json').then(res => res.json())\n        .then(x => setDataCG(x));\n      fetch('/data/data_deaths_ga.json').then(res => res.json())\n        .then(x => setDataDG(x));\n      fetch('/data/data_describe_cases.json').then(res => res.json())\n        .then(x => setDatadesCG(x));\n      fetch('/data/data_describe_deaths.json').then(res => res.json())\n        .then(x => setDatadesDG(x));\n      fetch('/data/data.json').then(res => res.json())\n        .then(x => setDataG(x));\n\n      fetch('/data/zipcode.json').then(res => res.json())\n        .then(x => setDataZip(x));\n\n      fetch('/data/timeseries13' + '.json').then(res => res.json())\n        .then(x => setDataTS(x));\n\n      fetch('/data/mapout' + '.json').then(res => res.json())\n        .then(x => setDataMapOut(x));\n\n      fetch('/data/timeseries13' + '.json').then(res => res.json())\n        .then(\n          x => {\n            // setDataTS(x);\n            var max = 0\n            var length = 0\n            _.each(x[stateFips + countyFips], d => {\n              length = length + 1\n              // console.log(d);\n              if (d['cases'] > max) {\n                max = d['cases'];\n              }\n\n            });\n            setLegendMaxGraph(max.toFixed(0));\n            // console.log(max.toFixed(0));\n          });\n\n      fetch('/data/zipcode.json').then(res => res.json())\n        .then(x => {\n          // setDataZip(x);\n\n          const cs = scaleQuantile()\n            .domain(_.map(_.filter(_.map(x, (d, k) => {\n              d.fips = k\n              return d\n            }),\n              d => (\n                (d.casescum >= 0 &&\n                  d.fips.length === 5 && Number(d.fips) >= 30001 && Number(d.fips) <= 31999) || (d.casescum >= 0 &&\n                    d.fips.length === 5 && Number(d.fips) >= 39800 && Number(d.fips) <= 39999))),\n              d => d['casescum']))\n            .range(colorPalette);\n\n          let scaleMap = {}\n          _.each(_.filter(_.map(x, (d, k) => {\n            d.fips = k\n            return d\n          }),\n            d => (\n              (d.casescum >= 0 &&\n                d.fips.length === 5 && Number(d.fips) >= 30001 && Number(d.fips) <= 31999) || (d.casescum >= 0 &&\n                  d.fips.length === 5 && Number(d.fips) >= 39800 && Number(d.fips) <= 39999)))\n            , d => {\n              scaleMap[d['casescum']] = cs(d['casescum'])\n            });\n          setColorScale(scaleMap);\n\n          var max = 0\n          var min = 100\n          var length = 0\n          _.each(x, d => {\n            // console.log(d.fips[0]);\n            if ((d['casescum'] > max && d.fips.length === 5 && Number(d.fips) >= 30001 && Number(d.fips) <= 31999) ||\n              (d['casescum'] > max && d.fips.length === 5 && Number(d.fips) >= 39800 && Number(d.fips) <= 39999)\n            ) {\n              max = d['casescum'];\n              // console.log(d.fips)\n            } else if ((d.fips.length === 5 && d['casescum'] < min && d['casescum'] >= 0 && Number(d.fips) >= 30001 && Number(d.fips) <= 31999) ||\n              (d.fips.length === 5 && d['casescum'] < min && d['casescum'] >= 0 && Number(d.fips) >= 39800 && Number(d.fips) <= 39999)\n            ) {\n              min = d['casescum']\n              // console.log(d.fips)\n            }\n\n          });\n          if (max > 999) {\n            max = (max / 1000).toFixed(0) + \"K\";\n            setLegendMax(max);\n          } else {\n            setLegendMax(max.toFixed(0));\n\n          }\n          setLegendMin(min.toFixed(0));\n\n          var split = scaleQuantile()\n            .domain(_.map(_.filter(_.map(x, (d, k) => {\n              d.fips = k\n              return d\n            }),\n              d => (\n                (d.casescum >= 0 &&\n                  d.fips.length === 5 && Number(d.fips) >= 30001 && Number(d.fips) <= 31999) || (d.casescum >= 0 &&\n                    d.fips.length === 5 && Number(d.fips) >= 39800 && Number(d.fips) <= 39999))),\n              d => d['casescum']))\n            .range(colorPalette);\n\n          setLegendSplit(split.quantiles());\n          // console.log(split.quantiles());\n        });\n\n\n    }\n  }, [countyFips]);\n\n  useEffect(() => {\n    fetch('/data/zipcode.json').then(res => res.json())\n      .then(x => {\n        const csD = scaleQuantile()\n          .domain(_.map(_.filter(_.map(x, (d, k) => {\n            d.fips = k\n            return d\n          }),\n            d => (\n              (d.deathscum >= 0 &&\n                d.fips.length === 5 && Number(d.fips) >= 30001 && Number(d.fips) <= 31999) || (d.deathscum >= 0 &&\n                  d.fips.length === 5 && Number(d.fips) >= 39800 && Number(d.fips) <= 39999))),\n            d => d['deathscum']))\n          .range(colorPalette);\n\n        let scaleMap = {}\n        _.each(_.filter(_.map(x, (d, k) => {\n          d.fips = k\n          return d\n        }),\n          d => (\n            (d.deathscum >= 0 &&\n              d.fips.length === 5 && Number(d.fips) >= 30001 && Number(d.fips) <= 31999) || (d.deathscum >= 0 &&\n                d.fips.length === 5 && Number(d.fips) >= 39800 && Number(d.fips) <= 39999)))\n          , d => {\n            scaleMap[d['deathscum']] = csD(d['deathscum'])\n          });\n        setColorScaleD(scaleMap);\n\n        var max = 0\n        var min = 100\n        _.each(x, d => {\n          // console.log(d.fips[0]);\n          if ((d['deathscum'] > max && d.fips.length === 5 && Number(d.fips) >= 30001 && Number(d.fips) <= 31999) ||\n            (d['deathscum'] > max && d.fips.length === 5 && Number(d.fips) >= 39800 && Number(d.fips) <= 39999)\n          ) {\n            max = d['deathscum'];\n            // console.log(max)\n          } else if ((d.fips.length === 5 && d['deathscum'] < min && d['deathscum'] >= 0 && Number(d.fips) >= 30001 && Number(d.fips) <= 31999) ||\n            (d.fips.length === 5 && d['deathscum'] < min && d['deathscum'] >= 0 && Number(d.fips) >= 39800 && Number(d.fips) <= 39999)\n          ) {\n            min = d['deathscum']\n            // console.log(d.fips)\n          }\n\n\n        });\n        if (max > 999) {\n          max = (max / 1000).toFixed(0) + \"K\";\n          setLegendMaxD(max);\n        } else {\n          setLegendMaxD(max.toFixed(0));\n\n        }\n        setLegendMinD(min.toFixed(0));\n\n        var split = scaleQuantile()\n          .domain(_.map(_.filter(_.map(x, (d, k) => {\n            d.fips = k\n            return d\n          }),\n            d => (\n              (d.deathscum >= 0 &&\n                d.fips.length === 5 && Number(d.fips) >= 30001 && Number(d.fips) <= 31999) || (d.deathscum >= 0 &&\n                  d.fips.length === 5 && Number(d.fips) >= 39800 && Number(d.fips) <= 39999))),\n            d => d['deathscum']))\n          .range(colorPalette);\n\n        setLegendSplitD(split.quantiles());\n        // console.log(split.thresholds().reverse());\n      });\n  }, [])\n\n  useEffect(() => {\n    if (dataTS && dataTS[stateFips + countyFips]) {\n      setCovidMetric(dataG[stateFips + countyFips]);\n      setCovidMetricGa(dataG[stateFips]);\n      // setCovidMetric(dataG[stateFips + countyFips]);\n      setCovidMetric14(_.takeRight(dataTS[stateFips + countyFips], 14)[0]);\n      setCovidMetricLast(_.takeRight(dataTS[stateFips + countyFips])[0]);\n    }\n  }, [dataTS])\n\n  if (data && dataTS && varMap) {\n\n    return (\n      <div>\n        <AppBar menu='countyReport' />\n        <Container style={{ marginTop: '8em', minWidth: '1260px', paddingRight: 0 }}>\n          {configsCounty &&\n            <div>\n              <Breadcrumb>\n                {/* <Breadcrumb.Section link onClick={() => history.push('/')}>United States</Breadcrumb.Section>\n            <Breadcrumb.Divider /> */}\n                <Breadcrumb.Section link onClick={() => history.push('/' + stateFips)}>{stateName}</Breadcrumb.Section>\n                <Breadcrumb.Divider />\n                <Breadcrumb.Section active>{countyName}</Breadcrumb.Section>\n                <Breadcrumb.Divider />\n              </Breadcrumb>\n              <Header as='h1' style={{ fontWeight: 300 }}>\n                <Header.Content>\n                  {/* Covid-19 Health Equity Report for <span style={{color: countyColor}}>{countyName}</span> */}\n                  {/* <span style={{ color: countyColor }}>{countyName}</span> */}\n                  <b>{countyName}</b>\n                  {/* <Header.Subheader style={{fontWeight: 300}}>\n              See how health determinants impact COVID-19 outcomes. \n              </Header.Subheader> */}\n                </Header.Content>\n              </Header>\n              <Divider horizontal style={{ fontWeight: 600, color: '#232423', fontSize: '16pt', paddingTop: '1em' }}>SUMMARY OF COVID-19 IN <b>{countyName}</b>, GEORGIA</Divider>\n\n              <Grid style={{ paddingTop: '2em', width: \"1260px\" }} centered>\n                <Header as='h2' style={{ fontWeight: 300, textAlign: 'center' }} >\n                  <Header.Content>\n                    COVID-19 <b>cases</b> in {countyName}\n                  </Header.Content>\n                </Header>\n                <Grid.Row style={{ paddingTop: '1em' }}>\n                  <Grid.Column width={16} style={{ paddingLeft: '0', paddingRight: '0' }}>\n                    <Table fixed>\n                      <Table.Header>\n                        <Table.Row textAlign='center'>\n                          <Table.HeaderCell colSpan='1' style={{ width: 150 }}> </Table.HeaderCell>\n                          <Popup\n                            trigger={\n                              <Table.HeaderCell style={{ width: 200 }}> ALL CASES TO DATE</Table.HeaderCell>}\n                            content={\"All confirmed cases reported to DPH as of \" + new Date(dateCur[stateFips + countyFips].todaydat * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' })}\n                            basic />\n                          <Popup\n                            trigger={\n                              <Table.HeaderCell style={{ width: 200 }}> CASES IN PAST 14 DAYS</Table.HeaderCell>}\n                            content={\"All confirmed cases reported to DPH during the 14 days preceding the report publication date.\"}\n                            basic />\n                          <Popup\n                            trigger={\n                              <Table.HeaderCell style={{ width: 200 }}> CASES PER 100K (PAST 14 DAYS)</Table.HeaderCell>}\n                            content={\"14-day case count/100K residents based on 2020 population projects derived from census data.\"}\n                            basic />\n                          <Popup\n                            trigger={\n                              <Table.HeaderCell style={{ width: 200 }}> 14-DAY RATE CATEGORY</Table.HeaderCell>} flowing hoverable>\n                            Based on the 14-day case rate\n                          <List as='ul'>\n                              <List.Item as='li'>High: {'>'} 100 cases/100K</List.Item>\n                              <List.Item as='li'>Moderately high: {\">\"} 50-100 cases/100K</List.Item>\n                              <List.Item as='li'>Moderately: {\">\"} 10-50 cases/100K</List.Item>\n                              <List.Item as='li'>Low: {\">\"} 0-10 cases/100K</List.Item>\n                              <List.Item as='li'>Less than 5 cases reported, rate not calculated</List.Item>\n                            </List>\n                          </Popup>\n\n                          <Popup\n                            trigger={\n                              <Table.HeaderCell style={{ width: 200 }}> CHANGE IN LAST 2 WEEKS</Table.HeaderCell>} flowing hoverable>\n                            Change in case count during the previous 14 days, comparing<br></br> the second 7-day period to the first 7-day period.\n                          <List as='ul'>\n                              <List.Item as='li'>Increasing: 5% or greater change</List.Item>\n                              <List.Item as='li'>Decreasing: -5% or less change</List.Item>\n                              <List.Item as='li'>Less than 5% change</List.Item>\n                            </List>\n                          </Popup>\n                        </Table.Row>\n\n                        <Table.Row textAlign='center'>\n                          <Table.HeaderCell style={{ fontSize: '18px' }}> {countyName} </Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px' }}>{covidMetric.casescum === null || covidMetric.casescum < 0 ? '0' : covidMetric.casescum.toLocaleString()}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px' }}>{covidMetric.casescum14day === null || covidMetric.casescum14day < 0 ? '0' : numberWithCommas(parseFloat(covidMetric.casescum14day).toFixed(0)).toLocaleString()}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px' }}>{covidMetric.casescum14dayR === null || covidMetric.casescum14dayR < 0 ? '0' : numberWithCommas(parseFloat(covidMetric.casescum14dayR).toFixed(2)).toLocaleString()}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '18px' }}>{covidMetric.category14day === null || covidMetric.category14day < 0 ? '0' : covidMetric.category14day}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '18px' }}>{covidMetric.change14day === null ? '0' : covidMetric.change14day}</Table.HeaderCell>\n                        </Table.Row>\n                        <Table.Row textAlign='center'>\n                          <Table.HeaderCell style={{ fontSize: '18px' }}>Georgia</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px' }}>{covidMetricGa.casescum === null || covidMetricGa.casescum < 0 ? '0' : covidMetricGa.casescum.toLocaleString()}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px' }}>{covidMetricGa.casescum14day === null || covidMetricGa.casescum14day < 0 ? '0' : numberWithCommas(parseFloat(covidMetricGa.casescum14day).toFixed(0)).toLocaleString()}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px' }}>{covidMetricGa.casescum14dayR === null || covidMetricGa.casescum14dayR < 0 ? '0' : numberWithCommas(parseFloat(covidMetricGa.casescum14dayR).toFixed(2)).toLocaleString()}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '18px' }}>{covidMetricGa.category14day === null || covidMetricGa.category14day < 0 ? '0' : covidMetricGa.category14day}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '18px' }}>{covidMetricGa.change14day === null || covidMetricGa.change14day < 0 ? '0' : covidMetricGa.change14day}</Table.HeaderCell>\n                        </Table.Row>\n                      </Table.Header>\n                    </Table>\n                  </Grid.Column>\n\n                </Grid.Row>\n\n                <Header as='h2' style={{ fontWeight: 300, textAlign: 'center' }} >\n                  <Header.Content>\n                    COVID-19 <b>deaths</b> in {countyName}\n                  </Header.Content>\n                </Header>\n                <Grid.Row style={{ paddingTop: '1em' }}>\n                  <Grid.Column width={16} style={{ paddingLeft: '0', paddingRight: '0' }}>\n\n                    <Table celled fixed singleLine>\n                      <Table.Header>\n                        <Table.Row textAlign='center'\n\n                        >\n                          <Table.HeaderCell colSpan='1' style={{ width: 150 }}> </Table.HeaderCell>\n                          <Popup\n                            trigger={\n                              <Table.HeaderCell style={{ width: 200 }}> ALL DEATHS TO DATE</Table.HeaderCell>}\n                            content={\"All confirmed deaths reported to DPH as of \" + new Date(dateCur.date * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' })}\n                            basic />\n                          <Popup\n                            trigger={\n                              <Table.HeaderCell style={{ width: 230 }}> DEATHS IN PAST 14 DAYS</Table.HeaderCell>}\n                            content={\"All confirmed deaths reported to DPH during the 14 days preceding the report publication date.\"}\n                            basic />\n                          <Popup\n                            trigger={\n                              <Table.HeaderCell style={{ width: 200 }}> DEATHS PER 100K (PAST 14 DAYS)</Table.HeaderCell>}\n                            content={\"14-day deaths count/100K residents based on 2020 population projects derived from census data.\"}\n                            basic />\n                          <Popup\n                            trigger={\n                              <Table.HeaderCell style={{ width: 200 }}> CASE FATALITY RATIO (%)</Table.HeaderCell>}\n                            content={\"The case fatality ratio is the percent of all confirmed cases who have been reported as having died. While this is used as a measure of disease severity, the ratio may also be affected by the level of testing and quality of follow-up data on cases.\"}\n                            basic />\n                        </Table.Row>\n\n                        <Table.Row textAlign='center'>\n                          <Table.HeaderCell style={{ fontSize: '18px' }}> {countyName} </Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px' }}>{covidMetric.deathscum === null || covidMetric.deathscum < 0 ? '0' : covidMetric.deathscum.toLocaleString()}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px' }}>{covidMetric.deathscum14day === null || covidMetric.deathscum14day < 0 ? '0' : numberWithCommas(parseFloat(covidMetric.deathscum14day).toFixed(0)).toLocaleString()}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px' }}>{covidMetric.deathscum14dayR === null || covidMetric.deathscum14dayR < 0 ? '0' : numberWithCommas(parseFloat(covidMetric.deathscum14dayR).toFixed(2)).toLocaleString()}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px' }}>{covidMetric.cfr === null || covidMetric.cfr < 0 ? '0' : numberWithCommas(parseFloat(covidMetric.cfr).toFixed(2)).toLocaleString() + '%'}</Table.HeaderCell>\n                        </Table.Row>\n                        <Table.Row textAlign='center'>\n                          <Table.HeaderCell style={{ fontSize: '18px' }}>Georgia</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px' }}>{covidMetricGa.deathscum === null || covidMetricGa.deathscum < 0 ? '0' : covidMetricGa.deathscum.toLocaleString()}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px' }}>{covidMetricGa.deathscum14day === null || covidMetricGa.deathscum14day < 0 ? '0' : numberWithCommas(parseFloat(covidMetricGa.deathscum14day).toFixed(0)).toLocaleString()}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px' }}>{covidMetricGa.deathscum14dayR === null || covidMetricGa.deathscum14dayR < 0 ? '0' : numberWithCommas(parseFloat(covidMetricGa.deathscum14dayR).toFixed(2)).toLocaleString()}</Table.HeaderCell>\n                          <Table.HeaderCell style={{ fontSize: '27px' }}>{covidMetricGa.cfr === null || covidMetricGa.cfr < 0 ? '0' : numberWithCommas(parseFloat(covidMetricGa.cfr).toFixed(2)).toLocaleString() + '%'}</Table.HeaderCell>\n                        </Table.Row>\n                      </Table.Header>\n                    </Table>\n                  </Grid.Column>\n\n                </Grid.Row>\n\n                <Grid.Row style={{ paddingTop: 0 }}>\n                  <Grid.Column style={{ paddingLeft: '0.01', paddingRight: '0' }}>\n                    <small style={{ fontWeight: 300, fontSize: 16, color: 'black' }} align=\"justify\">\n                      As of {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' : (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}, there were a total of {covidMetric.casescum.toLocaleString()} confirmed cases of COVID-19 and {covidMetric.deathscum.toLocaleString()} deaths due to COVID-19 reported to DPH for {countyName}. In {countyName}, this translates to {numberWithCommas(parseFloat(covidMetric.casescumR).toFixed(0)).toLocaleString()} case(s) per 100,000 residents and {numberWithCommas(parseFloat(covidMetric.deathscumR).toFixed(0)).toLocaleString()} death(s) per 100,000 residents.\n                        On a day-to-day basis, {numberWithCommas(parseFloat(covidMetric.casescum14dayR).toFixed(0)).toLocaleString()} new cases and {numberWithCommas(parseFloat(covidMetric.deathscum14dayR).toFixed(0)).toLocaleString()} new deaths are reported to DPH on average (based on a 14-day rolling average). This means that there are {covidMetric.casescum14dayR === null || covidMetric.casescum14dayR < 0 ? '0' : numberWithCommas(parseFloat(covidMetric.casescum14dayR).toFixed(0)).toLocaleString()} new cases and {covidMetric.deathscum14dayR === null || covidMetric.deathscum14dayR < 0 ? '0' : numberWithCommas(parseFloat(covidMetric.deathscum14dayR).toFixed(0)).toLocaleString()} new deaths per 100,000 residents in {countyName}. The case-fatality ratio measures\n                          the proportion of confirmed COVID-19 cases that ultimately die due to the disease. This is used by epidemiologists to gauge the severity of disease in a particular locale.  In {countyName}, the case-fatality ratio was {covidMetric.cfr === null || covidMetric.cfr < 0 ? '0' : numberWithCommas(parseFloat(covidMetric.cfr).toFixed(2)).toLocaleString() + '%'}, which is {covidMetric.cfrcompare === null || covidMetric.cfrcompare < 0 ? '0' : covidMetric.cfrcompare} than the national average of 4%. All of these data must be interpreted in light of constraints on testing, PUI follow-up quality, and reporting lags in the county.\n                  </small>\n                  </Grid.Column>\n                </Grid.Row>\n              </Grid>\n\n              <Divider horizontal style={{ fontWeight: 300, color: '#b1b3b3', fontSize: '1.2em', paddingTop: '1em' }}></Divider>\n              <Grid column={2} style={{ paddingTop: '2em', paddingBottom: '2em', width: \"1260px\" }}>\n                <Grid.Row style={{ paddingTop: '2em' }}>\n\n                  <Grid.Column width={8}>\n                    <Header as='h2' style={{ fontWeight: \"bold\", fontSize: \"27px\", paddingLeft: \".5em\" }}>\n                      <Header.Content>\n                        Daily cases in {countyName}\n                        <Header.Subheader style={{ fontWeight: 300 }}>\n                        </Header.Subheader>\n                      </Header.Content>\n                    </Header>\n                    <svg width=\"550\" height=\"90\">\n                      <rect x={50} y={50} width=\"15\" height=\"15\" style={{ fill: stateColor, strokeWidth: 1, stroke: stateColor }} />\n                      <rect x={50} y={22} width=\"15\" height=\"1\" style={{ fill: countyColor, strokeWidth: 1, stroke: countyColor }} />\n                      <text x={75} y={64} style={{ fontSize: 18 }}> Daily new cases </text>\n                      <text x={75} y={30} style={{ fontSize: 18 }}>7-D Rolling average</text>\n                    </svg>\n                    <VictoryChart theme={VictoryTheme.material}\n                      containerComponent={\n                        <VictoryVoronoiContainer\n                        responsive={false}\n                        flyoutStyle={{ fill: \"black\" }}\n                          \n                        />\n                      }\n                      width={550}\n                      height={450}\n                      padding={{ left: 40, right: 60, top: 10, bottom: 60 }}>\n                      <VictoryAxis\n                        style={{\n                          tickLabels: { fontSize: 20, padding: 5 }\n                        }}\n                        tickFormat={(t) => new Date(t * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric' })}\n                        tickValues={[\n                          // 1583035200, 1585713600, 1588305600, 1590984000, 1593576000\n                          dataTS['13001'][0].t,\n                        dataTS[\"13001\"][32].t,\n                        dataTS[\"13001\"][62].t,\n                        dataTS[\"13001\"][93].t,\n                        dataTS[\"13001\"][123].t,\n                        dataTS[\"13001\"][154].t,\n                        dataTS[\"13001\"][dataTS[\"13001\"].length-1].t\n                      ]}\n                      // tickValues={[\n                      //   dataTS[stateFips + countyFips][dataTS[stateFips + countyFips].length - Math.round(dataTS[stateFips + countyFips].length / 4) * 3 - 1].t,\n                      //   dataTS[stateFips + countyFips][dataTS[stateFips + countyFips].length - Math.round(dataTS[stateFips + countyFips].length / 4) * 2 - 1].t,\n                      //   dataTS[stateFips + countyFips][dataTS[stateFips + countyFips].length - Math.round(dataTS[stateFips + countyFips].length / 4) - 1].t,\n                      //   dataTS[stateFips + countyFips][dataTS[stateFips + countyFips].length - 1].t]} \n                      />\n                      <VictoryAxis dependentAxis tickCount={5}\n                        style={{\n                          tickLabels: { fontSize: 17, paddingLeft: '0em' }\n                        }}\n                        tickFormat={(y) => (y < 1000 ? y : (y / 1000 + 'k'))}\n                      />\n\n                      <VictoryBar style={{ data: { fill: stateColor } }} barWidth={4} data={dataTS[stateFips + countyFips] ? _.take(dataTS[stateFips + countyFips], 141) : dataTS[\"99999\"]}\n                        x='t' y='casesdaily'\n                      />\n                      <VictoryLine name=\"Line\" style={{ data: { stroke: countyColor } }} data={dataTS[stateFips + countyFips] ? _.take(dataTS[stateFips + countyFips], 141) : dataTS[\"99999\"]}\n                        x='t' y='casesdailymean7'\n                        labels={({ datum }) => `${countyName}\\n` + \n                    `Date: ${new Date(datum.t * 1000).toLocaleDateString()}\\n` + \n                    `Daily new cases: ${Math.round(datum.casesdaily, 2)}\\n` +\n                    `7-d Rolling average of daily new cases: ${Math.round(datum.casesdailymean7, 2)}`\n                    }\n                    labelComponent={\n                        <VictoryTooltip \n                        orientation=\"top\"\n                        style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'white' }} \n                        constrainToVisibleArea \n                        labelComponent={<VictoryLabel dx={-130} textAnchor = 'start'/>}\n                        flyoutStyle={{ fill: \"black\", fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }} \n                        />\n                    }\n                      />\n                    \n                    </VictoryChart>\n                  </Grid.Column>\n                  <Grid.Column width={8}>\n                    <Header as='h2' style={{ fontWeight: \"bold\", fontSize: \"27px\", paddingLeft: \".5em\" }}>\n                      <Header.Content>\n                        Daily deaths in {countyName}\n                        <Header.Subheader style={{ fontWeight: 300 }}>\n                        </Header.Subheader>\n                      </Header.Content>\n                    </Header>\n                    <svg width=\"550\" height=\"90\">\n                      <rect x={50} y={50} width=\"15\" height=\"15\" style={{ fill: stateColor, strokeWidth: 1, stroke: stateColor }} />\n                      <rect x={50} y={22} width=\"15\" height=\"1\" style={{ fill: countyColor, strokeWidth: 1, stroke: countyColor }} />\n                      <text x={75} y={64} style={{ fontSize: 18 }}> Daily new deaths </text>\n                      <text x={75} y={30} style={{ fontSize: 18 }}>7-D Rolling average</text>\n                    </svg>\n                    <VictoryChart theme={VictoryTheme.material}\n                      containerComponent={\n                        <VictoryVoronoiContainer\n                        responsive={false}\n                        flyoutStyle={{ fill: \"black\" }}                          \n                        />\n                      }\n                      width={550}\n                      height={450}\n                      padding={{ left: 30, right: 60, top: 10, bottom: 60 }}>\n\n                      <VictoryAxis\n                        style={{\n                          tickLabels: { fontSize: 20, padding: 5 }\n                        }}\n                        tickFormat={(t) => new Date(t * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric' })}\n                        tickValues={[\n                          dataTS['13001'][0].t,\n                        dataTS[\"13001\"][32].t,\n                        dataTS[\"13001\"][62].t,\n                        dataTS[\"13001\"][93].t,\n                        dataTS[\"13001\"][123].t,\n                        dataTS[\"13001\"][154].t,\n                        dataTS[\"13001\"][dataTS[\"13001\"].length-1].t\n                      ]} \n                      />\n                      <VictoryAxis dependentAxis tickCount={5}\n                        style={{\n                          tickLabels: { fontSize: 20, padding: 5 }\n                        }}\n                        tickFormat={(y) => (y < 1000 ? y : (y / 1000 + 'k'))}\n                      />\n\n                      <VictoryBar style={{ data: { fill: stateColor } }} barWidth={4} data={dataTS[stateFips + countyFips] ? _.take(dataTS[stateFips + countyFips], 141) : dataTS[\"99999\"]}\n                        x='t' y='deathsdaily'\n                      />\n                      <VictoryLine name=\"Line\" style={{ data: { stroke: countyColor } }} data={dataTS[stateFips + countyFips] ? _.take(dataTS[stateFips + countyFips], 141) : dataTS[\"99999\"]}\n                        x='t' y='deathsdailymean7'\n                        labels={({ datum }) => \n                        `${countyName}\\n` +\n                        `Date: ${new Date(datum.t * 1000).toLocaleDateString()}\\n` + \n                        `Daily new deaths: ${Math.round(datum.deathsdaily, 2)}\\n` + \n                        `7-d Rolling average of daily new deaths: ${Math.round(datum.deathsdailymean7, 2)}`}\n                        labelComponent={\n                          <VictoryTooltip \n                          orientation=\"top\"\n                          style={{ fontWeight: 600, fontFamily: 'lato', fontSize: 14, fill: 'white' }} \n                          constrainToVisibleArea \n                          labelComponent={<VictoryLabel dx={-130} textAnchor = 'start'/>}\n                          flyoutStyle={{ fill: \"black\", fillOpacity: 0.75, stroke: \"#FFFFFF\", strokeWidth: 0 }} \n                          />\n                      }\n                      />\n\n                    </VictoryChart>\n                  </Grid.Column>\n                </Grid.Row>\n                <Grid.Row style={{ paddingTop: '2em', paddingLeft: '0em', paddingRight: '2em' }} >\n                  <Grid.Column width={8} style={{ paddingLeft: '1em', paddingRight: '3em' }}>\n                    <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\n                      As of {covidMetricLast.t === 'n/a' ? 'N/A' : (new Date(covidMetricLast.t * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}, this chart shows the daily number of new cases of confirmed COVID-19 in <b>{countyName}</b>. The daily number reflects the date the case was first reported to DPH.\n                  The vertical bars show the number of new daily cases while the line shows the 7-day moving average of new daily cases.\n                  </small>\n                  </Grid.Column>\n                  <Grid.Column width={8} style={{ paddingLeft: '3em', paddingRight: '3em' }}>\n                    <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\n                      As of {covidMetricLast.t === 'n/a' ? 'N/A' : (new Date(covidMetricLast.t * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}, this chart shows the daily number of new deaths of confirmed COVID-19 in <b>{countyName}</b>. The daily number reflects the date the death was first reported to DPH.\n                  The vertical bars show the number of new daily deaths while the line shows the 7-day moving average of new daily cases.\n                  </small>\n                  </Grid.Column>\n                </Grid.Row>\n                <Grid.Row style={{ paddingTop: '8em' }}>\n                  <Grid.Column width={9}>\n                    <Header as='h2' style={{ fontWeight: 400, paddingLeft: '1em' }}>\n                      <Header.Content >\n                        <strong>Confirmed COVID-19 cases {countyName} by zip code</strong>\n                        {/* <Header.Subheader style={{fontWeight: 300}}>.</Header.Subheader> */}\n                      </Header.Content>\n                    </Header>\n                    <svg width=\"120\" height=\"300\" style={{ paddingLeft: '3.5em' }}>\n                      {_.map(colorPalette, (color, i) => {\n                        return <rect key={i} y={20 * i} x={25} width=\"20\" height=\"20\" style={{ fill: colorPalette[(colorPalette.length - 1 - i).toString()], strokeWidth: 1, stroke: colorPalette[(colorPalette.length - 1 - i).toString()] }} />\n                      })}\n                      {/* <text y={15} x={47} style={{fontSize: '0.8em'}}>High</text>\n                  <text y={20 * (colorPalette.length)} x={47} style={{fontSize: '0.8em'}}>Low</text> */}\n                      {/* {_.map(legendSplit, (splitpoint, i) => {\n                        if (legendSplit[i] < 1) {\n                          return <text key={i} y={21 * (legendSplit.length - i)} x={47} style={{ fontSize: '0.8em' }}> {legendSplit[i].toFixed(1)}</text>\n                        }\n                        return <text key={i} y={21 * ((legendSplit.length - i))} x={47} style={{ fontSize: '0.8em' }}> {legendSplit[i].toFixed(0)}</text>\n                      })} */}\n                      <text y={20 * (colorPalette.length)} x={47} style={{ fontSize: '0.8em' }}> {legendMin} </text>\n                      <text y={8} x={47} style={{ fontSize: '0.8em' }}>{legendMax}</text>\n                    </svg>\n\n                    <ComposableMap projection=\"geoAlbersUsa\"\n                      style={{ paddingLeft: '2em' }}\n                      projectionConfig={{ scale: `${configsCounty.scale}` }}\n                      width={500}\n                      height={350}\n                      data-tip=\"\"\n                      offsetX={configsCounty.offsetX}\n                      offsetY={configsCounty.offsetY}>\n                      <Geographies geography={configsCounty.url}>\n                        {({ geographies }) => geographies.map(geo =>\n                          <Geography\n                            key={geo.rsmKey}\n                            geography={geo}\n                            style={{\n                              default: {\n                                stroke: \"#607D8B\",\n                                strokeWidth: 0.95,\n                                outline: \"none\",\n                              }\n                            }}\n                            onMouseEnter={(event) => {\n                              // console.log(event);\n                              // setCountyFips(geo.properties.COUNTYFP);\n                              setCountyName(fips2county[stateFips + geo.properties.COUNTYFP]);\n                              setZipCode(geo.properties.ZCTA5CE10);\n                              setZipCodeFinal(geo.properties.ZCTA5CE10);\n                              setTooltipContent(<div><font size=\"+2\"><b >{geo.properties.ZCTA5CE10}</b> </font> <br />\n                                {/* <b>Total Cases</b>: {dataZip[geo.properties.ZCTA5CE10]['casescum']} <br />\n                                <b>Total Deaths</b>: {dataZip[geo.properties.ZCTA5CE10]['deathscum']} <br /> */}\n                              </div>);\n                            }}\n                            onMouseLeave={(event) => {\n                              setTooltipContent(\"\")\n                            }}\n                            fill={zipCode === geo.properties.ZCTA5CE10 ? countyColor :\n                              ((colorScale && dataZip[geo.properties.ZCTA5CE10] && dataZip[geo.properties.ZCTA5CE10]['casescum']) ?\n                                colorScale[dataZip[geo.properties.ZCTA5CE10]['casescum']] : colorPalette[0])}\n                          />\n                        )}\n                      </Geographies>\n                    </ComposableMap>\n                  </Grid.Column>\n\n                </Grid.Row>\n                \n\n                <Grid.Row style={{ paddingTop: '2em', paddingLeft: '0em', paddingRight: '2em' }} >\n                \n                  <Grid.Column width={9} style={{ paddingLeft: '2em', paddingRight: '5em' }}>\n                    <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\n                      {varNameMap['casescum'].text}{dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' : (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))} . The darker shading indicates a larger number of {varNameMap['casescum'].name}.</small>\n                  </Grid.Column>\n\n                </Grid.Row>\n                <Grid.Row style={{ paddingTop: 0 }}>\n                  <small style={{ fontWeight: 300, color: 'black' }}>\n                    Note: Data are provisional and subject to change. Zip codes may cross county boundaries. Zip codes being displayed include the total count of cases for that zip code.\n                    </small>\n                </Grid.Row>\n              </Grid>\n              <Divider horizontal style={{ fontWeight: 600, color: '#232423', fontSize: '16pt', paddingTop: '1em' }}>Characteristics of confirmed COVID-19 cases for {countyName}</Divider>\n              <Grid columns={2} style={{ width: \"1260px\" }} centered>\n                <Grid.Row >\n                  <Grid.Column>\n                    <svg width=\"400\" height=\"500\" >\n                      <VictoryLabel style={{\n                        textAnchor: \"start\",\n                        verticalAnchor: \"end\", fill: \"#000000\", fontFamily: \"inherit\",\n                        fontSize: \"20px\", fontWeight: \"bold\"\n                      }} text=\"Proportion of cases with a comorbidity\n                  \" x={15} y={28} textAnchor=\"middle\" />\n                      <VictoryPie\n                        colorScale={['Gray', 'GoldenRod']}\n                        standalone={false}\n                        style={{ labels: { fill: \"white\" } }}\n                        labelRadius={80}\n                        width={400} height={400}\n                        padAngle={1}\n                        data={[\n                          { x: \"Cats\", y: 22, label: \"22%\" },\n                          { x: \"Dogs\", y: 78, label: \"78%\" },\n                        ]}\n                      />\n                      <VictoryLegend\n                        standalone={false}\n                        colorScale={['Gray', 'GoldenRod']}\n                        x={150} y={350}\n                        data={[{ name: \"No underlying conditions\", labels: { fontSize: 18 } },\n                        { name: \"Underlying health condition\", labels: { fontSize: 18 } }\n                        ]}\n                      />\n                    </svg>\n                  </Grid.Column>\n                  <Grid.Column style={{ paddingLeft: '2em', paddingRight: '1em', paddingTop: '8em' }}>\n                    <small style={{ fontWeight: 300, fontSize: 20, color: 'black' }} align=\"justify\">\n                      The pie chart shows the proportion of confirmed COVID-19 cases in <b>{countyName}</b> who\n                  presented with an underlying medical condition. Underlying medical conditions\n                  increase the risk of experiencing severe disease which may lead to hospitalization\n                  and death. Of the {datades_cases[stateFips + countyFips]['cdc_underlying2_N'] ? datades_cases[stateFips + countyFips]['cdc_underlying2_N'] : \"N/A\"} confirmed cases with data available, {datades_cases[stateFips + countyFips]['cdc_underlying2Percent'] ? datades_cases[stateFips + countyFips]['cdc_underlying2Percent'].toFixed(2) : \"N/A\"}% had an underlying medical condition that increases risk of severe outcomes according to the CDC. These underlying medical conditions include: lung disease, diabetes, cardiovascular disease, renal disease, and/or an immunocompromised state. The chart excludes data from {datades_cases[stateFips + countyFips]['cdc_underlying2Pmiss'] ? datades_cases[stateFips + countyFips]['cdc_underlying2Pmiss'].toFixed(2) : \"N/A\"}% of confirmed COVID-19 cases whose medical history was unknown.\n                    </small>\n                  </Grid.Column>\n                  {/* <Grid.Row style={{ paddingTop: 0 }}>\n                  <small style={{ fontWeight: 300, color: 'black' }}>\n                    Note: For comorbidities, we include lung disease, diabetes, CVD, renal disease, Immunocompromised state. \n                    </small>\n                </Grid.Row> */}\n\n                </Grid.Row>\n              </Grid>\n              <Divider horizontal style={{ fontWeight: 600, color: '#232423', fontSize: '16pt', paddingTop: '1em', paddingBottom: \"0em\" }}>Confirmed cases per capita by demographic group in {countyName}</Divider>\n              <Grid style={{ width: \"1260px\" }}>\n                {datades_cases[stateFips + countyFips]['NObs'] < 50 && datades_cases[stateFips + countyFips]['outcome'] === 'COVID Death' ?\n                  <Header as='h2' style={{ fontWeight: 400 }}>\n                    <Header.Content>\n                      <Header.Subheader style={{ fontWeight: 300, fontSize: '16pt', color: 'black' }}>\n                        Rates broken down by age, sex, and race are not shown for {countyName} because there are fewer than 50 confirmed COVID-19 cases with complete information.\n                </Header.Subheader>\n                    </Header.Content>\n                  </Header>\n                  :\n                  <Grid.Row columns={3} style={{ paddingTop: 0 }}>\n                    <Grid.Column>\n                      <BarChart\n                        title=\"Age Group\"\n                        keyv={[\"< 20\", \"20-44\", \"45-64\", \"65+\"]}\n                        var={[\"rate019ageC\", \"rate2044ageC\", \"rate4564ageC\", \"rate65ageC\"]}\n                        width={400}\n                        stateFips={stateFips}\n                        countyFips={countyFips}\n                        data={data_cases} />\n                    </Grid.Column>\n                    <Grid.Column>\n                      <BarChart\n                        title=\"Sex\"\n                        keyv={[\"Female\", \"Male\"]}\n                        var={[\"female_rateC\", \"male_rateC\"]}\n                        pad={25}\n                        width={400}\n                        stateFips={stateFips}\n                        countyFips={countyFips}\n                        data={data_cases} />\n                    </Grid.Column>\n                    <Grid.Column>\n                      <BarChart\n                        title=\"Race-Ethnicity\"\n                        keyv={[\"Other\", \"Hispanic\", \"Black\", \"White\"]}\n                        var={[\"otherNH_rateC\", \"hispanic_rateC\", \"black_rateC\", \"white_rateC\"]}\n                        width={400}\n                        stateFips={stateFips}\n                        countyFips={countyFips}\n                        data={data_cases} />\n                    </Grid.Column>\n                  </Grid.Row>\n                }\n                {datades_cases[stateFips + countyFips]['NObs'] < 50 && datades_cases[stateFips + countyFips]['outcome'] === 'COVID Death' ? ' ' :\n                  <Grid.Row columns={3} style={{ padding: 0 }}>\n                    <Grid.Column style={{ paddingLeft: '3em', paddingRight: '0em' }}>\n                      <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\n                        This chart shows the number of total cases per 100,000 residents by age group for <b>{countyName}</b>. The chart excludes data from {datades_cases[stateFips + countyFips]['age4catPmiss'].toFixed(2)}% of confirmed cases who were missing information on age.\n                    </small>\n                    </Grid.Column>\n                    <Grid.Column style={{ paddingLeft: '2em', paddingRight: '0em' }}>\n                      <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\n                        This chart shows the number of total cases per 100,000 residents by sex for <b>{countyName}</b>. The chart excludes data from {datades_cases[stateFips + countyFips]['femalePmiss'].toFixed(2)}% of confirmed cases who were missing information on sex.\n                    </small>\n                    </Grid.Column>\n                    <Grid.Column style={{ paddingLeft: '2em', paddingRight: '0em' }}>\n                      <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\n                        This chart shows the total cases per 100,000 residents by race/ethnicity for <b>{countyName}</b>. The chart excludes data from {datades_cases[stateFips + countyFips]['race_3Pmiss'].toFixed(2)}% of confirmed cases who were missing information on race/ethnicity.                    </small>\n                    </Grid.Column>\n                  </Grid.Row>}\n              </Grid>\n\n              <Divider horizontal style={{ fontWeight: 600, color: '#232423', fontSize: '16pt', paddingTop: '1em', paddingBottom: \"0em\" }}>Deaths per capita by demographic group in {countyName}</Divider>\n              <Grid style={{ width: \"1260px\" }}>\n                {!(datades_deaths[stateFips + countyFips]) ? <Header as='h2' style={{ fontWeight: 400, paddingTop: '0.5em' }}>\n                  <Header.Content>\n                    <Header.Subheader style={{ fontWeight: 300, fontSize: '16pt' }}>\n                      Rates broken down by age, sex, and race are not shown for {countyName} because there are fewer than 50 confirmed COVID-19 deaths with complete information.\n                    </Header.Subheader>\n                  </Header.Content>\n                </Header>\n                  :\n                  datades_deaths[stateFips + countyFips]['NObs'] < 50 && datades_deaths[stateFips + countyFips]['outcome'] === 'COVID Death' ?\n                    <Header as='h2' style={{ fontWeight: 400, paddingTop: '0.5em' }}>\n                      <Header.Content>\n                        <Header.Subheader style={{ fontWeight: 300, fontSize: '16pt' }}>\n                          Rates broken down by age, sex, and race are not shown for {countyName} because there are fewer than 50 confirmed COVID-19 deaths with complete information.\n                    </Header.Subheader>\n                      </Header.Content>\n                    </Header>\n                    :\n                    <Grid.Row columns={3} style={{ paddingTop: 0 }}>\n                      <Grid.Column>\n                        <BarChart\n                          title=\"Age Group\"\n                          keyv={[\"< 20\", \"20-44\", \"45-64\", \"65+\"]}\n                          var={[\"rate019ageD\", \"rate2044ageD\", \"rate4564ageD\", \"rate65ageD\"]}\n                          width={400}\n                          stateFips={stateFips}\n                          countyFips={countyFips}\n                          data={data_deaths} />\n                      </Grid.Column>\n                      <Grid.Column>\n                        <BarChart\n                          title=\"Sex\"\n                          keyv={[\"Female\", \"Male\"]}\n                          var={[\"female_rateD\", \"male_rateD\"]}\n                          width={400}\n                          pad={25}\n                          stateFips={stateFips}\n                          countyFips={countyFips}\n                          data={data_deaths} />\n                      </Grid.Column>\n                      <Grid.Column>\n                        <BarChart\n                          title=\"Race-Ethnicity\"\n                          keyv={[\"Other\", \"Hispanic\", \"Black\", \"White\"]}\n                          var={[\"otherNH_rateD\", \"hispanic_rateD\", \"black_rateD\", \"white_rateD\"]}\n                          width={400}\n                          stateFips={stateFips}\n                          countyFips={countyFips}\n                          data={data_deaths} />\n                      </Grid.Column>\n                    </Grid.Row>}\n                {!(datades_deaths[stateFips + countyFips]) ? ' ' :\n\n\n                  datades_deaths[stateFips + countyFips]['NObs'] < 50 && datades_deaths[stateFips + countyFips]['outcome'] === 'COVID Death' ? ' ' :\n                    <Grid.Row columns={3} style={{ padding: 0 }}>\n                      <Grid.Column style={{ paddingLeft: '3em', paddingRight: '0em' }}>\n                        <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\n                          This chart shows the number of total deaths per 100,000 residents by age group for <b>{countyName}</b>. The chart excludes data from {datades_deaths[stateFips + countyFips]['age4catPmiss'].toFixed(2)}% of confirmed deaths who were missing information on age.\n                    </small>\n                      </Grid.Column>\n                      <Grid.Column style={{ paddingLeft: '2em', paddingRight: '0em' }}>\n                        <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\n                          This chart shows the number of total deaths per 100,000 residents by sex for <b>{countyName}</b>. The chart excludes data from {datades_deaths[stateFips + countyFips]['femalePmiss'].toFixed(2)}% of confirmed deaths who were missing information on sex.\n                    </small>\n                      </Grid.Column>\n                      <Grid.Column style={{ paddingLeft: '2em', paddingRight: '0em' }}>\n                        <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\n                          This chart shows the total deaths per 100,000 residents by race/ethnicity for <b>{countyName}</b>. The chart excludes data from {datades_deaths[stateFips + countyFips]['race_3Pmiss'].toFixed(2)}% of confirmed deaths who were missing information on race/ethnicity.                    </small>\n                      </Grid.Column>\n                    </Grid.Row>}\n              </Grid>\n              <Divider horizontal style={{ fontWeight: 600, color: '#232423', fontSize: '16pt', paddingTop: '1em' }}>General characteristics of {countyName} residents</Divider>\n              <Header as='h2' style={{ fontWeight: 400 }}>\n                <Header.Content>\n                  <Header.Subheader style={{ fontWeight: 300, fontSize: '16pt', color: 'black' }}>\n                    Social, economic, health and environmental factors impact an individual’s risk of infection and COVID-19 severity.\n                    Counties with large groups of vulnerable people may be disproportionately impacted by COVID-19. The table below characterizes the overall population characteristics of residents of <b>{countyName}</b>, Georgia, and the United States.\n                    </Header.Subheader>\n                </Header.Content>\n              </Header>\n              <small style={{ fontWeight: 300, color: 'black' }}>\n                <div>Note: These are not characteristics of covid.</div>\n              </small>\n              <Table striped compact basic='very'>\n                <Table.Header>\n                  <Table.Row>\n                    <Table.HeaderCell>Characteristic</Table.HeaderCell>\n                    <Table.HeaderCell>{countyName}</Table.HeaderCell>\n                    <Table.HeaderCell>{stateName}</Table.HeaderCell>\n                    <Table.HeaderCell>United States</Table.HeaderCell>\n                  </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                  {_.map(data[stateFips + countyFips],\n                    (v, k) => {\n                      var rmList = [\"cases\", \"deaths\", \"dailycases\", \"dailydeaths\", \"mean7daycases\", \"mean7daydeaths\", \"covidmortality\"\n                        , \"caserate\", \"covidmortality7day\", \"caserate7day\"];\n                      if (!rmList.includes(k)) {\n                        return (\n                          <Table.Row key={k}>\n                            <Table.Cell>{varMap[k] ? varMap[k].name : k}</Table.Cell>\n                            <Table.Cell>{isNaN(v) ? v : (Math.round(v * 100) / 100)}</Table.Cell>\n                            <Table.Cell>{isNaN(data[stateFips][k]) ? data[stateFips][k] : (Math.round(data[stateFips][k] * 100) / 100)}</Table.Cell>\n                            <Table.Cell>{isNaN(data['_nation'][k]) ? data['_nation'][k] : (Math.round(data['_nation'][k] * 100) / 100)}</Table.Cell>\n                          </Table.Row>\n                        )\n                      }\n                    })}\n                </Table.Body>\n              </Table>\n            </div>\n          }\n          {/* <Divider horizontal style={{ fontWeight: 300, color: '#b1b3b3', fontSize: '1.2em', paddingTop: '1em' }}></Divider> */}\n          <small>\n            <div style={{ paddingTop: '1em', paddingBottom: '1em' }}><a href=\"/data-sources\">Data source and interpretation</a></div>\n          </small>\n        </Container>\n        <ReactTooltip>{tooltipContent}</ReactTooltip>\n\n      </div>\n    );\n  } else {\n    return <Loader active inline='centered' />\n  }\n\n\n\n}","import React from 'react'\r\nimport { Route, Redirect } from 'react-router-dom'\r\nconst PrivateRoute = ({component: Component, ...props}) => {\r\n    return <Route {...props} render={(p) => {\r\n        const login = document.cookie.includes('login=true')\r\n        if (login){ \r\n            return <Component />\r\n        } else { \r\n            alert(\"Please log in, then you can access this web!\")\r\n            return <Redirect to={{\r\n                pathname: '/',\r\n                state: {\r\n                    from: p.location.pathname\r\n                }\r\n            }}/>\r\n        }\r\n    }}/>\r\n}\r\nexport default PrivateRoute","import React, { Component } from \"react\";\r\nimport { Form, Header } from \"semantic-ui-react\";\r\nimport \"./auth.css\";\r\n// import logo from \"../../data/logo.png\";\r\n\r\n  export default function Layout(props){\r\n    return (\r\n        <div className=\"auth-main\">\r\n          <div className=\"auth-content\">\r\n            <div className=\"auth-card\">\r\n            <img size='mini' src='https://dph.georgia.gov/themes/custom/ga_forest/orchard/assets/images/icons/logo/ga-logo--gold.svg' alt=\"Logo\" className=\"auth-logo\"/>\r\n              <Header as=\"h2\" color=\"black\" textAlign=\"center\">\r\n                {props.header}\r\n              </Header>\r\n              <Form.Group size=\"large\" className=\"auth-form\" autoComplete=\"off\">\r\n                {props.children}\r\n              </Form.Group>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n\r\n  }","\r\nimport React, { useState, useEffect, Component } from 'react';\r\n// import { Button, FormGroup, FormControl, FormLabel  } from \"react-bootstrap\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport \"./Login.css\";\r\nimport { Button, Form, Message } from \"semantic-ui-react\";\r\nimport Layout from \"./Layout\";\r\nimport fetchProfileData from \"./TokenGet\"\r\nimport { sha256 } from 'js-sha256';\r\n\r\n\r\nexport default function Login(props) {\r\n    const [isLogin, setIsLogin]= useState(document.cookie.includes('login=true'))\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const history = useHistory();\r\n    const [user, setUser] = useState(null);\r\n    const [tok, setTok] = useState(null);\r\n    const promise = fetchProfileData();\r\n\r\n\r\n    // console.log(document.cookie.includes('login=true'))\r\n\r\n    useEffect(() => {\r\n        fetch('/data/token.json')\r\n            .then(res => res.json())\r\n            .then(x => setTok(x));\r\n\r\n        promise.then(data => {\r\n            setUser(data);\r\n        });\r\n    }, []);\r\n\r\n    function arrayEquals(a, b) {\r\n        return Array.isArray(a) &&\r\n          Array.isArray(b) &&\r\n          a.length === b.length &&\r\n          a.every((val, index) => val === b[index]);\r\n      }\r\n\r\n    function validateForm() {\r\n        // return email.length > 0 && password.length > 0;\r\n        return password.length > 0;\r\n\r\n    }\r\n    const setCookie = (key, value, day) => {\r\n        let expires = 13600 * 1000\r\n        let date = new Date( + new Date() + expires)\r\n        document.cookie = `${key}=${value};expires=${date.toUTCString()}`\r\n    }\r\n\r\n    function handleSubmit(event) {\r\n        let login = !isLogin\r\n        event.preventDefault();\r\n        setIsLogin(login)\r\n        \r\n        // console.log(password.toLowerCase()])\r\n        // console.log(sha256(password))\r\n            if (sha256(password).localeCompare(tok.tokens)===0) {\r\n                // console.log(tok.tokens[password])\r\n                setCookie('login', true, 1)\r\n                history.push('/13')\r\n            }\r\n            else{\r\n                alert(\"Token is not right, please contact jzha524@emory.edu for web access\")\r\n                setCookie('login', '', -1)\r\n                history.push('/')\r\n            }\r\n        }\r\n\r\n\r\n        // if(password.toLowerCase() in tok.tokens){\r\n        //     // console.log(tok.tokens[password.toLowerCase()])\r\n        //     if (tok.tokens[password.toLowerCase()].localeCompare(email)===0) {\r\n        //         // console.log(tok.tokens[password])\r\n        //         setCookie('login', true, 1)\r\n        //         history.push('/13')\r\n        //     }\r\n        //     else{\r\n        //         alert(\"Name and email are not match\")\r\n        //         setCookie('login', '', -1)\r\n        //         history.push('/')\r\n        //     }\r\n        // }\r\n        // else{\r\n        //     alert(\"No such user, please contact the admin\")\r\n        //         setCookie('login', '', -1)\r\n        //         history.push('/')\r\n        // }\r\n    // }\r\n        \r\n\r\n    if (user === null) {\r\n        return <p>Loading profile...</p>;\r\n    }\r\n    else {\r\n\r\n        return (\r\n\r\n            <Layout header=\"Dashboard Log in\">\r\n                <Form.Input\r\n                    fluid\r\n                    icon=\"edit\"\r\n                    iconPosition=\"left\"\r\n                    type=\"password\"\r\n                    placeholder=\"Password\"\r\n                    className=\"auth-input-field\"\r\n                    onChange={e => setPassword(e.target.value)}\r\n                />\r\n                {/* <Form.Input\r\n                    fluid\r\n                    icon=\"envelope\"\r\n                    iconPosition=\"left\"\r\n                    placeholder=\"E-mail address\"\r\n                    className=\"auth-input-field\"\r\n                    onChange={e => setEmail(e.target.value)}\r\n                /> */}\r\n                <Button color=\"teal\" fluid size=\"huge\" onClick={handleSubmit} disabled={!validateForm()}>\r\n                    Login\r\n        </Button>\r\n        <p>Contact jzha524@emory.edu for web access</p>\r\n            </Layout>\r\n            \r\n        )\r\n    }\r\n}","// React\r\nimport React, { Suspense, useState, useEffect } from 'react'\r\n// Components & Hooks\r\n\r\nimport 'semantic-ui-css/semantic.min.css'\r\n\r\nexport default function fetchProfileData() {\r\n    return Promise.all([\r\n      fetchUser(),\r\n    ]).then((user) => {\r\n      return  user ;\r\n    });\r\n  }\r\n  \r\n  function fetchUser() {\r\n    // console.log(\"fetch user...\");\r\n    return new Promise(resolve => {\r\n      setTimeout(() => {\r\n        // console.log(\"fetched user\");\r\n        resolve(fetch('/data/token.json')\r\n        .then(res => {\r\n            res.json()}));\r\n      }, 1000);\r\n    });\r\n  }","// React\r\nimport React from 'react'\r\n// Components & Hooks\r\nimport StateMap from \"./StateMap\";\r\nimport CountyReport from \"./CountyReport\";\r\n// import AboutUs from \"./AboutUs\";\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\n\r\nimport PrivateRoute from \"./privateRoute\"\r\n\r\nimport Login from './login';\r\n\r\n\r\n\r\nApp.propTypes = {};\r\nexport default function App() {\r\n\r\n\r\n\r\n      return (\r\n\r\n        <Router>\r\n          <Switch>\r\n          <PrivateRoute path='/:stateFips/:countyFips' component = {CountyReport}/>\r\n          <PrivateRoute path='/:stateFips' component = {StateMap}/>\r\n          <Route exact path='/'>\r\n              <Login />\r\n            </Route>\r\n    \r\n          </Switch>\r\n        </Router>\r\n      );\r\n\r\n}\r\n\r\n","import 'react-app-polyfill/ie9';\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}